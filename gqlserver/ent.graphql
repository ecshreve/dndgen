directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type AbilityBonus implements Node {
  id: ID!
  bonus: Int!
  abilityScore: [AbilityScore!]
  race: [Race!]
}
"""Ordering options for AbilityBonus connections"""
input AbilityBonusOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AbilityBonusSlice."""
  field: AbilityBonusOrderField!
}
"""Properties by which AbilityBonus connections can be ordered."""
enum AbilityBonusOrderField {
  BONUS
}
"""
AbilityBonusWhereInput is used for filtering AbilityBonus objects.
Input was generated by ent.
"""
input AbilityBonusWhereInput {
  not: AbilityBonusWhereInput
  and: [AbilityBonusWhereInput!]
  or: [AbilityBonusWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """bonus field predicates"""
  bonus: Int
  bonusNEQ: Int
  bonusIn: [Int!]
  bonusNotIn: [Int!]
  bonusGT: Int
  bonusGTE: Int
  bonusLT: Int
  bonusLTE: Int
  """ability_score edge predicates"""
  hasAbilityScore: Boolean
  hasAbilityScoreWith: [AbilityScoreWhereInput!]
  """race edge predicates"""
  hasRace: Boolean
  hasRaceWith: [RaceWhereInput!]
}
type AbilityScore implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  fullName: String!
  abilityBonuses: [AbilityBonus!]
  skills: [Skill!]
  proficiencies: [Proficiency!]
}
"""
AbilityScoreWhereInput is used for filtering AbilityScore objects.
Input was generated by ent.
"""
input AbilityScoreWhereInput {
  not: AbilityScoreWhereInput
  and: [AbilityScoreWhereInput!]
  or: [AbilityScoreWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """full_name field predicates"""
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """ability_bonuses edge predicates"""
  hasAbilityBonuses: Boolean
  hasAbilityBonusesWith: [AbilityBonusWhereInput!]
  """skills edge predicates"""
  hasSkills: Boolean
  hasSkillsWith: [SkillWhereInput!]
  """proficiencies edge predicates"""
  hasProficiencies: Boolean
  hasProficienciesWith: [ProficiencyWhereInput!]
}
type Alignment implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  abbr: String!
}
"""
AlignmentWhereInput is used for filtering Alignment objects.
Input was generated by ent.
"""
input AlignmentWhereInput {
  not: AlignmentWhereInput
  and: [AlignmentWhereInput!]
  or: [AlignmentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """abbr field predicates"""
  abbr: String
  abbrNEQ: String
  abbrIn: [String!]
  abbrNotIn: [String!]
  abbrGT: String
  abbrGTE: String
  abbrLT: String
  abbrLTE: String
  abbrContains: String
  abbrHasPrefix: String
  abbrHasSuffix: String
  abbrEqualFold: String
  abbrContainsFold: String
}
type Ammunition implements Node {
  id: ID!
  quantity: Int!
  equipment: [Equipment!]
}
"""
AmmunitionWhereInput is used for filtering Ammunition objects.
Input was generated by ent.
"""
input AmmunitionWhereInput {
  not: AmmunitionWhereInput
  and: [AmmunitionWhereInput!]
  or: [AmmunitionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """quantity field predicates"""
  quantity: Int
  quantityNEQ: Int
  quantityIn: [Int!]
  quantityNotIn: [Int!]
  quantityGT: Int
  quantityGTE: Int
  quantityLT: Int
  quantityLTE: Int
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Armor implements Node {
  id: ID!
  stealthDisadvantage: Boolean!
  armorClass: String!
  minStrength: Int!
  equipment: [Equipment!]
}
"""
ArmorWhereInput is used for filtering Armor objects.
Input was generated by ent.
"""
input ArmorWhereInput {
  not: ArmorWhereInput
  and: [ArmorWhereInput!]
  or: [ArmorWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """stealth_disadvantage field predicates"""
  stealthDisadvantage: Boolean
  stealthDisadvantageNEQ: Boolean
  """armor_class field predicates"""
  armorClass: String
  armorClassNEQ: String
  armorClassIn: [String!]
  armorClassNotIn: [String!]
  armorClassGT: String
  armorClassGTE: String
  armorClassLT: String
  armorClassLTE: String
  armorClassContains: String
  armorClassHasPrefix: String
  armorClassHasSuffix: String
  armorClassEqualFold: String
  armorClassContainsFold: String
  """min_strength field predicates"""
  minStrength: Int
  minStrengthNEQ: Int
  minStrengthIn: [Int!]
  minStrengthNotIn: [Int!]
  minStrengthGT: Int
  minStrengthGTE: Int
  minStrengthLT: Int
  minStrengthLTE: Int
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Class implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  hitDie: Int!
  savingThrows: [AbilityScore!]
  startingProficiencies: [Proficiency!]
  startingEquipment: [Equipment!]
}
"""
ClassWhereInput is used for filtering Class objects.
Input was generated by ent.
"""
input ClassWhereInput {
  not: ClassWhereInput
  and: [ClassWhereInput!]
  or: [ClassWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """hit_die field predicates"""
  hitDie: Int
  hitDieNEQ: Int
  hitDieIn: [Int!]
  hitDieNotIn: [Int!]
  hitDieGT: Int
  hitDieGTE: Int
  hitDieLT: Int
  hitDieLTE: Int
  """saving_throws edge predicates"""
  hasSavingThrows: Boolean
  hasSavingThrowsWith: [AbilityScoreWhereInput!]
  """starting_proficiencies edge predicates"""
  hasStartingProficiencies: Boolean
  hasStartingProficienciesWith: [ProficiencyWhereInput!]
  """starting_equipment edge predicates"""
  hasStartingEquipment: Boolean
  hasStartingEquipmentWith: [EquipmentWhereInput!]
}
type Condition implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
}
"""
ConditionWhereInput is used for filtering Condition objects.
Input was generated by ent.
"""
input ConditionWhereInput {
  not: ConditionWhereInput
  and: [ConditionWhereInput!]
  or: [ConditionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type DamageType implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  weaponDamage: WeaponDamage
}
"""
DamageTypeWhereInput is used for filtering DamageType objects.
Input was generated by ent.
"""
input DamageTypeWhereInput {
  not: DamageTypeWhereInput
  and: [DamageTypeWhereInput!]
  or: [DamageTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """weapon_damage edge predicates"""
  hasWeaponDamage: Boolean
  hasWeaponDamageWith: [WeaponDamageWhereInput!]
}
type Equipment implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  cost: String!
  weight: String!
  weapon: [Weapon!]
  armor: [Armor!]
  gear: [Gear!]
  pack: [Pack!]
  ammunition: [Ammunition!]
  vehicle: [Vehicle!]
  magicItem: [MagicItem!]
  category: [EquipmentCategory!]
  subcategory: [EquipmentCategory!]
  proficiencies: [Proficiency!]
}
type EquipmentCategory implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  equipment: [Equipment!]
}
"""
EquipmentCategoryWhereInput is used for filtering EquipmentCategory objects.
Input was generated by ent.
"""
input EquipmentCategoryWhereInput {
  not: EquipmentCategoryWhereInput
  and: [EquipmentCategoryWhereInput!]
  or: [EquipmentCategoryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
"""
EquipmentWhereInput is used for filtering Equipment objects.
Input was generated by ent.
"""
input EquipmentWhereInput {
  not: EquipmentWhereInput
  and: [EquipmentWhereInput!]
  or: [EquipmentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """cost field predicates"""
  cost: String
  costNEQ: String
  costIn: [String!]
  costNotIn: [String!]
  costGT: String
  costGTE: String
  costLT: String
  costLTE: String
  costContains: String
  costHasPrefix: String
  costHasSuffix: String
  costEqualFold: String
  costContainsFold: String
  """weight field predicates"""
  weight: String
  weightNEQ: String
  weightIn: [String!]
  weightNotIn: [String!]
  weightGT: String
  weightGTE: String
  weightLT: String
  weightLTE: String
  weightContains: String
  weightHasPrefix: String
  weightHasSuffix: String
  weightEqualFold: String
  weightContainsFold: String
  """weapon edge predicates"""
  hasWeapon: Boolean
  hasWeaponWith: [WeaponWhereInput!]
  """armor edge predicates"""
  hasArmor: Boolean
  hasArmorWith: [ArmorWhereInput!]
  """gear edge predicates"""
  hasGear: Boolean
  hasGearWith: [GearWhereInput!]
  """pack edge predicates"""
  hasPack: Boolean
  hasPackWith: [PackWhereInput!]
  """ammunition edge predicates"""
  hasAmmunition: Boolean
  hasAmmunitionWith: [AmmunitionWhereInput!]
  """vehicle edge predicates"""
  hasVehicle: Boolean
  hasVehicleWith: [VehicleWhereInput!]
  """magic_item edge predicates"""
  hasMagicItem: Boolean
  hasMagicItemWith: [MagicItemWhereInput!]
  """category edge predicates"""
  hasCategory: Boolean
  hasCategoryWith: [EquipmentCategoryWhereInput!]
  """subcategory edge predicates"""
  hasSubcategory: Boolean
  hasSubcategoryWith: [EquipmentCategoryWhereInput!]
  """proficiencies edge predicates"""
  hasProficiencies: Boolean
  hasProficienciesWith: [ProficiencyWhereInput!]
}
type Gear implements Node {
  id: ID!
  equipment: [Equipment!]
}
"""
GearWhereInput is used for filtering Gear objects.
Input was generated by ent.
"""
input GearWhereInput {
  not: GearWhereInput
  and: [GearWhereInput!]
  or: [GearWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Language implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  category: LanguageCategory!
  script: LanguageScript
  speakers: [Race!]
}
"""LanguageCategory is enum for the field category"""
enum LanguageCategory @goModel(model: "github.com/ecshreve/dndgen/ent/language.Category") {
  standard
  exotic
}
"""LanguageScript is enum for the field script"""
enum LanguageScript @goModel(model: "github.com/ecshreve/dndgen/ent/language.Script") {
  elvish
  celestial
  infernal
  dwarvish
  draconic
  common
}
"""
LanguageWhereInput is used for filtering Language objects.
Input was generated by ent.
"""
input LanguageWhereInput {
  not: LanguageWhereInput
  and: [LanguageWhereInput!]
  or: [LanguageWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """category field predicates"""
  category: LanguageCategory
  categoryNEQ: LanguageCategory
  categoryIn: [LanguageCategory!]
  categoryNotIn: [LanguageCategory!]
  """script field predicates"""
  script: LanguageScript
  scriptNEQ: LanguageScript
  scriptIn: [LanguageScript!]
  scriptNotIn: [LanguageScript!]
  scriptIsNil: Boolean
  scriptNotNil: Boolean
  """speakers edge predicates"""
  hasSpeakers: Boolean
  hasSpeakersWith: [RaceWhereInput!]
}
type MagicItem implements Node {
  id: ID!
  rarity: String!
  equipment: [Equipment!]
}
"""
MagicItemWhereInput is used for filtering MagicItem objects.
Input was generated by ent.
"""
input MagicItemWhereInput {
  not: MagicItemWhereInput
  and: [MagicItemWhereInput!]
  or: [MagicItemWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """rarity field predicates"""
  rarity: String
  rarityNEQ: String
  rarityIn: [String!]
  rarityNotIn: [String!]
  rarityGT: String
  rarityGTE: String
  rarityLT: String
  rarityLTE: String
  rarityContains: String
  rarityHasPrefix: String
  rarityHasSuffix: String
  rarityEqualFold: String
  rarityContainsFold: String
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type MagicSchool implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
}
"""
MagicSchoolWhereInput is used for filtering MagicSchool objects.
Input was generated by ent.
"""
input MagicSchoolWhereInput {
  not: MagicSchoolWhereInput
  and: [MagicSchoolWhereInput!]
  or: [MagicSchoolWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/ecshreve/dndgen/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
type Pack implements Node {
  id: ID!
  contents: String!
  equipment: [Equipment!]
}
"""
PackWhereInput is used for filtering Pack objects.
Input was generated by ent.
"""
input PackWhereInput {
  not: PackWhereInput
  and: [PackWhereInput!]
  or: [PackWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """contents field predicates"""
  contents: String
  contentsNEQ: String
  contentsIn: [String!]
  contentsNotIn: [String!]
  contentsGT: String
  contentsGTE: String
  contentsLT: String
  contentsLTE: String
  contentsContains: String
  contentsHasPrefix: String
  contentsHasSuffix: String
  contentsEqualFold: String
  contentsContainsFold: String
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Prerequisite implements Node {
  id: ID!
  minimum: Int!
  abilityScore: [AbilityScore!]
}
"""
PrerequisiteWhereInput is used for filtering Prerequisite objects.
Input was generated by ent.
"""
input PrerequisiteWhereInput {
  not: PrerequisiteWhereInput
  and: [PrerequisiteWhereInput!]
  or: [PrerequisiteWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """minimum field predicates"""
  minimum: Int
  minimumNEQ: Int
  minimumIn: [Int!]
  minimumNotIn: [Int!]
  minimumGT: Int
  minimumGTE: Int
  minimumLT: Int
  minimumLTE: Int
  """ability_score edge predicates"""
  hasAbilityScore: Boolean
  hasAbilityScoreWith: [AbilityScoreWhereInput!]
}
type Proficiency implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  tier: String!
  races: [Race!]
  classes: [Class!]
  skill: [Skill!]
  abilityScore: [AbilityScore!]
  equipment: [Equipment!]
}
"""
ProficiencyWhereInput is used for filtering Proficiency objects.
Input was generated by ent.
"""
input ProficiencyWhereInput {
  not: ProficiencyWhereInput
  and: [ProficiencyWhereInput!]
  or: [ProficiencyWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """tier field predicates"""
  tier: String
  tierNEQ: String
  tierIn: [String!]
  tierNotIn: [String!]
  tierGT: String
  tierGTE: String
  tierLT: String
  tierLTE: String
  tierContains: String
  tierHasPrefix: String
  tierHasSuffix: String
  tierEqualFold: String
  tierContainsFold: String
  """races edge predicates"""
  hasRaces: Boolean
  hasRacesWith: [RaceWhereInput!]
  """classes edge predicates"""
  hasClasses: Boolean
  hasClassesWith: [ClassWhereInput!]
  """skill edge predicates"""
  hasSkill: Boolean
  hasSkillWith: [SkillWhereInput!]
  """ability_score edge predicates"""
  hasAbilityScore: Boolean
  hasAbilityScoreWith: [AbilityScoreWhereInput!]
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  abilityScores: [AbilityScore!]!
  skills: [Skill!]!
}
type Race implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  speed: Int!
  languages: [Language!]
  abilityBonuses: [AbilityBonus!]
  startingProficiencies: [Proficiency!]
}
"""
RaceWhereInput is used for filtering Race objects.
Input was generated by ent.
"""
input RaceWhereInput {
  not: RaceWhereInput
  and: [RaceWhereInput!]
  or: [RaceWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """speed field predicates"""
  speed: Int
  speedNEQ: Int
  speedIn: [Int!]
  speedNotIn: [Int!]
  speedGT: Int
  speedGTE: Int
  speedLT: Int
  speedLTE: Int
  """languages edge predicates"""
  hasLanguages: Boolean
  hasLanguagesWith: [LanguageWhereInput!]
  """ability_bonuses edge predicates"""
  hasAbilityBonuses: Boolean
  hasAbilityBonusesWith: [AbilityBonusWhereInput!]
  """starting_proficiencies edge predicates"""
  hasStartingProficiencies: Boolean
  hasStartingProficienciesWith: [ProficiencyWhereInput!]
}
type Skill implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  abilityScore: AbilityScore
  proficiencies: [Proficiency!]
}
"""
SkillWhereInput is used for filtering Skill objects.
Input was generated by ent.
"""
input SkillWhereInput {
  not: SkillWhereInput
  and: [SkillWhereInput!]
  or: [SkillWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """ability_score edge predicates"""
  hasAbilityScore: Boolean
  hasAbilityScoreWith: [AbilityScoreWhereInput!]
  """proficiencies edge predicates"""
  hasProficiencies: Boolean
  hasProficienciesWith: [ProficiencyWhereInput!]
}
type Vehicle implements Node {
  id: ID!
  speed: String!
  capacity: String!
  equipment: [Equipment!]
}
"""
VehicleWhereInput is used for filtering Vehicle objects.
Input was generated by ent.
"""
input VehicleWhereInput {
  not: VehicleWhereInput
  and: [VehicleWhereInput!]
  or: [VehicleWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """speed field predicates"""
  speed: String
  speedNEQ: String
  speedIn: [String!]
  speedNotIn: [String!]
  speedGT: String
  speedGTE: String
  speedLT: String
  speedLTE: String
  speedContains: String
  speedHasPrefix: String
  speedHasSuffix: String
  speedEqualFold: String
  speedContainsFold: String
  """capacity field predicates"""
  capacity: String
  capacityNEQ: String
  capacityIn: [String!]
  capacityNotIn: [String!]
  capacityGT: String
  capacityGTE: String
  capacityLT: String
  capacityLTE: String
  capacityContains: String
  capacityHasPrefix: String
  capacityHasSuffix: String
  capacityEqualFold: String
  capacityContainsFold: String
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Weapon implements Node {
  id: ID!
  properties: String!
  range: [WeaponRange!]
  damage: [WeaponDamage!]
  twoHandedDamage: [WeaponDamage!]
  equipment: [Equipment!]
}
type WeaponDamage implements Node {
  id: ID!
  dice: String!
  damageType: [DamageType!]
  weapon: [Weapon!]
}
"""
WeaponDamageWhereInput is used for filtering WeaponDamage objects.
Input was generated by ent.
"""
input WeaponDamageWhereInput {
  not: WeaponDamageWhereInput
  and: [WeaponDamageWhereInput!]
  or: [WeaponDamageWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """dice field predicates"""
  dice: String
  diceNEQ: String
  diceIn: [String!]
  diceNotIn: [String!]
  diceGT: String
  diceGTE: String
  diceLT: String
  diceLTE: String
  diceContains: String
  diceHasPrefix: String
  diceHasSuffix: String
  diceEqualFold: String
  diceContainsFold: String
  """damage_type edge predicates"""
  hasDamageType: Boolean
  hasDamageTypeWith: [DamageTypeWhereInput!]
  """weapon edge predicates"""
  hasWeapon: Boolean
  hasWeaponWith: [WeaponWhereInput!]
}
type WeaponRange implements Node {
  id: ID!
  desc: String!
  normal: Int!
  long: Int!
  weapon: [Weapon!]
}
"""
WeaponRangeWhereInput is used for filtering WeaponRange objects.
Input was generated by ent.
"""
input WeaponRangeWhereInput {
  not: WeaponRangeWhereInput
  and: [WeaponRangeWhereInput!]
  or: [WeaponRangeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """desc field predicates"""
  desc: String
  descNEQ: String
  descIn: [String!]
  descNotIn: [String!]
  descGT: String
  descGTE: String
  descLT: String
  descLTE: String
  descContains: String
  descHasPrefix: String
  descHasSuffix: String
  descEqualFold: String
  descContainsFold: String
  """normal field predicates"""
  normal: Int
  normalNEQ: Int
  normalIn: [Int!]
  normalNotIn: [Int!]
  normalGT: Int
  normalGTE: Int
  normalLT: Int
  normalLTE: Int
  """long field predicates"""
  long: Int
  longNEQ: Int
  longIn: [Int!]
  longNotIn: [Int!]
  longGT: Int
  longGTE: Int
  longLT: Int
  longLTE: Int
  """weapon edge predicates"""
  hasWeapon: Boolean
  hasWeaponWith: [WeaponWhereInput!]
}
"""
WeaponWhereInput is used for filtering Weapon objects.
Input was generated by ent.
"""
input WeaponWhereInput {
  not: WeaponWhereInput
  and: [WeaponWhereInput!]
  or: [WeaponWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """properties field predicates"""
  properties: String
  propertiesNEQ: String
  propertiesIn: [String!]
  propertiesNotIn: [String!]
  propertiesGT: String
  propertiesGTE: String
  propertiesLT: String
  propertiesLTE: String
  propertiesContains: String
  propertiesHasPrefix: String
  propertiesHasSuffix: String
  propertiesEqualFold: String
  propertiesContainsFold: String
  """range edge predicates"""
  hasRange: Boolean
  hasRangeWith: [WeaponRangeWhereInput!]
  """damage edge predicates"""
  hasDamage: Boolean
  hasDamageWith: [WeaponDamageWhereInput!]
  """two_handed_damage edge predicates"""
  hasTwoHandedDamage: Boolean
  hasTwoHandedDamageWith: [WeaponDamageWhereInput!]
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
