directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type AbilityScore implements Node {
  id: ID!
  indx: String!
  name: String!
  fullName: String!
  desc: [String!]!
  skills: [Skill!]
}
"""
AbilityScoreWhereInput is used for filtering AbilityScore objects.
Input was generated by ent.
"""
input AbilityScoreWhereInput {
  not: AbilityScoreWhereInput
  and: [AbilityScoreWhereInput!]
  or: [AbilityScoreWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """full_name field predicates"""
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """skills edge predicates"""
  hasSkills: Boolean
  hasSkillsWith: [SkillWhereInput!]
}
type Armor implements Node {
  id: ID!
  indx: String!
  name: String!
  weight: Float!
  stealthDisadvantage: Boolean!
  armorClass: String!
  minStrength: Int!
}
"""
ArmorWhereInput is used for filtering Armor objects.
Input was generated by ent.
"""
input ArmorWhereInput {
  not: ArmorWhereInput
  and: [ArmorWhereInput!]
  or: [ArmorWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """weight field predicates"""
  weight: Float
  weightNEQ: Float
  weightIn: [Float!]
  weightNotIn: [Float!]
  weightGT: Float
  weightGTE: Float
  weightLT: Float
  weightLTE: Float
  """stealth_disadvantage field predicates"""
  stealthDisadvantage: Boolean
  stealthDisadvantageNEQ: Boolean
  """armor_class field predicates"""
  armorClass: String
  armorClassNEQ: String
  armorClassIn: [String!]
  armorClassNotIn: [String!]
  armorClassGT: String
  armorClassGTE: String
  armorClassLT: String
  armorClassLTE: String
  armorClassContains: String
  armorClassHasPrefix: String
  armorClassHasSuffix: String
  armorClassEqualFold: String
  armorClassContainsFold: String
  """min_strength field predicates"""
  minStrength: Int
  minStrengthNEQ: Int
  minStrengthIn: [Int!]
  minStrengthNotIn: [Int!]
  minStrengthGT: Int
  minStrengthGTE: Int
  minStrengthLT: Int
  minStrengthLTE: Int
}
type Class implements Node {
  id: ID!
  indx: String!
  name: String!
  hitDie: Int!
  savingThrows: [AbilityScore!]
}
"""
ClassWhereInput is used for filtering Class objects.
Input was generated by ent.
"""
input ClassWhereInput {
  not: ClassWhereInput
  and: [ClassWhereInput!]
  or: [ClassWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """hit_die field predicates"""
  hitDie: Int
  hitDieNEQ: Int
  hitDieIn: [Int!]
  hitDieNotIn: [Int!]
  hitDieGT: Int
  hitDieGTE: Int
  hitDieLT: Int
  hitDieLTE: Int
  """saving_throws edge predicates"""
  hasSavingThrows: Boolean
  hasSavingThrowsWith: [AbilityScoreWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type DamageType implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]!
}
"""
DamageTypeWhereInput is used for filtering DamageType objects.
Input was generated by ent.
"""
input DamageTypeWhereInput {
  not: DamageTypeWhereInput
  and: [DamageTypeWhereInput!]
  or: [DamageTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/ecshreve/dndgen/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  abilityScores: [AbilityScore!]!
  classes: [Class!]!
  races: [Race!]!
  skills: [Skill!]!
}
type Race implements Node {
  id: ID!
  indx: String!
  name: String!
  speed: Int!
}
"""
RaceWhereInput is used for filtering Race objects.
Input was generated by ent.
"""
input RaceWhereInput {
  not: RaceWhereInput
  and: [RaceWhereInput!]
  or: [RaceWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """speed field predicates"""
  speed: Int
  speedNEQ: Int
  speedIn: [Int!]
  speedNotIn: [Int!]
  speedGT: Int
  speedGTE: Int
  speedLT: Int
  speedLTE: Int
}
type Skill implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]!
  abilityScore: AbilityScore
}
"""
SkillWhereInput is used for filtering Skill objects.
Input was generated by ent.
"""
input SkillWhereInput {
  not: SkillWhereInput
  and: [SkillWhereInput!]
  or: [SkillWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """ability_score edge predicates"""
  hasAbilityScore: Boolean
  hasAbilityScoreWith: [AbilityScoreWhereInput!]
}
type UnitValue implements Node {
  id: ID!
  val: Int!
  unit: String!
}
"""
UnitValueWhereInput is used for filtering UnitValue objects.
Input was generated by ent.
"""
input UnitValueWhereInput {
  not: UnitValueWhereInput
  and: [UnitValueWhereInput!]
  or: [UnitValueWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """val field predicates"""
  val: Int
  valNEQ: Int
  valIn: [Int!]
  valNotIn: [Int!]
  valGT: Int
  valGTE: Int
  valLT: Int
  valLTE: Int
  """unit field predicates"""
  unit: String
  unitNEQ: String
  unitIn: [String!]
  unitNotIn: [String!]
  unitGT: String
  unitGTE: String
  unitLT: String
  unitLTE: String
  unitContains: String
  unitHasPrefix: String
  unitHasSuffix: String
  unitEqualFold: String
  unitContainsFold: String
}
type Weapon implements Node {
  id: ID!
  indx: String!
  name: String!
  weight: Float!
  meleeRange: WeaponRange
  throwRange: WeaponRange
}
type WeaponDamage implements Node {
  id: ID!
  dice: String!
  damageType: [DamageType!]
}
"""
WeaponDamageWhereInput is used for filtering WeaponDamage objects.
Input was generated by ent.
"""
input WeaponDamageWhereInput {
  not: WeaponDamageWhereInput
  and: [WeaponDamageWhereInput!]
  or: [WeaponDamageWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """dice field predicates"""
  dice: String
  diceNEQ: String
  diceIn: [String!]
  diceNotIn: [String!]
  diceGT: String
  diceGTE: String
  diceLT: String
  diceLTE: String
  diceContains: String
  diceHasPrefix: String
  diceHasSuffix: String
  diceEqualFold: String
  diceContainsFold: String
  """damage_type edge predicates"""
  hasDamageType: Boolean
  hasDamageTypeWith: [DamageTypeWhereInput!]
}
type WeaponRange implements Node {
  id: ID!
  normal: Int!
  long: Int!
}
"""
WeaponRangeWhereInput is used for filtering WeaponRange objects.
Input was generated by ent.
"""
input WeaponRangeWhereInput {
  not: WeaponRangeWhereInput
  and: [WeaponRangeWhereInput!]
  or: [WeaponRangeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """normal field predicates"""
  normal: Int
  normalNEQ: Int
  normalIn: [Int!]
  normalNotIn: [Int!]
  normalGT: Int
  normalGTE: Int
  normalLT: Int
  normalLTE: Int
  """long field predicates"""
  long: Int
  longNEQ: Int
  longIn: [Int!]
  longNotIn: [Int!]
  longGT: Int
  longGTE: Int
  longLT: Int
  longLTE: Int
}
"""
WeaponWhereInput is used for filtering Weapon objects.
Input was generated by ent.
"""
input WeaponWhereInput {
  not: WeaponWhereInput
  and: [WeaponWhereInput!]
  or: [WeaponWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """weight field predicates"""
  weight: Float
  weightNEQ: Float
  weightIn: [Float!]
  weightNotIn: [Float!]
  weightGT: Float
  weightGTE: Float
  weightLT: Float
  weightLTE: Float
  """melee_range edge predicates"""
  hasMeleeRange: Boolean
  hasMeleeRangeWith: [WeaponRangeWhereInput!]
  """throw_range edge predicates"""
  hasThrowRange: Boolean
  hasThrowRangeWith: [WeaponRangeWhereInput!]
}
