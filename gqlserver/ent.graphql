directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type AbilityScore implements Node {
  id: ID!
  indx: String!
  name: String!
  fullName: String!
  desc: [String!]!
  skills: [Skill!]
}
"""Ordering options for AbilityScore connections"""
input AbilityScoreOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AbilityScores."""
  field: AbilityScoreOrderField!
}
"""Properties by which AbilityScore connections can be ordered."""
enum AbilityScoreOrderField {
  INDX
  NAME
}
"""
AbilityScoreWhereInput is used for filtering AbilityScore objects.
Input was generated by ent.
"""
input AbilityScoreWhereInput {
  not: AbilityScoreWhereInput
  and: [AbilityScoreWhereInput!]
  or: [AbilityScoreWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """full_name field predicates"""
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """skills edge predicates"""
  hasSkills: Boolean
  hasSkillsWith: [SkillWhereInput!]
}
type Armor implements Node {
  id: ID!
  indx: String!
  name: String!
  stealthDisadvantage: Boolean!
  minStrength: Int!
  equipmentID: ID!
  equipment: Equipment!
  armorClass: [ArmorClass!]
}
type ArmorClass implements Node {
  id: ID!
  base: Int!
  dexBonus: Boolean!
  maxBonus: Int
}
"""
ArmorClassWhereInput is used for filtering ArmorClass objects.
Input was generated by ent.
"""
input ArmorClassWhereInput {
  not: ArmorClassWhereInput
  and: [ArmorClassWhereInput!]
  or: [ArmorClassWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """base field predicates"""
  base: Int
  baseNEQ: Int
  baseIn: [Int!]
  baseNotIn: [Int!]
  baseGT: Int
  baseGTE: Int
  baseLT: Int
  baseLTE: Int
  """dex_bonus field predicates"""
  dexBonus: Boolean
  dexBonusNEQ: Boolean
  """max_bonus field predicates"""
  maxBonus: Int
  maxBonusNEQ: Int
  maxBonusIn: [Int!]
  maxBonusNotIn: [Int!]
  maxBonusGT: Int
  maxBonusGTE: Int
  maxBonusLT: Int
  maxBonusLTE: Int
  maxBonusIsNil: Boolean
  maxBonusNotNil: Boolean
}
"""Ordering options for Armor connections"""
input ArmorOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Armors."""
  field: ArmorOrderField!
}
"""Properties by which Armor connections can be ordered."""
enum ArmorOrderField {
  INDX
  NAME
}
"""
ArmorWhereInput is used for filtering Armor objects.
Input was generated by ent.
"""
input ArmorWhereInput {
  not: ArmorWhereInput
  and: [ArmorWhereInput!]
  or: [ArmorWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """stealth_disadvantage field predicates"""
  stealthDisadvantage: Boolean
  stealthDisadvantageNEQ: Boolean
  """min_strength field predicates"""
  minStrength: Int
  minStrengthNEQ: Int
  minStrengthIn: [Int!]
  minStrengthNotIn: [Int!]
  minStrengthGT: Int
  minStrengthGTE: Int
  minStrengthLT: Int
  minStrengthLTE: Int
  """equipment_id field predicates"""
  equipmentID: ID
  equipmentIDNEQ: ID
  equipmentIDIn: [ID!]
  equipmentIDNotIn: [ID!]
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
  """armor_class edge predicates"""
  hasArmorClass: Boolean
  hasArmorClassWith: [ArmorClassWhereInput!]
}
type Class implements Node {
  id: ID!
  indx: String!
  name: String!
  hitDie: Int!
  proficiencies: [Proficiency!]
}
"""Ordering options for Class connections"""
input ClassOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Classes."""
  field: ClassOrderField!
}
"""Properties by which Class connections can be ordered."""
enum ClassOrderField {
  INDX
  NAME
}
"""
ClassWhereInput is used for filtering Class objects.
Input was generated by ent.
"""
input ClassWhereInput {
  not: ClassWhereInput
  and: [ClassWhereInput!]
  or: [ClassWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """hit_die field predicates"""
  hitDie: Int
  hitDieNEQ: Int
  hitDieIn: [Int!]
  hitDieNotIn: [Int!]
  hitDieGT: Int
  hitDieGTE: Int
  hitDieLT: Int
  hitDieLTE: Int
  """proficiencies edge predicates"""
  hasProficiencies: Boolean
  hasProficienciesWith: [ProficiencyWhereInput!]
}
type Cost implements Node {
  id: ID!
  quantity: Int!
  unit: String!
}
"""
CostWhereInput is used for filtering Cost objects.
Input was generated by ent.
"""
input CostWhereInput {
  not: CostWhereInput
  and: [CostWhereInput!]
  or: [CostWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """quantity field predicates"""
  quantity: Int
  quantityNEQ: Int
  quantityIn: [Int!]
  quantityNotIn: [Int!]
  quantityGT: Int
  quantityGTE: Int
  quantityLT: Int
  quantityLTE: Int
  """unit field predicates"""
  unit: String
  unitNEQ: String
  unitIn: [String!]
  unitNotIn: [String!]
  unitGT: String
  unitGTE: String
  unitLT: String
  unitLTE: String
  unitContains: String
  unitHasPrefix: String
  unitHasSuffix: String
  unitEqualFold: String
  unitContainsFold: String
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type DamageType implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]!
  weaponDamage: [WeaponDamage!]
}
"""Ordering options for DamageType connections"""
input DamageTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order DamageTypes."""
  field: DamageTypeOrderField!
}
"""Properties by which DamageType connections can be ordered."""
enum DamageTypeOrderField {
  INDX
  NAME
}
"""
DamageTypeWhereInput is used for filtering DamageType objects.
Input was generated by ent.
"""
input DamageTypeWhereInput {
  not: DamageTypeWhereInput
  and: [DamageTypeWhereInput!]
  or: [DamageTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """weapon_damage edge predicates"""
  hasWeaponDamage: Boolean
  hasWeaponDamageWith: [WeaponDamageWhereInput!]
}
type Equipment implements Node {
  id: ID!
  indx: String!
  name: String!
  equipmentCategory: EquipmentEquipmentCategory!
  cost: Cost
  weapon: Weapon
  armor: Armor
  gear: Gear
  tool: Tool
  vehicle: Vehicle
}
"""EquipmentEquipmentCategory is enum for the field equipment_category"""
enum EquipmentEquipmentCategory @goModel(model: "github.com/ecshreve/dndgen/ent/equipment.EquipmentCategory") {
  weapon
  armor
  adventuring_gear
  tools
  mounts_and_vehicles
  other
}
"""Ordering options for Equipment connections"""
input EquipmentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order EquipmentSlice."""
  field: EquipmentOrderField!
}
"""Properties by which Equipment connections can be ordered."""
enum EquipmentOrderField {
  INDX
  NAME
}
"""
EquipmentWhereInput is used for filtering Equipment objects.
Input was generated by ent.
"""
input EquipmentWhereInput {
  not: EquipmentWhereInput
  and: [EquipmentWhereInput!]
  or: [EquipmentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """equipment_category field predicates"""
  equipmentCategory: EquipmentEquipmentCategory
  equipmentCategoryNEQ: EquipmentEquipmentCategory
  equipmentCategoryIn: [EquipmentEquipmentCategory!]
  equipmentCategoryNotIn: [EquipmentEquipmentCategory!]
  """cost edge predicates"""
  hasCost: Boolean
  hasCostWith: [CostWhereInput!]
  """weapon edge predicates"""
  hasWeapon: Boolean
  hasWeaponWith: [WeaponWhereInput!]
  """armor edge predicates"""
  hasArmor: Boolean
  hasArmorWith: [ArmorWhereInput!]
  """gear edge predicates"""
  hasGear: Boolean
  hasGearWith: [GearWhereInput!]
  """tool edge predicates"""
  hasTool: Boolean
  hasToolWith: [ToolWhereInput!]
  """vehicle edge predicates"""
  hasVehicle: Boolean
  hasVehicleWith: [VehicleWhereInput!]
}
type Gear implements Node {
  id: ID!
  indx: String!
  name: String!
  gearCategory: GearGearCategory!
  desc: [String!]!
  quantity: Int
  equipmentID: ID!
  equipment: Equipment!
}
"""GearGearCategory is enum for the field gear_category"""
enum GearGearCategory @goModel(model: "github.com/ecshreve/dndgen/ent/gear.GearCategory") {
  ammunition
  standard_gear
  kits
  equipment_packs
  arcane_foci
  druidic_foci
  holy_symbols
  other
}
"""Ordering options for Gear connections"""
input GearOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Gears."""
  field: GearOrderField!
}
"""Properties by which Gear connections can be ordered."""
enum GearOrderField {
  INDX
  NAME
}
"""
GearWhereInput is used for filtering Gear objects.
Input was generated by ent.
"""
input GearWhereInput {
  not: GearWhereInput
  and: [GearWhereInput!]
  or: [GearWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """gear_category field predicates"""
  gearCategory: GearGearCategory
  gearCategoryNEQ: GearGearCategory
  gearCategoryIn: [GearGearCategory!]
  gearCategoryNotIn: [GearGearCategory!]
  """quantity field predicates"""
  quantity: Int
  quantityNEQ: Int
  quantityIn: [Int!]
  quantityNotIn: [Int!]
  quantityGT: Int
  quantityGTE: Int
  quantityLT: Int
  quantityLTE: Int
  quantityIsNil: Boolean
  quantityNotNil: Boolean
  """equipment_id field predicates"""
  equipmentID: ID
  equipmentIDNEQ: ID
  equipmentIDIn: [ID!]
  equipmentIDNotIn: [ID!]
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Language implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: String!
  languageType: LanguageLanguageType!
  script: LanguageScript
  speakers: [Race!]
}
"""LanguageLanguageType is enum for the field language_type"""
enum LanguageLanguageType @goModel(model: "github.com/ecshreve/dndgen/ent/language.LanguageType") {
  STANDARD
  EXOTIC
}
"""Ordering options for Language connections"""
input LanguageOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Languages."""
  field: LanguageOrderField!
}
"""Properties by which Language connections can be ordered."""
enum LanguageOrderField {
  INDX
  NAME
}
"""LanguageScript is enum for the field script"""
enum LanguageScript @goModel(model: "github.com/ecshreve/dndgen/ent/language.Script") {
  Common
  Dwarvish
  Elvish
  Infernal
  Draconic
  Celestial
  Abyssal
  Giant
  Gnomish
  Goblin
  Halfling
  Orc
  Other
}
"""
LanguageWhereInput is used for filtering Language objects.
Input was generated by ent.
"""
input LanguageWhereInput {
  not: LanguageWhereInput
  and: [LanguageWhereInput!]
  or: [LanguageWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """desc field predicates"""
  desc: String
  descNEQ: String
  descIn: [String!]
  descNotIn: [String!]
  descGT: String
  descGTE: String
  descLT: String
  descLTE: String
  descContains: String
  descHasPrefix: String
  descHasSuffix: String
  descEqualFold: String
  descContainsFold: String
  """language_type field predicates"""
  languageType: LanguageLanguageType
  languageTypeNEQ: LanguageLanguageType
  languageTypeIn: [LanguageLanguageType!]
  languageTypeNotIn: [LanguageLanguageType!]
  """script field predicates"""
  script: LanguageScript
  scriptNEQ: LanguageScript
  scriptIn: [LanguageScript!]
  scriptNotIn: [LanguageScript!]
  scriptIsNil: Boolean
  scriptNotNil: Boolean
  """speakers edge predicates"""
  hasSpeakers: Boolean
  hasSpeakersWith: [RaceWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/ecshreve/dndgen/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Proficiency implements Node {
  id: ID!
  indx: String!
  name: String!
  proficiencyCategory: String!
  classes: [Class!]
  races: [Race!]
  skill: Skill
  equipment: Equipment
  savingThrow: AbilityScore
}
"""Ordering options for Proficiency connections"""
input ProficiencyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Proficiencies."""
  field: ProficiencyOrderField!
}
"""Properties by which Proficiency connections can be ordered."""
enum ProficiencyOrderField {
  INDX
  NAME
}
"""
ProficiencyWhereInput is used for filtering Proficiency objects.
Input was generated by ent.
"""
input ProficiencyWhereInput {
  not: ProficiencyWhereInput
  and: [ProficiencyWhereInput!]
  or: [ProficiencyWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """proficiency_category field predicates"""
  proficiencyCategory: String
  proficiencyCategoryNEQ: String
  proficiencyCategoryIn: [String!]
  proficiencyCategoryNotIn: [String!]
  proficiencyCategoryGT: String
  proficiencyCategoryGTE: String
  proficiencyCategoryLT: String
  proficiencyCategoryLTE: String
  proficiencyCategoryContains: String
  proficiencyCategoryHasPrefix: String
  proficiencyCategoryHasSuffix: String
  proficiencyCategoryEqualFold: String
  proficiencyCategoryContainsFold: String
  """classes edge predicates"""
  hasClasses: Boolean
  hasClassesWith: [ClassWhereInput!]
  """races edge predicates"""
  hasRaces: Boolean
  hasRacesWith: [RaceWhereInput!]
  """skill edge predicates"""
  hasSkill: Boolean
  hasSkillWith: [SkillWhereInput!]
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
  """saving_throw edge predicates"""
  hasSavingThrow: Boolean
  hasSavingThrowWith: [AbilityScoreWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  abilityScores: [AbilityScore!]!
  armors: [Armor!]!
  classes: [Class!]!
  damageTypes: [DamageType!]!
  equipmentSlice: [Equipment!]!
  gears: [Gear!]!
  languages: [Language!]!
  proficiencies: [Proficiency!]!
  races: [Race!]!
  skills: [Skill!]!
  tools: [Tool!]!
  vehicles: [Vehicle!]!
  weapons: [Weapon!]!
  weaponDamages: [WeaponDamage!]!
  weaponProperties: [WeaponProperty!]!
}
type Race implements Node {
  id: ID!
  indx: String!
  name: String!
  speed: Int!
  languages: [Language!]
  proficiencies: [Proficiency!]
}
"""Ordering options for Race connections"""
input RaceOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Races."""
  field: RaceOrderField!
}
"""Properties by which Race connections can be ordered."""
enum RaceOrderField {
  INDX
  NAME
}
"""
RaceWhereInput is used for filtering Race objects.
Input was generated by ent.
"""
input RaceWhereInput {
  not: RaceWhereInput
  and: [RaceWhereInput!]
  or: [RaceWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """speed field predicates"""
  speed: Int
  speedNEQ: Int
  speedIn: [Int!]
  speedNotIn: [Int!]
  speedGT: Int
  speedGTE: Int
  speedLT: Int
  speedLTE: Int
  """languages edge predicates"""
  hasLanguages: Boolean
  hasLanguagesWith: [LanguageWhereInput!]
  """proficiencies edge predicates"""
  hasProficiencies: Boolean
  hasProficienciesWith: [ProficiencyWhereInput!]
}
type Skill implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]!
  abilityScore: AbilityScore
  proficiencies: [Proficiency!]
}
"""Ordering options for Skill connections"""
input SkillOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Skills."""
  field: SkillOrderField!
}
"""Properties by which Skill connections can be ordered."""
enum SkillOrderField {
  INDX
  NAME
}
"""
SkillWhereInput is used for filtering Skill objects.
Input was generated by ent.
"""
input SkillWhereInput {
  not: SkillWhereInput
  and: [SkillWhereInput!]
  or: [SkillWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """ability_score edge predicates"""
  hasAbilityScore: Boolean
  hasAbilityScoreWith: [AbilityScoreWhereInput!]
  """proficiencies edge predicates"""
  hasProficiencies: Boolean
  hasProficienciesWith: [ProficiencyWhereInput!]
}
type Tool implements Node {
  id: ID!
  indx: String!
  name: String!
  toolCategory: String!
  equipmentID: ID!
  equipment: Equipment!
}
"""Ordering options for Tool connections"""
input ToolOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tools."""
  field: ToolOrderField!
}
"""Properties by which Tool connections can be ordered."""
enum ToolOrderField {
  INDX
  NAME
}
"""
ToolWhereInput is used for filtering Tool objects.
Input was generated by ent.
"""
input ToolWhereInput {
  not: ToolWhereInput
  and: [ToolWhereInput!]
  or: [ToolWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """tool_category field predicates"""
  toolCategory: String
  toolCategoryNEQ: String
  toolCategoryIn: [String!]
  toolCategoryNotIn: [String!]
  toolCategoryGT: String
  toolCategoryGTE: String
  toolCategoryLT: String
  toolCategoryLTE: String
  toolCategoryContains: String
  toolCategoryHasPrefix: String
  toolCategoryHasSuffix: String
  toolCategoryEqualFold: String
  toolCategoryContainsFold: String
  """equipment_id field predicates"""
  equipmentID: ID
  equipmentIDNEQ: ID
  equipmentIDIn: [ID!]
  equipmentIDNotIn: [ID!]
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Vehicle implements Node {
  id: ID!
  indx: String!
  name: String!
  vehicleCategory: String!
  capacity: String!
  equipmentID: ID!
  equipment: Equipment!
}
"""Ordering options for Vehicle connections"""
input VehicleOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Vehicles."""
  field: VehicleOrderField!
}
"""Properties by which Vehicle connections can be ordered."""
enum VehicleOrderField {
  INDX
  NAME
}
"""
VehicleWhereInput is used for filtering Vehicle objects.
Input was generated by ent.
"""
input VehicleWhereInput {
  not: VehicleWhereInput
  and: [VehicleWhereInput!]
  or: [VehicleWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """vehicle_category field predicates"""
  vehicleCategory: String
  vehicleCategoryNEQ: String
  vehicleCategoryIn: [String!]
  vehicleCategoryNotIn: [String!]
  vehicleCategoryGT: String
  vehicleCategoryGTE: String
  vehicleCategoryLT: String
  vehicleCategoryLTE: String
  vehicleCategoryContains: String
  vehicleCategoryHasPrefix: String
  vehicleCategoryHasSuffix: String
  vehicleCategoryEqualFold: String
  vehicleCategoryContainsFold: String
  """capacity field predicates"""
  capacity: String
  capacityNEQ: String
  capacityIn: [String!]
  capacityNotIn: [String!]
  capacityGT: String
  capacityGTE: String
  capacityLT: String
  capacityLTE: String
  capacityContains: String
  capacityHasPrefix: String
  capacityHasSuffix: String
  capacityEqualFold: String
  capacityContainsFold: String
  """equipment_id field predicates"""
  equipmentID: ID
  equipmentIDNEQ: ID
  equipmentIDIn: [ID!]
  equipmentIDNotIn: [ID!]
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Weapon implements Node {
  id: ID!
  indx: String!
  name: String!
  weaponCategory: String!
  weaponRange: String!
  equipment: Equipment!
  weaponDamage: [WeaponDamage!]
  weaponProperties: [WeaponProperty!]
}
type WeaponDamage implements Node {
  id: ID!
  weaponID: ID!
  damageTypeID: ID!
  dice: String!
  weapon: Weapon!
  damageType: DamageType!
}
"""
WeaponDamageWhereInput is used for filtering WeaponDamage objects.
Input was generated by ent.
"""
input WeaponDamageWhereInput {
  not: WeaponDamageWhereInput
  and: [WeaponDamageWhereInput!]
  or: [WeaponDamageWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """weapon_id field predicates"""
  weaponID: ID
  weaponIDNEQ: ID
  weaponIDIn: [ID!]
  weaponIDNotIn: [ID!]
  """damage_type_id field predicates"""
  damageTypeID: ID
  damageTypeIDNEQ: ID
  damageTypeIDIn: [ID!]
  damageTypeIDNotIn: [ID!]
  """dice field predicates"""
  dice: String
  diceNEQ: String
  diceIn: [String!]
  diceNotIn: [String!]
  diceGT: String
  diceGTE: String
  diceLT: String
  diceLTE: String
  diceContains: String
  diceHasPrefix: String
  diceHasSuffix: String
  diceEqualFold: String
  diceContainsFold: String
  """weapon edge predicates"""
  hasWeapon: Boolean
  hasWeaponWith: [WeaponWhereInput!]
  """damage_type edge predicates"""
  hasDamageType: Boolean
  hasDamageTypeWith: [DamageTypeWhereInput!]
}
"""Ordering options for Weapon connections"""
input WeaponOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Weapons."""
  field: WeaponOrderField!
}
"""Properties by which Weapon connections can be ordered."""
enum WeaponOrderField {
  INDX
  NAME
}
type WeaponProperty implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]!
  weapons: [Weapon!]
}
"""Ordering options for WeaponProperty connections"""
input WeaponPropertyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order WeaponProperties."""
  field: WeaponPropertyOrderField!
}
"""Properties by which WeaponProperty connections can be ordered."""
enum WeaponPropertyOrderField {
  INDX
  NAME
}
"""
WeaponPropertyWhereInput is used for filtering WeaponProperty objects.
Input was generated by ent.
"""
input WeaponPropertyWhereInput {
  not: WeaponPropertyWhereInput
  and: [WeaponPropertyWhereInput!]
  or: [WeaponPropertyWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """weapons edge predicates"""
  hasWeapons: Boolean
  hasWeaponsWith: [WeaponWhereInput!]
}
"""
WeaponWhereInput is used for filtering Weapon objects.
Input was generated by ent.
"""
input WeaponWhereInput {
  not: WeaponWhereInput
  and: [WeaponWhereInput!]
  or: [WeaponWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """weapon_category field predicates"""
  weaponCategory: String
  weaponCategoryNEQ: String
  weaponCategoryIn: [String!]
  weaponCategoryNotIn: [String!]
  weaponCategoryGT: String
  weaponCategoryGTE: String
  weaponCategoryLT: String
  weaponCategoryLTE: String
  weaponCategoryContains: String
  weaponCategoryHasPrefix: String
  weaponCategoryHasSuffix: String
  weaponCategoryEqualFold: String
  weaponCategoryContainsFold: String
  """weapon_range field predicates"""
  weaponRange: String
  weaponRangeNEQ: String
  weaponRangeIn: [String!]
  weaponRangeNotIn: [String!]
  weaponRangeGT: String
  weaponRangeGTE: String
  weaponRangeLT: String
  weaponRangeLTE: String
  weaponRangeContains: String
  weaponRangeHasPrefix: String
  weaponRangeHasSuffix: String
  weaponRangeEqualFold: String
  weaponRangeContainsFold: String
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
  """weapon_damage edge predicates"""
  hasWeaponDamage: Boolean
  hasWeaponDamageWith: [WeaponDamageWhereInput!]
  """weapon_properties edge predicates"""
  hasWeaponProperties: Boolean
  hasWeaponPropertiesWith: [WeaponPropertyWhereInput!]
}
