directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type AbilityBonus implements Node {
  id: ID!
  abilityScoreID: ID!
  bonus: Int!
  abilityScore: AbilityScore!
  race: Race
  subrace: Subrace
}
"""
AbilityBonusWhereInput is used for filtering AbilityBonus objects.
Input was generated by ent.
"""
input AbilityBonusWhereInput {
  not: AbilityBonusWhereInput
  and: [AbilityBonusWhereInput!]
  or: [AbilityBonusWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """ability_score_id field predicates"""
  abilityScoreID: ID
  abilityScoreIDNEQ: ID
  abilityScoreIDIn: [ID!]
  abilityScoreIDNotIn: [ID!]
  """bonus field predicates"""
  bonus: Int
  bonusNEQ: Int
  bonusIn: [Int!]
  bonusNotIn: [Int!]
  bonusGT: Int
  bonusGTE: Int
  bonusLT: Int
  bonusLTE: Int
  """ability_score edge predicates"""
  hasAbilityScore: Boolean
  hasAbilityScoreWith: [AbilityScoreWhereInput!]
  """race edge predicates"""
  hasRace: Boolean
  hasRaceWith: [RaceWhereInput!]
  """subrace edge predicates"""
  hasSubrace: Boolean
  hasSubraceWith: [SubraceWhereInput!]
}
type AbilityScore implements Node {
  id: ID!
  indx: String!
  name: String!
  fullName: String!
  desc: [String!]!
  skills: [Skill!]
  abilityBonuses: [AbilityBonus!]
}
"""A connection to a list of items."""
type AbilityScoreConnection {
  """A list of edges."""
  edges: [AbilityScoreEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AbilityScoreEdge {
  """The item at the end of the edge."""
  node: AbilityScore
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for AbilityScore connections"""
input AbilityScoreOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AbilityScores."""
  field: AbilityScoreOrderField!
}
"""Properties by which AbilityScore connections can be ordered."""
enum AbilityScoreOrderField {
  INDX
  NAME
  FULL_NAME
}
"""
AbilityScoreWhereInput is used for filtering AbilityScore objects.
Input was generated by ent.
"""
input AbilityScoreWhereInput {
  not: AbilityScoreWhereInput
  and: [AbilityScoreWhereInput!]
  or: [AbilityScoreWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """full_name field predicates"""
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """skills edge predicates"""
  hasSkills: Boolean
  hasSkillsWith: [SkillWhereInput!]
  """ability_bonuses edge predicates"""
  hasAbilityBonuses: Boolean
  hasAbilityBonusesWith: [AbilityBonusWhereInput!]
}
type Armor implements Node {
  id: ID!
  indx: String!
  name: String!
  armorCategory: String!
  stealthDisadvantage: Boolean!
  minStrength: Int!
  equipmentID: ID!
  equipment: Equipment!
  armorClass: [ArmorClass!]
}
type ArmorClass implements Node {
  id: ID!
  base: Int!
  dexBonus: Boolean!
  maxBonus: Int
}
"""
ArmorClassWhereInput is used for filtering ArmorClass objects.
Input was generated by ent.
"""
input ArmorClassWhereInput {
  not: ArmorClassWhereInput
  and: [ArmorClassWhereInput!]
  or: [ArmorClassWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """base field predicates"""
  base: Int
  baseNEQ: Int
  baseIn: [Int!]
  baseNotIn: [Int!]
  baseGT: Int
  baseGTE: Int
  baseLT: Int
  baseLTE: Int
  """dex_bonus field predicates"""
  dexBonus: Boolean
  dexBonusNEQ: Boolean
  """max_bonus field predicates"""
  maxBonus: Int
  maxBonusNEQ: Int
  maxBonusIn: [Int!]
  maxBonusNotIn: [Int!]
  maxBonusGT: Int
  maxBonusGTE: Int
  maxBonusLT: Int
  maxBonusLTE: Int
  maxBonusIsNil: Boolean
  maxBonusNotNil: Boolean
}
"""A connection to a list of items."""
type ArmorConnection {
  """A list of edges."""
  edges: [ArmorEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ArmorEdge {
  """The item at the end of the edge."""
  node: Armor
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Armor connections"""
input ArmorOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Armors."""
  field: ArmorOrderField!
}
"""Properties by which Armor connections can be ordered."""
enum ArmorOrderField {
  INDX
  NAME
}
"""
ArmorWhereInput is used for filtering Armor objects.
Input was generated by ent.
"""
input ArmorWhereInput {
  not: ArmorWhereInput
  and: [ArmorWhereInput!]
  or: [ArmorWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """armor_category field predicates"""
  armorCategory: String
  armorCategoryNEQ: String
  armorCategoryIn: [String!]
  armorCategoryNotIn: [String!]
  armorCategoryGT: String
  armorCategoryGTE: String
  armorCategoryLT: String
  armorCategoryLTE: String
  armorCategoryContains: String
  armorCategoryHasPrefix: String
  armorCategoryHasSuffix: String
  armorCategoryEqualFold: String
  armorCategoryContainsFold: String
  """stealth_disadvantage field predicates"""
  stealthDisadvantage: Boolean
  stealthDisadvantageNEQ: Boolean
  """min_strength field predicates"""
  minStrength: Int
  minStrengthNEQ: Int
  minStrengthIn: [Int!]
  minStrengthNotIn: [Int!]
  minStrengthGT: Int
  minStrengthGTE: Int
  minStrengthLT: Int
  minStrengthLTE: Int
  """equipment_id field predicates"""
  equipmentID: ID
  equipmentIDNEQ: ID
  equipmentIDIn: [ID!]
  equipmentIDNotIn: [ID!]
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
  """armor_class edge predicates"""
  hasArmorClass: Boolean
  hasArmorClassWith: [ArmorClassWhereInput!]
}
type Choice implements Node {
  id: ID!
  choose: Int!
  desc: String
  parentChoice: Choice
  choiceOptions: [Choice!]
  proficiencyOptions: [Proficiency!]
  startingEquipmentOptions: [Equipment!]
  class: [Class!]
  race: [Race!]
}
"""
ChoiceWhereInput is used for filtering Choice objects.
Input was generated by ent.
"""
input ChoiceWhereInput {
  not: ChoiceWhereInput
  and: [ChoiceWhereInput!]
  or: [ChoiceWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """choose field predicates"""
  choose: Int
  chooseNEQ: Int
  chooseIn: [Int!]
  chooseNotIn: [Int!]
  chooseGT: Int
  chooseGTE: Int
  chooseLT: Int
  chooseLTE: Int
  """desc field predicates"""
  desc: String
  descNEQ: String
  descIn: [String!]
  descNotIn: [String!]
  descGT: String
  descGTE: String
  descLT: String
  descLTE: String
  descContains: String
  descHasPrefix: String
  descHasSuffix: String
  descIsNil: Boolean
  descNotNil: Boolean
  descEqualFold: String
  descContainsFold: String
  """parent_choice edge predicates"""
  hasParentChoice: Boolean
  hasParentChoiceWith: [ChoiceWhereInput!]
  """choice_options edge predicates"""
  hasChoiceOptions: Boolean
  hasChoiceOptionsWith: [ChoiceWhereInput!]
  """proficiency_options edge predicates"""
  hasProficiencyOptions: Boolean
  hasProficiencyOptionsWith: [ProficiencyWhereInput!]
  """starting_equipment_options edge predicates"""
  hasStartingEquipmentOptions: Boolean
  hasStartingEquipmentOptionsWith: [EquipmentWhereInput!]
  """class edge predicates"""
  hasClass: Boolean
  hasClassWith: [ClassWhereInput!]
  """race edge predicates"""
  hasRace: Boolean
  hasRaceWith: [RaceWhereInput!]
}
type Class implements Node {
  id: ID!
  indx: String!
  name: String!
  hitDie: Int!
  proficiencies: [Proficiency!]
  proficiencyChoices: [Choice!]
  startingEquipment: [Equipment!]
}
"""A connection to a list of items."""
type ClassConnection {
  """A list of edges."""
  edges: [ClassEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ClassEdge {
  """The item at the end of the edge."""
  node: Class
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Class connections"""
input ClassOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Classes."""
  field: ClassOrderField!
}
"""Properties by which Class connections can be ordered."""
enum ClassOrderField {
  INDX
  NAME
}
"""
ClassWhereInput is used for filtering Class objects.
Input was generated by ent.
"""
input ClassWhereInput {
  not: ClassWhereInput
  and: [ClassWhereInput!]
  or: [ClassWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """hit_die field predicates"""
  hitDie: Int
  hitDieNEQ: Int
  hitDieIn: [Int!]
  hitDieNotIn: [Int!]
  hitDieGT: Int
  hitDieGTE: Int
  hitDieLT: Int
  hitDieLTE: Int
  """proficiencies edge predicates"""
  hasProficiencies: Boolean
  hasProficienciesWith: [ProficiencyWhereInput!]
  """proficiency_choices edge predicates"""
  hasProficiencyChoices: Boolean
  hasProficiencyChoicesWith: [ChoiceWhereInput!]
  """starting_equipment edge predicates"""
  hasStartingEquipment: Boolean
  hasStartingEquipmentWith: [EquipmentWhereInput!]
}
type Cost implements Node {
  id: ID!
  quantity: Int!
  unit: String!
}
"""
CostWhereInput is used for filtering Cost objects.
Input was generated by ent.
"""
input CostWhereInput {
  not: CostWhereInput
  and: [CostWhereInput!]
  or: [CostWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """quantity field predicates"""
  quantity: Int
  quantityNEQ: Int
  quantityIn: [Int!]
  quantityNotIn: [Int!]
  quantityGT: Int
  quantityGTE: Int
  quantityLT: Int
  quantityLTE: Int
  """unit field predicates"""
  unit: String
  unitNEQ: String
  unitIn: [String!]
  unitNotIn: [String!]
  unitGT: String
  unitGTE: String
  unitLT: String
  unitLTE: String
  unitContains: String
  unitHasPrefix: String
  unitHasSuffix: String
  unitEqualFold: String
  unitContainsFold: String
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type DamageType implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]!
  weaponDamage: [WeaponDamage!]
}
"""A connection to a list of items."""
type DamageTypeConnection {
  """A list of edges."""
  edges: [DamageTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type DamageTypeEdge {
  """The item at the end of the edge."""
  node: DamageType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for DamageType connections"""
input DamageTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order DamageTypes."""
  field: DamageTypeOrderField!
}
"""Properties by which DamageType connections can be ordered."""
enum DamageTypeOrderField {
  INDX
  NAME
}
"""
DamageTypeWhereInput is used for filtering DamageType objects.
Input was generated by ent.
"""
input DamageTypeWhereInput {
  not: DamageTypeWhereInput
  and: [DamageTypeWhereInput!]
  or: [DamageTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """weapon_damage edge predicates"""
  hasWeaponDamage: Boolean
  hasWeaponDamageWith: [WeaponDamageWhereInput!]
}
type Equipment implements Node {
  id: ID!
  indx: String!
  name: String!
  equipmentCategory: EquipmentEquipmentCategory!
  cost: Cost
  weapon: Weapon
  armor: Armor
  gear: Gear
  tool: Tool
  vehicle: Vehicle
  class: [Class!]
}
"""A connection to a list of items."""
type EquipmentConnection {
  """A list of edges."""
  edges: [EquipmentEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type EquipmentEdge {
  """The item at the end of the edge."""
  node: Equipment
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""EquipmentEquipmentCategory is enum for the field equipment_category"""
enum EquipmentEquipmentCategory @goModel(model: "github.com/ecshreve/dndgen/ent/equipment.EquipmentCategory") {
  weapon
  armor
  adventuring_gear
  tools
  mounts_and_vehicles
  other
}
"""Ordering options for Equipment connections"""
input EquipmentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order EquipmentSlice."""
  field: EquipmentOrderField!
}
"""Properties by which Equipment connections can be ordered."""
enum EquipmentOrderField {
  INDX
  NAME
}
"""
EquipmentWhereInput is used for filtering Equipment objects.
Input was generated by ent.
"""
input EquipmentWhereInput {
  not: EquipmentWhereInput
  and: [EquipmentWhereInput!]
  or: [EquipmentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """equipment_category field predicates"""
  equipmentCategory: EquipmentEquipmentCategory
  equipmentCategoryNEQ: EquipmentEquipmentCategory
  equipmentCategoryIn: [EquipmentEquipmentCategory!]
  equipmentCategoryNotIn: [EquipmentEquipmentCategory!]
  """cost edge predicates"""
  hasCost: Boolean
  hasCostWith: [CostWhereInput!]
  """weapon edge predicates"""
  hasWeapon: Boolean
  hasWeaponWith: [WeaponWhereInput!]
  """armor edge predicates"""
  hasArmor: Boolean
  hasArmorWith: [ArmorWhereInput!]
  """gear edge predicates"""
  hasGear: Boolean
  hasGearWith: [GearWhereInput!]
  """tool edge predicates"""
  hasTool: Boolean
  hasToolWith: [ToolWhereInput!]
  """vehicle edge predicates"""
  hasVehicle: Boolean
  hasVehicleWith: [VehicleWhereInput!]
  """class edge predicates"""
  hasClass: Boolean
  hasClassWith: [ClassWhereInput!]
}
type Gear implements Node {
  id: ID!
  indx: String!
  name: String!
  gearCategory: GearGearCategory!
  desc: [String!]!
  quantity: Int
  equipmentID: ID!
  equipment: Equipment!
}
"""A connection to a list of items."""
type GearConnection {
  """A list of edges."""
  edges: [GearEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GearEdge {
  """The item at the end of the edge."""
  node: Gear
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""GearGearCategory is enum for the field gear_category"""
enum GearGearCategory @goModel(model: "github.com/ecshreve/dndgen/ent/gear.GearCategory") {
  ammunition
  standard_gear
  kits
  equipment_packs
  arcane_foci
  druidic_foci
  holy_symbols
  other
}
"""Ordering options for Gear connections"""
input GearOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Gears."""
  field: GearOrderField!
}
"""Properties by which Gear connections can be ordered."""
enum GearOrderField {
  INDX
  NAME
}
"""
GearWhereInput is used for filtering Gear objects.
Input was generated by ent.
"""
input GearWhereInput {
  not: GearWhereInput
  and: [GearWhereInput!]
  or: [GearWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """gear_category field predicates"""
  gearCategory: GearGearCategory
  gearCategoryNEQ: GearGearCategory
  gearCategoryIn: [GearGearCategory!]
  gearCategoryNotIn: [GearGearCategory!]
  """quantity field predicates"""
  quantity: Int
  quantityNEQ: Int
  quantityIn: [Int!]
  quantityNotIn: [Int!]
  quantityGT: Int
  quantityGTE: Int
  quantityLT: Int
  quantityLTE: Int
  quantityIsNil: Boolean
  quantityNotNil: Boolean
  """equipment_id field predicates"""
  equipmentID: ID
  equipmentIDNEQ: ID
  equipmentIDIn: [ID!]
  equipmentIDNotIn: [ID!]
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Language implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: String!
  languageType: LanguageLanguageType!
  script: LanguageScript
  raceSpeakers: [Race!]
}
"""A connection to a list of items."""
type LanguageConnection {
  """A list of edges."""
  edges: [LanguageEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type LanguageEdge {
  """The item at the end of the edge."""
  node: Language
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""LanguageLanguageType is enum for the field language_type"""
enum LanguageLanguageType @goModel(model: "github.com/ecshreve/dndgen/ent/language.LanguageType") {
  STANDARD
  EXOTIC
}
"""Ordering options for Language connections"""
input LanguageOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Languages."""
  field: LanguageOrderField!
}
"""Properties by which Language connections can be ordered."""
enum LanguageOrderField {
  INDX
  NAME
}
"""LanguageScript is enum for the field script"""
enum LanguageScript @goModel(model: "github.com/ecshreve/dndgen/ent/language.Script") {
  Common
  Dwarvish
  Elvish
  Infernal
  Draconic
  Celestial
  Abyssal
  Giant
  Gnomish
  Goblin
  Halfling
  Orc
  Other
}
"""
LanguageWhereInput is used for filtering Language objects.
Input was generated by ent.
"""
input LanguageWhereInput {
  not: LanguageWhereInput
  and: [LanguageWhereInput!]
  or: [LanguageWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """desc field predicates"""
  desc: String
  descNEQ: String
  descIn: [String!]
  descNotIn: [String!]
  descGT: String
  descGTE: String
  descLT: String
  descLTE: String
  descContains: String
  descHasPrefix: String
  descHasSuffix: String
  descEqualFold: String
  descContainsFold: String
  """language_type field predicates"""
  languageType: LanguageLanguageType
  languageTypeNEQ: LanguageLanguageType
  languageTypeIn: [LanguageLanguageType!]
  languageTypeNotIn: [LanguageLanguageType!]
  """script field predicates"""
  script: LanguageScript
  scriptNEQ: LanguageScript
  scriptIn: [LanguageScript!]
  scriptNotIn: [LanguageScript!]
  scriptIsNil: Boolean
  scriptNotNil: Boolean
  """race_speakers edge predicates"""
  hasRaceSpeakers: Boolean
  hasRaceSpeakersWith: [RaceWhereInput!]
}
type MagicSchool implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: String!
}
"""A connection to a list of items."""
type MagicSchoolConnection {
  """A list of edges."""
  edges: [MagicSchoolEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type MagicSchoolEdge {
  """The item at the end of the edge."""
  node: MagicSchool
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for MagicSchool connections"""
input MagicSchoolOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order MagicSchools."""
  field: MagicSchoolOrderField!
}
"""Properties by which MagicSchool connections can be ordered."""
enum MagicSchoolOrderField {
  INDX
  NAME
}
"""
MagicSchoolWhereInput is used for filtering MagicSchool objects.
Input was generated by ent.
"""
input MagicSchoolWhereInput {
  not: MagicSchoolWhereInput
  and: [MagicSchoolWhereInput!]
  or: [MagicSchoolWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """desc field predicates"""
  desc: String
  descNEQ: String
  descIn: [String!]
  descNotIn: [String!]
  descGT: String
  descGTE: String
  descLT: String
  descLTE: String
  descContains: String
  descHasPrefix: String
  descHasSuffix: String
  descEqualFold: String
  descContainsFold: String
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/ecshreve/dndgen/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Proficiency implements Node {
  id: ID!
  indx: String!
  name: String!
  proficiencyCategory: String!
  classes: [Class!]
  races: [Race!]
  subraces: [Subrace!]
  choice: [Choice!]
  skill: Skill
  equipment: Equipment
  savingThrow: AbilityScore
}
"""A connection to a list of items."""
type ProficiencyConnection {
  """A list of edges."""
  edges: [ProficiencyEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ProficiencyEdge {
  """The item at the end of the edge."""
  node: Proficiency
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Proficiency connections"""
input ProficiencyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Proficiencies."""
  field: ProficiencyOrderField!
}
"""Properties by which Proficiency connections can be ordered."""
enum ProficiencyOrderField {
  INDX
  NAME
}
"""
ProficiencyWhereInput is used for filtering Proficiency objects.
Input was generated by ent.
"""
input ProficiencyWhereInput {
  not: ProficiencyWhereInput
  and: [ProficiencyWhereInput!]
  or: [ProficiencyWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """proficiency_category field predicates"""
  proficiencyCategory: String
  proficiencyCategoryNEQ: String
  proficiencyCategoryIn: [String!]
  proficiencyCategoryNotIn: [String!]
  proficiencyCategoryGT: String
  proficiencyCategoryGTE: String
  proficiencyCategoryLT: String
  proficiencyCategoryLTE: String
  proficiencyCategoryContains: String
  proficiencyCategoryHasPrefix: String
  proficiencyCategoryHasSuffix: String
  proficiencyCategoryEqualFold: String
  proficiencyCategoryContainsFold: String
  """classes edge predicates"""
  hasClasses: Boolean
  hasClassesWith: [ClassWhereInput!]
  """races edge predicates"""
  hasRaces: Boolean
  hasRacesWith: [RaceWhereInput!]
  """subraces edge predicates"""
  hasSubraces: Boolean
  hasSubracesWith: [SubraceWhereInput!]
  """choice edge predicates"""
  hasChoice: Boolean
  hasChoiceWith: [ChoiceWhereInput!]
  """skill edge predicates"""
  hasSkill: Boolean
  hasSkillWith: [SkillWhereInput!]
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
  """saving_throw edge predicates"""
  hasSavingThrow: Boolean
  hasSavingThrowWith: [AbilityScoreWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  abilityScores(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for AbilityScores returned from the connection."""
    orderBy: AbilityScoreOrder

    """Filtering options for AbilityScores returned from the connection."""
    where: AbilityScoreWhereInput
  ): AbilityScoreConnection!
  armors(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Armors returned from the connection."""
    orderBy: ArmorOrder

    """Filtering options for Armors returned from the connection."""
    where: ArmorWhereInput
  ): ArmorConnection!
  classes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Classes returned from the connection."""
    orderBy: ClassOrder

    """Filtering options for Classes returned from the connection."""
    where: ClassWhereInput
  ): ClassConnection!
  damageTypes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for DamageTypes returned from the connection."""
    orderBy: DamageTypeOrder

    """Filtering options for DamageTypes returned from the connection."""
    where: DamageTypeWhereInput
  ): DamageTypeConnection!
  equipmentSlice(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for EquipmentSlice returned from the connection."""
    orderBy: EquipmentOrder

    """Filtering options for EquipmentSlice returned from the connection."""
    where: EquipmentWhereInput
  ): EquipmentConnection!
  gears(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Gears returned from the connection."""
    orderBy: GearOrder

    """Filtering options for Gears returned from the connection."""
    where: GearWhereInput
  ): GearConnection!
  languages(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Languages returned from the connection."""
    orderBy: LanguageOrder

    """Filtering options for Languages returned from the connection."""
    where: LanguageWhereInput
  ): LanguageConnection!
  magicSchools(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for MagicSchools returned from the connection."""
    orderBy: MagicSchoolOrder

    """Filtering options for MagicSchools returned from the connection."""
    where: MagicSchoolWhereInput
  ): MagicSchoolConnection!
  proficiencies(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Proficiencies returned from the connection."""
    orderBy: ProficiencyOrder

    """Filtering options for Proficiencies returned from the connection."""
    where: ProficiencyWhereInput
  ): ProficiencyConnection!
  races(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Races returned from the connection."""
    orderBy: RaceOrder

    """Filtering options for Races returned from the connection."""
    where: RaceWhereInput
  ): RaceConnection!
  rules(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Rules returned from the connection."""
    orderBy: RuleOrder

    """Filtering options for Rules returned from the connection."""
    where: RuleWhereInput
  ): RuleConnection!
  ruleSections(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for RuleSections returned from the connection."""
    orderBy: RuleSectionOrder

    """Filtering options for RuleSections returned from the connection."""
    where: RuleSectionWhereInput
  ): RuleSectionConnection!
  skills(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Skills returned from the connection."""
    orderBy: SkillOrder

    """Filtering options for Skills returned from the connection."""
    where: SkillWhereInput
  ): SkillConnection!
  subraces(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Subraces returned from the connection."""
    orderBy: SubraceOrder

    """Filtering options for Subraces returned from the connection."""
    where: SubraceWhereInput
  ): SubraceConnection!
  tools(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Tools returned from the connection."""
    orderBy: ToolOrder

    """Filtering options for Tools returned from the connection."""
    where: ToolWhereInput
  ): ToolConnection!
  traits(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Traits returned from the connection."""
    orderBy: TraitOrder

    """Filtering options for Traits returned from the connection."""
    where: TraitWhereInput
  ): TraitConnection!
  vehicles(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Vehicles returned from the connection."""
    orderBy: VehicleOrder

    """Filtering options for Vehicles returned from the connection."""
    where: VehicleWhereInput
  ): VehicleConnection!
  weapons(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Weapons returned from the connection."""
    orderBy: WeaponOrder

    """Filtering options for Weapons returned from the connection."""
    where: WeaponWhereInput
  ): WeaponConnection!
  weaponDamages: [WeaponDamage!]!
  weaponProperties(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for WeaponProperties returned from the connection."""
    orderBy: WeaponPropertyOrder

    """Filtering options for WeaponProperties returned from the connection."""
    where: WeaponPropertyWhereInput
  ): WeaponPropertyConnection!
}
type Race implements Node {
  id: ID!
  indx: String!
  name: String!
  alignment: String!
  age: String!
  size: String!
  sizeDescription: String!
  languageDesc: String!
  speed: Int!
  languages: [Language!]
  proficiencies: [Proficiency!]
  subraces: [Subrace!]
  traits: [Trait!]
  abilityBonuses: [AbilityBonus!]
  startingProficiencyOptions: Choice
}
"""A connection to a list of items."""
type RaceConnection {
  """A list of edges."""
  edges: [RaceEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type RaceEdge {
  """The item at the end of the edge."""
  node: Race
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Race connections"""
input RaceOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Races."""
  field: RaceOrderField!
}
"""Properties by which Race connections can be ordered."""
enum RaceOrderField {
  INDX
  NAME
}
"""
RaceWhereInput is used for filtering Race objects.
Input was generated by ent.
"""
input RaceWhereInput {
  not: RaceWhereInput
  and: [RaceWhereInput!]
  or: [RaceWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """alignment field predicates"""
  alignment: String
  alignmentNEQ: String
  alignmentIn: [String!]
  alignmentNotIn: [String!]
  alignmentGT: String
  alignmentGTE: String
  alignmentLT: String
  alignmentLTE: String
  alignmentContains: String
  alignmentHasPrefix: String
  alignmentHasSuffix: String
  alignmentEqualFold: String
  alignmentContainsFold: String
  """age field predicates"""
  age: String
  ageNEQ: String
  ageIn: [String!]
  ageNotIn: [String!]
  ageGT: String
  ageGTE: String
  ageLT: String
  ageLTE: String
  ageContains: String
  ageHasPrefix: String
  ageHasSuffix: String
  ageEqualFold: String
  ageContainsFold: String
  """size field predicates"""
  size: String
  sizeNEQ: String
  sizeIn: [String!]
  sizeNotIn: [String!]
  sizeGT: String
  sizeGTE: String
  sizeLT: String
  sizeLTE: String
  sizeContains: String
  sizeHasPrefix: String
  sizeHasSuffix: String
  sizeEqualFold: String
  sizeContainsFold: String
  """size_description field predicates"""
  sizeDescription: String
  sizeDescriptionNEQ: String
  sizeDescriptionIn: [String!]
  sizeDescriptionNotIn: [String!]
  sizeDescriptionGT: String
  sizeDescriptionGTE: String
  sizeDescriptionLT: String
  sizeDescriptionLTE: String
  sizeDescriptionContains: String
  sizeDescriptionHasPrefix: String
  sizeDescriptionHasSuffix: String
  sizeDescriptionEqualFold: String
  sizeDescriptionContainsFold: String
  """language_desc field predicates"""
  languageDesc: String
  languageDescNEQ: String
  languageDescIn: [String!]
  languageDescNotIn: [String!]
  languageDescGT: String
  languageDescGTE: String
  languageDescLT: String
  languageDescLTE: String
  languageDescContains: String
  languageDescHasPrefix: String
  languageDescHasSuffix: String
  languageDescEqualFold: String
  languageDescContainsFold: String
  """speed field predicates"""
  speed: Int
  speedNEQ: Int
  speedIn: [Int!]
  speedNotIn: [Int!]
  speedGT: Int
  speedGTE: Int
  speedLT: Int
  speedLTE: Int
  """languages edge predicates"""
  hasLanguages: Boolean
  hasLanguagesWith: [LanguageWhereInput!]
  """proficiencies edge predicates"""
  hasProficiencies: Boolean
  hasProficienciesWith: [ProficiencyWhereInput!]
  """subraces edge predicates"""
  hasSubraces: Boolean
  hasSubracesWith: [SubraceWhereInput!]
  """traits edge predicates"""
  hasTraits: Boolean
  hasTraitsWith: [TraitWhereInput!]
  """ability_bonuses edge predicates"""
  hasAbilityBonuses: Boolean
  hasAbilityBonusesWith: [AbilityBonusWhereInput!]
  """starting_proficiency_options edge predicates"""
  hasStartingProficiencyOptions: Boolean
  hasStartingProficiencyOptionsWith: [ChoiceWhereInput!]
}
type Rule implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: String!
  ruleSections: [RuleSection!]
}
"""A connection to a list of items."""
type RuleConnection {
  """A list of edges."""
  edges: [RuleEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type RuleEdge {
  """The item at the end of the edge."""
  node: Rule
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Rule connections"""
input RuleOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Rules."""
  field: RuleOrderField!
}
"""Properties by which Rule connections can be ordered."""
enum RuleOrderField {
  INDX
  NAME
}
type RuleSection implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: String!
  rules: [Rule!]
}
"""A connection to a list of items."""
type RuleSectionConnection {
  """A list of edges."""
  edges: [RuleSectionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type RuleSectionEdge {
  """The item at the end of the edge."""
  node: RuleSection
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for RuleSection connections"""
input RuleSectionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order RuleSections."""
  field: RuleSectionOrderField!
}
"""Properties by which RuleSection connections can be ordered."""
enum RuleSectionOrderField {
  INDX
  NAME
}
"""
RuleSectionWhereInput is used for filtering RuleSection objects.
Input was generated by ent.
"""
input RuleSectionWhereInput {
  not: RuleSectionWhereInput
  and: [RuleSectionWhereInput!]
  or: [RuleSectionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """desc field predicates"""
  desc: String
  descNEQ: String
  descIn: [String!]
  descNotIn: [String!]
  descGT: String
  descGTE: String
  descLT: String
  descLTE: String
  descContains: String
  descHasPrefix: String
  descHasSuffix: String
  descEqualFold: String
  descContainsFold: String
  """rules edge predicates"""
  hasRules: Boolean
  hasRulesWith: [RuleWhereInput!]
}
"""
RuleWhereInput is used for filtering Rule objects.
Input was generated by ent.
"""
input RuleWhereInput {
  not: RuleWhereInput
  and: [RuleWhereInput!]
  or: [RuleWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """desc field predicates"""
  desc: String
  descNEQ: String
  descIn: [String!]
  descNotIn: [String!]
  descGT: String
  descGTE: String
  descLT: String
  descLTE: String
  descContains: String
  descHasPrefix: String
  descHasSuffix: String
  descEqualFold: String
  descContainsFold: String
  """rule_sections edge predicates"""
  hasRuleSections: Boolean
  hasRuleSectionsWith: [RuleSectionWhereInput!]
}
type Skill implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]!
  abilityScore: AbilityScore
}
"""A connection to a list of items."""
type SkillConnection {
  """A list of edges."""
  edges: [SkillEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type SkillEdge {
  """The item at the end of the edge."""
  node: Skill
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Skill connections"""
input SkillOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Skills."""
  field: SkillOrderField!
}
"""Properties by which Skill connections can be ordered."""
enum SkillOrderField {
  INDX
  NAME
}
"""
SkillWhereInput is used for filtering Skill objects.
Input was generated by ent.
"""
input SkillWhereInput {
  not: SkillWhereInput
  and: [SkillWhereInput!]
  or: [SkillWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """ability_score edge predicates"""
  hasAbilityScore: Boolean
  hasAbilityScoreWith: [AbilityScoreWhereInput!]
}
type Subrace implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: String!
  race: Race
  proficiencies: [Proficiency!]
  traits: [Trait!]
  abilityBonuses: [AbilityBonus!]
}
"""A connection to a list of items."""
type SubraceConnection {
  """A list of edges."""
  edges: [SubraceEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type SubraceEdge {
  """The item at the end of the edge."""
  node: Subrace
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Subrace connections"""
input SubraceOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Subraces."""
  field: SubraceOrderField!
}
"""Properties by which Subrace connections can be ordered."""
enum SubraceOrderField {
  INDX
  NAME
}
"""
SubraceWhereInput is used for filtering Subrace objects.
Input was generated by ent.
"""
input SubraceWhereInput {
  not: SubraceWhereInput
  and: [SubraceWhereInput!]
  or: [SubraceWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """desc field predicates"""
  desc: String
  descNEQ: String
  descIn: [String!]
  descNotIn: [String!]
  descGT: String
  descGTE: String
  descLT: String
  descLTE: String
  descContains: String
  descHasPrefix: String
  descHasSuffix: String
  descEqualFold: String
  descContainsFold: String
  """race edge predicates"""
  hasRace: Boolean
  hasRaceWith: [RaceWhereInput!]
  """proficiencies edge predicates"""
  hasProficiencies: Boolean
  hasProficienciesWith: [ProficiencyWhereInput!]
  """traits edge predicates"""
  hasTraits: Boolean
  hasTraitsWith: [TraitWhereInput!]
  """ability_bonuses edge predicates"""
  hasAbilityBonuses: Boolean
  hasAbilityBonusesWith: [AbilityBonusWhereInput!]
}
type Tool implements Node {
  id: ID!
  indx: String!
  name: String!
  toolCategory: String!
  equipmentID: ID!
  equipment: Equipment!
}
"""A connection to a list of items."""
type ToolConnection {
  """A list of edges."""
  edges: [ToolEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ToolEdge {
  """The item at the end of the edge."""
  node: Tool
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Tool connections"""
input ToolOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tools."""
  field: ToolOrderField!
}
"""Properties by which Tool connections can be ordered."""
enum ToolOrderField {
  INDX
  NAME
}
"""
ToolWhereInput is used for filtering Tool objects.
Input was generated by ent.
"""
input ToolWhereInput {
  not: ToolWhereInput
  and: [ToolWhereInput!]
  or: [ToolWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """tool_category field predicates"""
  toolCategory: String
  toolCategoryNEQ: String
  toolCategoryIn: [String!]
  toolCategoryNotIn: [String!]
  toolCategoryGT: String
  toolCategoryGTE: String
  toolCategoryLT: String
  toolCategoryLTE: String
  toolCategoryContains: String
  toolCategoryHasPrefix: String
  toolCategoryHasSuffix: String
  toolCategoryEqualFold: String
  toolCategoryContainsFold: String
  """equipment_id field predicates"""
  equipmentID: ID
  equipmentIDNEQ: ID
  equipmentIDIn: [ID!]
  equipmentIDNotIn: [ID!]
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Trait implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]!
  races: [Race!]
  subraces: [Subrace!]
}
"""A connection to a list of items."""
type TraitConnection {
  """A list of edges."""
  edges: [TraitEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TraitEdge {
  """The item at the end of the edge."""
  node: Trait
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Trait connections"""
input TraitOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Traits."""
  field: TraitOrderField!
}
"""Properties by which Trait connections can be ordered."""
enum TraitOrderField {
  INDX
  NAME
}
"""
TraitWhereInput is used for filtering Trait objects.
Input was generated by ent.
"""
input TraitWhereInput {
  not: TraitWhereInput
  and: [TraitWhereInput!]
  or: [TraitWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """races edge predicates"""
  hasRaces: Boolean
  hasRacesWith: [RaceWhereInput!]
  """subraces edge predicates"""
  hasSubraces: Boolean
  hasSubracesWith: [SubraceWhereInput!]
}
type Vehicle implements Node {
  id: ID!
  indx: String!
  name: String!
  vehicleCategory: String!
  capacity: String!
  equipmentID: ID!
  equipment: Equipment!
}
"""A connection to a list of items."""
type VehicleConnection {
  """A list of edges."""
  edges: [VehicleEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type VehicleEdge {
  """The item at the end of the edge."""
  node: Vehicle
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Vehicle connections"""
input VehicleOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Vehicles."""
  field: VehicleOrderField!
}
"""Properties by which Vehicle connections can be ordered."""
enum VehicleOrderField {
  INDX
  NAME
}
"""
VehicleWhereInput is used for filtering Vehicle objects.
Input was generated by ent.
"""
input VehicleWhereInput {
  not: VehicleWhereInput
  and: [VehicleWhereInput!]
  or: [VehicleWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """vehicle_category field predicates"""
  vehicleCategory: String
  vehicleCategoryNEQ: String
  vehicleCategoryIn: [String!]
  vehicleCategoryNotIn: [String!]
  vehicleCategoryGT: String
  vehicleCategoryGTE: String
  vehicleCategoryLT: String
  vehicleCategoryLTE: String
  vehicleCategoryContains: String
  vehicleCategoryHasPrefix: String
  vehicleCategoryHasSuffix: String
  vehicleCategoryEqualFold: String
  vehicleCategoryContainsFold: String
  """capacity field predicates"""
  capacity: String
  capacityNEQ: String
  capacityIn: [String!]
  capacityNotIn: [String!]
  capacityGT: String
  capacityGTE: String
  capacityLT: String
  capacityLTE: String
  capacityContains: String
  capacityHasPrefix: String
  capacityHasSuffix: String
  capacityEqualFold: String
  capacityContainsFold: String
  """equipment_id field predicates"""
  equipmentID: ID
  equipmentIDNEQ: ID
  equipmentIDIn: [ID!]
  equipmentIDNotIn: [ID!]
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Weapon implements Node {
  id: ID!
  indx: String!
  name: String!
  weaponCategory: String!
  weaponRange: String!
  equipment: Equipment!
  weaponDamage: [WeaponDamage!]
  weaponProperties: [WeaponProperty!]
}
"""A connection to a list of items."""
type WeaponConnection {
  """A list of edges."""
  edges: [WeaponEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
type WeaponDamage implements Node {
  id: ID!
  weaponID: ID!
  damageTypeID: ID!
  dice: String!
  weapon: Weapon!
  damageType: DamageType!
}
"""
WeaponDamageWhereInput is used for filtering WeaponDamage objects.
Input was generated by ent.
"""
input WeaponDamageWhereInput {
  not: WeaponDamageWhereInput
  and: [WeaponDamageWhereInput!]
  or: [WeaponDamageWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """weapon_id field predicates"""
  weaponID: ID
  weaponIDNEQ: ID
  weaponIDIn: [ID!]
  weaponIDNotIn: [ID!]
  """damage_type_id field predicates"""
  damageTypeID: ID
  damageTypeIDNEQ: ID
  damageTypeIDIn: [ID!]
  damageTypeIDNotIn: [ID!]
  """dice field predicates"""
  dice: String
  diceNEQ: String
  diceIn: [String!]
  diceNotIn: [String!]
  diceGT: String
  diceGTE: String
  diceLT: String
  diceLTE: String
  diceContains: String
  diceHasPrefix: String
  diceHasSuffix: String
  diceEqualFold: String
  diceContainsFold: String
  """weapon edge predicates"""
  hasWeapon: Boolean
  hasWeaponWith: [WeaponWhereInput!]
  """damage_type edge predicates"""
  hasDamageType: Boolean
  hasDamageTypeWith: [DamageTypeWhereInput!]
}
"""An edge in a connection."""
type WeaponEdge {
  """The item at the end of the edge."""
  node: Weapon
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Weapon connections"""
input WeaponOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Weapons."""
  field: WeaponOrderField!
}
"""Properties by which Weapon connections can be ordered."""
enum WeaponOrderField {
  INDX
  NAME
}
type WeaponProperty implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]!
  weapons: [Weapon!]
}
"""A connection to a list of items."""
type WeaponPropertyConnection {
  """A list of edges."""
  edges: [WeaponPropertyEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type WeaponPropertyEdge {
  """The item at the end of the edge."""
  node: WeaponProperty
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for WeaponProperty connections"""
input WeaponPropertyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order WeaponProperties."""
  field: WeaponPropertyOrderField!
}
"""Properties by which WeaponProperty connections can be ordered."""
enum WeaponPropertyOrderField {
  INDX
  NAME
}
"""
WeaponPropertyWhereInput is used for filtering WeaponProperty objects.
Input was generated by ent.
"""
input WeaponPropertyWhereInput {
  not: WeaponPropertyWhereInput
  and: [WeaponPropertyWhereInput!]
  or: [WeaponPropertyWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """weapons edge predicates"""
  hasWeapons: Boolean
  hasWeaponsWith: [WeaponWhereInput!]
}
"""
WeaponWhereInput is used for filtering Weapon objects.
Input was generated by ent.
"""
input WeaponWhereInput {
  not: WeaponWhereInput
  and: [WeaponWhereInput!]
  or: [WeaponWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """indx field predicates"""
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """weapon_category field predicates"""
  weaponCategory: String
  weaponCategoryNEQ: String
  weaponCategoryIn: [String!]
  weaponCategoryNotIn: [String!]
  weaponCategoryGT: String
  weaponCategoryGTE: String
  weaponCategoryLT: String
  weaponCategoryLTE: String
  weaponCategoryContains: String
  weaponCategoryHasPrefix: String
  weaponCategoryHasSuffix: String
  weaponCategoryEqualFold: String
  weaponCategoryContainsFold: String
  """weapon_range field predicates"""
  weaponRange: String
  weaponRangeNEQ: String
  weaponRangeIn: [String!]
  weaponRangeNotIn: [String!]
  weaponRangeGT: String
  weaponRangeGTE: String
  weaponRangeLT: String
  weaponRangeLTE: String
  weaponRangeContains: String
  weaponRangeHasPrefix: String
  weaponRangeHasSuffix: String
  weaponRangeEqualFold: String
  weaponRangeContainsFold: String
  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
  """weapon_damage edge predicates"""
  hasWeaponDamage: Boolean
  hasWeaponDamageWith: [WeaponDamageWhereInput!]
  """weapon_properties edge predicates"""
  hasWeaponProperties: Boolean
  hasWeaponPropertiesWith: [WeaponPropertyWhereInput!]
}
