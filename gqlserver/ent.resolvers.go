package dndgen

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"log"

	"github.com/ecshreve/dndgen/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	return r.Client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	return r.Client.Noders(ctx, ids)
}

// AbilityScores is the resolver for the abilityScores field.
func (r *queryResolver) AbilityScores(ctx context.Context) ([]*ent.AbilityScore, error) {
	log.Println("queryResolver.AbilityScores")
	// return r.Client.AbilityScore.Query().Paginate(ctx, after, first, before, last, ent.WithAbilityScoreOrder(orderBy), ent.WithAbilityScoreFilter(where.Filter))
	return r.Client.AbilityScore.Query().All(ctx)
}

// Skills is the resolver for the skills field.
func (r *queryResolver) Skills(ctx context.Context) ([]*ent.Skill, error) {
	log.Println("queryResolver.Skills")
	// return r.Client.Skill.Query().Paginate(ctx, after, first, before, last, ent.WithSkillOrder(orderBy), ent.WithSkillFilter(where.Filter))
	return r.Client.Skill.Query().All(ctx)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
