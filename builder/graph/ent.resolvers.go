package generated

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	ent1 "github.com/ecshreve/dndgen/builder/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent1.Noder, error) {
	return r.Client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent1.Noder, error) {
	return r.Client.Noders(ctx, ids)
}

// AbilityScores is the resolver for the abilityScores field.
func (r *queryResolver) AbilityScores(ctx context.Context) ([]*ent1.AbilityScore, error) {
	return r.Client.AbilityScore.Query().All(ctx)
}

// Alignments is the resolver for the alignments field.
func (r *queryResolver) Alignments(ctx context.Context) ([]*ent1.Alignment, error) {
	return r.Client.Alignment.Query().All(ctx)
}

// Classes is the resolver for the classes field.
func (r *queryResolver) Classes(ctx context.Context) ([]*ent1.Class, error) {
	return r.Client.Class.Query().All(ctx)
}

// Languages is the resolver for the languages field.
func (r *queryResolver) Languages(ctx context.Context) ([]*ent1.Language, error) {
	panic(fmt.Errorf("not implemented: Languages - languages"))
}

// MagicSchools is the resolver for the magicSchools field.
func (r *queryResolver) MagicSchools(ctx context.Context) ([]*ent1.MagicSchool, error) {
	panic(fmt.Errorf("not implemented: MagicSchools - magicSchools"))
}

// Races is the resolver for the races field.
func (r *queryResolver) Races(ctx context.Context) ([]*ent1.Race, error) {
	return r.Client.Race.Query().All(ctx)
}

// Skills is the resolver for the skills field.
func (r *queryResolver) Skills(ctx context.Context) ([]*ent1.Skill, error) {
	return r.Client.Skill.Query().All(ctx)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
