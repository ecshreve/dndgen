directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Character implements Node {
  id: ID!
  name: String!
  level: Int!
  alignment: String
  race: Race!
  class: Class!
}
"""
Ordering options for Character connections
"""
input CharacterOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Characters.
  """
  field: CharacterOrderField!
}
"""
Properties by which Character connections can be ordered.
"""
enum CharacterOrderField {
  NAME
}
"""
CharacterWhereInput is used for filtering Character objects.
Input was generated by ent.
"""
input CharacterWhereInput {
  not: CharacterWhereInput
  and: [CharacterWhereInput!]
  or: [CharacterWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  level field predicates
  """
  level: Int
  levelNEQ: Int
  levelIn: [Int!]
  levelNotIn: [Int!]
  levelGT: Int
  levelGTE: Int
  levelLT: Int
  levelLTE: Int
  """
  alignment field predicates
  """
  alignment: String
  alignmentNEQ: String
  alignmentIn: [String!]
  alignmentNotIn: [String!]
  alignmentGT: String
  alignmentGTE: String
  alignmentLT: String
  alignmentLTE: String
  alignmentContains: String
  alignmentHasPrefix: String
  alignmentHasSuffix: String
  alignmentIsNil: Boolean
  alignmentNotNil: Boolean
  alignmentEqualFold: String
  alignmentContainsFold: String
  """
  race edge predicates
  """
  hasRace: Boolean
  hasRaceWith: [RaceWhereInput!]
  """
  class edge predicates
  """
  hasClass: Boolean
  hasClassWith: [ClassWhereInput!]
}
type Class implements Node {
  id: ID!
  name: String!
  characters: [Character!]
}
"""
Ordering options for Class connections
"""
input ClassOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Classes.
  """
  field: ClassOrderField!
}
"""
Properties by which Class connections can be ordered.
"""
enum ClassOrderField {
  NAME
}
"""
ClassWhereInput is used for filtering Class objects.
Input was generated by ent.
"""
input ClassWhereInput {
  not: ClassWhereInput
  and: [ClassWhereInput!]
  or: [ClassWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  characters edge predicates
  """
  hasCharacters: Boolean
  hasCharactersWith: [CharacterWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "builder/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  characters: [Character!]!
  classes: [Class!]!
  races: [Race!]!
}
type Race implements Node {
  id: ID!
  name: String!
  characters: [Character!]
}
"""
Ordering options for Race connections
"""
input RaceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Races.
  """
  field: RaceOrderField!
}
"""
Properties by which Race connections can be ordered.
"""
enum RaceOrderField {
  NAME
}
"""
RaceWhereInput is used for filtering Race objects.
Input was generated by ent.
"""
input RaceWhereInput {
  not: RaceWhereInput
  and: [RaceWhereInput!]
  or: [RaceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  characters edge predicates
  """
  hasCharacters: Boolean
  hasCharactersWith: [CharacterWhereInput!]
}
