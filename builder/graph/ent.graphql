directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type AbilityScore implements Node {
  id: ID!
  indx: String!
  name: String!
  abbr: AbilityScoreAbbr!
  desc: [String!]!
}
"""
AbilityScoreAbbr is enum for the field abbr
"""
enum AbilityScoreAbbr @goModel(model: "builder/ent/abilityscore.Abbr") {
  STR
  DEX
  CON
  INT
  WIS
  CHA
}
"""
Ordering options for AbilityScore connections
"""
input AbilityScoreOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order AbilityScores.
  """
  field: AbilityScoreOrderField!
}
"""
Properties by which AbilityScore connections can be ordered.
"""
enum AbilityScoreOrderField {
  INDX
  NAME
}
"""
AbilityScoreWhereInput is used for filtering AbilityScore objects.
Input was generated by ent.
"""
input AbilityScoreWhereInput {
  not: AbilityScoreWhereInput
  and: [AbilityScoreWhereInput!]
  or: [AbilityScoreWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  abbr field predicates
  """
  abbr: AbilityScoreAbbr
  abbrNEQ: AbilityScoreAbbr
  abbrIn: [AbilityScoreAbbr!]
  abbrNotIn: [AbilityScoreAbbr!]
}
type Alignment implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: String!
  abbr: String!
}
"""
Ordering options for Alignment connections
"""
input AlignmentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Alignments.
  """
  field: AlignmentOrderField!
}
"""
Properties by which Alignment connections can be ordered.
"""
enum AlignmentOrderField {
  INDX
  NAME
}
"""
AlignmentWhereInput is used for filtering Alignment objects.
Input was generated by ent.
"""
input AlignmentWhereInput {
  not: AlignmentWhereInput
  and: [AlignmentWhereInput!]
  or: [AlignmentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  desc field predicates
  """
  desc: String
  descNEQ: String
  descIn: [String!]
  descNotIn: [String!]
  descGT: String
  descGTE: String
  descLT: String
  descLTE: String
  descContains: String
  descHasPrefix: String
  descHasSuffix: String
  descEqualFold: String
  descContainsFold: String
  """
  abbr field predicates
  """
  abbr: String
  abbrNEQ: String
  abbrIn: [String!]
  abbrNotIn: [String!]
  abbrGT: String
  abbrGTE: String
  abbrLT: String
  abbrLTE: String
  abbrContains: String
  abbrHasPrefix: String
  abbrHasSuffix: String
  abbrEqualFold: String
  abbrContainsFold: String
}
type Character implements Node {
  id: ID!
  name: String!
  age: Int!
}
"""
CharacterWhereInput is used for filtering Character objects.
Input was generated by ent.
"""
input CharacterWhereInput {
  not: CharacterWhereInput
  and: [CharacterWhereInput!]
  or: [CharacterWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  age field predicates
  """
  age: Int
  ageNEQ: Int
  ageIn: [Int!]
  ageNotIn: [Int!]
  ageGT: Int
  ageGTE: Int
  ageLT: Int
  ageLTE: Int
}
type Class implements Node {
  id: ID!
  indx: String!
  name: String!
  hitDie: Int!
}
"""
Ordering options for Class connections
"""
input ClassOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Classes.
  """
  field: ClassOrderField!
}
"""
Properties by which Class connections can be ordered.
"""
enum ClassOrderField {
  INDX
  NAME
}
"""
ClassWhereInput is used for filtering Class objects.
Input was generated by ent.
"""
input ClassWhereInput {
  not: ClassWhereInput
  and: [ClassWhereInput!]
  or: [ClassWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  hit_die field predicates
  """
  hitDie: Int
  hitDieNEQ: Int
  hitDieIn: [Int!]
  hitDieNotIn: [Int!]
  hitDieGT: Int
  hitDieGTE: Int
  hitDieLT: Int
  hitDieLTE: Int
}
"""
CreateAbilityScoreInput is used for create AbilityScore object.
Input was generated by ent.
"""
input CreateAbilityScoreInput {
  indx: String!
  name: String!
  abbr: AbilityScoreAbbr!
  desc: [String!]!
}
"""
CreateAlignmentInput is used for create Alignment object.
Input was generated by ent.
"""
input CreateAlignmentInput {
  indx: String!
  name: String!
  desc: String!
  abbr: String!
}
"""
CreateClassInput is used for create Class object.
Input was generated by ent.
"""
input CreateClassInput {
  indx: String!
  name: String!
  hitDie: Int!
}
"""
CreateLanguageInput is used for create Language object.
Input was generated by ent.
"""
input CreateLanguageInput {
  indx: String!
  name: String!
  type: LanguageType!
  script: LanguageScript!
}
"""
CreateMagicSchoolInput is used for create MagicSchool object.
Input was generated by ent.
"""
input CreateMagicSchoolInput {
  indx: String!
  name: String!
  desc: String!
}
"""
CreateRaceInput is used for create Race object.
Input was generated by ent.
"""
input CreateRaceInput {
  indx: String!
  name: String!
  speed: Int!
  size: RaceSize!
  sizeDescription: String!
  age: String!
}
"""
CreateSkillInput is used for create Skill object.
Input was generated by ent.
"""
input CreateSkillInput {
  indx: String!
  name: String!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Language implements Node {
  id: ID!
  indx: String!
  name: String!
  type: LanguageType!
  script: LanguageScript!
}
"""
Ordering options for Language connections
"""
input LanguageOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Languages.
  """
  field: LanguageOrderField!
}
"""
Properties by which Language connections can be ordered.
"""
enum LanguageOrderField {
  INDX
  NAME
}
"""
LanguageScript is enum for the field script
"""
enum LanguageScript @goModel(model: "builder/ent/language.Script") {
  Common
  Dwarvish
  Elvish
  Giant
  Gnomish
  Goblin
  Halfling
  Orc
  Abyssal
  Celestial
  Draconic
  Drow Sign Language
  Infernal
  Primordial
  Sylvan
  Undercommon
  Other
}
"""
LanguageType is enum for the field type
"""
enum LanguageType @goModel(model: "builder/ent/language.Type") {
  STANDARD
  EXOTIC
}
"""
LanguageWhereInput is used for filtering Language objects.
Input was generated by ent.
"""
input LanguageWhereInput {
  not: LanguageWhereInput
  and: [LanguageWhereInput!]
  or: [LanguageWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  type field predicates
  """
  type: LanguageType
  typeNEQ: LanguageType
  typeIn: [LanguageType!]
  typeNotIn: [LanguageType!]
  """
  script field predicates
  """
  script: LanguageScript
  scriptNEQ: LanguageScript
  scriptIn: [LanguageScript!]
  scriptNotIn: [LanguageScript!]
}
type MagicSchool implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: String!
}
"""
Ordering options for MagicSchool connections
"""
input MagicSchoolOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order MagicSchools.
  """
  field: MagicSchoolOrderField!
}
"""
Properties by which MagicSchool connections can be ordered.
"""
enum MagicSchoolOrderField {
  INDX
  NAME
}
"""
MagicSchoolWhereInput is used for filtering MagicSchool objects.
Input was generated by ent.
"""
input MagicSchoolWhereInput {
  not: MagicSchoolWhereInput
  and: [MagicSchoolWhereInput!]
  or: [MagicSchoolWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  desc field predicates
  """
  desc: String
  descNEQ: String
  descIn: [String!]
  descNotIn: [String!]
  descGT: String
  descGTE: String
  descLT: String
  descLTE: String
  descContains: String
  descHasPrefix: String
  descHasSuffix: String
  descEqualFold: String
  descContainsFold: String
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "builder/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  abilityScores: [AbilityScore!]!
  alignments: [Alignment!]!
  classes: [Class!]!
  languages: [Language!]!
  magicSchools: [MagicSchool!]!
  races: [Race!]!
  skills: [Skill!]!
}
type Race implements Node {
  id: ID!
  indx: String!
  name: String!
  speed: Int!
  size: RaceSize!
  sizeDescription: String!
  age: String!
}
"""
Ordering options for Race connections
"""
input RaceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Races.
  """
  field: RaceOrderField!
}
"""
Properties by which Race connections can be ordered.
"""
enum RaceOrderField {
  INDX
  NAME
}
"""
RaceSize is enum for the field size
"""
enum RaceSize @goModel(model: "builder/ent/race.Size") {
  Tiny
  Small
  Medium
  Large
  Huge
  Gargantuan
}
"""
RaceWhereInput is used for filtering Race objects.
Input was generated by ent.
"""
input RaceWhereInput {
  not: RaceWhereInput
  and: [RaceWhereInput!]
  or: [RaceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  speed field predicates
  """
  speed: Int
  speedNEQ: Int
  speedIn: [Int!]
  speedNotIn: [Int!]
  speedGT: Int
  speedGTE: Int
  speedLT: Int
  speedLTE: Int
  """
  size field predicates
  """
  size: RaceSize
  sizeNEQ: RaceSize
  sizeIn: [RaceSize!]
  sizeNotIn: [RaceSize!]
  """
  size_description field predicates
  """
  sizeDescription: String
  sizeDescriptionNEQ: String
  sizeDescriptionIn: [String!]
  sizeDescriptionNotIn: [String!]
  sizeDescriptionGT: String
  sizeDescriptionGTE: String
  sizeDescriptionLT: String
  sizeDescriptionLTE: String
  sizeDescriptionContains: String
  sizeDescriptionHasPrefix: String
  sizeDescriptionHasSuffix: String
  sizeDescriptionEqualFold: String
  sizeDescriptionContainsFold: String
  """
  age field predicates
  """
  age: String
  ageNEQ: String
  ageIn: [String!]
  ageNotIn: [String!]
  ageGT: String
  ageGTE: String
  ageLT: String
  ageLTE: String
  ageContains: String
  ageHasPrefix: String
  ageHasSuffix: String
  ageEqualFold: String
  ageContainsFold: String
}
type Skill implements Node {
  id: ID!
  indx: String!
  name: String!
}
"""
Ordering options for Skill connections
"""
input SkillOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Skills.
  """
  field: SkillOrderField!
}
"""
Properties by which Skill connections can be ordered.
"""
enum SkillOrderField {
  INDX
  NAME
}
"""
SkillWhereInput is used for filtering Skill objects.
Input was generated by ent.
"""
input SkillWhereInput {
  not: SkillWhereInput
  and: [SkillWhereInput!]
  or: [SkillWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
UpdateAbilityScoreInput is used for update AbilityScore object.
Input was generated by ent.
"""
input UpdateAbilityScoreInput {
  indx: String
  name: String
  abbr: AbilityScoreAbbr
  desc: [String!]
  appendDesc: [String!]
}
"""
UpdateAlignmentInput is used for update Alignment object.
Input was generated by ent.
"""
input UpdateAlignmentInput {
  indx: String
  name: String
  desc: String
  abbr: String
}
"""
UpdateClassInput is used for update Class object.
Input was generated by ent.
"""
input UpdateClassInput {
  indx: String
  name: String
  hitDie: Int
}
"""
UpdateLanguageInput is used for update Language object.
Input was generated by ent.
"""
input UpdateLanguageInput {
  indx: String
  name: String
  type: LanguageType
  script: LanguageScript
}
"""
UpdateMagicSchoolInput is used for update MagicSchool object.
Input was generated by ent.
"""
input UpdateMagicSchoolInput {
  indx: String
  name: String
  desc: String
}
"""
UpdateRaceInput is used for update Race object.
Input was generated by ent.
"""
input UpdateRaceInput {
  indx: String
  name: String
  speed: Int
  size: RaceSize
  sizeDescription: String
  age: String
}
"""
UpdateSkillInput is used for update Skill object.
Input was generated by ent.
"""
input UpdateSkillInput {
  indx: String
  name: String
}
