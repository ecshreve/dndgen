package templates

var POP_TEMPLATE = `{{ define "pop" }}
// GENERATED BY seeder
package seeder

import (
	"context"
	"fmt"

	"github.com/ecshreve/dndgen/builder/ent"
	"github.com/ecshreve/dndgen/builder/utils"

	"github.com/charmbracelet/log"
)

{{ range . }}
// Seed{{ . }} seeds the {{ . }} entities from the JSON data files.
func Seed{{ . }}(ctx context.Context, client *ent.Client) error {
	fpath := "data/{{ . }}.json"
	var v []ent.{{ . }}

	if err := utils.LoadJSONFile(fpath, &v); err != nil {
		return fmt.Errorf("%w", err)
	}

	creates := make([]*ent.{{ . }}Create, len(v))
	for i, vv := range v {
		creates[i] = client.{{ . }}.Create().Set{{ . }}(&vv)
	}

	err := client.{{ . }}.CreateBulk(creates...).Exec(ctx)
	if err != nil {
		return fmt.Errorf("%w", err)
	}
	log.Info("{{ . }} bulk creation success")

	return nil
}
{{ end }}{{ end }}`

var DATA_MIGRATION_TEMPLATE = `// GENERATED BY seeder
package migratedata

import (
	"context"
	"fmt"

	"github.com/ecshreve/dndgen/builder/ent"
	"github.com/ecshreve/dndgen/builder/internal/seeder"

	"ariga.io/atlas/sql/migrate"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql/schema"
)

{{ range . }}
// Seed{{ .ObjName }}Migration creates the migration file for the {{ .ObjName }} entity.
func Seed{{ .ObjName }}Migration(ctx context.Context, dir *migrate.LocalDir) error {
	w := &schema.DirWriter{Dir: dir}
	client := ent.NewClient(ent.Driver(schema.NewWriteDriver(dialect.SQLite, w)))

	if err := seeder.Seed{{ .ObjName }}(ctx, client); err != nil {
		return fmt.Errorf("failed to seed {{ .ObjName }}: %w", err)
	}

	return w.FlushChange(
		"{{ .MigName }}",
		"{{ .MigComm }}",
	)
}
{{ end }}`
