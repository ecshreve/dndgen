// Code generated by ent, DO NOT EDIT.

package abilityscore

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the abilityscore type in the database.
	Label = "ability_score"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAbbr holds the string denoting the abbr field in the database.
	FieldAbbr = "abbr"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// Table holds the table name of the abilityscore in the database.
	Table = "ability_scores"
)

// Columns holds all SQL columns for abilityscore fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldAbbr,
	FieldDesc,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// Abbr defines the type for the "abbr" enum field.
type Abbr string

// Abbr values.
const (
	AbbrSTR Abbr = "STR"
	AbbrDEX Abbr = "DEX"
	AbbrCON Abbr = "CON"
	AbbrINT Abbr = "INT"
	AbbrWIS Abbr = "WIS"
	AbbrCHA Abbr = "CHA"
)

func (a Abbr) String() string {
	return string(a)
}

// AbbrValidator is a validator for the "abbr" field enum values. It is called by the builders before save.
func AbbrValidator(a Abbr) error {
	switch a {
	case AbbrSTR, AbbrDEX, AbbrCON, AbbrINT, AbbrWIS, AbbrCHA:
		return nil
	default:
		return fmt.Errorf("abilityscore: invalid enum value for abbr field: %q", a)
	}
}

// OrderOption defines the ordering options for the AbilityScore queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAbbr orders the results by the abbr field.
func ByAbbr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbbr, opts...).ToFunc()
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Abbr) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Abbr) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Abbr(str)
	if err := AbbrValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Abbr", str)
	}
	return nil
}
