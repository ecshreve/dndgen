// GENERATED BY seeder
package migratedata

import (
	"context"
	"fmt"

	"github.com/ecshreve/dndgen/builder/ent"
	"github.com/ecshreve/dndgen/builder/internal/seeder"

	"ariga.io/atlas/sql/migrate"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql/schema"
)

// SeedAbilityScoreMigration creates the migration file for the AbilityScore entity.
func SeedAbilityScoreMigration(ctx context.Context, dir *migrate.LocalDir) error {
	w := &schema.DirWriter{Dir: dir}
	client := ent.NewClient(ent.Driver(schema.NewWriteDriver(dialect.SQLite, w)))

	if err := seeder.SeedAbilityScore(ctx, client); err != nil {
		return fmt.Errorf("failed to seed AbilityScore: %w", err)
	}

	return w.FlushChange(
		"seed_ability_score",
		"Seed ability score.",
	)
}

// SeedAlignmentMigration creates the migration file for the Alignment entity.
func SeedAlignmentMigration(ctx context.Context, dir *migrate.LocalDir) error {
	w := &schema.DirWriter{Dir: dir}
	client := ent.NewClient(ent.Driver(schema.NewWriteDriver(dialect.SQLite, w)))

	if err := seeder.SeedAlignment(ctx, client); err != nil {
		return fmt.Errorf("failed to seed Alignment: %w", err)
	}

	return w.FlushChange(
		"seed_alignment",
		"Seed alignment.",
	)
}

// SeedClassMigration creates the migration file for the Class entity.
func SeedClassMigration(ctx context.Context, dir *migrate.LocalDir) error {
	w := &schema.DirWriter{Dir: dir}
	client := ent.NewClient(ent.Driver(schema.NewWriteDriver(dialect.SQLite, w)))

	if err := seeder.SeedClass(ctx, client); err != nil {
		return fmt.Errorf("failed to seed Class: %w", err)
	}

	return w.FlushChange(
		"seed_class",
		"Seed class.",
	)
}

// SeedRaceMigration creates the migration file for the Race entity.
func SeedRaceMigration(ctx context.Context, dir *migrate.LocalDir) error {
	w := &schema.DirWriter{Dir: dir}
	client := ent.NewClient(ent.Driver(schema.NewWriteDriver(dialect.SQLite, w)))

	if err := seeder.SeedRace(ctx, client); err != nil {
		return fmt.Errorf("failed to seed Race: %w", err)
	}

	return w.FlushChange(
		"seed_race",
		"Seed race.",
	)
}

// SeedLanguageMigration creates the migration file for the Language entity.
func SeedLanguageMigration(ctx context.Context, dir *migrate.LocalDir) error {
	w := &schema.DirWriter{Dir: dir}
	client := ent.NewClient(ent.Driver(schema.NewWriteDriver(dialect.SQLite, w)))

	if err := seeder.SeedLanguage(ctx, client); err != nil {
		return fmt.Errorf("failed to seed Language: %w", err)
	}

	return w.FlushChange(
		"seed_language",
		"Seed language.",
	)
}

// SeedSkillMigration creates the migration file for the Skill entity.
func SeedSkillMigration(ctx context.Context, dir *migrate.LocalDir) error {
	w := &schema.DirWriter{Dir: dir}
	client := ent.NewClient(ent.Driver(schema.NewWriteDriver(dialect.SQLite, w)))

	if err := seeder.SeedSkill(ctx, client); err != nil {
		return fmt.Errorf("failed to seed Skill: %w", err)
	}

	return w.FlushChange(
		"seed_skill",
		"Seed skill.",
	)
}

// SeedMagicSchoolMigration creates the migration file for the MagicSchool entity.
func SeedMagicSchoolMigration(ctx context.Context, dir *migrate.LocalDir) error {
	w := &schema.DirWriter{Dir: dir}
	client := ent.NewClient(ent.Driver(schema.NewWriteDriver(dialect.SQLite, w)))

	if err := seeder.SeedMagicSchool(ctx, client); err != nil {
		return fmt.Errorf("failed to seed MagicSchool: %w", err)
	}

	return w.FlushChange(
		"seed_magic_school",
		"Seed magic school.",
	)
}
