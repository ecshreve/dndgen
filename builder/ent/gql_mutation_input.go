// Code generated by ent, DO NOT EDIT.

package ent

// CreateCharacterInput represents a mutation input for creating characters.
type CreateCharacterInput struct {
	Name      string
	Level     *int
	Alignment *string
	RaceID    int
	ClassID   int
}

// Mutate applies the CreateCharacterInput on the CharacterMutation builder.
func (i *CreateCharacterInput) Mutate(m *CharacterMutation) {
	m.SetName(i.Name)
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	if v := i.Alignment; v != nil {
		m.SetAlignment(*v)
	}
	m.SetRaceID(i.RaceID)
	m.SetClassID(i.ClassID)
}

// SetInput applies the change-set in the CreateCharacterInput on the CharacterCreate builder.
func (c *CharacterCreate) SetInput(i CreateCharacterInput) *CharacterCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCharacterInput represents a mutation input for updating characters.
type UpdateCharacterInput struct {
	Name           *string
	Level          *int
	ClearAlignment bool
	Alignment      *string
	RaceID         *int
	ClassID        *int
}

// Mutate applies the UpdateCharacterInput on the CharacterMutation builder.
func (i *UpdateCharacterInput) Mutate(m *CharacterMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	if i.ClearAlignment {
		m.ClearAlignment()
	}
	if v := i.Alignment; v != nil {
		m.SetAlignment(*v)
	}
	if v := i.RaceID; v != nil {
		m.SetRaceID(*v)
	}
	if v := i.ClassID; v != nil {
		m.SetClassID(*v)
	}
}

// SetInput applies the change-set in the UpdateCharacterInput on the CharacterUpdate builder.
func (c *CharacterUpdate) SetInput(i UpdateCharacterInput) *CharacterUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCharacterInput on the CharacterUpdateOne builder.
func (c *CharacterUpdateOne) SetInput(i UpdateCharacterInput) *CharacterUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateClassInput represents a mutation input for creating classes.
type CreateClassInput struct {
	Name         string
	CharacterIDs []int
}

// Mutate applies the CreateClassInput on the ClassMutation builder.
func (i *CreateClassInput) Mutate(m *ClassMutation) {
	m.SetName(i.Name)
	if v := i.CharacterIDs; len(v) > 0 {
		m.AddCharacterIDs(v...)
	}
}

// SetInput applies the change-set in the CreateClassInput on the ClassCreate builder.
func (c *ClassCreate) SetInput(i CreateClassInput) *ClassCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateClassInput represents a mutation input for updating classes.
type UpdateClassInput struct {
	Name               *string
	ClearCharacters    bool
	AddCharacterIDs    []int
	RemoveCharacterIDs []int
}

// Mutate applies the UpdateClassInput on the ClassMutation builder.
func (i *UpdateClassInput) Mutate(m *ClassMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearCharacters {
		m.ClearCharacters()
	}
	if v := i.AddCharacterIDs; len(v) > 0 {
		m.AddCharacterIDs(v...)
	}
	if v := i.RemoveCharacterIDs; len(v) > 0 {
		m.RemoveCharacterIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateClassInput on the ClassUpdate builder.
func (c *ClassUpdate) SetInput(i UpdateClassInput) *ClassUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateClassInput on the ClassUpdateOne builder.
func (c *ClassUpdateOne) SetInput(i UpdateClassInput) *ClassUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRaceInput represents a mutation input for creating races.
type CreateRaceInput struct {
	Name         string
	CharacterIDs []int
}

// Mutate applies the CreateRaceInput on the RaceMutation builder.
func (i *CreateRaceInput) Mutate(m *RaceMutation) {
	m.SetName(i.Name)
	if v := i.CharacterIDs; len(v) > 0 {
		m.AddCharacterIDs(v...)
	}
}

// SetInput applies the change-set in the CreateRaceInput on the RaceCreate builder.
func (c *RaceCreate) SetInput(i CreateRaceInput) *RaceCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRaceInput represents a mutation input for updating races.
type UpdateRaceInput struct {
	Name               *string
	ClearCharacters    bool
	AddCharacterIDs    []int
	RemoveCharacterIDs []int
}

// Mutate applies the UpdateRaceInput on the RaceMutation builder.
func (i *UpdateRaceInput) Mutate(m *RaceMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearCharacters {
		m.ClearCharacters()
	}
	if v := i.AddCharacterIDs; len(v) > 0 {
		m.AddCharacterIDs(v...)
	}
	if v := i.RemoveCharacterIDs; len(v) > 0 {
		m.RemoveCharacterIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateRaceInput on the RaceUpdate builder.
func (c *RaceUpdate) SetInput(i UpdateRaceInput) *RaceUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRaceInput on the RaceUpdateOne builder.
func (c *RaceUpdateOne) SetInput(i UpdateRaceInput) *RaceUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
