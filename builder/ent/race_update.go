// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/builder/ent/predicate"
	"github.com/ecshreve/dndgen/builder/ent/race"
)

// RaceUpdate is the builder for updating Race entities.
type RaceUpdate struct {
	config
	hooks    []Hook
	mutation *RaceMutation
}

// Where appends a list predicates to the RaceUpdate builder.
func (ru *RaceUpdate) Where(ps ...predicate.Race) *RaceUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetIndx sets the "indx" field.
func (ru *RaceUpdate) SetIndx(s string) *RaceUpdate {
	ru.mutation.SetIndx(s)
	return ru
}

// SetNillableIndx sets the "indx" field if the given value is not nil.
func (ru *RaceUpdate) SetNillableIndx(s *string) *RaceUpdate {
	if s != nil {
		ru.SetIndx(*s)
	}
	return ru
}

// SetName sets the "name" field.
func (ru *RaceUpdate) SetName(s string) *RaceUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RaceUpdate) SetNillableName(s *string) *RaceUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetSpeed sets the "speed" field.
func (ru *RaceUpdate) SetSpeed(i int) *RaceUpdate {
	ru.mutation.ResetSpeed()
	ru.mutation.SetSpeed(i)
	return ru
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (ru *RaceUpdate) SetNillableSpeed(i *int) *RaceUpdate {
	if i != nil {
		ru.SetSpeed(*i)
	}
	return ru
}

// AddSpeed adds i to the "speed" field.
func (ru *RaceUpdate) AddSpeed(i int) *RaceUpdate {
	ru.mutation.AddSpeed(i)
	return ru
}

// SetSize sets the "size" field.
func (ru *RaceUpdate) SetSize(r race.Size) *RaceUpdate {
	ru.mutation.SetSize(r)
	return ru
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (ru *RaceUpdate) SetNillableSize(r *race.Size) *RaceUpdate {
	if r != nil {
		ru.SetSize(*r)
	}
	return ru
}

// SetSizeDescription sets the "size_description" field.
func (ru *RaceUpdate) SetSizeDescription(s string) *RaceUpdate {
	ru.mutation.SetSizeDescription(s)
	return ru
}

// SetNillableSizeDescription sets the "size_description" field if the given value is not nil.
func (ru *RaceUpdate) SetNillableSizeDescription(s *string) *RaceUpdate {
	if s != nil {
		ru.SetSizeDescription(*s)
	}
	return ru
}

// SetAge sets the "age" field.
func (ru *RaceUpdate) SetAge(s string) *RaceUpdate {
	ru.mutation.SetAge(s)
	return ru
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (ru *RaceUpdate) SetNillableAge(s *string) *RaceUpdate {
	if s != nil {
		ru.SetAge(*s)
	}
	return ru
}

// Mutation returns the RaceMutation object of the builder.
func (ru *RaceUpdate) Mutation() *RaceMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RaceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RaceUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RaceUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RaceUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RaceUpdate) check() error {
	if v, ok := ru.mutation.Indx(); ok {
		if err := race.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Race.indx": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Name(); ok {
		if err := race.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Race.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Speed(); ok {
		if err := race.SpeedValidator(v); err != nil {
			return &ValidationError{Name: "speed", err: fmt.Errorf(`ent: validator failed for field "Race.speed": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Size(); ok {
		if err := race.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "Race.size": %w`, err)}
		}
	}
	return nil
}

func (ru *RaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(race.Table, race.Columns, sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Indx(); ok {
		_spec.SetField(race.FieldIndx, field.TypeString, value)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(race.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Speed(); ok {
		_spec.SetField(race.FieldSpeed, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedSpeed(); ok {
		_spec.AddField(race.FieldSpeed, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Size(); ok {
		_spec.SetField(race.FieldSize, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.SizeDescription(); ok {
		_spec.SetField(race.FieldSizeDescription, field.TypeString, value)
	}
	if value, ok := ru.mutation.Age(); ok {
		_spec.SetField(race.FieldAge, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{race.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RaceUpdateOne is the builder for updating a single Race entity.
type RaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RaceMutation
}

// SetIndx sets the "indx" field.
func (ruo *RaceUpdateOne) SetIndx(s string) *RaceUpdateOne {
	ruo.mutation.SetIndx(s)
	return ruo
}

// SetNillableIndx sets the "indx" field if the given value is not nil.
func (ruo *RaceUpdateOne) SetNillableIndx(s *string) *RaceUpdateOne {
	if s != nil {
		ruo.SetIndx(*s)
	}
	return ruo
}

// SetName sets the "name" field.
func (ruo *RaceUpdateOne) SetName(s string) *RaceUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RaceUpdateOne) SetNillableName(s *string) *RaceUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetSpeed sets the "speed" field.
func (ruo *RaceUpdateOne) SetSpeed(i int) *RaceUpdateOne {
	ruo.mutation.ResetSpeed()
	ruo.mutation.SetSpeed(i)
	return ruo
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (ruo *RaceUpdateOne) SetNillableSpeed(i *int) *RaceUpdateOne {
	if i != nil {
		ruo.SetSpeed(*i)
	}
	return ruo
}

// AddSpeed adds i to the "speed" field.
func (ruo *RaceUpdateOne) AddSpeed(i int) *RaceUpdateOne {
	ruo.mutation.AddSpeed(i)
	return ruo
}

// SetSize sets the "size" field.
func (ruo *RaceUpdateOne) SetSize(r race.Size) *RaceUpdateOne {
	ruo.mutation.SetSize(r)
	return ruo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (ruo *RaceUpdateOne) SetNillableSize(r *race.Size) *RaceUpdateOne {
	if r != nil {
		ruo.SetSize(*r)
	}
	return ruo
}

// SetSizeDescription sets the "size_description" field.
func (ruo *RaceUpdateOne) SetSizeDescription(s string) *RaceUpdateOne {
	ruo.mutation.SetSizeDescription(s)
	return ruo
}

// SetNillableSizeDescription sets the "size_description" field if the given value is not nil.
func (ruo *RaceUpdateOne) SetNillableSizeDescription(s *string) *RaceUpdateOne {
	if s != nil {
		ruo.SetSizeDescription(*s)
	}
	return ruo
}

// SetAge sets the "age" field.
func (ruo *RaceUpdateOne) SetAge(s string) *RaceUpdateOne {
	ruo.mutation.SetAge(s)
	return ruo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (ruo *RaceUpdateOne) SetNillableAge(s *string) *RaceUpdateOne {
	if s != nil {
		ruo.SetAge(*s)
	}
	return ruo
}

// Mutation returns the RaceMutation object of the builder.
func (ruo *RaceUpdateOne) Mutation() *RaceMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RaceUpdate builder.
func (ruo *RaceUpdateOne) Where(ps ...predicate.Race) *RaceUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RaceUpdateOne) Select(field string, fields ...string) *RaceUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Race entity.
func (ruo *RaceUpdateOne) Save(ctx context.Context) (*Race, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RaceUpdateOne) SaveX(ctx context.Context) *Race {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RaceUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RaceUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RaceUpdateOne) check() error {
	if v, ok := ruo.mutation.Indx(); ok {
		if err := race.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Race.indx": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Name(); ok {
		if err := race.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Race.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Speed(); ok {
		if err := race.SpeedValidator(v); err != nil {
			return &ValidationError{Name: "speed", err: fmt.Errorf(`ent: validator failed for field "Race.speed": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Size(); ok {
		if err := race.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "Race.size": %w`, err)}
		}
	}
	return nil
}

func (ruo *RaceUpdateOne) sqlSave(ctx context.Context) (_node *Race, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(race.Table, race.Columns, sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Race.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, race.FieldID)
		for _, f := range fields {
			if !race.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != race.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Indx(); ok {
		_spec.SetField(race.FieldIndx, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(race.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Speed(); ok {
		_spec.SetField(race.FieldSpeed, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedSpeed(); ok {
		_spec.AddField(race.FieldSpeed, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Size(); ok {
		_spec.SetField(race.FieldSize, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.SizeDescription(); ok {
		_spec.SetField(race.FieldSizeDescription, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Age(); ok {
		_spec.SetField(race.FieldAge, field.TypeString, value)
	}
	_node = &Race{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{race.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
