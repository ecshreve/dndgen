// Code generated by ent, DO NOT EDIT.

package character

import (
	"builder/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Character {
	return predicate.Character(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Character {
	return predicate.Character(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Character {
	return predicate.Character(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Character {
	return predicate.Character(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Character {
	return predicate.Character(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Character {
	return predicate.Character(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Character {
	return predicate.Character(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Character {
	return predicate.Character(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Character {
	return predicate.Character(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Character {
	return predicate.Character(sql.FieldEQ(FieldName, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int) predicate.Character {
	return predicate.Character(sql.FieldEQ(FieldLevel, v))
}

// Alignment applies equality check predicate on the "alignment" field. It's identical to AlignmentEQ.
func Alignment(v string) predicate.Character {
	return predicate.Character(sql.FieldEQ(FieldAlignment, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Character {
	return predicate.Character(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Character {
	return predicate.Character(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Character {
	return predicate.Character(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Character {
	return predicate.Character(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Character {
	return predicate.Character(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Character {
	return predicate.Character(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Character {
	return predicate.Character(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Character {
	return predicate.Character(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Character {
	return predicate.Character(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Character {
	return predicate.Character(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Character {
	return predicate.Character(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Character {
	return predicate.Character(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Character {
	return predicate.Character(sql.FieldContainsFold(FieldName, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int) predicate.Character {
	return predicate.Character(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int) predicate.Character {
	return predicate.Character(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int) predicate.Character {
	return predicate.Character(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int) predicate.Character {
	return predicate.Character(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int) predicate.Character {
	return predicate.Character(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int) predicate.Character {
	return predicate.Character(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int) predicate.Character {
	return predicate.Character(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int) predicate.Character {
	return predicate.Character(sql.FieldLTE(FieldLevel, v))
}

// AlignmentEQ applies the EQ predicate on the "alignment" field.
func AlignmentEQ(v string) predicate.Character {
	return predicate.Character(sql.FieldEQ(FieldAlignment, v))
}

// AlignmentNEQ applies the NEQ predicate on the "alignment" field.
func AlignmentNEQ(v string) predicate.Character {
	return predicate.Character(sql.FieldNEQ(FieldAlignment, v))
}

// AlignmentIn applies the In predicate on the "alignment" field.
func AlignmentIn(vs ...string) predicate.Character {
	return predicate.Character(sql.FieldIn(FieldAlignment, vs...))
}

// AlignmentNotIn applies the NotIn predicate on the "alignment" field.
func AlignmentNotIn(vs ...string) predicate.Character {
	return predicate.Character(sql.FieldNotIn(FieldAlignment, vs...))
}

// AlignmentGT applies the GT predicate on the "alignment" field.
func AlignmentGT(v string) predicate.Character {
	return predicate.Character(sql.FieldGT(FieldAlignment, v))
}

// AlignmentGTE applies the GTE predicate on the "alignment" field.
func AlignmentGTE(v string) predicate.Character {
	return predicate.Character(sql.FieldGTE(FieldAlignment, v))
}

// AlignmentLT applies the LT predicate on the "alignment" field.
func AlignmentLT(v string) predicate.Character {
	return predicate.Character(sql.FieldLT(FieldAlignment, v))
}

// AlignmentLTE applies the LTE predicate on the "alignment" field.
func AlignmentLTE(v string) predicate.Character {
	return predicate.Character(sql.FieldLTE(FieldAlignment, v))
}

// AlignmentContains applies the Contains predicate on the "alignment" field.
func AlignmentContains(v string) predicate.Character {
	return predicate.Character(sql.FieldContains(FieldAlignment, v))
}

// AlignmentHasPrefix applies the HasPrefix predicate on the "alignment" field.
func AlignmentHasPrefix(v string) predicate.Character {
	return predicate.Character(sql.FieldHasPrefix(FieldAlignment, v))
}

// AlignmentHasSuffix applies the HasSuffix predicate on the "alignment" field.
func AlignmentHasSuffix(v string) predicate.Character {
	return predicate.Character(sql.FieldHasSuffix(FieldAlignment, v))
}

// AlignmentIsNil applies the IsNil predicate on the "alignment" field.
func AlignmentIsNil() predicate.Character {
	return predicate.Character(sql.FieldIsNull(FieldAlignment))
}

// AlignmentNotNil applies the NotNil predicate on the "alignment" field.
func AlignmentNotNil() predicate.Character {
	return predicate.Character(sql.FieldNotNull(FieldAlignment))
}

// AlignmentEqualFold applies the EqualFold predicate on the "alignment" field.
func AlignmentEqualFold(v string) predicate.Character {
	return predicate.Character(sql.FieldEqualFold(FieldAlignment, v))
}

// AlignmentContainsFold applies the ContainsFold predicate on the "alignment" field.
func AlignmentContainsFold(v string) predicate.Character {
	return predicate.Character(sql.FieldContainsFold(FieldAlignment, v))
}

// HasRace applies the HasEdge predicate on the "race" edge.
func HasRace() predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RaceTable, RaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRaceWith applies the HasEdge predicate on the "race" edge with a given conditions (other predicates).
func HasRaceWith(preds ...predicate.Race) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		step := newRaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClass applies the HasEdge predicate on the "class" edge.
func HasClass() predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassWith applies the HasEdge predicate on the "class" edge with a given conditions (other predicates).
func HasClassWith(preds ...predicate.Class) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		step := newClassStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Character) predicate.Character {
	return predicate.Character(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Character) predicate.Character {
	return predicate.Character(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Character) predicate.Character {
	return predicate.Character(sql.NotPredicates(p))
}
