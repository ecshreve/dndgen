// Code generated by ent, DO NOT EDIT.

package race

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the race type in the database.
	Label = "race"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSpeed holds the string denoting the speed field in the database.
	FieldSpeed = "speed"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldSizeDescription holds the string denoting the size_description field in the database.
	FieldSizeDescription = "size_description"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// Table holds the table name of the race in the database.
	Table = "races"
)

// Columns holds all SQL columns for race fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldSpeed,
	FieldSize,
	FieldSizeDescription,
	FieldAge,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SpeedValidator is a validator for the "speed" field. It is called by the builders before save.
	SpeedValidator func(int) error
)

// Size defines the type for the "size" enum field.
type Size string

// Size values.
const (
	SizeTiny       Size = "Tiny"
	SizeSmall      Size = "Small"
	SizeMedium     Size = "Medium"
	SizeLarge      Size = "Large"
	SizeHuge       Size = "Huge"
	SizeGargantuan Size = "Gargantuan"
)

func (s Size) String() string {
	return string(s)
}

// SizeValidator is a validator for the "size" field enum values. It is called by the builders before save.
func SizeValidator(s Size) error {
	switch s {
	case SizeTiny, SizeSmall, SizeMedium, SizeLarge, SizeHuge, SizeGargantuan:
		return nil
	default:
		return fmt.Errorf("race: invalid enum value for size field: %q", s)
	}
}

// OrderOption defines the ordering options for the Race queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySpeed orders the results by the speed field.
func BySpeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpeed, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// BySizeDescription orders the results by the size_description field.
func BySizeDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeDescription, opts...).ToFunc()
}

// ByAge orders the results by the age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Size) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Size) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Size(str)
	if err := SizeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Size", str)
	}
	return nil
}
