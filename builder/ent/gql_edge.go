// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (c *Character) Race(ctx context.Context) (*Race, error) {
	result, err := c.Edges.RaceOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryRace().Only(ctx)
	}
	return result, err
}

func (c *Character) Class(ctx context.Context) (*Class, error) {
	result, err := c.Edges.ClassOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryClass().Only(ctx)
	}
	return result, err
}

func (c *Class) Characters(ctx context.Context) (result []*Character, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCharacters(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CharactersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCharacters().All(ctx)
	}
	return result, err
}

func (r *Race) Characters(ctx context.Context) (result []*Character, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedCharacters(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.CharactersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryCharacters().All(ctx)
	}
	return result, err
}
