// Code generated by ent, DO NOT EDIT.

package language

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the language type in the database.
	Label = "language"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldScript holds the string denoting the script field in the database.
	FieldScript = "script"
	// Table holds the table name of the language in the database.
	Table = "languages"
)

// Columns holds all SQL columns for language fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldType,
	FieldScript,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeSTANDARD Type = "STANDARD"
	TypeEXOTIC   Type = "EXOTIC"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeSTANDARD, TypeEXOTIC:
		return nil
	default:
		return fmt.Errorf("language: invalid enum value for type field: %q", _type)
	}
}

// Script defines the type for the "script" enum field.
type Script string

// Script values.
const (
	ScriptCommon           Script = "Common"
	ScriptDwarvish         Script = "Dwarvish"
	ScriptElvish           Script = "Elvish"
	ScriptGiant            Script = "Giant"
	ScriptGnomish          Script = "Gnomish"
	ScriptGoblin           Script = "Goblin"
	ScriptHalfling         Script = "Halfling"
	ScriptOrc              Script = "Orc"
	ScriptAbyssal          Script = "Abyssal"
	ScriptCelestial        Script = "Celestial"
	ScriptDraconic         Script = "Draconic"
	ScriptDrowSignLanguage Script = "Drow Sign Language"
	ScriptInfernal         Script = "Infernal"
	ScriptPrimordial       Script = "Primordial"
	ScriptSylvan           Script = "Sylvan"
	ScriptUndercommon      Script = "Undercommon"
	ScriptOther            Script = "Other"
)

func (s Script) String() string {
	return string(s)
}

// ScriptValidator is a validator for the "script" field enum values. It is called by the builders before save.
func ScriptValidator(s Script) error {
	switch s {
	case ScriptCommon, ScriptDwarvish, ScriptElvish, ScriptGiant, ScriptGnomish, ScriptGoblin, ScriptHalfling, ScriptOrc, ScriptAbyssal, ScriptCelestial, ScriptDraconic, ScriptDrowSignLanguage, ScriptInfernal, ScriptPrimordial, ScriptSylvan, ScriptUndercommon, ScriptOther:
		return nil
	default:
		return fmt.Errorf("language: invalid enum value for script field: %q", s)
	}
}

// OrderOption defines the ordering options for the Language queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByScript orders the results by the script field.
func ByScript(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScript, opts...).ToFunc()
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Script) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Script) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Script(str)
	if err := ScriptValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Script", str)
	}
	return nil
}
