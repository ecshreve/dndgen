//go:build ignore
// +build ignore

package main

import (
	"os"
	"text/template"

	"github.com/charmbracelet/log"
)

var TypesToPopulate = []string{
	"AbilityScore",
	"Alignment",
	"Class",
	"Race",
	"Skill",
	"Language",
	// "DamageType",
	// "WeaponProperty",
	"MagicSchool",
	// "RuleSection",
	// "Rule",
	// "Subrace",
	// "Trait",
	// "Coin",
}

var POP_TEMPLATE = `{{ define "pop" }}
{{ range . }}
// Seed{{ . }} seeds the {{ . }} entities from the JSON data files.
func Seed{{ . }}(ctx context.Context, client *ent.Client) error {
	fpath := "data/{{ . }}.json"
	var v []ent.{{ . }}

	if err := utils.LoadJSONFile(fpath, &v); err != nil {
		return fmt.Errorf("%w", err)
	}

	creates := make([]*ent.{{ . }}Create, len(v))
	for i, vv := range v {
		creates[i] = client.{{ . }}.Create().Set{{ . }}(&vv)
	}

	created, err := client.{{ . }}.CreateBulk(creates...).Save(ctx)
	if err != nil {
		return fmt.Errorf("%w", err)
	}
	log.Info("{{ . }} bulk creation success", "created", len(created))

	return nil
}
{{ end }}{{ end }}`

var SEED_ALL_TEMPLATE = `// GENERATED BY seeder
package seeder

import (
	"context"
	"fmt"

	"builder/ent"
	"builder/utils"

	"github.com/charmbracelet/log"
)

func SeedAll(ctx context.Context, client *ent.Client) error {
	seedFns := []func(ctx context.Context, client *ent.Client) error{
		{{ range . }}Seed{{ . }},{{ end }}
	}

	for _, fn := range seedFns {
		err := fn(ctx, client)
		if err != nil {
			return fmt.Errorf("%w", err)
		}
	}

	return nil
}
{{ template "pop" . }}
`

func main() {
	// Create the output file.
	ofile, err := os.Create("seeders_gen.go")
	if err != nil {
		log.Fatal(err)
	}
	defer ofile.Close()

	t := template.Must(template.New("pop").Parse(POP_TEMPLATE))
	t.New("seed_all").Parse(SEED_ALL_TEMPLATE)
	if err := t.ExecuteTemplate(ofile, "seed_all", TypesToPopulate); err != nil {
		log.Fatal(err)
	}
}
