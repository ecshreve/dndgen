// GENERATED BY seeder
package seeder

import (
	"context"
	"fmt"

	"builder/ent"
	"builder/utils"
	
	"github.com/charmbracelet/log"
)

// SeedAbilityScore seeds the AbilityScore entities from the JSON data files.
func SeedAbilityScore(ctx context.Context, client *ent.Client) ([]*ent.AbilityScore, error) {
	fpath := "data/AbilityScore.json"
	var v []ent.AbilityScore

	if err := utils.LoadJSONFile(fpath, &v); err != nil {
		return nil, fmt.Errorf("LoadJSONFile: %w", err)
	}

	creates := make([]*ent.AbilityScoreCreate, len(v))
	for i, vv := range v {
		creates[i] = client.AbilityScore.Create().SetAbilityScore(&vv)
	}

	created, err := client.AbilityScore.CreateBulk(creates...).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("CreateBulk: %w", err)
	}
	log.Info("AbilityScore bulk creation success", "created", len(created))

	return created, nil
}

// SeedAlignment seeds the Alignment entities from the JSON data files.
func SeedAlignment(ctx context.Context, client *ent.Client) ([]*ent.Alignment, error) {
	fpath := "data/Alignment.json"
	var v []ent.Alignment

	if err := utils.LoadJSONFile(fpath, &v); err != nil {
		return nil, fmt.Errorf("LoadJSONFile: %w", err)
	}

	creates := make([]*ent.AlignmentCreate, len(v))
	for i, vv := range v {
		creates[i] = client.Alignment.Create().SetAlignment(&vv)
	}

	created, err := client.Alignment.CreateBulk(creates...).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("CreateBulk: %w", err)
	}
	log.Info("Alignment bulk creation success", "created", len(created))

	return created, nil
}

// SeedClass seeds the Class entities from the JSON data files.
func SeedClass(ctx context.Context, client *ent.Client) ([]*ent.Class, error) {
	fpath := "data/Class.json"
	var v []ent.Class

	if err := utils.LoadJSONFile(fpath, &v); err != nil {
		return nil, fmt.Errorf("LoadJSONFile: %w", err)
	}

	creates := make([]*ent.ClassCreate, len(v))
	for i, vv := range v {
		creates[i] = client.Class.Create().SetClass(&vv)
	}

	created, err := client.Class.CreateBulk(creates...).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("CreateBulk: %w", err)
	}
	log.Info("Class bulk creation success", "created", len(created))

	return created, nil
}

// SeedRace seeds the Race entities from the JSON data files.
func SeedRace(ctx context.Context, client *ent.Client) ([]*ent.Race, error) {
	fpath := "data/Race.json"
	var v []ent.Race

	if err := utils.LoadJSONFile(fpath, &v); err != nil {
		return nil, fmt.Errorf("LoadJSONFile: %w", err)
	}

	creates := make([]*ent.RaceCreate, len(v))
	for i, vv := range v {
		creates[i] = client.Race.Create().SetRace(&vv)
	}

	created, err := client.Race.CreateBulk(creates...).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("CreateBulk: %w", err)
	}
	log.Info("Race bulk creation success", "created", len(created))

	return created, nil
}

