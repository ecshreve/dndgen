// GENERATED BY popgen
// DO NOT EDIT
package popper

import (
	"context"
	"fmt"

	"github.com/ecshreve/dndgen/ent"
	"github.com/ecshreve/dndgen/internal/utils"
	
	"github.com/charmbracelet/log"
)

// PopulateAll populates all the entities from the JSON data files.
func (p *Popper) PopulateAll(ctx context.Context) error {
	{{ range . }}
	if _, err := p.Populate{{ . }}(ctx); err != nil {
		return err
	}
	{{ end }}
	return nil
}

{{ range . }}
// Populate{{ . }} populates the {{ . }} entities from the JSON data files.
func (p *Popper) Populate{{ . }}(ctx context.Context) ([]*ent.{{ . }}, error) {
	fpath := fmt.Sprintf("%s/{{ . }}.json", p.DataDir)
	var v []ent.{{ . }}

	if err := utils.LoadJSONFile(fpath, &v); err != nil {
		return nil, fmt.Errorf("LoadJSONFile: %w", err)
	}

	creates := make([]*ent.{{ . }}Create, len(v))
	for i, vv := range v {
		creates[i] = p.Client.{{ . }}.Create().Set{{ . }}(&vv)
	}

	created, err := p.Client.{{ . }}.CreateBulk(creates...).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("CreateBulk: %w", err)
	}
	log.Info("bulk creation success", "created", len(created), "entity", "{{ . }}")

	for _, c := range created {
		p.IdToIndx[c.ID] = c.Indx
		p.IndxToId[c.Indx] = c.ID
	}

	p.Populate{{ . }}Edges(ctx,v)

	return created, nil
}
{{ end }}