// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/damage"
	"github.com/ecshreve/dndgen/ent/weapon"
)

// Weapon is the model entity for the Weapon schema.
type Weapon struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WeaponCategory holds the value of the "weapon_category" field.
	WeaponCategory weapon.WeaponCategory `json:"weapon_category,omitempty"`
	// WeaponSubcategory holds the value of the "weapon_subcategory" field.
	WeaponSubcategory weapon.WeaponSubcategory `json:"weapon_subcategory,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WeaponQuery when eager-loading is set.
	Edges         WeaponEdges `json:"-"`
	weapon_damage *int
	selectValues  sql.SelectValues
}

// WeaponEdges holds the relations/edges for other nodes in the graph.
type WeaponEdges struct {
	// Damage holds the value of the damage edge.
	Damage *Damage `json:"damage,omitempty"`
	// WeaponProperties holds the value of the weapon_properties edge.
	WeaponProperties []*Property `json:"weapon_properties,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedWeaponProperties map[string][]*Property
}

// DamageOrErr returns the Damage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WeaponEdges) DamageOrErr() (*Damage, error) {
	if e.Damage != nil {
		return e.Damage, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: damage.Label}
	}
	return nil, &NotLoadedError{edge: "damage"}
}

// WeaponPropertiesOrErr returns the WeaponProperties value or an error if the edge
// was not loaded in eager-loading.
func (e WeaponEdges) WeaponPropertiesOrErr() ([]*Property, error) {
	if e.loadedTypes[1] {
		return e.WeaponProperties, nil
	}
	return nil, &NotLoadedError{edge: "weapon_properties"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Weapon) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case weapon.FieldID:
			values[i] = new(sql.NullInt64)
		case weapon.FieldWeaponCategory, weapon.FieldWeaponSubcategory:
			values[i] = new(sql.NullString)
		case weapon.ForeignKeys[0]: // weapon_damage
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Weapon fields.
func (w *Weapon) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case weapon.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case weapon.FieldWeaponCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field weapon_category", values[i])
			} else if value.Valid {
				w.WeaponCategory = weapon.WeaponCategory(value.String)
			}
		case weapon.FieldWeaponSubcategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field weapon_subcategory", values[i])
			} else if value.Valid {
				w.WeaponSubcategory = weapon.WeaponSubcategory(value.String)
			}
		case weapon.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field weapon_damage", value)
			} else if value.Valid {
				w.weapon_damage = new(int)
				*w.weapon_damage = int(value.Int64)
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Weapon.
// This includes values selected through modifiers, order, etc.
func (w *Weapon) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryDamage queries the "damage" edge of the Weapon entity.
func (w *Weapon) QueryDamage() *DamageQuery {
	return NewWeaponClient(w.config).QueryDamage(w)
}

// QueryWeaponProperties queries the "weapon_properties" edge of the Weapon entity.
func (w *Weapon) QueryWeaponProperties() *PropertyQuery {
	return NewWeaponClient(w.config).QueryWeaponProperties(w)
}

// Update returns a builder for updating this Weapon.
// Note that you need to call Weapon.Unwrap() before calling this method if this Weapon
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Weapon) Update() *WeaponUpdateOne {
	return NewWeaponClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Weapon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Weapon) Unwrap() *Weapon {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Weapon is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Weapon) String() string {
	var builder strings.Builder
	builder.WriteString("Weapon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("weapon_category=")
	builder.WriteString(fmt.Sprintf("%v", w.WeaponCategory))
	builder.WriteString(", ")
	builder.WriteString("weapon_subcategory=")
	builder.WriteString(fmt.Sprintf("%v", w.WeaponSubcategory))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (w *Weapon) MarshalJSON() ([]byte, error) {
	type Alias Weapon
	return json.Marshal(&struct {
		*Alias
		WeaponEdges
	}{
		Alias:       (*Alias)(w),
		WeaponEdges: w.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (w *Weapon) UnmarshalJSON(data []byte) error {
	type Alias Weapon
	aux := &struct {
		*Alias
		WeaponEdges
	}{
		Alias: (*Alias)(w),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	w.Edges = aux.WeaponEdges
	return nil
}

func (wc *WeaponCreate) SetWeapon(input *Weapon) *WeaponCreate {
	wc.SetWeaponCategory(input.WeaponCategory)
	wc.SetWeaponSubcategory(input.WeaponSubcategory)
	return wc
}

// NamedWeaponProperties returns the WeaponProperties named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Weapon) NamedWeaponProperties(name string) ([]*Property, error) {
	if w.Edges.namedWeaponProperties == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedWeaponProperties[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Weapon) appendNamedWeaponProperties(name string, edges ...*Property) {
	if w.Edges.namedWeaponProperties == nil {
		w.Edges.namedWeaponProperties = make(map[string][]*Property)
	}
	if len(edges) == 0 {
		w.Edges.namedWeaponProperties[name] = []*Property{}
	} else {
		w.Edges.namedWeaponProperties[name] = append(w.Edges.namedWeaponProperties[name], edges...)
	}
}

// Weapons is a parsable slice of Weapon.
type Weapons []*Weapon
