// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/weapon"
)

// Weapon is the model entity for the Weapon schema.
type Weapon struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Properties holds the value of the "properties" field.
	Properties string `json:"properties,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WeaponQuery when eager-loading is set.
	Edges        WeaponEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WeaponEdges holds the relations/edges for other nodes in the graph.
type WeaponEdges struct {
	// Range holds the value of the range edge.
	Range []*WeaponRange `json:"range,omitempty"`
	// Damage holds the value of the damage edge.
	Damage []*WeaponDamage `json:"damage,omitempty"`
	// TwoHandedDamage holds the value of the two_handed_damage edge.
	TwoHandedDamage []*WeaponDamage `json:"two_handed_damage,omitempty"`
	// Equipment holds the value of the equipment edge.
	Equipment []*Equipment `json:"equipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedRange           map[string][]*WeaponRange
	namedDamage          map[string][]*WeaponDamage
	namedTwoHandedDamage map[string][]*WeaponDamage
	namedEquipment       map[string][]*Equipment
}

// RangeOrErr returns the Range value or an error if the edge
// was not loaded in eager-loading.
func (e WeaponEdges) RangeOrErr() ([]*WeaponRange, error) {
	if e.loadedTypes[0] {
		return e.Range, nil
	}
	return nil, &NotLoadedError{edge: "range"}
}

// DamageOrErr returns the Damage value or an error if the edge
// was not loaded in eager-loading.
func (e WeaponEdges) DamageOrErr() ([]*WeaponDamage, error) {
	if e.loadedTypes[1] {
		return e.Damage, nil
	}
	return nil, &NotLoadedError{edge: "damage"}
}

// TwoHandedDamageOrErr returns the TwoHandedDamage value or an error if the edge
// was not loaded in eager-loading.
func (e WeaponEdges) TwoHandedDamageOrErr() ([]*WeaponDamage, error) {
	if e.loadedTypes[2] {
		return e.TwoHandedDamage, nil
	}
	return nil, &NotLoadedError{edge: "two_handed_damage"}
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading.
func (e WeaponEdges) EquipmentOrErr() ([]*Equipment, error) {
	if e.loadedTypes[3] {
		return e.Equipment, nil
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Weapon) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case weapon.FieldID:
			values[i] = new(sql.NullInt64)
		case weapon.FieldProperties:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Weapon fields.
func (w *Weapon) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case weapon.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case weapon.FieldProperties:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field properties", values[i])
			} else if value.Valid {
				w.Properties = value.String
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Weapon.
// This includes values selected through modifiers, order, etc.
func (w *Weapon) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryRange queries the "range" edge of the Weapon entity.
func (w *Weapon) QueryRange() *WeaponRangeQuery {
	return NewWeaponClient(w.config).QueryRange(w)
}

// QueryDamage queries the "damage" edge of the Weapon entity.
func (w *Weapon) QueryDamage() *WeaponDamageQuery {
	return NewWeaponClient(w.config).QueryDamage(w)
}

// QueryTwoHandedDamage queries the "two_handed_damage" edge of the Weapon entity.
func (w *Weapon) QueryTwoHandedDamage() *WeaponDamageQuery {
	return NewWeaponClient(w.config).QueryTwoHandedDamage(w)
}

// QueryEquipment queries the "equipment" edge of the Weapon entity.
func (w *Weapon) QueryEquipment() *EquipmentQuery {
	return NewWeaponClient(w.config).QueryEquipment(w)
}

// Update returns a builder for updating this Weapon.
// Note that you need to call Weapon.Unwrap() before calling this method if this Weapon
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Weapon) Update() *WeaponUpdateOne {
	return NewWeaponClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Weapon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Weapon) Unwrap() *Weapon {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Weapon is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Weapon) String() string {
	var builder strings.Builder
	builder.WriteString("Weapon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("properties=")
	builder.WriteString(w.Properties)
	builder.WriteByte(')')
	return builder.String()
}

// NamedRange returns the Range named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Weapon) NamedRange(name string) ([]*WeaponRange, error) {
	if w.Edges.namedRange == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedRange[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Weapon) appendNamedRange(name string, edges ...*WeaponRange) {
	if w.Edges.namedRange == nil {
		w.Edges.namedRange = make(map[string][]*WeaponRange)
	}
	if len(edges) == 0 {
		w.Edges.namedRange[name] = []*WeaponRange{}
	} else {
		w.Edges.namedRange[name] = append(w.Edges.namedRange[name], edges...)
	}
}

// NamedDamage returns the Damage named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Weapon) NamedDamage(name string) ([]*WeaponDamage, error) {
	if w.Edges.namedDamage == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedDamage[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Weapon) appendNamedDamage(name string, edges ...*WeaponDamage) {
	if w.Edges.namedDamage == nil {
		w.Edges.namedDamage = make(map[string][]*WeaponDamage)
	}
	if len(edges) == 0 {
		w.Edges.namedDamage[name] = []*WeaponDamage{}
	} else {
		w.Edges.namedDamage[name] = append(w.Edges.namedDamage[name], edges...)
	}
}

// NamedTwoHandedDamage returns the TwoHandedDamage named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Weapon) NamedTwoHandedDamage(name string) ([]*WeaponDamage, error) {
	if w.Edges.namedTwoHandedDamage == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedTwoHandedDamage[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Weapon) appendNamedTwoHandedDamage(name string, edges ...*WeaponDamage) {
	if w.Edges.namedTwoHandedDamage == nil {
		w.Edges.namedTwoHandedDamage = make(map[string][]*WeaponDamage)
	}
	if len(edges) == 0 {
		w.Edges.namedTwoHandedDamage[name] = []*WeaponDamage{}
	} else {
		w.Edges.namedTwoHandedDamage[name] = append(w.Edges.namedTwoHandedDamage[name], edges...)
	}
}

// NamedEquipment returns the Equipment named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Weapon) NamedEquipment(name string) ([]*Equipment, error) {
	if w.Edges.namedEquipment == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedEquipment[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Weapon) appendNamedEquipment(name string, edges ...*Equipment) {
	if w.Edges.namedEquipment == nil {
		w.Edges.namedEquipment = make(map[string][]*Equipment)
	}
	if len(edges) == 0 {
		w.Edges.namedEquipment[name] = []*Equipment{}
	} else {
		w.Edges.namedEquipment[name] = append(w.Edges.namedEquipment[name], edges...)
	}
}

// Weapons is a parsable slice of Weapon.
type Weapons []*Weapon
