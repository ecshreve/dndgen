// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/damagetype"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/weapon"
)

// Weapon is the model entity for the Weapon schema.
type Weapon struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WeaponCategory holds the value of the "weapon_category" field.
	WeaponCategory weapon.WeaponCategory `json:"weapon_category,omitempty"`
	// WeaponSubcategory holds the value of the "weapon_subcategory" field.
	WeaponSubcategory weapon.WeaponSubcategory `json:"weapon_subcategory,omitempty"`
	// RangeNormal holds the value of the "range_normal" field.
	RangeNormal int `json:"range_normal,omitempty"`
	// RangeLong holds the value of the "range_long" field.
	RangeLong int `json:"range_long,omitempty"`
	// ThrowRangeNormal holds the value of the "throw_range_normal" field.
	ThrowRangeNormal int `json:"throw_range_normal,omitempty"`
	// ThrowRangeLong holds the value of the "throw_range_long" field.
	ThrowRangeLong int `json:"throw_range_long,omitempty"`
	// DamageDice holds the value of the "damage_dice" field.
	DamageDice string `json:"damage_dice,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WeaponQuery when eager-loading is set.
	Edges              WeaponEdges `json:"-"`
	equipment_weapon   *int
	weapon_damage_type *int
	selectValues       sql.SelectValues
}

// WeaponEdges holds the relations/edges for other nodes in the graph.
type WeaponEdges struct {
	// Properties holds the value of the properties edge.
	Properties []*Property `json:"properties,omitempty"`
	// DamageType holds the value of the damage_type edge.
	DamageType *DamageType `json:"damage_type,omitempty"`
	// Equipment holds the value of the equipment edge.
	Equipment *Equipment `json:"equipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedProperties map[string][]*Property
}

// PropertiesOrErr returns the Properties value or an error if the edge
// was not loaded in eager-loading.
func (e WeaponEdges) PropertiesOrErr() ([]*Property, error) {
	if e.loadedTypes[0] {
		return e.Properties, nil
	}
	return nil, &NotLoadedError{edge: "properties"}
}

// DamageTypeOrErr returns the DamageType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WeaponEdges) DamageTypeOrErr() (*DamageType, error) {
	if e.DamageType != nil {
		return e.DamageType, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: damagetype.Label}
	}
	return nil, &NotLoadedError{edge: "damage_type"}
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WeaponEdges) EquipmentOrErr() (*Equipment, error) {
	if e.Equipment != nil {
		return e.Equipment, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: equipment.Label}
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Weapon) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case weapon.FieldID, weapon.FieldRangeNormal, weapon.FieldRangeLong, weapon.FieldThrowRangeNormal, weapon.FieldThrowRangeLong:
			values[i] = new(sql.NullInt64)
		case weapon.FieldWeaponCategory, weapon.FieldWeaponSubcategory, weapon.FieldDamageDice:
			values[i] = new(sql.NullString)
		case weapon.ForeignKeys[0]: // equipment_weapon
			values[i] = new(sql.NullInt64)
		case weapon.ForeignKeys[1]: // weapon_damage_type
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Weapon fields.
func (w *Weapon) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case weapon.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case weapon.FieldWeaponCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field weapon_category", values[i])
			} else if value.Valid {
				w.WeaponCategory = weapon.WeaponCategory(value.String)
			}
		case weapon.FieldWeaponSubcategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field weapon_subcategory", values[i])
			} else if value.Valid {
				w.WeaponSubcategory = weapon.WeaponSubcategory(value.String)
			}
		case weapon.FieldRangeNormal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field range_normal", values[i])
			} else if value.Valid {
				w.RangeNormal = int(value.Int64)
			}
		case weapon.FieldRangeLong:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field range_long", values[i])
			} else if value.Valid {
				w.RangeLong = int(value.Int64)
			}
		case weapon.FieldThrowRangeNormal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field throw_range_normal", values[i])
			} else if value.Valid {
				w.ThrowRangeNormal = int(value.Int64)
			}
		case weapon.FieldThrowRangeLong:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field throw_range_long", values[i])
			} else if value.Valid {
				w.ThrowRangeLong = int(value.Int64)
			}
		case weapon.FieldDamageDice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field damage_dice", values[i])
			} else if value.Valid {
				w.DamageDice = value.String
			}
		case weapon.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field equipment_weapon", value)
			} else if value.Valid {
				w.equipment_weapon = new(int)
				*w.equipment_weapon = int(value.Int64)
			}
		case weapon.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field weapon_damage_type", value)
			} else if value.Valid {
				w.weapon_damage_type = new(int)
				*w.weapon_damage_type = int(value.Int64)
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Weapon.
// This includes values selected through modifiers, order, etc.
func (w *Weapon) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryProperties queries the "properties" edge of the Weapon entity.
func (w *Weapon) QueryProperties() *PropertyQuery {
	return NewWeaponClient(w.config).QueryProperties(w)
}

// QueryDamageType queries the "damage_type" edge of the Weapon entity.
func (w *Weapon) QueryDamageType() *DamageTypeQuery {
	return NewWeaponClient(w.config).QueryDamageType(w)
}

// QueryEquipment queries the "equipment" edge of the Weapon entity.
func (w *Weapon) QueryEquipment() *EquipmentQuery {
	return NewWeaponClient(w.config).QueryEquipment(w)
}

// Update returns a builder for updating this Weapon.
// Note that you need to call Weapon.Unwrap() before calling this method if this Weapon
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Weapon) Update() *WeaponUpdateOne {
	return NewWeaponClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Weapon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Weapon) Unwrap() *Weapon {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Weapon is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Weapon) String() string {
	var builder strings.Builder
	builder.WriteString("Weapon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("weapon_category=")
	builder.WriteString(fmt.Sprintf("%v", w.WeaponCategory))
	builder.WriteString(", ")
	builder.WriteString("weapon_subcategory=")
	builder.WriteString(fmt.Sprintf("%v", w.WeaponSubcategory))
	builder.WriteString(", ")
	builder.WriteString("range_normal=")
	builder.WriteString(fmt.Sprintf("%v", w.RangeNormal))
	builder.WriteString(", ")
	builder.WriteString("range_long=")
	builder.WriteString(fmt.Sprintf("%v", w.RangeLong))
	builder.WriteString(", ")
	builder.WriteString("throw_range_normal=")
	builder.WriteString(fmt.Sprintf("%v", w.ThrowRangeNormal))
	builder.WriteString(", ")
	builder.WriteString("throw_range_long=")
	builder.WriteString(fmt.Sprintf("%v", w.ThrowRangeLong))
	builder.WriteString(", ")
	builder.WriteString("damage_dice=")
	builder.WriteString(w.DamageDice)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (w *Weapon) MarshalJSON() ([]byte, error) {
	type Alias Weapon
	return json.Marshal(&struct {
		*Alias
		WeaponEdges
	}{
		Alias:       (*Alias)(w),
		WeaponEdges: w.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (w *Weapon) UnmarshalJSON(data []byte) error {
	type Alias Weapon
	aux := &struct {
		*Alias
		WeaponEdges
	}{
		Alias: (*Alias)(w),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	w.Edges = aux.WeaponEdges
	return nil
}

func (wc *WeaponCreate) SetWeapon(input *Weapon) *WeaponCreate {
	wc.SetWeaponCategory(input.WeaponCategory)
	wc.SetWeaponSubcategory(input.WeaponSubcategory)
	wc.SetRangeNormal(input.RangeNormal)
	wc.SetRangeLong(input.RangeLong)
	wc.SetThrowRangeNormal(input.ThrowRangeNormal)
	wc.SetThrowRangeLong(input.ThrowRangeLong)
	wc.SetDamageDice(input.DamageDice)
	return wc
}

// NamedProperties returns the Properties named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Weapon) NamedProperties(name string) ([]*Property, error) {
	if w.Edges.namedProperties == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedProperties[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Weapon) appendNamedProperties(name string, edges ...*Property) {
	if w.Edges.namedProperties == nil {
		w.Edges.namedProperties = make(map[string][]*Property)
	}
	if len(edges) == 0 {
		w.Edges.namedProperties[name] = []*Property{}
	} else {
		w.Edges.namedProperties[name] = append(w.Edges.namedProperties[name], edges...)
	}
}

// Weapons is a parsable slice of Weapon.
type Weapons []*Weapon
