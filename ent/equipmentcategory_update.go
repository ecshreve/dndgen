// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/equipmentcategory"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// EquipmentCategoryUpdate is the builder for updating EquipmentCategory entities.
type EquipmentCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *EquipmentCategoryMutation
}

// Where appends a list predicates to the EquipmentCategoryUpdate builder.
func (ecu *EquipmentCategoryUpdate) Where(ps ...predicate.EquipmentCategory) *EquipmentCategoryUpdate {
	ecu.mutation.Where(ps...)
	return ecu
}

// SetParentCategoryID sets the "parent_category_id" field.
func (ecu *EquipmentCategoryUpdate) SetParentCategoryID(i int) *EquipmentCategoryUpdate {
	ecu.mutation.SetParentCategoryID(i)
	return ecu
}

// SetNillableParentCategoryID sets the "parent_category_id" field if the given value is not nil.
func (ecu *EquipmentCategoryUpdate) SetNillableParentCategoryID(i *int) *EquipmentCategoryUpdate {
	if i != nil {
		ecu.SetParentCategoryID(*i)
	}
	return ecu
}

// ClearParentCategoryID clears the value of the "parent_category_id" field.
func (ecu *EquipmentCategoryUpdate) ClearParentCategoryID() *EquipmentCategoryUpdate {
	ecu.mutation.ClearParentCategoryID()
	return ecu
}

// SetName sets the "name" field.
func (ecu *EquipmentCategoryUpdate) SetName(s string) *EquipmentCategoryUpdate {
	ecu.mutation.SetName(s)
	return ecu
}

// SetParentID sets the "parent" edge to the EquipmentCategory entity by ID.
func (ecu *EquipmentCategoryUpdate) SetParentID(id int) *EquipmentCategoryUpdate {
	ecu.mutation.SetParentID(id)
	return ecu
}

// SetNillableParentID sets the "parent" edge to the EquipmentCategory entity by ID if the given value is not nil.
func (ecu *EquipmentCategoryUpdate) SetNillableParentID(id *int) *EquipmentCategoryUpdate {
	if id != nil {
		ecu = ecu.SetParentID(*id)
	}
	return ecu
}

// SetParent sets the "parent" edge to the EquipmentCategory entity.
func (ecu *EquipmentCategoryUpdate) SetParent(e *EquipmentCategory) *EquipmentCategoryUpdate {
	return ecu.SetParentID(e.ID)
}

// AddChildIDs adds the "children" edge to the EquipmentCategory entity by IDs.
func (ecu *EquipmentCategoryUpdate) AddChildIDs(ids ...int) *EquipmentCategoryUpdate {
	ecu.mutation.AddChildIDs(ids...)
	return ecu
}

// AddChildren adds the "children" edges to the EquipmentCategory entity.
func (ecu *EquipmentCategoryUpdate) AddChildren(e ...*EquipmentCategory) *EquipmentCategoryUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecu.AddChildIDs(ids...)
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (ecu *EquipmentCategoryUpdate) AddEquipmentIDs(ids ...int) *EquipmentCategoryUpdate {
	ecu.mutation.AddEquipmentIDs(ids...)
	return ecu
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (ecu *EquipmentCategoryUpdate) AddEquipment(e ...*Equipment) *EquipmentCategoryUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecu.AddEquipmentIDs(ids...)
}

// Mutation returns the EquipmentCategoryMutation object of the builder.
func (ecu *EquipmentCategoryUpdate) Mutation() *EquipmentCategoryMutation {
	return ecu.mutation
}

// ClearParent clears the "parent" edge to the EquipmentCategory entity.
func (ecu *EquipmentCategoryUpdate) ClearParent() *EquipmentCategoryUpdate {
	ecu.mutation.ClearParent()
	return ecu
}

// ClearChildren clears all "children" edges to the EquipmentCategory entity.
func (ecu *EquipmentCategoryUpdate) ClearChildren() *EquipmentCategoryUpdate {
	ecu.mutation.ClearChildren()
	return ecu
}

// RemoveChildIDs removes the "children" edge to EquipmentCategory entities by IDs.
func (ecu *EquipmentCategoryUpdate) RemoveChildIDs(ids ...int) *EquipmentCategoryUpdate {
	ecu.mutation.RemoveChildIDs(ids...)
	return ecu
}

// RemoveChildren removes "children" edges to EquipmentCategory entities.
func (ecu *EquipmentCategoryUpdate) RemoveChildren(e ...*EquipmentCategory) *EquipmentCategoryUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecu.RemoveChildIDs(ids...)
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (ecu *EquipmentCategoryUpdate) ClearEquipment() *EquipmentCategoryUpdate {
	ecu.mutation.ClearEquipment()
	return ecu
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (ecu *EquipmentCategoryUpdate) RemoveEquipmentIDs(ids ...int) *EquipmentCategoryUpdate {
	ecu.mutation.RemoveEquipmentIDs(ids...)
	return ecu
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (ecu *EquipmentCategoryUpdate) RemoveEquipment(e ...*Equipment) *EquipmentCategoryUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecu.RemoveEquipmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecu *EquipmentCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ecu.sqlSave, ecu.mutation, ecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecu *EquipmentCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecu *EquipmentCategoryUpdate) Exec(ctx context.Context) error {
	_, err := ecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecu *EquipmentCategoryUpdate) ExecX(ctx context.Context) {
	if err := ecu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ecu *EquipmentCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(equipmentcategory.Table, equipmentcategory.Columns, sqlgraph.NewFieldSpec(equipmentcategory.FieldID, field.TypeInt))
	if ps := ecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecu.mutation.Name(); ok {
		_spec.SetField(equipmentcategory.FieldName, field.TypeString, value)
	}
	if ecu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentcategory.ParentTable,
			Columns: []string{equipmentcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentcategory.ParentTable,
			Columns: []string{equipmentcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipmentcategory.ChildrenTable,
			Columns: []string{equipmentcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ecu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipmentcategory.ChildrenTable,
			Columns: []string{equipmentcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipmentcategory.ChildrenTable,
			Columns: []string{equipmentcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   equipmentcategory.EquipmentTable,
			Columns: equipmentcategory.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !ecu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   equipmentcategory.EquipmentTable,
			Columns: equipmentcategory.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   equipmentcategory.EquipmentTable,
			Columns: equipmentcategory.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipmentcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ecu.mutation.done = true
	return n, nil
}

// EquipmentCategoryUpdateOne is the builder for updating a single EquipmentCategory entity.
type EquipmentCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EquipmentCategoryMutation
}

// SetParentCategoryID sets the "parent_category_id" field.
func (ecuo *EquipmentCategoryUpdateOne) SetParentCategoryID(i int) *EquipmentCategoryUpdateOne {
	ecuo.mutation.SetParentCategoryID(i)
	return ecuo
}

// SetNillableParentCategoryID sets the "parent_category_id" field if the given value is not nil.
func (ecuo *EquipmentCategoryUpdateOne) SetNillableParentCategoryID(i *int) *EquipmentCategoryUpdateOne {
	if i != nil {
		ecuo.SetParentCategoryID(*i)
	}
	return ecuo
}

// ClearParentCategoryID clears the value of the "parent_category_id" field.
func (ecuo *EquipmentCategoryUpdateOne) ClearParentCategoryID() *EquipmentCategoryUpdateOne {
	ecuo.mutation.ClearParentCategoryID()
	return ecuo
}

// SetName sets the "name" field.
func (ecuo *EquipmentCategoryUpdateOne) SetName(s string) *EquipmentCategoryUpdateOne {
	ecuo.mutation.SetName(s)
	return ecuo
}

// SetParentID sets the "parent" edge to the EquipmentCategory entity by ID.
func (ecuo *EquipmentCategoryUpdateOne) SetParentID(id int) *EquipmentCategoryUpdateOne {
	ecuo.mutation.SetParentID(id)
	return ecuo
}

// SetNillableParentID sets the "parent" edge to the EquipmentCategory entity by ID if the given value is not nil.
func (ecuo *EquipmentCategoryUpdateOne) SetNillableParentID(id *int) *EquipmentCategoryUpdateOne {
	if id != nil {
		ecuo = ecuo.SetParentID(*id)
	}
	return ecuo
}

// SetParent sets the "parent" edge to the EquipmentCategory entity.
func (ecuo *EquipmentCategoryUpdateOne) SetParent(e *EquipmentCategory) *EquipmentCategoryUpdateOne {
	return ecuo.SetParentID(e.ID)
}

// AddChildIDs adds the "children" edge to the EquipmentCategory entity by IDs.
func (ecuo *EquipmentCategoryUpdateOne) AddChildIDs(ids ...int) *EquipmentCategoryUpdateOne {
	ecuo.mutation.AddChildIDs(ids...)
	return ecuo
}

// AddChildren adds the "children" edges to the EquipmentCategory entity.
func (ecuo *EquipmentCategoryUpdateOne) AddChildren(e ...*EquipmentCategory) *EquipmentCategoryUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecuo.AddChildIDs(ids...)
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (ecuo *EquipmentCategoryUpdateOne) AddEquipmentIDs(ids ...int) *EquipmentCategoryUpdateOne {
	ecuo.mutation.AddEquipmentIDs(ids...)
	return ecuo
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (ecuo *EquipmentCategoryUpdateOne) AddEquipment(e ...*Equipment) *EquipmentCategoryUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecuo.AddEquipmentIDs(ids...)
}

// Mutation returns the EquipmentCategoryMutation object of the builder.
func (ecuo *EquipmentCategoryUpdateOne) Mutation() *EquipmentCategoryMutation {
	return ecuo.mutation
}

// ClearParent clears the "parent" edge to the EquipmentCategory entity.
func (ecuo *EquipmentCategoryUpdateOne) ClearParent() *EquipmentCategoryUpdateOne {
	ecuo.mutation.ClearParent()
	return ecuo
}

// ClearChildren clears all "children" edges to the EquipmentCategory entity.
func (ecuo *EquipmentCategoryUpdateOne) ClearChildren() *EquipmentCategoryUpdateOne {
	ecuo.mutation.ClearChildren()
	return ecuo
}

// RemoveChildIDs removes the "children" edge to EquipmentCategory entities by IDs.
func (ecuo *EquipmentCategoryUpdateOne) RemoveChildIDs(ids ...int) *EquipmentCategoryUpdateOne {
	ecuo.mutation.RemoveChildIDs(ids...)
	return ecuo
}

// RemoveChildren removes "children" edges to EquipmentCategory entities.
func (ecuo *EquipmentCategoryUpdateOne) RemoveChildren(e ...*EquipmentCategory) *EquipmentCategoryUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecuo.RemoveChildIDs(ids...)
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (ecuo *EquipmentCategoryUpdateOne) ClearEquipment() *EquipmentCategoryUpdateOne {
	ecuo.mutation.ClearEquipment()
	return ecuo
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (ecuo *EquipmentCategoryUpdateOne) RemoveEquipmentIDs(ids ...int) *EquipmentCategoryUpdateOne {
	ecuo.mutation.RemoveEquipmentIDs(ids...)
	return ecuo
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (ecuo *EquipmentCategoryUpdateOne) RemoveEquipment(e ...*Equipment) *EquipmentCategoryUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecuo.RemoveEquipmentIDs(ids...)
}

// Where appends a list predicates to the EquipmentCategoryUpdate builder.
func (ecuo *EquipmentCategoryUpdateOne) Where(ps ...predicate.EquipmentCategory) *EquipmentCategoryUpdateOne {
	ecuo.mutation.Where(ps...)
	return ecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecuo *EquipmentCategoryUpdateOne) Select(field string, fields ...string) *EquipmentCategoryUpdateOne {
	ecuo.fields = append([]string{field}, fields...)
	return ecuo
}

// Save executes the query and returns the updated EquipmentCategory entity.
func (ecuo *EquipmentCategoryUpdateOne) Save(ctx context.Context) (*EquipmentCategory, error) {
	return withHooks(ctx, ecuo.sqlSave, ecuo.mutation, ecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecuo *EquipmentCategoryUpdateOne) SaveX(ctx context.Context) *EquipmentCategory {
	node, err := ecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecuo *EquipmentCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecuo *EquipmentCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := ecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ecuo *EquipmentCategoryUpdateOne) sqlSave(ctx context.Context) (_node *EquipmentCategory, err error) {
	_spec := sqlgraph.NewUpdateSpec(equipmentcategory.Table, equipmentcategory.Columns, sqlgraph.NewFieldSpec(equipmentcategory.FieldID, field.TypeInt))
	id, ok := ecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EquipmentCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, equipmentcategory.FieldID)
		for _, f := range fields {
			if !equipmentcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != equipmentcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecuo.mutation.Name(); ok {
		_spec.SetField(equipmentcategory.FieldName, field.TypeString, value)
	}
	if ecuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentcategory.ParentTable,
			Columns: []string{equipmentcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentcategory.ParentTable,
			Columns: []string{equipmentcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipmentcategory.ChildrenTable,
			Columns: []string{equipmentcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ecuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipmentcategory.ChildrenTable,
			Columns: []string{equipmentcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipmentcategory.ChildrenTable,
			Columns: []string{equipmentcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipmentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecuo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   equipmentcategory.EquipmentTable,
			Columns: equipmentcategory.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !ecuo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   equipmentcategory.EquipmentTable,
			Columns: equipmentcategory.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   equipmentcategory.EquipmentTable,
			Columns: equipmentcategory.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EquipmentCategory{config: ecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipmentcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ecuo.mutation.done = true
	return _node, nil
}
