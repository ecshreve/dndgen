// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/schema"
	"github.com/99designs/gqlgen/graphql"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/alignment"
	"github.com/ecshreve/dndgen/ent/armor"
	"github.com/ecshreve/dndgen/ent/character"
	"github.com/ecshreve/dndgen/ent/characterabilityscore"
	"github.com/ecshreve/dndgen/ent/characterproficiency"
	"github.com/ecshreve/dndgen/ent/characterskill"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/coin"
	"github.com/ecshreve/dndgen/ent/condition"
	"github.com/ecshreve/dndgen/ent/cost"
	"github.com/ecshreve/dndgen/ent/damagetype"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/equipmententry"
	"github.com/ecshreve/dndgen/ent/feat"
	"github.com/ecshreve/dndgen/ent/feature"
	"github.com/ecshreve/dndgen/ent/gear"
	"github.com/ecshreve/dndgen/ent/language"
	"github.com/ecshreve/dndgen/ent/languagechoice"
	"github.com/ecshreve/dndgen/ent/magicschool"
	"github.com/ecshreve/dndgen/ent/prerequisite"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/proficiencychoice"
	"github.com/ecshreve/dndgen/ent/property"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/rule"
	"github.com/ecshreve/dndgen/ent/rulesection"
	"github.com/ecshreve/dndgen/ent/skill"
	"github.com/ecshreve/dndgen/ent/tool"
	"github.com/ecshreve/dndgen/ent/trait"
	"github.com/ecshreve/dndgen/ent/vehicle"
	"github.com/ecshreve/dndgen/ent/weapon"
	"github.com/hashicorp/go-multierror"
	"golang.org/x/sync/semaphore"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
	IsNode()
}

var abilityscoreImplementors = []string{"AbilityScore", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*AbilityScore) IsNode() {}

var alignmentImplementors = []string{"Alignment", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Alignment) IsNode() {}

var armorImplementors = []string{"Armor", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Armor) IsNode() {}

var characterImplementors = []string{"Character", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Character) IsNode() {}

var characterabilityscoreImplementors = []string{"CharacterAbilityScore", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CharacterAbilityScore) IsNode() {}

var characterproficiencyImplementors = []string{"CharacterProficiency", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CharacterProficiency) IsNode() {}

var characterskillImplementors = []string{"CharacterSkill", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CharacterSkill) IsNode() {}

var classImplementors = []string{"Class", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Class) IsNode() {}

var coinImplementors = []string{"Coin", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Coin) IsNode() {}

var conditionImplementors = []string{"Condition", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Condition) IsNode() {}

var costImplementors = []string{"Cost", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Cost) IsNode() {}

var damagetypeImplementors = []string{"DamageType", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DamageType) IsNode() {}

var equipmentImplementors = []string{"Equipment", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Equipment) IsNode() {}

var equipmententryImplementors = []string{"EquipmentEntry", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*EquipmentEntry) IsNode() {}

var featImplementors = []string{"Feat", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Feat) IsNode() {}

var featureImplementors = []string{"Feature", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Feature) IsNode() {}

var gearImplementors = []string{"Gear", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Gear) IsNode() {}

var languageImplementors = []string{"Language", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Language) IsNode() {}

var languagechoiceImplementors = []string{"LanguageChoice", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*LanguageChoice) IsNode() {}

var magicschoolImplementors = []string{"MagicSchool", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*MagicSchool) IsNode() {}

var prerequisiteImplementors = []string{"Prerequisite", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Prerequisite) IsNode() {}

var proficiencyImplementors = []string{"Proficiency", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Proficiency) IsNode() {}

var proficiencychoiceImplementors = []string{"ProficiencyChoice", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ProficiencyChoice) IsNode() {}

var propertyImplementors = []string{"Property", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Property) IsNode() {}

var raceImplementors = []string{"Race", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Race) IsNode() {}

var ruleImplementors = []string{"Rule", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Rule) IsNode() {}

var rulesectionImplementors = []string{"RuleSection", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*RuleSection) IsNode() {}

var skillImplementors = []string{"Skill", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Skill) IsNode() {}

var toolImplementors = []string{"Tool", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Tool) IsNode() {}

var traitImplementors = []string{"Trait", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Trait) IsNode() {}

var vehicleImplementors = []string{"Vehicle", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Vehicle) IsNode() {}

var weaponImplementors = []string{"Weapon", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Weapon) IsNode() {}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, int) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, int) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, int) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id int) (string, error) {
			return c.tables.nodeType(ctx, c.driver, id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//	c.Noder(ctx, id)
//	c.Noder(ctx, id, ent.WithNodeType(typeResolver))
func (c *Client) Noder(ctx context.Context, id int, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id int) (Noder, error) {
	switch table {
	case abilityscore.Table:
		query := c.AbilityScore.Query().
			Where(abilityscore.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, abilityscoreImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case alignment.Table:
		query := c.Alignment.Query().
			Where(alignment.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, alignmentImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case armor.Table:
		query := c.Armor.Query().
			Where(armor.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, armorImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case character.Table:
		query := c.Character.Query().
			Where(character.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, characterImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case characterabilityscore.Table:
		query := c.CharacterAbilityScore.Query().
			Where(characterabilityscore.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, characterabilityscoreImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case characterproficiency.Table:
		query := c.CharacterProficiency.Query().
			Where(characterproficiency.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, characterproficiencyImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case characterskill.Table:
		query := c.CharacterSkill.Query().
			Where(characterskill.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, characterskillImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case class.Table:
		query := c.Class.Query().
			Where(class.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, classImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case coin.Table:
		query := c.Coin.Query().
			Where(coin.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, coinImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case condition.Table:
		query := c.Condition.Query().
			Where(condition.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, conditionImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case cost.Table:
		query := c.Cost.Query().
			Where(cost.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, costImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case damagetype.Table:
		query := c.DamageType.Query().
			Where(damagetype.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, damagetypeImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case equipment.Table:
		query := c.Equipment.Query().
			Where(equipment.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, equipmentImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case equipmententry.Table:
		query := c.EquipmentEntry.Query().
			Where(equipmententry.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, equipmententryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case feat.Table:
		query := c.Feat.Query().
			Where(feat.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, featImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case feature.Table:
		query := c.Feature.Query().
			Where(feature.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, featureImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case gear.Table:
		query := c.Gear.Query().
			Where(gear.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, gearImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case language.Table:
		query := c.Language.Query().
			Where(language.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, languageImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case languagechoice.Table:
		query := c.LanguageChoice.Query().
			Where(languagechoice.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, languagechoiceImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case magicschool.Table:
		query := c.MagicSchool.Query().
			Where(magicschool.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, magicschoolImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case prerequisite.Table:
		query := c.Prerequisite.Query().
			Where(prerequisite.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, prerequisiteImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case proficiency.Table:
		query := c.Proficiency.Query().
			Where(proficiency.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, proficiencyImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case proficiencychoice.Table:
		query := c.ProficiencyChoice.Query().
			Where(proficiencychoice.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, proficiencychoiceImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case property.Table:
		query := c.Property.Query().
			Where(property.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, propertyImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case race.Table:
		query := c.Race.Query().
			Where(race.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, raceImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case rule.Table:
		query := c.Rule.Query().
			Where(rule.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, ruleImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case rulesection.Table:
		query := c.RuleSection.Query().
			Where(rulesection.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, rulesectionImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case skill.Table:
		query := c.Skill.Query().
			Where(skill.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, skillImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case tool.Table:
		query := c.Tool.Query().
			Where(tool.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, toolImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case trait.Table:
		query := c.Trait.Query().
			Where(trait.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, traitImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case vehicle.Table:
		query := c.Vehicle.Query().
			Where(vehicle.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, vehicleImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case weapon.Table:
		query := c.Weapon.Query().
			Where(weapon.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, weaponImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []int, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]int)
	id2idx := make(map[int][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []int) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[int][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case abilityscore.Table:
		query := c.AbilityScore.Query().
			Where(abilityscore.IDIn(ids...))
		query, err := query.CollectFields(ctx, abilityscoreImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case alignment.Table:
		query := c.Alignment.Query().
			Where(alignment.IDIn(ids...))
		query, err := query.CollectFields(ctx, alignmentImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case armor.Table:
		query := c.Armor.Query().
			Where(armor.IDIn(ids...))
		query, err := query.CollectFields(ctx, armorImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case character.Table:
		query := c.Character.Query().
			Where(character.IDIn(ids...))
		query, err := query.CollectFields(ctx, characterImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case characterabilityscore.Table:
		query := c.CharacterAbilityScore.Query().
			Where(characterabilityscore.IDIn(ids...))
		query, err := query.CollectFields(ctx, characterabilityscoreImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case characterproficiency.Table:
		query := c.CharacterProficiency.Query().
			Where(characterproficiency.IDIn(ids...))
		query, err := query.CollectFields(ctx, characterproficiencyImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case characterskill.Table:
		query := c.CharacterSkill.Query().
			Where(characterskill.IDIn(ids...))
		query, err := query.CollectFields(ctx, characterskillImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case class.Table:
		query := c.Class.Query().
			Where(class.IDIn(ids...))
		query, err := query.CollectFields(ctx, classImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case coin.Table:
		query := c.Coin.Query().
			Where(coin.IDIn(ids...))
		query, err := query.CollectFields(ctx, coinImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case condition.Table:
		query := c.Condition.Query().
			Where(condition.IDIn(ids...))
		query, err := query.CollectFields(ctx, conditionImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case cost.Table:
		query := c.Cost.Query().
			Where(cost.IDIn(ids...))
		query, err := query.CollectFields(ctx, costImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case damagetype.Table:
		query := c.DamageType.Query().
			Where(damagetype.IDIn(ids...))
		query, err := query.CollectFields(ctx, damagetypeImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case equipment.Table:
		query := c.Equipment.Query().
			Where(equipment.IDIn(ids...))
		query, err := query.CollectFields(ctx, equipmentImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case equipmententry.Table:
		query := c.EquipmentEntry.Query().
			Where(equipmententry.IDIn(ids...))
		query, err := query.CollectFields(ctx, equipmententryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case feat.Table:
		query := c.Feat.Query().
			Where(feat.IDIn(ids...))
		query, err := query.CollectFields(ctx, featImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case feature.Table:
		query := c.Feature.Query().
			Where(feature.IDIn(ids...))
		query, err := query.CollectFields(ctx, featureImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case gear.Table:
		query := c.Gear.Query().
			Where(gear.IDIn(ids...))
		query, err := query.CollectFields(ctx, gearImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case language.Table:
		query := c.Language.Query().
			Where(language.IDIn(ids...))
		query, err := query.CollectFields(ctx, languageImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case languagechoice.Table:
		query := c.LanguageChoice.Query().
			Where(languagechoice.IDIn(ids...))
		query, err := query.CollectFields(ctx, languagechoiceImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case magicschool.Table:
		query := c.MagicSchool.Query().
			Where(magicschool.IDIn(ids...))
		query, err := query.CollectFields(ctx, magicschoolImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case prerequisite.Table:
		query := c.Prerequisite.Query().
			Where(prerequisite.IDIn(ids...))
		query, err := query.CollectFields(ctx, prerequisiteImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case proficiency.Table:
		query := c.Proficiency.Query().
			Where(proficiency.IDIn(ids...))
		query, err := query.CollectFields(ctx, proficiencyImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case proficiencychoice.Table:
		query := c.ProficiencyChoice.Query().
			Where(proficiencychoice.IDIn(ids...))
		query, err := query.CollectFields(ctx, proficiencychoiceImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case property.Table:
		query := c.Property.Query().
			Where(property.IDIn(ids...))
		query, err := query.CollectFields(ctx, propertyImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case race.Table:
		query := c.Race.Query().
			Where(race.IDIn(ids...))
		query, err := query.CollectFields(ctx, raceImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case rule.Table:
		query := c.Rule.Query().
			Where(rule.IDIn(ids...))
		query, err := query.CollectFields(ctx, ruleImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case rulesection.Table:
		query := c.RuleSection.Query().
			Where(rulesection.IDIn(ids...))
		query, err := query.CollectFields(ctx, rulesectionImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case skill.Table:
		query := c.Skill.Query().
			Where(skill.IDIn(ids...))
		query, err := query.CollectFields(ctx, skillImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case tool.Table:
		query := c.Tool.Query().
			Where(tool.IDIn(ids...))
		query, err := query.CollectFields(ctx, toolImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case trait.Table:
		query := c.Trait.Query().
			Where(trait.IDIn(ids...))
		query, err := query.CollectFields(ctx, traitImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case vehicle.Table:
		query := c.Vehicle.Query().
			Where(vehicle.IDIn(ids...))
		query, err := query.CollectFields(ctx, vehicleImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case weapon.Table:
		query := c.Weapon.Query().
			Where(weapon.IDIn(ids...))
		query, err := query.CollectFields(ctx, weaponImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}

type tables struct {
	once  sync.Once
	sem   *semaphore.Weighted
	value atomic.Value
}

func (t *tables) nodeType(ctx context.Context, drv dialect.Driver, id int) (string, error) {
	tables, err := t.Load(ctx, drv)
	if err != nil {
		return "", err
	}
	idx := int(id / (1<<32 - 1))
	if idx < 0 || idx >= len(tables) {
		return "", fmt.Errorf("cannot resolve table from id %v: %w", id, errNodeInvalidID)
	}
	return tables[idx], nil
}

func (t *tables) Load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	t.once.Do(func() { t.sem = semaphore.NewWeighted(1) })
	if err := t.sem.Acquire(ctx, 1); err != nil {
		return nil, err
	}
	defer t.sem.Release(1)
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	tables, err := t.load(ctx, drv)
	if err == nil {
		t.value.Store(tables)
	}
	return tables, err
}

func (*tables) load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	rows := &sql.Rows{}
	query, args := sql.Dialect(drv.Dialect()).
		Select("type").
		From(sql.Table(schema.TypeTable)).
		OrderBy(sql.Asc("id")).
		Query()
	if err := drv.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var tables []string
	return tables, sql.ScanSlice(rows, &tables)
}
