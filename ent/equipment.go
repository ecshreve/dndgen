// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/armor"
	"github.com/ecshreve/dndgen/ent/cost"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/gear"
	"github.com/ecshreve/dndgen/ent/tool"
	"github.com/ecshreve/dndgen/ent/vehicle"
	"github.com/ecshreve/dndgen/ent/weapon"
)

// Equipment is the model entity for the Equipment schema.
type Equipment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Indx holds the value of the "indx" field.
	Indx string `json:"index"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EquipmentCategory holds the value of the "equipment_category" field.
	EquipmentCategory equipment.EquipmentCategory `json:"equipment_category,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmentQuery when eager-loading is set.
	Edges          EquipmentEdges `json:"-"`
	equipment_cost *int
	selectValues   sql.SelectValues
}

// EquipmentEdges holds the relations/edges for other nodes in the graph.
type EquipmentEdges struct {
	// Cost holds the value of the cost edge.
	Cost *Cost `json:"cost,omitempty"`
	// Weapon holds the value of the weapon edge.
	Weapon *Weapon `json:"weapon,omitempty"`
	// Armor holds the value of the armor edge.
	Armor *Armor `json:"armor,omitempty"`
	// Gear holds the value of the gear edge.
	Gear *Gear `json:"gear,omitempty"`
	// Tool holds the value of the tool edge.
	Tool *Tool `json:"tool,omitempty"`
	// Vehicle holds the value of the vehicle edge.
	Vehicle *Vehicle `json:"vehicle,omitempty"`
	// Class holds the value of the class edge.
	Class []*Class `json:"class,omitempty"`
	// ClassStartingEquipment holds the value of the class_starting_equipment edge.
	ClassStartingEquipment []*StartingEquipment `json:"class_starting_equipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
	// totalCount holds the count of the edges above.
	totalCount [7]map[string]int

	namedClass                  map[string][]*Class
	namedClassStartingEquipment map[string][]*StartingEquipment
}

// CostOrErr returns the Cost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEdges) CostOrErr() (*Cost, error) {
	if e.loadedTypes[0] {
		if e.Cost == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cost.Label}
		}
		return e.Cost, nil
	}
	return nil, &NotLoadedError{edge: "cost"}
}

// WeaponOrErr returns the Weapon value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEdges) WeaponOrErr() (*Weapon, error) {
	if e.loadedTypes[1] {
		if e.Weapon == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: weapon.Label}
		}
		return e.Weapon, nil
	}
	return nil, &NotLoadedError{edge: "weapon"}
}

// ArmorOrErr returns the Armor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEdges) ArmorOrErr() (*Armor, error) {
	if e.loadedTypes[2] {
		if e.Armor == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: armor.Label}
		}
		return e.Armor, nil
	}
	return nil, &NotLoadedError{edge: "armor"}
}

// GearOrErr returns the Gear value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEdges) GearOrErr() (*Gear, error) {
	if e.loadedTypes[3] {
		if e.Gear == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: gear.Label}
		}
		return e.Gear, nil
	}
	return nil, &NotLoadedError{edge: "gear"}
}

// ToolOrErr returns the Tool value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEdges) ToolOrErr() (*Tool, error) {
	if e.loadedTypes[4] {
		if e.Tool == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tool.Label}
		}
		return e.Tool, nil
	}
	return nil, &NotLoadedError{edge: "tool"}
}

// VehicleOrErr returns the Vehicle value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEdges) VehicleOrErr() (*Vehicle, error) {
	if e.loadedTypes[5] {
		if e.Vehicle == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: vehicle.Label}
		}
		return e.Vehicle, nil
	}
	return nil, &NotLoadedError{edge: "vehicle"}
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading.
func (e EquipmentEdges) ClassOrErr() ([]*Class, error) {
	if e.loadedTypes[6] {
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// ClassStartingEquipmentOrErr returns the ClassStartingEquipment value or an error if the edge
// was not loaded in eager-loading.
func (e EquipmentEdges) ClassStartingEquipmentOrErr() ([]*StartingEquipment, error) {
	if e.loadedTypes[7] {
		return e.ClassStartingEquipment, nil
	}
	return nil, &NotLoadedError{edge: "class_starting_equipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Equipment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case equipment.FieldID:
			values[i] = new(sql.NullInt64)
		case equipment.FieldIndx, equipment.FieldName, equipment.FieldEquipmentCategory:
			values[i] = new(sql.NullString)
		case equipment.ForeignKeys[0]: // equipment_cost
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Equipment fields.
func (e *Equipment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case equipment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case equipment.FieldIndx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field indx", values[i])
			} else if value.Valid {
				e.Indx = value.String
			}
		case equipment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case equipment.FieldEquipmentCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field equipment_category", values[i])
			} else if value.Valid {
				e.EquipmentCategory = equipment.EquipmentCategory(value.String)
			}
		case equipment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field equipment_cost", value)
			} else if value.Valid {
				e.equipment_cost = new(int)
				*e.equipment_cost = int(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Equipment.
// This includes values selected through modifiers, order, etc.
func (e *Equipment) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryCost queries the "cost" edge of the Equipment entity.
func (e *Equipment) QueryCost() *CostQuery {
	return NewEquipmentClient(e.config).QueryCost(e)
}

// QueryWeapon queries the "weapon" edge of the Equipment entity.
func (e *Equipment) QueryWeapon() *WeaponQuery {
	return NewEquipmentClient(e.config).QueryWeapon(e)
}

// QueryArmor queries the "armor" edge of the Equipment entity.
func (e *Equipment) QueryArmor() *ArmorQuery {
	return NewEquipmentClient(e.config).QueryArmor(e)
}

// QueryGear queries the "gear" edge of the Equipment entity.
func (e *Equipment) QueryGear() *GearQuery {
	return NewEquipmentClient(e.config).QueryGear(e)
}

// QueryTool queries the "tool" edge of the Equipment entity.
func (e *Equipment) QueryTool() *ToolQuery {
	return NewEquipmentClient(e.config).QueryTool(e)
}

// QueryVehicle queries the "vehicle" edge of the Equipment entity.
func (e *Equipment) QueryVehicle() *VehicleQuery {
	return NewEquipmentClient(e.config).QueryVehicle(e)
}

// QueryClass queries the "class" edge of the Equipment entity.
func (e *Equipment) QueryClass() *ClassQuery {
	return NewEquipmentClient(e.config).QueryClass(e)
}

// QueryClassStartingEquipment queries the "class_starting_equipment" edge of the Equipment entity.
func (e *Equipment) QueryClassStartingEquipment() *StartingEquipmentQuery {
	return NewEquipmentClient(e.config).QueryClassStartingEquipment(e)
}

// Update returns a builder for updating this Equipment.
// Note that you need to call Equipment.Unwrap() before calling this method if this Equipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Equipment) Update() *EquipmentUpdateOne {
	return NewEquipmentClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Equipment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Equipment) Unwrap() *Equipment {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Equipment is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Equipment) String() string {
	var builder strings.Builder
	builder.WriteString("Equipment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("indx=")
	builder.WriteString(e.Indx)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("equipment_category=")
	builder.WriteString(fmt.Sprintf("%v", e.EquipmentCategory))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (e *Equipment) MarshalJSON() ([]byte, error) {
	type Alias Equipment
	return json.Marshal(&struct {
		*Alias
		EquipmentEdges
	}{
		Alias:          (*Alias)(e),
		EquipmentEdges: e.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (e *Equipment) UnmarshalJSON(data []byte) error {
	type Alias Equipment
	aux := &struct {
		*Alias
		EquipmentEdges
	}{
		Alias: (*Alias)(e),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	e.Edges = aux.EquipmentEdges
	return nil
}

func (ec *EquipmentCreate) SetEquipment(input *Equipment) *EquipmentCreate {
	ec.SetIndx(input.Indx)
	ec.SetName(input.Name)
	ec.SetEquipmentCategory(input.EquipmentCategory)
	return ec
}

// NamedClass returns the Class named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Equipment) NamedClass(name string) ([]*Class, error) {
	if e.Edges.namedClass == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedClass[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Equipment) appendNamedClass(name string, edges ...*Class) {
	if e.Edges.namedClass == nil {
		e.Edges.namedClass = make(map[string][]*Class)
	}
	if len(edges) == 0 {
		e.Edges.namedClass[name] = []*Class{}
	} else {
		e.Edges.namedClass[name] = append(e.Edges.namedClass[name], edges...)
	}
}

// NamedClassStartingEquipment returns the ClassStartingEquipment named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Equipment) NamedClassStartingEquipment(name string) ([]*StartingEquipment, error) {
	if e.Edges.namedClassStartingEquipment == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedClassStartingEquipment[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Equipment) appendNamedClassStartingEquipment(name string, edges ...*StartingEquipment) {
	if e.Edges.namedClassStartingEquipment == nil {
		e.Edges.namedClassStartingEquipment = make(map[string][]*StartingEquipment)
	}
	if len(edges) == 0 {
		e.Edges.namedClassStartingEquipment[name] = []*StartingEquipment{}
	} else {
		e.Edges.namedClassStartingEquipment[name] = append(e.Edges.namedClassStartingEquipment[name], edges...)
	}
}

// EquipmentSlice is a parsable slice of Equipment.
type EquipmentSlice []*Equipment
