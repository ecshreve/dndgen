// Code generated by ent, DO NOT EDIT.

package gear

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Gear {
	return predicate.Gear(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Gear {
	return predicate.Gear(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Gear {
	return predicate.Gear(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Gear {
	return predicate.Gear(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Gear {
	return predicate.Gear(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Gear {
	return predicate.Gear(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Gear {
	return predicate.Gear(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Gear {
	return predicate.Gear(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Gear {
	return predicate.Gear(sql.FieldLTE(FieldID, id))
}

// GearCategory applies equality check predicate on the "gear_category" field. It's identical to GearCategoryEQ.
func GearCategory(v string) predicate.Gear {
	return predicate.Gear(sql.FieldEQ(FieldGearCategory, v))
}

// GearCategoryEQ applies the EQ predicate on the "gear_category" field.
func GearCategoryEQ(v string) predicate.Gear {
	return predicate.Gear(sql.FieldEQ(FieldGearCategory, v))
}

// GearCategoryNEQ applies the NEQ predicate on the "gear_category" field.
func GearCategoryNEQ(v string) predicate.Gear {
	return predicate.Gear(sql.FieldNEQ(FieldGearCategory, v))
}

// GearCategoryIn applies the In predicate on the "gear_category" field.
func GearCategoryIn(vs ...string) predicate.Gear {
	return predicate.Gear(sql.FieldIn(FieldGearCategory, vs...))
}

// GearCategoryNotIn applies the NotIn predicate on the "gear_category" field.
func GearCategoryNotIn(vs ...string) predicate.Gear {
	return predicate.Gear(sql.FieldNotIn(FieldGearCategory, vs...))
}

// GearCategoryGT applies the GT predicate on the "gear_category" field.
func GearCategoryGT(v string) predicate.Gear {
	return predicate.Gear(sql.FieldGT(FieldGearCategory, v))
}

// GearCategoryGTE applies the GTE predicate on the "gear_category" field.
func GearCategoryGTE(v string) predicate.Gear {
	return predicate.Gear(sql.FieldGTE(FieldGearCategory, v))
}

// GearCategoryLT applies the LT predicate on the "gear_category" field.
func GearCategoryLT(v string) predicate.Gear {
	return predicate.Gear(sql.FieldLT(FieldGearCategory, v))
}

// GearCategoryLTE applies the LTE predicate on the "gear_category" field.
func GearCategoryLTE(v string) predicate.Gear {
	return predicate.Gear(sql.FieldLTE(FieldGearCategory, v))
}

// GearCategoryContains applies the Contains predicate on the "gear_category" field.
func GearCategoryContains(v string) predicate.Gear {
	return predicate.Gear(sql.FieldContains(FieldGearCategory, v))
}

// GearCategoryHasPrefix applies the HasPrefix predicate on the "gear_category" field.
func GearCategoryHasPrefix(v string) predicate.Gear {
	return predicate.Gear(sql.FieldHasPrefix(FieldGearCategory, v))
}

// GearCategoryHasSuffix applies the HasSuffix predicate on the "gear_category" field.
func GearCategoryHasSuffix(v string) predicate.Gear {
	return predicate.Gear(sql.FieldHasSuffix(FieldGearCategory, v))
}

// GearCategoryEqualFold applies the EqualFold predicate on the "gear_category" field.
func GearCategoryEqualFold(v string) predicate.Gear {
	return predicate.Gear(sql.FieldEqualFold(FieldGearCategory, v))
}

// GearCategoryContainsFold applies the ContainsFold predicate on the "gear_category" field.
func GearCategoryContainsFold(v string) predicate.Gear {
	return predicate.Gear(sql.FieldContainsFold(FieldGearCategory, v))
}

// DescIsNil applies the IsNil predicate on the "desc" field.
func DescIsNil() predicate.Gear {
	return predicate.Gear(sql.FieldIsNull(FieldDesc))
}

// DescNotNil applies the NotNil predicate on the "desc" field.
func DescNotNil() predicate.Gear {
	return predicate.Gear(sql.FieldNotNull(FieldDesc))
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.Gear {
	return predicate.Gear(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.Gear {
	return predicate.Gear(func(s *sql.Selector) {
		step := newEquipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Gear) predicate.Gear {
	return predicate.Gear(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Gear) predicate.Gear {
	return predicate.Gear(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Gear) predicate.Gear {
	return predicate.Gear(sql.NotPredicates(p))
}
