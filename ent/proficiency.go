// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/skill"
)

// Proficiency is the model entity for the Proficiency schema.
type Proficiency struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Indx holds the value of the "indx" field.
	Indx string `json:"indx,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProficiencyQuery when eager-loading is set.
	Edges                    ProficiencyEdges `json:"-"`
	proficiency_equipment    *int
	proficiency_skill        *int
	proficiency_saving_throw *int
	selectValues             sql.SelectValues
}

// ProficiencyEdges holds the relations/edges for other nodes in the graph.
type ProficiencyEdges struct {
	// Equipment holds the value of the equipment edge.
	Equipment *Equipment `json:"equipment,omitempty"`
	// Skill holds the value of the skill edge.
	Skill *Skill `json:"skill,omitempty"`
	// SavingThrow holds the value of the saving_throw edge.
	SavingThrow *AbilityScore `json:"saving_throw,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProficiencyEdges) EquipmentOrErr() (*Equipment, error) {
	if e.Equipment != nil {
		return e.Equipment, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: equipment.Label}
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// SkillOrErr returns the Skill value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProficiencyEdges) SkillOrErr() (*Skill, error) {
	if e.Skill != nil {
		return e.Skill, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: skill.Label}
	}
	return nil, &NotLoadedError{edge: "skill"}
}

// SavingThrowOrErr returns the SavingThrow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProficiencyEdges) SavingThrowOrErr() (*AbilityScore, error) {
	if e.SavingThrow != nil {
		return e.SavingThrow, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: abilityscore.Label}
	}
	return nil, &NotLoadedError{edge: "saving_throw"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Proficiency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case proficiency.FieldID:
			values[i] = new(sql.NullInt64)
		case proficiency.FieldIndx, proficiency.FieldName, proficiency.FieldCategory:
			values[i] = new(sql.NullString)
		case proficiency.ForeignKeys[0]: // proficiency_equipment
			values[i] = new(sql.NullInt64)
		case proficiency.ForeignKeys[1]: // proficiency_skill
			values[i] = new(sql.NullInt64)
		case proficiency.ForeignKeys[2]: // proficiency_saving_throw
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Proficiency fields.
func (pr *Proficiency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case proficiency.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case proficiency.FieldIndx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field indx", values[i])
			} else if value.Valid {
				pr.Indx = value.String
			}
		case proficiency.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case proficiency.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				pr.Category = value.String
			}
		case proficiency.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field proficiency_equipment", value)
			} else if value.Valid {
				pr.proficiency_equipment = new(int)
				*pr.proficiency_equipment = int(value.Int64)
			}
		case proficiency.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field proficiency_skill", value)
			} else if value.Valid {
				pr.proficiency_skill = new(int)
				*pr.proficiency_skill = int(value.Int64)
			}
		case proficiency.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field proficiency_saving_throw", value)
			} else if value.Valid {
				pr.proficiency_saving_throw = new(int)
				*pr.proficiency_saving_throw = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Proficiency.
// This includes values selected through modifiers, order, etc.
func (pr *Proficiency) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryEquipment queries the "equipment" edge of the Proficiency entity.
func (pr *Proficiency) QueryEquipment() *EquipmentQuery {
	return NewProficiencyClient(pr.config).QueryEquipment(pr)
}

// QuerySkill queries the "skill" edge of the Proficiency entity.
func (pr *Proficiency) QuerySkill() *SkillQuery {
	return NewProficiencyClient(pr.config).QuerySkill(pr)
}

// QuerySavingThrow queries the "saving_throw" edge of the Proficiency entity.
func (pr *Proficiency) QuerySavingThrow() *AbilityScoreQuery {
	return NewProficiencyClient(pr.config).QuerySavingThrow(pr)
}

// Update returns a builder for updating this Proficiency.
// Note that you need to call Proficiency.Unwrap() before calling this method if this Proficiency
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Proficiency) Update() *ProficiencyUpdateOne {
	return NewProficiencyClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Proficiency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Proficiency) Unwrap() *Proficiency {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Proficiency is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Proficiency) String() string {
	var builder strings.Builder
	builder.WriteString("Proficiency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("indx=")
	builder.WriteString(pr.Indx)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(pr.Category)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (pr *Proficiency) MarshalJSON() ([]byte, error) {
	type Alias Proficiency
	return json.Marshal(&struct {
		*Alias
		ProficiencyEdges
	}{
		Alias:            (*Alias)(pr),
		ProficiencyEdges: pr.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (pr *Proficiency) UnmarshalJSON(data []byte) error {
	type Alias Proficiency
	aux := &struct {
		*Alias
		ProficiencyEdges
	}{
		Alias: (*Alias)(pr),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	pr.Edges = aux.ProficiencyEdges
	return nil
}

func (pc *ProficiencyCreate) SetProficiency(input *Proficiency) *ProficiencyCreate {
	pc.SetIndx(input.Indx)
	pc.SetName(input.Name)
	pc.SetCategory(input.Category)
	return pc
}

// Proficiencies is a parsable slice of Proficiency.
type Proficiencies []*Proficiency
