// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/weaponrange"
)

// WeaponRange is the model entity for the WeaponRange schema.
type WeaponRange struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Normal holds the value of the "normal" field.
	Normal int `json:"normal,omitempty"`
	// Long holds the value of the "long" field.
	Long         int `json:"long,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WeaponRange) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case weaponrange.FieldID, weaponrange.FieldNormal, weaponrange.FieldLong:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WeaponRange fields.
func (wr *WeaponRange) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case weaponrange.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wr.ID = int(value.Int64)
		case weaponrange.FieldNormal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field normal", values[i])
			} else if value.Valid {
				wr.Normal = int(value.Int64)
			}
		case weaponrange.FieldLong:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field long", values[i])
			} else if value.Valid {
				wr.Long = int(value.Int64)
			}
		default:
			wr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WeaponRange.
// This includes values selected through modifiers, order, etc.
func (wr *WeaponRange) Value(name string) (ent.Value, error) {
	return wr.selectValues.Get(name)
}

// Update returns a builder for updating this WeaponRange.
// Note that you need to call WeaponRange.Unwrap() before calling this method if this WeaponRange
// was returned from a transaction, and the transaction was committed or rolled back.
func (wr *WeaponRange) Update() *WeaponRangeUpdateOne {
	return NewWeaponRangeClient(wr.config).UpdateOne(wr)
}

// Unwrap unwraps the WeaponRange entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wr *WeaponRange) Unwrap() *WeaponRange {
	_tx, ok := wr.config.driver.(*txDriver)
	if !ok {
		panic("ent: WeaponRange is not a transactional entity")
	}
	wr.config.driver = _tx.drv
	return wr
}

// String implements the fmt.Stringer.
func (wr *WeaponRange) String() string {
	var builder strings.Builder
	builder.WriteString("WeaponRange(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wr.ID))
	builder.WriteString("normal=")
	builder.WriteString(fmt.Sprintf("%v", wr.Normal))
	builder.WriteString(", ")
	builder.WriteString("long=")
	builder.WriteString(fmt.Sprintf("%v", wr.Long))
	builder.WriteByte(')')
	return builder.String()
}

func (wrc *WeaponRangeCreate) SetWeaponRange(input *WeaponRange) *WeaponRangeCreate {
	wrc.SetNormal(input.Normal)
	wrc.SetLong(input.Long)
	return wrc
}

// WeaponRanges is a parsable slice of WeaponRange.
type WeaponRanges []*WeaponRange
