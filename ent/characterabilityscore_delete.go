// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/characterabilityscore"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// CharacterAbilityScoreDelete is the builder for deleting a CharacterAbilityScore entity.
type CharacterAbilityScoreDelete struct {
	config
	hooks    []Hook
	mutation *CharacterAbilityScoreMutation
}

// Where appends a list predicates to the CharacterAbilityScoreDelete builder.
func (casd *CharacterAbilityScoreDelete) Where(ps ...predicate.CharacterAbilityScore) *CharacterAbilityScoreDelete {
	casd.mutation.Where(ps...)
	return casd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (casd *CharacterAbilityScoreDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, casd.sqlExec, casd.mutation, casd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (casd *CharacterAbilityScoreDelete) ExecX(ctx context.Context) int {
	n, err := casd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (casd *CharacterAbilityScoreDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(characterabilityscore.Table, nil)
	if ps := casd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, casd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	casd.mutation.done = true
	return affected, err
}

// CharacterAbilityScoreDeleteOne is the builder for deleting a single CharacterAbilityScore entity.
type CharacterAbilityScoreDeleteOne struct {
	casd *CharacterAbilityScoreDelete
}

// Where appends a list predicates to the CharacterAbilityScoreDelete builder.
func (casdo *CharacterAbilityScoreDeleteOne) Where(ps ...predicate.CharacterAbilityScore) *CharacterAbilityScoreDeleteOne {
	casdo.casd.mutation.Where(ps...)
	return casdo
}

// Exec executes the deletion query.
func (casdo *CharacterAbilityScoreDeleteOne) Exec(ctx context.Context) error {
	n, err := casdo.casd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{characterabilityscore.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (casdo *CharacterAbilityScoreDeleteOne) ExecX(ctx context.Context) {
	if err := casdo.Exec(ctx); err != nil {
		panic(err)
	}
}
