// Code generated by ent, DO NOT EDIT.

package rulesection

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rulesection type in the database.
	Label = "rule_section"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// EdgeRule holds the string denoting the rule edge name in mutations.
	EdgeRule = "rule"
	// Table holds the table name of the rulesection in the database.
	Table = "rule_sections"
	// RuleTable is the table that holds the rule relation/edge.
	RuleTable = "rule_sections"
	// RuleInverseTable is the table name for the Rule entity.
	// It exists in this package in order to avoid circular dependency with the "rule" package.
	RuleInverseTable = "rules"
	// RuleColumn is the table column denoting the rule relation/edge.
	RuleColumn = "rule_id"
)

// Columns holds all SQL columns for rulesection fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldDesc,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rule_sections"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"rule_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the RuleSection queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRuleField orders the results by rule field.
func ByRuleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRuleStep(), sql.OrderByField(field, opts...))
	}
}
func newRuleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RuleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RuleTable, RuleColumn),
	)
}
