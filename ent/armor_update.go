// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/armor"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ArmorUpdate is the builder for updating Armor entities.
type ArmorUpdate struct {
	config
	hooks    []Hook
	mutation *ArmorMutation
}

// Where appends a list predicates to the ArmorUpdate builder.
func (au *ArmorUpdate) Where(ps ...predicate.Armor) *ArmorUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetIndx sets the "indx" field.
func (au *ArmorUpdate) SetIndx(s string) *ArmorUpdate {
	au.mutation.SetIndx(s)
	return au
}

// SetName sets the "name" field.
func (au *ArmorUpdate) SetName(s string) *ArmorUpdate {
	au.mutation.SetName(s)
	return au
}

// SetWeight sets the "weight" field.
func (au *ArmorUpdate) SetWeight(f float64) *ArmorUpdate {
	au.mutation.ResetWeight()
	au.mutation.SetWeight(f)
	return au
}

// AddWeight adds f to the "weight" field.
func (au *ArmorUpdate) AddWeight(f float64) *ArmorUpdate {
	au.mutation.AddWeight(f)
	return au
}

// SetStealthDisadvantage sets the "stealth_disadvantage" field.
func (au *ArmorUpdate) SetStealthDisadvantage(b bool) *ArmorUpdate {
	au.mutation.SetStealthDisadvantage(b)
	return au
}

// SetArmorClass sets the "armor_class" field.
func (au *ArmorUpdate) SetArmorClass(s string) *ArmorUpdate {
	au.mutation.SetArmorClass(s)
	return au
}

// SetMinStrength sets the "min_strength" field.
func (au *ArmorUpdate) SetMinStrength(i int) *ArmorUpdate {
	au.mutation.ResetMinStrength()
	au.mutation.SetMinStrength(i)
	return au
}

// AddMinStrength adds i to the "min_strength" field.
func (au *ArmorUpdate) AddMinStrength(i int) *ArmorUpdate {
	au.mutation.AddMinStrength(i)
	return au
}

// Mutation returns the ArmorMutation object of the builder.
func (au *ArmorUpdate) Mutation() *ArmorMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArmorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ArmorMutation](ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArmorUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArmorUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArmorUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ArmorUpdate) check() error {
	if v, ok := au.mutation.Indx(); ok {
		if err := armor.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Armor.indx": %w`, err)}
		}
	}
	return nil
}

func (au *ArmorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(armor.Table, armor.Columns, sqlgraph.NewFieldSpec(armor.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Indx(); ok {
		_spec.SetField(armor.FieldIndx, field.TypeString, value)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(armor.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Weight(); ok {
		_spec.SetField(armor.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedWeight(); ok {
		_spec.AddField(armor.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.StealthDisadvantage(); ok {
		_spec.SetField(armor.FieldStealthDisadvantage, field.TypeBool, value)
	}
	if value, ok := au.mutation.ArmorClass(); ok {
		_spec.SetField(armor.FieldArmorClass, field.TypeString, value)
	}
	if value, ok := au.mutation.MinStrength(); ok {
		_spec.SetField(armor.FieldMinStrength, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedMinStrength(); ok {
		_spec.AddField(armor.FieldMinStrength, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{armor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ArmorUpdateOne is the builder for updating a single Armor entity.
type ArmorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArmorMutation
}

// SetIndx sets the "indx" field.
func (auo *ArmorUpdateOne) SetIndx(s string) *ArmorUpdateOne {
	auo.mutation.SetIndx(s)
	return auo
}

// SetName sets the "name" field.
func (auo *ArmorUpdateOne) SetName(s string) *ArmorUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetWeight sets the "weight" field.
func (auo *ArmorUpdateOne) SetWeight(f float64) *ArmorUpdateOne {
	auo.mutation.ResetWeight()
	auo.mutation.SetWeight(f)
	return auo
}

// AddWeight adds f to the "weight" field.
func (auo *ArmorUpdateOne) AddWeight(f float64) *ArmorUpdateOne {
	auo.mutation.AddWeight(f)
	return auo
}

// SetStealthDisadvantage sets the "stealth_disadvantage" field.
func (auo *ArmorUpdateOne) SetStealthDisadvantage(b bool) *ArmorUpdateOne {
	auo.mutation.SetStealthDisadvantage(b)
	return auo
}

// SetArmorClass sets the "armor_class" field.
func (auo *ArmorUpdateOne) SetArmorClass(s string) *ArmorUpdateOne {
	auo.mutation.SetArmorClass(s)
	return auo
}

// SetMinStrength sets the "min_strength" field.
func (auo *ArmorUpdateOne) SetMinStrength(i int) *ArmorUpdateOne {
	auo.mutation.ResetMinStrength()
	auo.mutation.SetMinStrength(i)
	return auo
}

// AddMinStrength adds i to the "min_strength" field.
func (auo *ArmorUpdateOne) AddMinStrength(i int) *ArmorUpdateOne {
	auo.mutation.AddMinStrength(i)
	return auo
}

// Mutation returns the ArmorMutation object of the builder.
func (auo *ArmorUpdateOne) Mutation() *ArmorMutation {
	return auo.mutation
}

// Where appends a list predicates to the ArmorUpdate builder.
func (auo *ArmorUpdateOne) Where(ps ...predicate.Armor) *ArmorUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArmorUpdateOne) Select(field string, fields ...string) *ArmorUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Armor entity.
func (auo *ArmorUpdateOne) Save(ctx context.Context) (*Armor, error) {
	return withHooks[*Armor, ArmorMutation](ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArmorUpdateOne) SaveX(ctx context.Context) *Armor {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArmorUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArmorUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ArmorUpdateOne) check() error {
	if v, ok := auo.mutation.Indx(); ok {
		if err := armor.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Armor.indx": %w`, err)}
		}
	}
	return nil
}

func (auo *ArmorUpdateOne) sqlSave(ctx context.Context) (_node *Armor, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(armor.Table, armor.Columns, sqlgraph.NewFieldSpec(armor.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Armor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, armor.FieldID)
		for _, f := range fields {
			if !armor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != armor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Indx(); ok {
		_spec.SetField(armor.FieldIndx, field.TypeString, value)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(armor.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Weight(); ok {
		_spec.SetField(armor.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedWeight(); ok {
		_spec.AddField(armor.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.StealthDisadvantage(); ok {
		_spec.SetField(armor.FieldStealthDisadvantage, field.TypeBool, value)
	}
	if value, ok := auo.mutation.ArmorClass(); ok {
		_spec.SetField(armor.FieldArmorClass, field.TypeString, value)
	}
	if value, ok := auo.mutation.MinStrength(); ok {
		_spec.SetField(armor.FieldMinStrength, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedMinStrength(); ok {
		_spec.AddField(armor.FieldMinStrength, field.TypeInt, value)
	}
	_node = &Armor{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{armor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
