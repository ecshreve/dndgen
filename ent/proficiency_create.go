// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/skill"
)

// ProficiencyCreate is the builder for creating a Proficiency entity.
type ProficiencyCreate struct {
	config
	mutation *ProficiencyMutation
	hooks    []Hook
}

// SetIndx sets the "indx" field.
func (pc *ProficiencyCreate) SetIndx(s string) *ProficiencyCreate {
	pc.mutation.SetIndx(s)
	return pc
}

// SetName sets the "name" field.
func (pc *ProficiencyCreate) SetName(s string) *ProficiencyCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetProficiencyCategory sets the "proficiency_category" field.
func (pc *ProficiencyCreate) SetProficiencyCategory(value proficiency.ProficiencyCategory) *ProficiencyCreate {
	pc.mutation.SetProficiencyCategory(value)
	return pc
}

// SetNillableProficiencyCategory sets the "proficiency_category" field if the given value is not nil.
func (pc *ProficiencyCreate) SetNillableProficiencyCategory(value *proficiency.ProficiencyCategory) *ProficiencyCreate {
	if value != nil {
		pc.SetProficiencyCategory(*value)
	}
	return pc
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (pc *ProficiencyCreate) AddClassIDs(ids ...int) *ProficiencyCreate {
	pc.mutation.AddClassIDs(ids...)
	return pc
}

// AddClasses adds the "classes" edges to the Class entity.
func (pc *ProficiencyCreate) AddClasses(c ...*Class) *ProficiencyCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddClassIDs(ids...)
}

// AddRaceIDs adds the "races" edge to the Race entity by IDs.
func (pc *ProficiencyCreate) AddRaceIDs(ids ...int) *ProficiencyCreate {
	pc.mutation.AddRaceIDs(ids...)
	return pc
}

// AddRaces adds the "races" edges to the Race entity.
func (pc *ProficiencyCreate) AddRaces(r ...*Race) *ProficiencyCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRaceIDs(ids...)
}

// SetSkillID sets the "skill" edge to the Skill entity by ID.
func (pc *ProficiencyCreate) SetSkillID(id int) *ProficiencyCreate {
	pc.mutation.SetSkillID(id)
	return pc
}

// SetNillableSkillID sets the "skill" edge to the Skill entity by ID if the given value is not nil.
func (pc *ProficiencyCreate) SetNillableSkillID(id *int) *ProficiencyCreate {
	if id != nil {
		pc = pc.SetSkillID(*id)
	}
	return pc
}

// SetSkill sets the "skill" edge to the Skill entity.
func (pc *ProficiencyCreate) SetSkill(s *Skill) *ProficiencyCreate {
	return pc.SetSkillID(s.ID)
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (pc *ProficiencyCreate) AddEquipmentIDs(ids ...int) *ProficiencyCreate {
	pc.mutation.AddEquipmentIDs(ids...)
	return pc
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (pc *ProficiencyCreate) AddEquipment(e ...*Equipment) *ProficiencyCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pc.AddEquipmentIDs(ids...)
}

// SetSavingThrowID sets the "saving_throw" edge to the AbilityScore entity by ID.
func (pc *ProficiencyCreate) SetSavingThrowID(id int) *ProficiencyCreate {
	pc.mutation.SetSavingThrowID(id)
	return pc
}

// SetNillableSavingThrowID sets the "saving_throw" edge to the AbilityScore entity by ID if the given value is not nil.
func (pc *ProficiencyCreate) SetNillableSavingThrowID(id *int) *ProficiencyCreate {
	if id != nil {
		pc = pc.SetSavingThrowID(*id)
	}
	return pc
}

// SetSavingThrow sets the "saving_throw" edge to the AbilityScore entity.
func (pc *ProficiencyCreate) SetSavingThrow(a *AbilityScore) *ProficiencyCreate {
	return pc.SetSavingThrowID(a.ID)
}

// Mutation returns the ProficiencyMutation object of the builder.
func (pc *ProficiencyCreate) Mutation() *ProficiencyMutation {
	return pc.mutation
}

// Save creates the Proficiency in the database.
func (pc *ProficiencyCreate) Save(ctx context.Context) (*Proficiency, error) {
	pc.defaults()
	return withHooks[*Proficiency, ProficiencyMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProficiencyCreate) SaveX(ctx context.Context) *Proficiency {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProficiencyCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProficiencyCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProficiencyCreate) defaults() {
	if _, ok := pc.mutation.ProficiencyCategory(); !ok {
		v := proficiency.DefaultProficiencyCategory
		pc.mutation.SetProficiencyCategory(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProficiencyCreate) check() error {
	if _, ok := pc.mutation.Indx(); !ok {
		return &ValidationError{Name: "indx", err: errors.New(`ent: missing required field "Proficiency.indx"`)}
	}
	if v, ok := pc.mutation.Indx(); ok {
		if err := proficiency.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Proficiency.indx": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Proficiency.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := proficiency.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Proficiency.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ProficiencyCategory(); !ok {
		return &ValidationError{Name: "proficiency_category", err: errors.New(`ent: missing required field "Proficiency.proficiency_category"`)}
	}
	if v, ok := pc.mutation.ProficiencyCategory(); ok {
		if err := proficiency.ProficiencyCategoryValidator(v); err != nil {
			return &ValidationError{Name: "proficiency_category", err: fmt.Errorf(`ent: validator failed for field "Proficiency.proficiency_category": %w`, err)}
		}
	}
	return nil
}

func (pc *ProficiencyCreate) sqlSave(ctx context.Context) (*Proficiency, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProficiencyCreate) createSpec() (*Proficiency, *sqlgraph.CreateSpec) {
	var (
		_node = &Proficiency{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(proficiency.Table, sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Indx(); ok {
		_spec.SetField(proficiency.FieldIndx, field.TypeString, value)
		_node.Indx = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(proficiency.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.ProficiencyCategory(); ok {
		_spec.SetField(proficiency.FieldProficiencyCategory, field.TypeEnum, value)
		_node.ProficiencyCategory = value
	}
	if nodes := pc.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.ClassesTable,
			Columns: proficiency.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.RacesTable,
			Columns: proficiency.RacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   proficiency.SkillTable,
			Columns: []string{proficiency.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   proficiency.EquipmentTable,
			Columns: []string{proficiency.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SavingThrowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   proficiency.SavingThrowTable,
			Columns: []string{proficiency.SavingThrowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProficiencyCreateBulk is the builder for creating many Proficiency entities in bulk.
type ProficiencyCreateBulk struct {
	config
	builders []*ProficiencyCreate
}

// Save creates the Proficiency entities in the database.
func (pcb *ProficiencyCreateBulk) Save(ctx context.Context) ([]*Proficiency, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Proficiency, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProficiencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProficiencyCreateBulk) SaveX(ctx context.Context) []*Proficiency {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProficiencyCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProficiencyCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
