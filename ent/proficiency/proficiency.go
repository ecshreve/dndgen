// Code generated by ent, DO NOT EDIT.

package proficiency

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the proficiency type in the database.
	Label = "proficiency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldProficiencyCategory holds the string denoting the proficiency_category field in the database.
	FieldProficiencyCategory = "proficiency_category"
	// EdgeClasses holds the string denoting the classes edge name in mutations.
	EdgeClasses = "classes"
	// EdgeRaces holds the string denoting the races edge name in mutations.
	EdgeRaces = "races"
	// EdgeSubraces holds the string denoting the subraces edge name in mutations.
	EdgeSubraces = "subraces"
	// EdgeSkill holds the string denoting the skill edge name in mutations.
	EdgeSkill = "skill"
	// EdgeEquipment holds the string denoting the equipment edge name in mutations.
	EdgeEquipment = "equipment"
	// EdgeSavingThrow holds the string denoting the saving_throw edge name in mutations.
	EdgeSavingThrow = "saving_throw"
	// Table holds the table name of the proficiency in the database.
	Table = "proficiencies"
	// ClassesTable is the table that holds the classes relation/edge. The primary key declared below.
	ClassesTable = "class_proficiencies"
	// ClassesInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	ClassesInverseTable = "classes"
	// RacesTable is the table that holds the races relation/edge. The primary key declared below.
	RacesTable = "race_proficiencies"
	// RacesInverseTable is the table name for the Race entity.
	// It exists in this package in order to avoid circular dependency with the "race" package.
	RacesInverseTable = "races"
	// SubracesTable is the table that holds the subraces relation/edge. The primary key declared below.
	SubracesTable = "subrace_proficiencies"
	// SubracesInverseTable is the table name for the Subrace entity.
	// It exists in this package in order to avoid circular dependency with the "subrace" package.
	SubracesInverseTable = "subraces"
	// SkillTable is the table that holds the skill relation/edge.
	SkillTable = "proficiencies"
	// SkillInverseTable is the table name for the Skill entity.
	// It exists in this package in order to avoid circular dependency with the "skill" package.
	SkillInverseTable = "skills"
	// SkillColumn is the table column denoting the skill relation/edge.
	SkillColumn = "proficiency_skill"
	// EquipmentTable is the table that holds the equipment relation/edge.
	EquipmentTable = "proficiencies"
	// EquipmentInverseTable is the table name for the Equipment entity.
	// It exists in this package in order to avoid circular dependency with the "equipment" package.
	EquipmentInverseTable = "equipment"
	// EquipmentColumn is the table column denoting the equipment relation/edge.
	EquipmentColumn = "proficiency_equipment"
	// SavingThrowTable is the table that holds the saving_throw relation/edge.
	SavingThrowTable = "proficiencies"
	// SavingThrowInverseTable is the table name for the AbilityScore entity.
	// It exists in this package in order to avoid circular dependency with the "abilityscore" package.
	SavingThrowInverseTable = "ability_scores"
	// SavingThrowColumn is the table column denoting the saving_throw relation/edge.
	SavingThrowColumn = "proficiency_saving_throw"
)

// Columns holds all SQL columns for proficiency fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldProficiencyCategory,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "proficiencies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"proficiency_skill",
	"proficiency_equipment",
	"proficiency_saving_throw",
}

var (
	// ClassesPrimaryKey and ClassesColumn2 are the table columns denoting the
	// primary key for the classes relation (M2M).
	ClassesPrimaryKey = []string{"class_id", "proficiency_id"}
	// RacesPrimaryKey and RacesColumn2 are the table columns denoting the
	// primary key for the races relation (M2M).
	RacesPrimaryKey = []string{"race_id", "proficiency_id"}
	// SubracesPrimaryKey and SubracesColumn2 are the table columns denoting the
	// primary key for the subraces relation (M2M).
	SubracesPrimaryKey = []string{"subrace_id", "proficiency_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Proficiency queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByProficiencyCategory orders the results by the proficiency_category field.
func ByProficiencyCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProficiencyCategory, opts...).ToFunc()
}

// ByClassesCount orders the results by classes count.
func ByClassesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClassesStep(), opts...)
	}
}

// ByClasses orders the results by classes terms.
func ByClasses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRacesCount orders the results by races count.
func ByRacesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRacesStep(), opts...)
	}
}

// ByRaces orders the results by races terms.
func ByRaces(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRacesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubracesCount orders the results by subraces count.
func BySubracesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubracesStep(), opts...)
	}
}

// BySubraces orders the results by subraces terms.
func BySubraces(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubracesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySkillField orders the results by skill field.
func BySkillField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkillStep(), sql.OrderByField(field, opts...))
	}
}

// ByEquipmentField orders the results by equipment field.
func ByEquipmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEquipmentStep(), sql.OrderByField(field, opts...))
	}
}

// BySavingThrowField orders the results by saving_throw field.
func BySavingThrowField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSavingThrowStep(), sql.OrderByField(field, opts...))
	}
}
func newClassesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ClassesTable, ClassesPrimaryKey...),
	)
}
func newRacesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RacesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RacesTable, RacesPrimaryKey...),
	)
}
func newSubracesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubracesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SubracesTable, SubracesPrimaryKey...),
	)
}
func newSkillStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkillInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SkillTable, SkillColumn),
	)
}
func newEquipmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EquipmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EquipmentTable, EquipmentColumn),
	)
}
func newSavingThrowStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SavingThrowInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SavingThrowTable, SavingThrowColumn),
	)
}
