// Code generated by ent, DO NOT EDIT.

package proficiency

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the proficiency type in the database.
	Label = "proficiency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldProficiencyCategory holds the string denoting the proficiency_category field in the database.
	FieldProficiencyCategory = "proficiency_category"
	// EdgeClasses holds the string denoting the classes edge name in mutations.
	EdgeClasses = "classes"
	// EdgeRaces holds the string denoting the races edge name in mutations.
	EdgeRaces = "races"
	// Table holds the table name of the proficiency in the database.
	Table = "proficiencies"
	// ClassesTable is the table that holds the classes relation/edge. The primary key declared below.
	ClassesTable = "proficiency_classes"
	// ClassesInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	ClassesInverseTable = "classes"
	// RacesTable is the table that holds the races relation/edge. The primary key declared below.
	RacesTable = "proficiency_races"
	// RacesInverseTable is the table name for the Race entity.
	// It exists in this package in order to avoid circular dependency with the "race" package.
	RacesInverseTable = "races"
)

// Columns holds all SQL columns for proficiency fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldProficiencyCategory,
}

var (
	// ClassesPrimaryKey and ClassesColumn2 are the table columns denoting the
	// primary key for the classes relation (M2M).
	ClassesPrimaryKey = []string{"proficiency_id", "class_id"}
	// RacesPrimaryKey and RacesColumn2 are the table columns denoting the
	// primary key for the races relation (M2M).
	RacesPrimaryKey = []string{"proficiency_id", "race_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// ProficiencyCategory defines the type for the "proficiency_category" enum field.
type ProficiencyCategory string

// ProficiencyCategoryOther is the default value of the ProficiencyCategory enum.
const DefaultProficiencyCategory = ProficiencyCategoryOther

// ProficiencyCategory values.
const (
	ProficiencyCategoryWeapons            ProficiencyCategory = "weapons"
	ProficiencyCategoryArmor              ProficiencyCategory = "armor"
	ProficiencyCategoryArtisansTools      ProficiencyCategory = "artisans_tools"
	ProficiencyCategoryVehicles           ProficiencyCategory = "vehicles"
	ProficiencyCategoryGamingSets         ProficiencyCategory = "gaming_sets"
	ProficiencyCategoryMusicalInstruments ProficiencyCategory = "musical_instruments"
	ProficiencyCategorySavingThrows       ProficiencyCategory = "saving_throws"
	ProficiencyCategorySkills             ProficiencyCategory = "skills"
	ProficiencyCategoryOther              ProficiencyCategory = "other"
)

func (pc ProficiencyCategory) String() string {
	return string(pc)
}

// ProficiencyCategoryValidator is a validator for the "proficiency_category" field enum values. It is called by the builders before save.
func ProficiencyCategoryValidator(pc ProficiencyCategory) error {
	switch pc {
	case ProficiencyCategoryWeapons, ProficiencyCategoryArmor, ProficiencyCategoryArtisansTools, ProficiencyCategoryVehicles, ProficiencyCategoryGamingSets, ProficiencyCategoryMusicalInstruments, ProficiencyCategorySavingThrows, ProficiencyCategorySkills, ProficiencyCategoryOther:
		return nil
	default:
		return fmt.Errorf("proficiency: invalid enum value for proficiency_category field: %q", pc)
	}
}

// OrderOption defines the ordering options for the Proficiency queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByProficiencyCategory orders the results by the proficiency_category field.
func ByProficiencyCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProficiencyCategory, opts...).ToFunc()
}

// ByClassesCount orders the results by classes count.
func ByClassesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClassesStep(), opts...)
	}
}

// ByClasses orders the results by classes terms.
func ByClasses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRacesCount orders the results by races count.
func ByRacesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRacesStep(), opts...)
	}
}

// ByRaces orders the results by races terms.
func ByRaces(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRacesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClassesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ClassesTable, ClassesPrimaryKey...),
	)
}
func newRacesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RacesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RacesTable, RacesPrimaryKey...),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e ProficiencyCategory) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *ProficiencyCategory) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = ProficiencyCategory(str)
	if err := ProficiencyCategoryValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid ProficiencyCategory", str)
	}
	return nil
}
