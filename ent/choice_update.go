// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/choice"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/race"
)

// ChoiceUpdate is the builder for updating Choice entities.
type ChoiceUpdate struct {
	config
	hooks    []Hook
	mutation *ChoiceMutation
}

// Where appends a list predicates to the ChoiceUpdate builder.
func (cu *ChoiceUpdate) Where(ps ...predicate.Choice) *ChoiceUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetRaceID sets the "race_id" field.
func (cu *ChoiceUpdate) SetRaceID(i int) *ChoiceUpdate {
	cu.mutation.SetRaceID(i)
	return cu
}

// SetNillableRaceID sets the "race_id" field if the given value is not nil.
func (cu *ChoiceUpdate) SetNillableRaceID(i *int) *ChoiceUpdate {
	if i != nil {
		cu.SetRaceID(*i)
	}
	return cu
}

// ClearRaceID clears the value of the "race_id" field.
func (cu *ChoiceUpdate) ClearRaceID() *ChoiceUpdate {
	cu.mutation.ClearRaceID()
	return cu
}

// SetChoose sets the "choose" field.
func (cu *ChoiceUpdate) SetChoose(i int) *ChoiceUpdate {
	cu.mutation.ResetChoose()
	cu.mutation.SetChoose(i)
	return cu
}

// AddChoose adds i to the "choose" field.
func (cu *ChoiceUpdate) AddChoose(i int) *ChoiceUpdate {
	cu.mutation.AddChoose(i)
	return cu
}

// AddProficiencyIDs adds the "proficiencies" edge to the Proficiency entity by IDs.
func (cu *ChoiceUpdate) AddProficiencyIDs(ids ...int) *ChoiceUpdate {
	cu.mutation.AddProficiencyIDs(ids...)
	return cu
}

// AddProficiencies adds the "proficiencies" edges to the Proficiency entity.
func (cu *ChoiceUpdate) AddProficiencies(p ...*Proficiency) *ChoiceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProficiencyIDs(ids...)
}

// SetRace sets the "race" edge to the Race entity.
func (cu *ChoiceUpdate) SetRace(r *Race) *ChoiceUpdate {
	return cu.SetRaceID(r.ID)
}

// Mutation returns the ChoiceMutation object of the builder.
func (cu *ChoiceUpdate) Mutation() *ChoiceMutation {
	return cu.mutation
}

// ClearProficiencies clears all "proficiencies" edges to the Proficiency entity.
func (cu *ChoiceUpdate) ClearProficiencies() *ChoiceUpdate {
	cu.mutation.ClearProficiencies()
	return cu
}

// RemoveProficiencyIDs removes the "proficiencies" edge to Proficiency entities by IDs.
func (cu *ChoiceUpdate) RemoveProficiencyIDs(ids ...int) *ChoiceUpdate {
	cu.mutation.RemoveProficiencyIDs(ids...)
	return cu
}

// RemoveProficiencies removes "proficiencies" edges to Proficiency entities.
func (cu *ChoiceUpdate) RemoveProficiencies(p ...*Proficiency) *ChoiceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProficiencyIDs(ids...)
}

// ClearRace clears the "race" edge to the Race entity.
func (cu *ChoiceUpdate) ClearRace() *ChoiceUpdate {
	cu.mutation.ClearRace()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChoiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChoiceUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChoiceUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ChoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(choice.Table, choice.Columns, sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Choose(); ok {
		_spec.SetField(choice.FieldChoose, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedChoose(); ok {
		_spec.AddField(choice.FieldChoose, field.TypeInt, value)
	}
	if cu.mutation.ProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   choice.ProficienciesTable,
			Columns: choice.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProficienciesIDs(); len(nodes) > 0 && !cu.mutation.ProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   choice.ProficienciesTable,
			Columns: choice.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProficienciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   choice.ProficienciesTable,
			Columns: choice.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   choice.RaceTable,
			Columns: []string{choice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   choice.RaceTable,
			Columns: []string{choice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{choice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChoiceUpdateOne is the builder for updating a single Choice entity.
type ChoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChoiceMutation
}

// SetRaceID sets the "race_id" field.
func (cuo *ChoiceUpdateOne) SetRaceID(i int) *ChoiceUpdateOne {
	cuo.mutation.SetRaceID(i)
	return cuo
}

// SetNillableRaceID sets the "race_id" field if the given value is not nil.
func (cuo *ChoiceUpdateOne) SetNillableRaceID(i *int) *ChoiceUpdateOne {
	if i != nil {
		cuo.SetRaceID(*i)
	}
	return cuo
}

// ClearRaceID clears the value of the "race_id" field.
func (cuo *ChoiceUpdateOne) ClearRaceID() *ChoiceUpdateOne {
	cuo.mutation.ClearRaceID()
	return cuo
}

// SetChoose sets the "choose" field.
func (cuo *ChoiceUpdateOne) SetChoose(i int) *ChoiceUpdateOne {
	cuo.mutation.ResetChoose()
	cuo.mutation.SetChoose(i)
	return cuo
}

// AddChoose adds i to the "choose" field.
func (cuo *ChoiceUpdateOne) AddChoose(i int) *ChoiceUpdateOne {
	cuo.mutation.AddChoose(i)
	return cuo
}

// AddProficiencyIDs adds the "proficiencies" edge to the Proficiency entity by IDs.
func (cuo *ChoiceUpdateOne) AddProficiencyIDs(ids ...int) *ChoiceUpdateOne {
	cuo.mutation.AddProficiencyIDs(ids...)
	return cuo
}

// AddProficiencies adds the "proficiencies" edges to the Proficiency entity.
func (cuo *ChoiceUpdateOne) AddProficiencies(p ...*Proficiency) *ChoiceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProficiencyIDs(ids...)
}

// SetRace sets the "race" edge to the Race entity.
func (cuo *ChoiceUpdateOne) SetRace(r *Race) *ChoiceUpdateOne {
	return cuo.SetRaceID(r.ID)
}

// Mutation returns the ChoiceMutation object of the builder.
func (cuo *ChoiceUpdateOne) Mutation() *ChoiceMutation {
	return cuo.mutation
}

// ClearProficiencies clears all "proficiencies" edges to the Proficiency entity.
func (cuo *ChoiceUpdateOne) ClearProficiencies() *ChoiceUpdateOne {
	cuo.mutation.ClearProficiencies()
	return cuo
}

// RemoveProficiencyIDs removes the "proficiencies" edge to Proficiency entities by IDs.
func (cuo *ChoiceUpdateOne) RemoveProficiencyIDs(ids ...int) *ChoiceUpdateOne {
	cuo.mutation.RemoveProficiencyIDs(ids...)
	return cuo
}

// RemoveProficiencies removes "proficiencies" edges to Proficiency entities.
func (cuo *ChoiceUpdateOne) RemoveProficiencies(p ...*Proficiency) *ChoiceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProficiencyIDs(ids...)
}

// ClearRace clears the "race" edge to the Race entity.
func (cuo *ChoiceUpdateOne) ClearRace() *ChoiceUpdateOne {
	cuo.mutation.ClearRace()
	return cuo
}

// Where appends a list predicates to the ChoiceUpdate builder.
func (cuo *ChoiceUpdateOne) Where(ps ...predicate.Choice) *ChoiceUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChoiceUpdateOne) Select(field string, fields ...string) *ChoiceUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Choice entity.
func (cuo *ChoiceUpdateOne) Save(ctx context.Context) (*Choice, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChoiceUpdateOne) SaveX(ctx context.Context) *Choice {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChoiceUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ChoiceUpdateOne) sqlSave(ctx context.Context) (_node *Choice, err error) {
	_spec := sqlgraph.NewUpdateSpec(choice.Table, choice.Columns, sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Choice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, choice.FieldID)
		for _, f := range fields {
			if !choice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != choice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Choose(); ok {
		_spec.SetField(choice.FieldChoose, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedChoose(); ok {
		_spec.AddField(choice.FieldChoose, field.TypeInt, value)
	}
	if cuo.mutation.ProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   choice.ProficienciesTable,
			Columns: choice.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProficienciesIDs(); len(nodes) > 0 && !cuo.mutation.ProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   choice.ProficienciesTable,
			Columns: choice.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProficienciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   choice.ProficienciesTable,
			Columns: choice.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   choice.RaceTable,
			Columns: []string{choice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   choice.RaceTable,
			Columns: []string{choice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Choice{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{choice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
