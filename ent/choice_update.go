// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/choice"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/race"
)

// ChoiceUpdate is the builder for updating Choice entities.
type ChoiceUpdate struct {
	config
	hooks    []Hook
	mutation *ChoiceMutation
}

// Where appends a list predicates to the ChoiceUpdate builder.
func (cu *ChoiceUpdate) Where(ps ...predicate.Choice) *ChoiceUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetChoose sets the "choose" field.
func (cu *ChoiceUpdate) SetChoose(i int) *ChoiceUpdate {
	cu.mutation.ResetChoose()
	cu.mutation.SetChoose(i)
	return cu
}

// AddChoose adds i to the "choose" field.
func (cu *ChoiceUpdate) AddChoose(i int) *ChoiceUpdate {
	cu.mutation.AddChoose(i)
	return cu
}

// SetDesc sets the "desc" field.
func (cu *ChoiceUpdate) SetDesc(s string) *ChoiceUpdate {
	cu.mutation.SetDesc(s)
	return cu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (cu *ChoiceUpdate) SetNillableDesc(s *string) *ChoiceUpdate {
	if s != nil {
		cu.SetDesc(*s)
	}
	return cu
}

// ClearDesc clears the value of the "desc" field.
func (cu *ChoiceUpdate) ClearDesc() *ChoiceUpdate {
	cu.mutation.ClearDesc()
	return cu
}

// SetParentChoiceID sets the "parent_choice" edge to the Choice entity by ID.
func (cu *ChoiceUpdate) SetParentChoiceID(id int) *ChoiceUpdate {
	cu.mutation.SetParentChoiceID(id)
	return cu
}

// SetNillableParentChoiceID sets the "parent_choice" edge to the Choice entity by ID if the given value is not nil.
func (cu *ChoiceUpdate) SetNillableParentChoiceID(id *int) *ChoiceUpdate {
	if id != nil {
		cu = cu.SetParentChoiceID(*id)
	}
	return cu
}

// SetParentChoice sets the "parent_choice" edge to the Choice entity.
func (cu *ChoiceUpdate) SetParentChoice(c *Choice) *ChoiceUpdate {
	return cu.SetParentChoiceID(c.ID)
}

// AddChoiceOptionIDs adds the "choice_options" edge to the Choice entity by IDs.
func (cu *ChoiceUpdate) AddChoiceOptionIDs(ids ...int) *ChoiceUpdate {
	cu.mutation.AddChoiceOptionIDs(ids...)
	return cu
}

// AddChoiceOptions adds the "choice_options" edges to the Choice entity.
func (cu *ChoiceUpdate) AddChoiceOptions(c ...*Choice) *ChoiceUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddChoiceOptionIDs(ids...)
}

// AddProficiencyOptionIDs adds the "proficiency_options" edge to the Proficiency entity by IDs.
func (cu *ChoiceUpdate) AddProficiencyOptionIDs(ids ...int) *ChoiceUpdate {
	cu.mutation.AddProficiencyOptionIDs(ids...)
	return cu
}

// AddProficiencyOptions adds the "proficiency_options" edges to the Proficiency entity.
func (cu *ChoiceUpdate) AddProficiencyOptions(p ...*Proficiency) *ChoiceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProficiencyOptionIDs(ids...)
}

// AddStartingEquipmentOptionIDs adds the "starting_equipment_options" edge to the Equipment entity by IDs.
func (cu *ChoiceUpdate) AddStartingEquipmentOptionIDs(ids ...int) *ChoiceUpdate {
	cu.mutation.AddStartingEquipmentOptionIDs(ids...)
	return cu
}

// AddStartingEquipmentOptions adds the "starting_equipment_options" edges to the Equipment entity.
func (cu *ChoiceUpdate) AddStartingEquipmentOptions(e ...*Equipment) *ChoiceUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddStartingEquipmentOptionIDs(ids...)
}

// AddClasIDs adds the "class" edge to the Class entity by IDs.
func (cu *ChoiceUpdate) AddClasIDs(ids ...int) *ChoiceUpdate {
	cu.mutation.AddClasIDs(ids...)
	return cu
}

// AddClass adds the "class" edges to the Class entity.
func (cu *ChoiceUpdate) AddClass(c ...*Class) *ChoiceUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddClasIDs(ids...)
}

// AddRaceIDs adds the "race" edge to the Race entity by IDs.
func (cu *ChoiceUpdate) AddRaceIDs(ids ...int) *ChoiceUpdate {
	cu.mutation.AddRaceIDs(ids...)
	return cu
}

// AddRace adds the "race" edges to the Race entity.
func (cu *ChoiceUpdate) AddRace(r ...*Race) *ChoiceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddRaceIDs(ids...)
}

// Mutation returns the ChoiceMutation object of the builder.
func (cu *ChoiceUpdate) Mutation() *ChoiceMutation {
	return cu.mutation
}

// ClearParentChoice clears the "parent_choice" edge to the Choice entity.
func (cu *ChoiceUpdate) ClearParentChoice() *ChoiceUpdate {
	cu.mutation.ClearParentChoice()
	return cu
}

// ClearChoiceOptions clears all "choice_options" edges to the Choice entity.
func (cu *ChoiceUpdate) ClearChoiceOptions() *ChoiceUpdate {
	cu.mutation.ClearChoiceOptions()
	return cu
}

// RemoveChoiceOptionIDs removes the "choice_options" edge to Choice entities by IDs.
func (cu *ChoiceUpdate) RemoveChoiceOptionIDs(ids ...int) *ChoiceUpdate {
	cu.mutation.RemoveChoiceOptionIDs(ids...)
	return cu
}

// RemoveChoiceOptions removes "choice_options" edges to Choice entities.
func (cu *ChoiceUpdate) RemoveChoiceOptions(c ...*Choice) *ChoiceUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveChoiceOptionIDs(ids...)
}

// ClearProficiencyOptions clears all "proficiency_options" edges to the Proficiency entity.
func (cu *ChoiceUpdate) ClearProficiencyOptions() *ChoiceUpdate {
	cu.mutation.ClearProficiencyOptions()
	return cu
}

// RemoveProficiencyOptionIDs removes the "proficiency_options" edge to Proficiency entities by IDs.
func (cu *ChoiceUpdate) RemoveProficiencyOptionIDs(ids ...int) *ChoiceUpdate {
	cu.mutation.RemoveProficiencyOptionIDs(ids...)
	return cu
}

// RemoveProficiencyOptions removes "proficiency_options" edges to Proficiency entities.
func (cu *ChoiceUpdate) RemoveProficiencyOptions(p ...*Proficiency) *ChoiceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProficiencyOptionIDs(ids...)
}

// ClearStartingEquipmentOptions clears all "starting_equipment_options" edges to the Equipment entity.
func (cu *ChoiceUpdate) ClearStartingEquipmentOptions() *ChoiceUpdate {
	cu.mutation.ClearStartingEquipmentOptions()
	return cu
}

// RemoveStartingEquipmentOptionIDs removes the "starting_equipment_options" edge to Equipment entities by IDs.
func (cu *ChoiceUpdate) RemoveStartingEquipmentOptionIDs(ids ...int) *ChoiceUpdate {
	cu.mutation.RemoveStartingEquipmentOptionIDs(ids...)
	return cu
}

// RemoveStartingEquipmentOptions removes "starting_equipment_options" edges to Equipment entities.
func (cu *ChoiceUpdate) RemoveStartingEquipmentOptions(e ...*Equipment) *ChoiceUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveStartingEquipmentOptionIDs(ids...)
}

// ClearClass clears all "class" edges to the Class entity.
func (cu *ChoiceUpdate) ClearClass() *ChoiceUpdate {
	cu.mutation.ClearClass()
	return cu
}

// RemoveClasIDs removes the "class" edge to Class entities by IDs.
func (cu *ChoiceUpdate) RemoveClasIDs(ids ...int) *ChoiceUpdate {
	cu.mutation.RemoveClasIDs(ids...)
	return cu
}

// RemoveClass removes "class" edges to Class entities.
func (cu *ChoiceUpdate) RemoveClass(c ...*Class) *ChoiceUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveClasIDs(ids...)
}

// ClearRace clears all "race" edges to the Race entity.
func (cu *ChoiceUpdate) ClearRace() *ChoiceUpdate {
	cu.mutation.ClearRace()
	return cu
}

// RemoveRaceIDs removes the "race" edge to Race entities by IDs.
func (cu *ChoiceUpdate) RemoveRaceIDs(ids ...int) *ChoiceUpdate {
	cu.mutation.RemoveRaceIDs(ids...)
	return cu
}

// RemoveRace removes "race" edges to Race entities.
func (cu *ChoiceUpdate) RemoveRace(r ...*Race) *ChoiceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveRaceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChoiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChoiceUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChoiceUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ChoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(choice.Table, choice.Columns, sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Choose(); ok {
		_spec.SetField(choice.FieldChoose, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedChoose(); ok {
		_spec.AddField(choice.FieldChoose, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Desc(); ok {
		_spec.SetField(choice.FieldDesc, field.TypeString, value)
	}
	if cu.mutation.DescCleared() {
		_spec.ClearField(choice.FieldDesc, field.TypeString)
	}
	if cu.mutation.ParentChoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choice.ParentChoiceTable,
			Columns: []string{choice.ParentChoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ParentChoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choice.ParentChoiceTable,
			Columns: []string{choice.ParentChoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ChoiceOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.ChoiceOptionsTable,
			Columns: []string{choice.ChoiceOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedChoiceOptionsIDs(); len(nodes) > 0 && !cu.mutation.ChoiceOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.ChoiceOptionsTable,
			Columns: []string{choice.ChoiceOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ChoiceOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.ChoiceOptionsTable,
			Columns: []string{choice.ChoiceOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ProficiencyOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   choice.ProficiencyOptionsTable,
			Columns: choice.ProficiencyOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProficiencyOptionsIDs(); len(nodes) > 0 && !cu.mutation.ProficiencyOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   choice.ProficiencyOptionsTable,
			Columns: choice.ProficiencyOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProficiencyOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   choice.ProficiencyOptionsTable,
			Columns: choice.ProficiencyOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.StartingEquipmentOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.StartingEquipmentOptionsTable,
			Columns: []string{choice.StartingEquipmentOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedStartingEquipmentOptionsIDs(); len(nodes) > 0 && !cu.mutation.StartingEquipmentOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.StartingEquipmentOptionsTable,
			Columns: []string{choice.StartingEquipmentOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StartingEquipmentOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.StartingEquipmentOptionsTable,
			Columns: []string{choice.StartingEquipmentOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   choice.ClassTable,
			Columns: choice.ClassPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClassIDs(); len(nodes) > 0 && !cu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   choice.ClassTable,
			Columns: choice.ClassPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   choice.ClassTable,
			Columns: choice.ClassPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   choice.RaceTable,
			Columns: []string{choice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedRaceIDs(); len(nodes) > 0 && !cu.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   choice.RaceTable,
			Columns: []string{choice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   choice.RaceTable,
			Columns: []string{choice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{choice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChoiceUpdateOne is the builder for updating a single Choice entity.
type ChoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChoiceMutation
}

// SetChoose sets the "choose" field.
func (cuo *ChoiceUpdateOne) SetChoose(i int) *ChoiceUpdateOne {
	cuo.mutation.ResetChoose()
	cuo.mutation.SetChoose(i)
	return cuo
}

// AddChoose adds i to the "choose" field.
func (cuo *ChoiceUpdateOne) AddChoose(i int) *ChoiceUpdateOne {
	cuo.mutation.AddChoose(i)
	return cuo
}

// SetDesc sets the "desc" field.
func (cuo *ChoiceUpdateOne) SetDesc(s string) *ChoiceUpdateOne {
	cuo.mutation.SetDesc(s)
	return cuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (cuo *ChoiceUpdateOne) SetNillableDesc(s *string) *ChoiceUpdateOne {
	if s != nil {
		cuo.SetDesc(*s)
	}
	return cuo
}

// ClearDesc clears the value of the "desc" field.
func (cuo *ChoiceUpdateOne) ClearDesc() *ChoiceUpdateOne {
	cuo.mutation.ClearDesc()
	return cuo
}

// SetParentChoiceID sets the "parent_choice" edge to the Choice entity by ID.
func (cuo *ChoiceUpdateOne) SetParentChoiceID(id int) *ChoiceUpdateOne {
	cuo.mutation.SetParentChoiceID(id)
	return cuo
}

// SetNillableParentChoiceID sets the "parent_choice" edge to the Choice entity by ID if the given value is not nil.
func (cuo *ChoiceUpdateOne) SetNillableParentChoiceID(id *int) *ChoiceUpdateOne {
	if id != nil {
		cuo = cuo.SetParentChoiceID(*id)
	}
	return cuo
}

// SetParentChoice sets the "parent_choice" edge to the Choice entity.
func (cuo *ChoiceUpdateOne) SetParentChoice(c *Choice) *ChoiceUpdateOne {
	return cuo.SetParentChoiceID(c.ID)
}

// AddChoiceOptionIDs adds the "choice_options" edge to the Choice entity by IDs.
func (cuo *ChoiceUpdateOne) AddChoiceOptionIDs(ids ...int) *ChoiceUpdateOne {
	cuo.mutation.AddChoiceOptionIDs(ids...)
	return cuo
}

// AddChoiceOptions adds the "choice_options" edges to the Choice entity.
func (cuo *ChoiceUpdateOne) AddChoiceOptions(c ...*Choice) *ChoiceUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddChoiceOptionIDs(ids...)
}

// AddProficiencyOptionIDs adds the "proficiency_options" edge to the Proficiency entity by IDs.
func (cuo *ChoiceUpdateOne) AddProficiencyOptionIDs(ids ...int) *ChoiceUpdateOne {
	cuo.mutation.AddProficiencyOptionIDs(ids...)
	return cuo
}

// AddProficiencyOptions adds the "proficiency_options" edges to the Proficiency entity.
func (cuo *ChoiceUpdateOne) AddProficiencyOptions(p ...*Proficiency) *ChoiceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProficiencyOptionIDs(ids...)
}

// AddStartingEquipmentOptionIDs adds the "starting_equipment_options" edge to the Equipment entity by IDs.
func (cuo *ChoiceUpdateOne) AddStartingEquipmentOptionIDs(ids ...int) *ChoiceUpdateOne {
	cuo.mutation.AddStartingEquipmentOptionIDs(ids...)
	return cuo
}

// AddStartingEquipmentOptions adds the "starting_equipment_options" edges to the Equipment entity.
func (cuo *ChoiceUpdateOne) AddStartingEquipmentOptions(e ...*Equipment) *ChoiceUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddStartingEquipmentOptionIDs(ids...)
}

// AddClasIDs adds the "class" edge to the Class entity by IDs.
func (cuo *ChoiceUpdateOne) AddClasIDs(ids ...int) *ChoiceUpdateOne {
	cuo.mutation.AddClasIDs(ids...)
	return cuo
}

// AddClass adds the "class" edges to the Class entity.
func (cuo *ChoiceUpdateOne) AddClass(c ...*Class) *ChoiceUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddClasIDs(ids...)
}

// AddRaceIDs adds the "race" edge to the Race entity by IDs.
func (cuo *ChoiceUpdateOne) AddRaceIDs(ids ...int) *ChoiceUpdateOne {
	cuo.mutation.AddRaceIDs(ids...)
	return cuo
}

// AddRace adds the "race" edges to the Race entity.
func (cuo *ChoiceUpdateOne) AddRace(r ...*Race) *ChoiceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddRaceIDs(ids...)
}

// Mutation returns the ChoiceMutation object of the builder.
func (cuo *ChoiceUpdateOne) Mutation() *ChoiceMutation {
	return cuo.mutation
}

// ClearParentChoice clears the "parent_choice" edge to the Choice entity.
func (cuo *ChoiceUpdateOne) ClearParentChoice() *ChoiceUpdateOne {
	cuo.mutation.ClearParentChoice()
	return cuo
}

// ClearChoiceOptions clears all "choice_options" edges to the Choice entity.
func (cuo *ChoiceUpdateOne) ClearChoiceOptions() *ChoiceUpdateOne {
	cuo.mutation.ClearChoiceOptions()
	return cuo
}

// RemoveChoiceOptionIDs removes the "choice_options" edge to Choice entities by IDs.
func (cuo *ChoiceUpdateOne) RemoveChoiceOptionIDs(ids ...int) *ChoiceUpdateOne {
	cuo.mutation.RemoveChoiceOptionIDs(ids...)
	return cuo
}

// RemoveChoiceOptions removes "choice_options" edges to Choice entities.
func (cuo *ChoiceUpdateOne) RemoveChoiceOptions(c ...*Choice) *ChoiceUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveChoiceOptionIDs(ids...)
}

// ClearProficiencyOptions clears all "proficiency_options" edges to the Proficiency entity.
func (cuo *ChoiceUpdateOne) ClearProficiencyOptions() *ChoiceUpdateOne {
	cuo.mutation.ClearProficiencyOptions()
	return cuo
}

// RemoveProficiencyOptionIDs removes the "proficiency_options" edge to Proficiency entities by IDs.
func (cuo *ChoiceUpdateOne) RemoveProficiencyOptionIDs(ids ...int) *ChoiceUpdateOne {
	cuo.mutation.RemoveProficiencyOptionIDs(ids...)
	return cuo
}

// RemoveProficiencyOptions removes "proficiency_options" edges to Proficiency entities.
func (cuo *ChoiceUpdateOne) RemoveProficiencyOptions(p ...*Proficiency) *ChoiceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProficiencyOptionIDs(ids...)
}

// ClearStartingEquipmentOptions clears all "starting_equipment_options" edges to the Equipment entity.
func (cuo *ChoiceUpdateOne) ClearStartingEquipmentOptions() *ChoiceUpdateOne {
	cuo.mutation.ClearStartingEquipmentOptions()
	return cuo
}

// RemoveStartingEquipmentOptionIDs removes the "starting_equipment_options" edge to Equipment entities by IDs.
func (cuo *ChoiceUpdateOne) RemoveStartingEquipmentOptionIDs(ids ...int) *ChoiceUpdateOne {
	cuo.mutation.RemoveStartingEquipmentOptionIDs(ids...)
	return cuo
}

// RemoveStartingEquipmentOptions removes "starting_equipment_options" edges to Equipment entities.
func (cuo *ChoiceUpdateOne) RemoveStartingEquipmentOptions(e ...*Equipment) *ChoiceUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveStartingEquipmentOptionIDs(ids...)
}

// ClearClass clears all "class" edges to the Class entity.
func (cuo *ChoiceUpdateOne) ClearClass() *ChoiceUpdateOne {
	cuo.mutation.ClearClass()
	return cuo
}

// RemoveClasIDs removes the "class" edge to Class entities by IDs.
func (cuo *ChoiceUpdateOne) RemoveClasIDs(ids ...int) *ChoiceUpdateOne {
	cuo.mutation.RemoveClasIDs(ids...)
	return cuo
}

// RemoveClass removes "class" edges to Class entities.
func (cuo *ChoiceUpdateOne) RemoveClass(c ...*Class) *ChoiceUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveClasIDs(ids...)
}

// ClearRace clears all "race" edges to the Race entity.
func (cuo *ChoiceUpdateOne) ClearRace() *ChoiceUpdateOne {
	cuo.mutation.ClearRace()
	return cuo
}

// RemoveRaceIDs removes the "race" edge to Race entities by IDs.
func (cuo *ChoiceUpdateOne) RemoveRaceIDs(ids ...int) *ChoiceUpdateOne {
	cuo.mutation.RemoveRaceIDs(ids...)
	return cuo
}

// RemoveRace removes "race" edges to Race entities.
func (cuo *ChoiceUpdateOne) RemoveRace(r ...*Race) *ChoiceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveRaceIDs(ids...)
}

// Where appends a list predicates to the ChoiceUpdate builder.
func (cuo *ChoiceUpdateOne) Where(ps ...predicate.Choice) *ChoiceUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChoiceUpdateOne) Select(field string, fields ...string) *ChoiceUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Choice entity.
func (cuo *ChoiceUpdateOne) Save(ctx context.Context) (*Choice, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChoiceUpdateOne) SaveX(ctx context.Context) *Choice {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChoiceUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ChoiceUpdateOne) sqlSave(ctx context.Context) (_node *Choice, err error) {
	_spec := sqlgraph.NewUpdateSpec(choice.Table, choice.Columns, sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Choice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, choice.FieldID)
		for _, f := range fields {
			if !choice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != choice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Choose(); ok {
		_spec.SetField(choice.FieldChoose, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedChoose(); ok {
		_spec.AddField(choice.FieldChoose, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Desc(); ok {
		_spec.SetField(choice.FieldDesc, field.TypeString, value)
	}
	if cuo.mutation.DescCleared() {
		_spec.ClearField(choice.FieldDesc, field.TypeString)
	}
	if cuo.mutation.ParentChoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choice.ParentChoiceTable,
			Columns: []string{choice.ParentChoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ParentChoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choice.ParentChoiceTable,
			Columns: []string{choice.ParentChoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ChoiceOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.ChoiceOptionsTable,
			Columns: []string{choice.ChoiceOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedChoiceOptionsIDs(); len(nodes) > 0 && !cuo.mutation.ChoiceOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.ChoiceOptionsTable,
			Columns: []string{choice.ChoiceOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ChoiceOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.ChoiceOptionsTable,
			Columns: []string{choice.ChoiceOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ProficiencyOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   choice.ProficiencyOptionsTable,
			Columns: choice.ProficiencyOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProficiencyOptionsIDs(); len(nodes) > 0 && !cuo.mutation.ProficiencyOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   choice.ProficiencyOptionsTable,
			Columns: choice.ProficiencyOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProficiencyOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   choice.ProficiencyOptionsTable,
			Columns: choice.ProficiencyOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.StartingEquipmentOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.StartingEquipmentOptionsTable,
			Columns: []string{choice.StartingEquipmentOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedStartingEquipmentOptionsIDs(); len(nodes) > 0 && !cuo.mutation.StartingEquipmentOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.StartingEquipmentOptionsTable,
			Columns: []string{choice.StartingEquipmentOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StartingEquipmentOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.StartingEquipmentOptionsTable,
			Columns: []string{choice.StartingEquipmentOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   choice.ClassTable,
			Columns: choice.ClassPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClassIDs(); len(nodes) > 0 && !cuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   choice.ClassTable,
			Columns: choice.ClassPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   choice.ClassTable,
			Columns: choice.ClassPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   choice.RaceTable,
			Columns: []string{choice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedRaceIDs(); len(nodes) > 0 && !cuo.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   choice.RaceTable,
			Columns: []string{choice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   choice.RaceTable,
			Columns: []string{choice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Choice{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{choice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
