// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/property"
)

// Property is the model entity for the Property schema.
type Property struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Indx holds the value of the "indx" field.
	Indx string `json:"index"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc []string `json:"desc,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PropertyQuery when eager-loading is set.
	Edges        PropertyEdges `json:"-"`
	selectValues sql.SelectValues
}

// PropertyEdges holds the relations/edges for other nodes in the graph.
type PropertyEdges struct {
	// Weapons holds the value of the weapons edge.
	Weapons []*Weapon `json:"weapons,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedWeapons map[string][]*Weapon
}

// WeaponsOrErr returns the Weapons value or an error if the edge
// was not loaded in eager-loading.
func (e PropertyEdges) WeaponsOrErr() ([]*Weapon, error) {
	if e.loadedTypes[0] {
		return e.Weapons, nil
	}
	return nil, &NotLoadedError{edge: "weapons"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Property) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case property.FieldDesc:
			values[i] = new([]byte)
		case property.FieldID:
			values[i] = new(sql.NullInt64)
		case property.FieldIndx, property.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Property fields.
func (pr *Property) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case property.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case property.FieldIndx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field indx", values[i])
			} else if value.Valid {
				pr.Indx = value.String
			}
		case property.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case property.FieldDesc:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Desc); err != nil {
					return fmt.Errorf("unmarshal field desc: %w", err)
				}
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Property.
// This includes values selected through modifiers, order, etc.
func (pr *Property) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryWeapons queries the "weapons" edge of the Property entity.
func (pr *Property) QueryWeapons() *WeaponQuery {
	return NewPropertyClient(pr.config).QueryWeapons(pr)
}

// Update returns a builder for updating this Property.
// Note that you need to call Property.Unwrap() before calling this method if this Property
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Property) Update() *PropertyUpdateOne {
	return NewPropertyClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Property entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Property) Unwrap() *Property {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Property is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Property) String() string {
	var builder strings.Builder
	builder.WriteString("Property(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("indx=")
	builder.WriteString(pr.Indx)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(fmt.Sprintf("%v", pr.Desc))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (pr *Property) MarshalJSON() ([]byte, error) {
	type Alias Property
	return json.Marshal(&struct {
		*Alias
		PropertyEdges
	}{
		Alias:         (*Alias)(pr),
		PropertyEdges: pr.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (pr *Property) UnmarshalJSON(data []byte) error {
	type Alias Property
	aux := &struct {
		*Alias
		PropertyEdges
	}{
		Alias: (*Alias)(pr),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	pr.Edges = aux.PropertyEdges
	return nil
}

func (pc *PropertyCreate) SetProperty(input *Property) *PropertyCreate {
	pc.SetIndx(input.Indx)
	pc.SetName(input.Name)
	pc.SetDesc(input.Desc)
	return pc
}

// NamedWeapons returns the Weapons named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pr *Property) NamedWeapons(name string) ([]*Weapon, error) {
	if pr.Edges.namedWeapons == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pr.Edges.namedWeapons[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pr *Property) appendNamedWeapons(name string, edges ...*Weapon) {
	if pr.Edges.namedWeapons == nil {
		pr.Edges.namedWeapons = make(map[string][]*Weapon)
	}
	if len(edges) == 0 {
		pr.Edges.namedWeapons[name] = []*Weapon{}
	} else {
		pr.Edges.namedWeapons[name] = append(pr.Edges.namedWeapons[name], edges...)
	}
}

// Properties is a parsable slice of Property.
type Properties []*Property
