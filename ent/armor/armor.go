// Code generated by ent, DO NOT EDIT.

package armor

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the armor type in the database.
	Label = "armor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStealthDisadvantage holds the string denoting the stealth_disadvantage field in the database.
	FieldStealthDisadvantage = "stealth_disadvantage"
	// FieldArmorClass holds the string denoting the armor_class field in the database.
	FieldArmorClass = "armor_class"
	// FieldMinStrength holds the string denoting the min_strength field in the database.
	FieldMinStrength = "min_strength"
	// EdgeEquipment holds the string denoting the equipment edge name in mutations.
	EdgeEquipment = "equipment"
	// Table holds the table name of the armor in the database.
	Table = "armors"
	// EquipmentTable is the table that holds the equipment relation/edge. The primary key declared below.
	EquipmentTable = "equipment_armor"
	// EquipmentInverseTable is the table name for the Equipment entity.
	// It exists in this package in order to avoid circular dependency with the "equipment" package.
	EquipmentInverseTable = "equipment"
)

// Columns holds all SQL columns for armor fields.
var Columns = []string{
	FieldID,
	FieldStealthDisadvantage,
	FieldArmorClass,
	FieldMinStrength,
}

var (
	// EquipmentPrimaryKey and EquipmentColumn2 are the table columns denoting the
	// primary key for the equipment relation (M2M).
	EquipmentPrimaryKey = []string{"equipment_id", "armor_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Armor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStealthDisadvantage orders the results by the stealth_disadvantage field.
func ByStealthDisadvantage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStealthDisadvantage, opts...).ToFunc()
}

// ByArmorClass orders the results by the armor_class field.
func ByArmorClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArmorClass, opts...).ToFunc()
}

// ByMinStrength orders the results by the min_strength field.
func ByMinStrength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinStrength, opts...).ToFunc()
}

// ByEquipmentCount orders the results by equipment count.
func ByEquipmentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEquipmentStep(), opts...)
	}
}

// ByEquipment orders the results by equipment terms.
func ByEquipment(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEquipmentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEquipmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EquipmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EquipmentTable, EquipmentPrimaryKey...),
	)
}
