// Code generated by ent, DO NOT EDIT.

package armor

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the armor type in the database.
	Label = "armor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldArmorCategory holds the string denoting the armor_category field in the database.
	FieldArmorCategory = "armor_category"
	// FieldStrMinimum holds the string denoting the str_minimum field in the database.
	FieldStrMinimum = "str_minimum"
	// FieldStealthDisadvantage holds the string denoting the stealth_disadvantage field in the database.
	FieldStealthDisadvantage = "stealth_disadvantage"
	// EdgeEquipment holds the string denoting the equipment edge name in mutations.
	EdgeEquipment = "equipment"
	// EdgeArmorClass holds the string denoting the armor_class edge name in mutations.
	EdgeArmorClass = "armor_class"
	// Table holds the table name of the armor in the database.
	Table = "armors"
	// EquipmentTable is the table that holds the equipment relation/edge.
	EquipmentTable = "armors"
	// EquipmentInverseTable is the table name for the Equipment entity.
	// It exists in this package in order to avoid circular dependency with the "equipment" package.
	EquipmentInverseTable = "equipment"
	// EquipmentColumn is the table column denoting the equipment relation/edge.
	EquipmentColumn = "armor_equipment"
	// ArmorClassTable is the table that holds the armor_class relation/edge.
	ArmorClassTable = "armor_classes"
	// ArmorClassInverseTable is the table name for the ArmorClass entity.
	// It exists in this package in order to avoid circular dependency with the "armorclass" package.
	ArmorClassInverseTable = "armor_classes"
	// ArmorClassColumn is the table column denoting the armor_class relation/edge.
	ArmorClassColumn = "armor_armor_class"
)

// Columns holds all SQL columns for armor fields.
var Columns = []string{
	FieldID,
	FieldArmorCategory,
	FieldStrMinimum,
	FieldStealthDisadvantage,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "armors"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"armor_equipment",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// ArmorCategory defines the type for the "armor_category" enum field.
type ArmorCategory string

// ArmorCategory values.
const (
	ArmorCategoryLight  ArmorCategory = "light"
	ArmorCategoryMedium ArmorCategory = "medium"
	ArmorCategoryHeavy  ArmorCategory = "heavy"
	ArmorCategoryShield ArmorCategory = "shield"
)

func (ac ArmorCategory) String() string {
	return string(ac)
}

// ArmorCategoryValidator is a validator for the "armor_category" field enum values. It is called by the builders before save.
func ArmorCategoryValidator(ac ArmorCategory) error {
	switch ac {
	case ArmorCategoryLight, ArmorCategoryMedium, ArmorCategoryHeavy, ArmorCategoryShield:
		return nil
	default:
		return fmt.Errorf("armor: invalid enum value for armor_category field: %q", ac)
	}
}

// OrderOption defines the ordering options for the Armor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByArmorCategory orders the results by the armor_category field.
func ByArmorCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArmorCategory, opts...).ToFunc()
}

// ByStrMinimum orders the results by the str_minimum field.
func ByStrMinimum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStrMinimum, opts...).ToFunc()
}

// ByStealthDisadvantage orders the results by the stealth_disadvantage field.
func ByStealthDisadvantage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStealthDisadvantage, opts...).ToFunc()
}

// ByEquipmentField orders the results by equipment field.
func ByEquipmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEquipmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByArmorClassField orders the results by armor_class field.
func ByArmorClassField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArmorClassStep(), sql.OrderByField(field, opts...))
	}
}
func newEquipmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EquipmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EquipmentTable, EquipmentColumn),
	)
}
func newArmorClassStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArmorClassInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ArmorClassTable, ArmorClassColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e ArmorCategory) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *ArmorCategory) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = ArmorCategory(str)
	if err := ArmorCategoryValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid ArmorCategory", str)
	}
	return nil
}
