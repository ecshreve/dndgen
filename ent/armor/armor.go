// Code generated by ent, DO NOT EDIT.

package armor

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the armor type in the database.
	Label = "armor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStealthDisadvantage holds the string denoting the stealth_disadvantage field in the database.
	FieldStealthDisadvantage = "stealth_disadvantage"
	// FieldMinStrength holds the string denoting the min_strength field in the database.
	FieldMinStrength = "min_strength"
	// FieldEquipmentID holds the string denoting the equipment_id field in the database.
	FieldEquipmentID = "equipment_id"
	// EdgeEquipment holds the string denoting the equipment edge name in mutations.
	EdgeEquipment = "equipment"
	// EdgeArmorClass holds the string denoting the armor_class edge name in mutations.
	EdgeArmorClass = "armor_class"
	// Table holds the table name of the armor in the database.
	Table = "armors"
	// EquipmentTable is the table that holds the equipment relation/edge.
	EquipmentTable = "armors"
	// EquipmentInverseTable is the table name for the Equipment entity.
	// It exists in this package in order to avoid circular dependency with the "equipment" package.
	EquipmentInverseTable = "equipment"
	// EquipmentColumn is the table column denoting the equipment relation/edge.
	EquipmentColumn = "equipment_id"
	// ArmorClassTable is the table that holds the armor_class relation/edge.
	ArmorClassTable = "armor_classes"
	// ArmorClassInverseTable is the table name for the ArmorClass entity.
	// It exists in this package in order to avoid circular dependency with the "armorclass" package.
	ArmorClassInverseTable = "armor_classes"
	// ArmorClassColumn is the table column denoting the armor_class relation/edge.
	ArmorClassColumn = "armor_armor_class"
)

// Columns holds all SQL columns for armor fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldStealthDisadvantage,
	FieldMinStrength,
	FieldEquipmentID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Armor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStealthDisadvantage orders the results by the stealth_disadvantage field.
func ByStealthDisadvantage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStealthDisadvantage, opts...).ToFunc()
}

// ByMinStrength orders the results by the min_strength field.
func ByMinStrength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinStrength, opts...).ToFunc()
}

// ByEquipmentID orders the results by the equipment_id field.
func ByEquipmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEquipmentID, opts...).ToFunc()
}

// ByEquipmentField orders the results by equipment field.
func ByEquipmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEquipmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByArmorClassCount orders the results by armor_class count.
func ByArmorClassCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArmorClassStep(), opts...)
	}
}

// ByArmorClass orders the results by armor_class terms.
func ByArmorClass(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArmorClassStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEquipmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EquipmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, EquipmentTable, EquipmentColumn),
	)
}
func newArmorClassStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArmorClassInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ArmorClassTable, ArmorClassColumn),
	)
}
