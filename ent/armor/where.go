// Code generated by ent, DO NOT EDIT.

package armor

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Armor {
	return predicate.Armor(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Armor {
	return predicate.Armor(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Armor {
	return predicate.Armor(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Armor {
	return predicate.Armor(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Armor {
	return predicate.Armor(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Armor {
	return predicate.Armor(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Armor {
	return predicate.Armor(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Armor {
	return predicate.Armor(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Armor {
	return predicate.Armor(sql.FieldLTE(FieldID, id))
}

// StealthDisadvantage applies equality check predicate on the "stealth_disadvantage" field. It's identical to StealthDisadvantageEQ.
func StealthDisadvantage(v bool) predicate.Armor {
	return predicate.Armor(sql.FieldEQ(FieldStealthDisadvantage, v))
}

// ArmorClass applies equality check predicate on the "armor_class" field. It's identical to ArmorClassEQ.
func ArmorClass(v string) predicate.Armor {
	return predicate.Armor(sql.FieldEQ(FieldArmorClass, v))
}

// MinStrength applies equality check predicate on the "min_strength" field. It's identical to MinStrengthEQ.
func MinStrength(v int) predicate.Armor {
	return predicate.Armor(sql.FieldEQ(FieldMinStrength, v))
}

// StealthDisadvantageEQ applies the EQ predicate on the "stealth_disadvantage" field.
func StealthDisadvantageEQ(v bool) predicate.Armor {
	return predicate.Armor(sql.FieldEQ(FieldStealthDisadvantage, v))
}

// StealthDisadvantageNEQ applies the NEQ predicate on the "stealth_disadvantage" field.
func StealthDisadvantageNEQ(v bool) predicate.Armor {
	return predicate.Armor(sql.FieldNEQ(FieldStealthDisadvantage, v))
}

// ArmorClassEQ applies the EQ predicate on the "armor_class" field.
func ArmorClassEQ(v string) predicate.Armor {
	return predicate.Armor(sql.FieldEQ(FieldArmorClass, v))
}

// ArmorClassNEQ applies the NEQ predicate on the "armor_class" field.
func ArmorClassNEQ(v string) predicate.Armor {
	return predicate.Armor(sql.FieldNEQ(FieldArmorClass, v))
}

// ArmorClassIn applies the In predicate on the "armor_class" field.
func ArmorClassIn(vs ...string) predicate.Armor {
	return predicate.Armor(sql.FieldIn(FieldArmorClass, vs...))
}

// ArmorClassNotIn applies the NotIn predicate on the "armor_class" field.
func ArmorClassNotIn(vs ...string) predicate.Armor {
	return predicate.Armor(sql.FieldNotIn(FieldArmorClass, vs...))
}

// ArmorClassGT applies the GT predicate on the "armor_class" field.
func ArmorClassGT(v string) predicate.Armor {
	return predicate.Armor(sql.FieldGT(FieldArmorClass, v))
}

// ArmorClassGTE applies the GTE predicate on the "armor_class" field.
func ArmorClassGTE(v string) predicate.Armor {
	return predicate.Armor(sql.FieldGTE(FieldArmorClass, v))
}

// ArmorClassLT applies the LT predicate on the "armor_class" field.
func ArmorClassLT(v string) predicate.Armor {
	return predicate.Armor(sql.FieldLT(FieldArmorClass, v))
}

// ArmorClassLTE applies the LTE predicate on the "armor_class" field.
func ArmorClassLTE(v string) predicate.Armor {
	return predicate.Armor(sql.FieldLTE(FieldArmorClass, v))
}

// ArmorClassContains applies the Contains predicate on the "armor_class" field.
func ArmorClassContains(v string) predicate.Armor {
	return predicate.Armor(sql.FieldContains(FieldArmorClass, v))
}

// ArmorClassHasPrefix applies the HasPrefix predicate on the "armor_class" field.
func ArmorClassHasPrefix(v string) predicate.Armor {
	return predicate.Armor(sql.FieldHasPrefix(FieldArmorClass, v))
}

// ArmorClassHasSuffix applies the HasSuffix predicate on the "armor_class" field.
func ArmorClassHasSuffix(v string) predicate.Armor {
	return predicate.Armor(sql.FieldHasSuffix(FieldArmorClass, v))
}

// ArmorClassEqualFold applies the EqualFold predicate on the "armor_class" field.
func ArmorClassEqualFold(v string) predicate.Armor {
	return predicate.Armor(sql.FieldEqualFold(FieldArmorClass, v))
}

// ArmorClassContainsFold applies the ContainsFold predicate on the "armor_class" field.
func ArmorClassContainsFold(v string) predicate.Armor {
	return predicate.Armor(sql.FieldContainsFold(FieldArmorClass, v))
}

// MinStrengthEQ applies the EQ predicate on the "min_strength" field.
func MinStrengthEQ(v int) predicate.Armor {
	return predicate.Armor(sql.FieldEQ(FieldMinStrength, v))
}

// MinStrengthNEQ applies the NEQ predicate on the "min_strength" field.
func MinStrengthNEQ(v int) predicate.Armor {
	return predicate.Armor(sql.FieldNEQ(FieldMinStrength, v))
}

// MinStrengthIn applies the In predicate on the "min_strength" field.
func MinStrengthIn(vs ...int) predicate.Armor {
	return predicate.Armor(sql.FieldIn(FieldMinStrength, vs...))
}

// MinStrengthNotIn applies the NotIn predicate on the "min_strength" field.
func MinStrengthNotIn(vs ...int) predicate.Armor {
	return predicate.Armor(sql.FieldNotIn(FieldMinStrength, vs...))
}

// MinStrengthGT applies the GT predicate on the "min_strength" field.
func MinStrengthGT(v int) predicate.Armor {
	return predicate.Armor(sql.FieldGT(FieldMinStrength, v))
}

// MinStrengthGTE applies the GTE predicate on the "min_strength" field.
func MinStrengthGTE(v int) predicate.Armor {
	return predicate.Armor(sql.FieldGTE(FieldMinStrength, v))
}

// MinStrengthLT applies the LT predicate on the "min_strength" field.
func MinStrengthLT(v int) predicate.Armor {
	return predicate.Armor(sql.FieldLT(FieldMinStrength, v))
}

// MinStrengthLTE applies the LTE predicate on the "min_strength" field.
func MinStrengthLTE(v int) predicate.Armor {
	return predicate.Armor(sql.FieldLTE(FieldMinStrength, v))
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.Armor {
	return predicate.Armor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EquipmentTable, EquipmentPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.Armor {
	return predicate.Armor(func(s *sql.Selector) {
		step := newEquipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Armor) predicate.Armor {
	return predicate.Armor(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Armor) predicate.Armor {
	return predicate.Armor(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Armor) predicate.Armor {
	return predicate.Armor(func(s *sql.Selector) {
		p(s.Not())
	})
}
