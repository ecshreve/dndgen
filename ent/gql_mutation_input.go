// Code generated by ent, DO NOT EDIT.

package ent

// CreateCharacterInput represents a mutation input for creating characters.
type CreateCharacterInput struct {
	Name             string
	Age              *int
	Level            *int
	ProficiencyBonus *int
	RaceID           *int
	ClassID          *int
	AlignmentID      *int
	ProficiencyIDs   []int
	AbilityScoreIDs  []int
	SkillIDs         []int
}

// Mutate applies the CreateCharacterInput on the CharacterMutation builder.
func (i *CreateCharacterInput) Mutate(m *CharacterMutation) {
	m.SetName(i.Name)
	if v := i.Age; v != nil {
		m.SetAge(*v)
	}
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	if v := i.ProficiencyBonus; v != nil {
		m.SetProficiencyBonus(*v)
	}
	if v := i.RaceID; v != nil {
		m.SetRaceID(*v)
	}
	if v := i.ClassID; v != nil {
		m.SetClassID(*v)
	}
	if v := i.AlignmentID; v != nil {
		m.SetAlignmentID(*v)
	}
	if v := i.ProficiencyIDs; len(v) > 0 {
		m.AddProficiencyIDs(v...)
	}
	if v := i.AbilityScoreIDs; len(v) > 0 {
		m.AddAbilityScoreIDs(v...)
	}
	if v := i.SkillIDs; len(v) > 0 {
		m.AddSkillIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCharacterInput on the CharacterCreate builder.
func (c *CharacterCreate) SetInput(i CreateCharacterInput) *CharacterCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCharacterInput represents a mutation input for updating characters.
type UpdateCharacterInput struct {
	Name                  *string
	Age                   *int
	Level                 *int
	ProficiencyBonus      *int
	ClearRace             bool
	RaceID                *int
	ClearClass            bool
	ClassID               *int
	ClearAlignment        bool
	AlignmentID           *int
	ClearProficiencies    bool
	AddProficiencyIDs     []int
	RemoveProficiencyIDs  []int
	ClearAbilityScores    bool
	AddAbilityScoreIDs    []int
	RemoveAbilityScoreIDs []int
	ClearSkills           bool
	AddSkillIDs           []int
	RemoveSkillIDs        []int
}

// Mutate applies the UpdateCharacterInput on the CharacterMutation builder.
func (i *UpdateCharacterInput) Mutate(m *CharacterMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Age; v != nil {
		m.SetAge(*v)
	}
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	if v := i.ProficiencyBonus; v != nil {
		m.SetProficiencyBonus(*v)
	}
	if i.ClearRace {
		m.ClearRace()
	}
	if v := i.RaceID; v != nil {
		m.SetRaceID(*v)
	}
	if i.ClearClass {
		m.ClearClass()
	}
	if v := i.ClassID; v != nil {
		m.SetClassID(*v)
	}
	if i.ClearAlignment {
		m.ClearAlignment()
	}
	if v := i.AlignmentID; v != nil {
		m.SetAlignmentID(*v)
	}
	if i.ClearProficiencies {
		m.ClearProficiencies()
	}
	if v := i.AddProficiencyIDs; len(v) > 0 {
		m.AddProficiencyIDs(v...)
	}
	if v := i.RemoveProficiencyIDs; len(v) > 0 {
		m.RemoveProficiencyIDs(v...)
	}
	if i.ClearAbilityScores {
		m.ClearAbilityScores()
	}
	if v := i.AddAbilityScoreIDs; len(v) > 0 {
		m.AddAbilityScoreIDs(v...)
	}
	if v := i.RemoveAbilityScoreIDs; len(v) > 0 {
		m.RemoveAbilityScoreIDs(v...)
	}
	if i.ClearSkills {
		m.ClearSkills()
	}
	if v := i.AddSkillIDs; len(v) > 0 {
		m.AddSkillIDs(v...)
	}
	if v := i.RemoveSkillIDs; len(v) > 0 {
		m.RemoveSkillIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCharacterInput on the CharacterUpdate builder.
func (c *CharacterUpdate) SetInput(i UpdateCharacterInput) *CharacterUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCharacterInput on the CharacterUpdateOne builder.
func (c *CharacterUpdateOne) SetInput(i UpdateCharacterInput) *CharacterUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
