// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/alignment"
	"github.com/ecshreve/dndgen/ent/language"
	"github.com/ecshreve/dndgen/ent/schema"
	"github.com/ecshreve/dndgen/ent/skill"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	abilityscoreMixin := schema.AbilityScore{}.Mixin()
	abilityscoreMixinFields0 := abilityscoreMixin[0].Fields()
	_ = abilityscoreMixinFields0
	abilityscoreFields := schema.AbilityScore{}.Fields()
	_ = abilityscoreFields
	// abilityscoreDescIndx is the schema descriptor for indx field.
	abilityscoreDescIndx := abilityscoreMixinFields0[0].Descriptor()
	// abilityscore.IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	abilityscore.IndxValidator = abilityscoreDescIndx.Validators[0].(func(string) error)
	// abilityscoreDescName is the schema descriptor for name field.
	abilityscoreDescName := abilityscoreMixinFields0[1].Descriptor()
	// abilityscore.NameValidator is a validator for the "name" field. It is called by the builders before save.
	abilityscore.NameValidator = abilityscoreDescName.Validators[0].(func(string) error)
	alignmentMixin := schema.Alignment{}.Mixin()
	alignmentMixinFields0 := alignmentMixin[0].Fields()
	_ = alignmentMixinFields0
	alignmentFields := schema.Alignment{}.Fields()
	_ = alignmentFields
	// alignmentDescIndx is the schema descriptor for indx field.
	alignmentDescIndx := alignmentMixinFields0[0].Descriptor()
	// alignment.IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	alignment.IndxValidator = alignmentDescIndx.Validators[0].(func(string) error)
	// alignmentDescName is the schema descriptor for name field.
	alignmentDescName := alignmentMixinFields0[1].Descriptor()
	// alignment.NameValidator is a validator for the "name" field. It is called by the builders before save.
	alignment.NameValidator = alignmentDescName.Validators[0].(func(string) error)
	languageMixin := schema.Language{}.Mixin()
	languageMixinFields0 := languageMixin[0].Fields()
	_ = languageMixinFields0
	languageFields := schema.Language{}.Fields()
	_ = languageFields
	// languageDescIndx is the schema descriptor for indx field.
	languageDescIndx := languageMixinFields0[0].Descriptor()
	// language.IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	language.IndxValidator = languageDescIndx.Validators[0].(func(string) error)
	// languageDescName is the schema descriptor for name field.
	languageDescName := languageMixinFields0[1].Descriptor()
	// language.NameValidator is a validator for the "name" field. It is called by the builders before save.
	language.NameValidator = languageDescName.Validators[0].(func(string) error)
	skillMixin := schema.Skill{}.Mixin()
	skillMixinFields0 := skillMixin[0].Fields()
	_ = skillMixinFields0
	skillFields := schema.Skill{}.Fields()
	_ = skillFields
	// skillDescIndx is the schema descriptor for indx field.
	skillDescIndx := skillMixinFields0[0].Descriptor()
	// skill.IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	skill.IndxValidator = skillDescIndx.Validators[0].(func(string) error)
	// skillDescName is the schema descriptor for name field.
	skillDescName := skillMixinFields0[1].Descriptor()
	// skill.NameValidator is a validator for the "name" field. It is called by the builders before save.
	skill.NameValidator = skillDescName.Validators[0].(func(string) error)
}
