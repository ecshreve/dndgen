// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/abilitybonuschoice"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// AbilityBonusChoiceDelete is the builder for deleting a AbilityBonusChoice entity.
type AbilityBonusChoiceDelete struct {
	config
	hooks    []Hook
	mutation *AbilityBonusChoiceMutation
}

// Where appends a list predicates to the AbilityBonusChoiceDelete builder.
func (abcd *AbilityBonusChoiceDelete) Where(ps ...predicate.AbilityBonusChoice) *AbilityBonusChoiceDelete {
	abcd.mutation.Where(ps...)
	return abcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (abcd *AbilityBonusChoiceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, abcd.sqlExec, abcd.mutation, abcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (abcd *AbilityBonusChoiceDelete) ExecX(ctx context.Context) int {
	n, err := abcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (abcd *AbilityBonusChoiceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(abilitybonuschoice.Table, sqlgraph.NewFieldSpec(abilitybonuschoice.FieldID, field.TypeInt))
	if ps := abcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, abcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	abcd.mutation.done = true
	return affected, err
}

// AbilityBonusChoiceDeleteOne is the builder for deleting a single AbilityBonusChoice entity.
type AbilityBonusChoiceDeleteOne struct {
	abcd *AbilityBonusChoiceDelete
}

// Where appends a list predicates to the AbilityBonusChoiceDelete builder.
func (abcdo *AbilityBonusChoiceDeleteOne) Where(ps ...predicate.AbilityBonusChoice) *AbilityBonusChoiceDeleteOne {
	abcdo.abcd.mutation.Where(ps...)
	return abcdo
}

// Exec executes the deletion query.
func (abcdo *AbilityBonusChoiceDeleteOne) Exec(ctx context.Context) error {
	n, err := abcdo.abcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{abilitybonuschoice.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (abcdo *AbilityBonusChoiceDeleteOne) ExecX(ctx context.Context) {
	if err := abcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
