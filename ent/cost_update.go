// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/coin"
	"github.com/ecshreve/dndgen/ent/cost"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// CostUpdate is the builder for updating Cost entities.
type CostUpdate struct {
	config
	hooks    []Hook
	mutation *CostMutation
}

// Where appends a list predicates to the CostUpdate builder.
func (cu *CostUpdate) Where(ps ...predicate.Cost) *CostUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetQuantity sets the "quantity" field.
func (cu *CostUpdate) SetQuantity(i int) *CostUpdate {
	cu.mutation.ResetQuantity()
	cu.mutation.SetQuantity(i)
	return cu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (cu *CostUpdate) SetNillableQuantity(i *int) *CostUpdate {
	if i != nil {
		cu.SetQuantity(*i)
	}
	return cu
}

// AddQuantity adds i to the "quantity" field.
func (cu *CostUpdate) AddQuantity(i int) *CostUpdate {
	cu.mutation.AddQuantity(i)
	return cu
}

// SetCoinID sets the "coin" edge to the Coin entity by ID.
func (cu *CostUpdate) SetCoinID(id int) *CostUpdate {
	cu.mutation.SetCoinID(id)
	return cu
}

// SetCoin sets the "coin" edge to the Coin entity.
func (cu *CostUpdate) SetCoin(c *Coin) *CostUpdate {
	return cu.SetCoinID(c.ID)
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by ID.
func (cu *CostUpdate) SetEquipmentID(id int) *CostUpdate {
	cu.mutation.SetEquipmentID(id)
	return cu
}

// SetNillableEquipmentID sets the "equipment" edge to the Equipment entity by ID if the given value is not nil.
func (cu *CostUpdate) SetNillableEquipmentID(id *int) *CostUpdate {
	if id != nil {
		cu = cu.SetEquipmentID(*id)
	}
	return cu
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (cu *CostUpdate) SetEquipment(e *Equipment) *CostUpdate {
	return cu.SetEquipmentID(e.ID)
}

// Mutation returns the CostMutation object of the builder.
func (cu *CostUpdate) Mutation() *CostMutation {
	return cu.mutation
}

// ClearCoin clears the "coin" edge to the Coin entity.
func (cu *CostUpdate) ClearCoin() *CostUpdate {
	cu.mutation.ClearCoin()
	return cu
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (cu *CostUpdate) ClearEquipment() *CostUpdate {
	cu.mutation.ClearEquipment()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CostUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CostUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CostUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CostUpdate) check() error {
	if cu.mutation.CoinCleared() && len(cu.mutation.CoinIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Cost.coin"`)
	}
	return nil
}

func (cu *CostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cost.Table, cost.Columns, sqlgraph.NewFieldSpec(cost.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Quantity(); ok {
		_spec.SetField(cost.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedQuantity(); ok {
		_spec.AddField(cost.FieldQuantity, field.TypeInt, value)
	}
	if cu.mutation.CoinCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cost.CoinTable,
			Columns: []string{cost.CoinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CoinIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cost.CoinTable,
			Columns: []string{cost.CoinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.EquipmentTable,
			Columns: []string{cost.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.EquipmentTable,
			Columns: []string{cost.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CostUpdateOne is the builder for updating a single Cost entity.
type CostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CostMutation
}

// SetQuantity sets the "quantity" field.
func (cuo *CostUpdateOne) SetQuantity(i int) *CostUpdateOne {
	cuo.mutation.ResetQuantity()
	cuo.mutation.SetQuantity(i)
	return cuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (cuo *CostUpdateOne) SetNillableQuantity(i *int) *CostUpdateOne {
	if i != nil {
		cuo.SetQuantity(*i)
	}
	return cuo
}

// AddQuantity adds i to the "quantity" field.
func (cuo *CostUpdateOne) AddQuantity(i int) *CostUpdateOne {
	cuo.mutation.AddQuantity(i)
	return cuo
}

// SetCoinID sets the "coin" edge to the Coin entity by ID.
func (cuo *CostUpdateOne) SetCoinID(id int) *CostUpdateOne {
	cuo.mutation.SetCoinID(id)
	return cuo
}

// SetCoin sets the "coin" edge to the Coin entity.
func (cuo *CostUpdateOne) SetCoin(c *Coin) *CostUpdateOne {
	return cuo.SetCoinID(c.ID)
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by ID.
func (cuo *CostUpdateOne) SetEquipmentID(id int) *CostUpdateOne {
	cuo.mutation.SetEquipmentID(id)
	return cuo
}

// SetNillableEquipmentID sets the "equipment" edge to the Equipment entity by ID if the given value is not nil.
func (cuo *CostUpdateOne) SetNillableEquipmentID(id *int) *CostUpdateOne {
	if id != nil {
		cuo = cuo.SetEquipmentID(*id)
	}
	return cuo
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (cuo *CostUpdateOne) SetEquipment(e *Equipment) *CostUpdateOne {
	return cuo.SetEquipmentID(e.ID)
}

// Mutation returns the CostMutation object of the builder.
func (cuo *CostUpdateOne) Mutation() *CostMutation {
	return cuo.mutation
}

// ClearCoin clears the "coin" edge to the Coin entity.
func (cuo *CostUpdateOne) ClearCoin() *CostUpdateOne {
	cuo.mutation.ClearCoin()
	return cuo
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (cuo *CostUpdateOne) ClearEquipment() *CostUpdateOne {
	cuo.mutation.ClearEquipment()
	return cuo
}

// Where appends a list predicates to the CostUpdate builder.
func (cuo *CostUpdateOne) Where(ps ...predicate.Cost) *CostUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CostUpdateOne) Select(field string, fields ...string) *CostUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cost entity.
func (cuo *CostUpdateOne) Save(ctx context.Context) (*Cost, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CostUpdateOne) SaveX(ctx context.Context) *Cost {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CostUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CostUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CostUpdateOne) check() error {
	if cuo.mutation.CoinCleared() && len(cuo.mutation.CoinIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Cost.coin"`)
	}
	return nil
}

func (cuo *CostUpdateOne) sqlSave(ctx context.Context) (_node *Cost, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cost.Table, cost.Columns, sqlgraph.NewFieldSpec(cost.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cost.FieldID)
		for _, f := range fields {
			if !cost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Quantity(); ok {
		_spec.SetField(cost.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedQuantity(); ok {
		_spec.AddField(cost.FieldQuantity, field.TypeInt, value)
	}
	if cuo.mutation.CoinCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cost.CoinTable,
			Columns: []string{cost.CoinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CoinIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cost.CoinTable,
			Columns: []string{cost.CoinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.EquipmentTable,
			Columns: []string{cost.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.EquipmentTable,
			Columns: []string{cost.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Cost{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
