// Code generated by ent, DO NOT EDIT.

package weapon

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Weapon {
	return predicate.Weapon(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Weapon {
	return predicate.Weapon(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Weapon {
	return predicate.Weapon(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Weapon {
	return predicate.Weapon(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Weapon {
	return predicate.Weapon(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Weapon {
	return predicate.Weapon(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Weapon {
	return predicate.Weapon(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Weapon {
	return predicate.Weapon(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Weapon {
	return predicate.Weapon(sql.FieldLTE(FieldID, id))
}

// Properties applies equality check predicate on the "properties" field. It's identical to PropertiesEQ.
func Properties(v string) predicate.Weapon {
	return predicate.Weapon(sql.FieldEQ(FieldProperties, v))
}

// PropertiesEQ applies the EQ predicate on the "properties" field.
func PropertiesEQ(v string) predicate.Weapon {
	return predicate.Weapon(sql.FieldEQ(FieldProperties, v))
}

// PropertiesNEQ applies the NEQ predicate on the "properties" field.
func PropertiesNEQ(v string) predicate.Weapon {
	return predicate.Weapon(sql.FieldNEQ(FieldProperties, v))
}

// PropertiesIn applies the In predicate on the "properties" field.
func PropertiesIn(vs ...string) predicate.Weapon {
	return predicate.Weapon(sql.FieldIn(FieldProperties, vs...))
}

// PropertiesNotIn applies the NotIn predicate on the "properties" field.
func PropertiesNotIn(vs ...string) predicate.Weapon {
	return predicate.Weapon(sql.FieldNotIn(FieldProperties, vs...))
}

// PropertiesGT applies the GT predicate on the "properties" field.
func PropertiesGT(v string) predicate.Weapon {
	return predicate.Weapon(sql.FieldGT(FieldProperties, v))
}

// PropertiesGTE applies the GTE predicate on the "properties" field.
func PropertiesGTE(v string) predicate.Weapon {
	return predicate.Weapon(sql.FieldGTE(FieldProperties, v))
}

// PropertiesLT applies the LT predicate on the "properties" field.
func PropertiesLT(v string) predicate.Weapon {
	return predicate.Weapon(sql.FieldLT(FieldProperties, v))
}

// PropertiesLTE applies the LTE predicate on the "properties" field.
func PropertiesLTE(v string) predicate.Weapon {
	return predicate.Weapon(sql.FieldLTE(FieldProperties, v))
}

// PropertiesContains applies the Contains predicate on the "properties" field.
func PropertiesContains(v string) predicate.Weapon {
	return predicate.Weapon(sql.FieldContains(FieldProperties, v))
}

// PropertiesHasPrefix applies the HasPrefix predicate on the "properties" field.
func PropertiesHasPrefix(v string) predicate.Weapon {
	return predicate.Weapon(sql.FieldHasPrefix(FieldProperties, v))
}

// PropertiesHasSuffix applies the HasSuffix predicate on the "properties" field.
func PropertiesHasSuffix(v string) predicate.Weapon {
	return predicate.Weapon(sql.FieldHasSuffix(FieldProperties, v))
}

// PropertiesEqualFold applies the EqualFold predicate on the "properties" field.
func PropertiesEqualFold(v string) predicate.Weapon {
	return predicate.Weapon(sql.FieldEqualFold(FieldProperties, v))
}

// PropertiesContainsFold applies the ContainsFold predicate on the "properties" field.
func PropertiesContainsFold(v string) predicate.Weapon {
	return predicate.Weapon(sql.FieldContainsFold(FieldProperties, v))
}

// HasRange applies the HasEdge predicate on the "range" edge.
func HasRange() predicate.Weapon {
	return predicate.Weapon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RangeTable, RangePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRangeWith applies the HasEdge predicate on the "range" edge with a given conditions (other predicates).
func HasRangeWith(preds ...predicate.WeaponRange) predicate.Weapon {
	return predicate.Weapon(func(s *sql.Selector) {
		step := newRangeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDamage applies the HasEdge predicate on the "damage" edge.
func HasDamage() predicate.Weapon {
	return predicate.Weapon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DamageTable, DamagePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDamageWith applies the HasEdge predicate on the "damage" edge with a given conditions (other predicates).
func HasDamageWith(preds ...predicate.WeaponDamage) predicate.Weapon {
	return predicate.Weapon(func(s *sql.Selector) {
		step := newDamageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTwoHandedDamage applies the HasEdge predicate on the "two_handed_damage" edge.
func HasTwoHandedDamage() predicate.Weapon {
	return predicate.Weapon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TwoHandedDamageTable, TwoHandedDamageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTwoHandedDamageWith applies the HasEdge predicate on the "two_handed_damage" edge with a given conditions (other predicates).
func HasTwoHandedDamageWith(preds ...predicate.WeaponDamage) predicate.Weapon {
	return predicate.Weapon(func(s *sql.Selector) {
		step := newTwoHandedDamageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.Weapon {
	return predicate.Weapon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EquipmentTable, EquipmentPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.Weapon {
	return predicate.Weapon(func(s *sql.Selector) {
		step := newEquipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Weapon) predicate.Weapon {
	return predicate.Weapon(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Weapon) predicate.Weapon {
	return predicate.Weapon(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Weapon) predicate.Weapon {
	return predicate.Weapon(func(s *sql.Selector) {
		p(s.Not())
	})
}
