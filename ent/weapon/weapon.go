// Code generated by ent, DO NOT EDIT.

package weapon

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the weapon type in the database.
	Label = "weapon"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldWeaponRange holds the string denoting the weapon_range field in the database.
	FieldWeaponRange = "weapon_range"
	// FieldEquipmentID holds the string denoting the equipment_id field in the database.
	FieldEquipmentID = "equipment_id"
	// EdgeEquipment holds the string denoting the equipment edge name in mutations.
	EdgeEquipment = "equipment"
	// EdgeDamageType holds the string denoting the damage_type edge name in mutations.
	EdgeDamageType = "damage_type"
	// EdgeWeaponDamage holds the string denoting the weapon_damage edge name in mutations.
	EdgeWeaponDamage = "weapon_damage"
	// Table holds the table name of the weapon in the database.
	Table = "weapons"
	// EquipmentTable is the table that holds the equipment relation/edge.
	EquipmentTable = "weapons"
	// EquipmentInverseTable is the table name for the Equipment entity.
	// It exists in this package in order to avoid circular dependency with the "equipment" package.
	EquipmentInverseTable = "equipment"
	// EquipmentColumn is the table column denoting the equipment relation/edge.
	EquipmentColumn = "equipment_id"
	// DamageTypeTable is the table that holds the damage_type relation/edge. The primary key declared below.
	DamageTypeTable = "weapon_damages"
	// DamageTypeInverseTable is the table name for the DamageType entity.
	// It exists in this package in order to avoid circular dependency with the "damagetype" package.
	DamageTypeInverseTable = "damage_types"
	// WeaponDamageTable is the table that holds the weapon_damage relation/edge.
	WeaponDamageTable = "weapon_damages"
	// WeaponDamageInverseTable is the table name for the WeaponDamage entity.
	// It exists in this package in order to avoid circular dependency with the "weapondamage" package.
	WeaponDamageInverseTable = "weapon_damages"
	// WeaponDamageColumn is the table column denoting the weapon_damage relation/edge.
	WeaponDamageColumn = "weapon_id"
)

// Columns holds all SQL columns for weapon fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldWeaponRange,
	FieldEquipmentID,
}

var (
	// DamageTypePrimaryKey and DamageTypeColumn2 are the table columns denoting the
	// primary key for the damage_type relation (M2M).
	DamageTypePrimaryKey = []string{"weapon_id", "damage_type_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Weapon queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByWeaponRange orders the results by the weapon_range field.
func ByWeaponRange(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeaponRange, opts...).ToFunc()
}

// ByEquipmentID orders the results by the equipment_id field.
func ByEquipmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEquipmentID, opts...).ToFunc()
}

// ByEquipmentField orders the results by equipment field.
func ByEquipmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEquipmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByDamageTypeCount orders the results by damage_type count.
func ByDamageTypeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDamageTypeStep(), opts...)
	}
}

// ByDamageType orders the results by damage_type terms.
func ByDamageType(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDamageTypeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWeaponDamageCount orders the results by weapon_damage count.
func ByWeaponDamageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWeaponDamageStep(), opts...)
	}
}

// ByWeaponDamage orders the results by weapon_damage terms.
func ByWeaponDamage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWeaponDamageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEquipmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EquipmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, EquipmentTable, EquipmentColumn),
	)
}
func newDamageTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DamageTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DamageTypeTable, DamageTypePrimaryKey...),
	)
}
func newWeaponDamageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WeaponDamageInverseTable, WeaponDamageColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, WeaponDamageTable, WeaponDamageColumn),
	)
}
