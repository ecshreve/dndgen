// Code generated by ent, DO NOT EDIT.

package weapon

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the weapon type in the database.
	Label = "weapon"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// EdgeMeleeRange holds the string denoting the melee_range edge name in mutations.
	EdgeMeleeRange = "melee_range"
	// EdgeThrowRange holds the string denoting the throw_range edge name in mutations.
	EdgeThrowRange = "throw_range"
	// Table holds the table name of the weapon in the database.
	Table = "weapons"
	// MeleeRangeTable is the table that holds the melee_range relation/edge.
	MeleeRangeTable = "weapons"
	// MeleeRangeInverseTable is the table name for the WeaponRange entity.
	// It exists in this package in order to avoid circular dependency with the "weaponrange" package.
	MeleeRangeInverseTable = "weapon_ranges"
	// MeleeRangeColumn is the table column denoting the melee_range relation/edge.
	MeleeRangeColumn = "weapon_melee_range"
	// ThrowRangeTable is the table that holds the throw_range relation/edge.
	ThrowRangeTable = "weapons"
	// ThrowRangeInverseTable is the table name for the WeaponRange entity.
	// It exists in this package in order to avoid circular dependency with the "weaponrange" package.
	ThrowRangeInverseTable = "weapon_ranges"
	// ThrowRangeColumn is the table column denoting the throw_range relation/edge.
	ThrowRangeColumn = "weapon_throw_range"
)

// Columns holds all SQL columns for weapon fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldWeight,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "weapons"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"weapon_melee_range",
	"weapon_throw_range",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
)

// OrderOption defines the ordering options for the Weapon queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByMeleeRangeField orders the results by melee_range field.
func ByMeleeRangeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMeleeRangeStep(), sql.OrderByField(field, opts...))
	}
}

// ByThrowRangeField orders the results by throw_range field.
func ByThrowRangeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newThrowRangeStep(), sql.OrderByField(field, opts...))
	}
}
func newMeleeRangeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MeleeRangeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MeleeRangeTable, MeleeRangeColumn),
	)
}
func newThrowRangeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ThrowRangeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ThrowRangeTable, ThrowRangeColumn),
	)
}
