// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/damage"
	"github.com/ecshreve/dndgen/ent/damagetype"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// DamageUpdate is the builder for updating Damage entities.
type DamageUpdate struct {
	config
	hooks    []Hook
	mutation *DamageMutation
}

// Where appends a list predicates to the DamageUpdate builder.
func (du *DamageUpdate) Where(ps ...predicate.Damage) *DamageUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetDamageDice sets the "damage_dice" field.
func (du *DamageUpdate) SetDamageDice(s string) *DamageUpdate {
	du.mutation.SetDamageDice(s)
	return du
}

// SetNillableDamageDice sets the "damage_dice" field if the given value is not nil.
func (du *DamageUpdate) SetNillableDamageDice(s *string) *DamageUpdate {
	if s != nil {
		du.SetDamageDice(*s)
	}
	return du
}

// SetDamageTypeID sets the "damage_type" edge to the DamageType entity by ID.
func (du *DamageUpdate) SetDamageTypeID(id int) *DamageUpdate {
	du.mutation.SetDamageTypeID(id)
	return du
}

// SetNillableDamageTypeID sets the "damage_type" edge to the DamageType entity by ID if the given value is not nil.
func (du *DamageUpdate) SetNillableDamageTypeID(id *int) *DamageUpdate {
	if id != nil {
		du = du.SetDamageTypeID(*id)
	}
	return du
}

// SetDamageType sets the "damage_type" edge to the DamageType entity.
func (du *DamageUpdate) SetDamageType(d *DamageType) *DamageUpdate {
	return du.SetDamageTypeID(d.ID)
}

// Mutation returns the DamageMutation object of the builder.
func (du *DamageUpdate) Mutation() *DamageMutation {
	return du.mutation
}

// ClearDamageType clears the "damage_type" edge to the DamageType entity.
func (du *DamageUpdate) ClearDamageType() *DamageUpdate {
	du.mutation.ClearDamageType()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DamageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DamageUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DamageUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DamageUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DamageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(damage.Table, damage.Columns, sqlgraph.NewFieldSpec(damage.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.DamageDice(); ok {
		_spec.SetField(damage.FieldDamageDice, field.TypeString, value)
	}
	if du.mutation.DamageTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   damage.DamageTypeTable,
			Columns: []string{damage.DamageTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(damagetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DamageTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   damage.DamageTypeTable,
			Columns: []string{damage.DamageTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(damagetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{damage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DamageUpdateOne is the builder for updating a single Damage entity.
type DamageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DamageMutation
}

// SetDamageDice sets the "damage_dice" field.
func (duo *DamageUpdateOne) SetDamageDice(s string) *DamageUpdateOne {
	duo.mutation.SetDamageDice(s)
	return duo
}

// SetNillableDamageDice sets the "damage_dice" field if the given value is not nil.
func (duo *DamageUpdateOne) SetNillableDamageDice(s *string) *DamageUpdateOne {
	if s != nil {
		duo.SetDamageDice(*s)
	}
	return duo
}

// SetDamageTypeID sets the "damage_type" edge to the DamageType entity by ID.
func (duo *DamageUpdateOne) SetDamageTypeID(id int) *DamageUpdateOne {
	duo.mutation.SetDamageTypeID(id)
	return duo
}

// SetNillableDamageTypeID sets the "damage_type" edge to the DamageType entity by ID if the given value is not nil.
func (duo *DamageUpdateOne) SetNillableDamageTypeID(id *int) *DamageUpdateOne {
	if id != nil {
		duo = duo.SetDamageTypeID(*id)
	}
	return duo
}

// SetDamageType sets the "damage_type" edge to the DamageType entity.
func (duo *DamageUpdateOne) SetDamageType(d *DamageType) *DamageUpdateOne {
	return duo.SetDamageTypeID(d.ID)
}

// Mutation returns the DamageMutation object of the builder.
func (duo *DamageUpdateOne) Mutation() *DamageMutation {
	return duo.mutation
}

// ClearDamageType clears the "damage_type" edge to the DamageType entity.
func (duo *DamageUpdateOne) ClearDamageType() *DamageUpdateOne {
	duo.mutation.ClearDamageType()
	return duo
}

// Where appends a list predicates to the DamageUpdate builder.
func (duo *DamageUpdateOne) Where(ps ...predicate.Damage) *DamageUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DamageUpdateOne) Select(field string, fields ...string) *DamageUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Damage entity.
func (duo *DamageUpdateOne) Save(ctx context.Context) (*Damage, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DamageUpdateOne) SaveX(ctx context.Context) *Damage {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DamageUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DamageUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DamageUpdateOne) sqlSave(ctx context.Context) (_node *Damage, err error) {
	_spec := sqlgraph.NewUpdateSpec(damage.Table, damage.Columns, sqlgraph.NewFieldSpec(damage.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Damage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, damage.FieldID)
		for _, f := range fields {
			if !damage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != damage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.DamageDice(); ok {
		_spec.SetField(damage.FieldDamageDice, field.TypeString, value)
	}
	if duo.mutation.DamageTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   damage.DamageTypeTable,
			Columns: []string{damage.DamageTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(damagetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DamageTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   damage.DamageTypeTable,
			Columns: []string{damage.DamageTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(damagetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Damage{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{damage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
