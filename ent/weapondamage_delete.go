// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/weapondamage"
)

// WeaponDamageDelete is the builder for deleting a WeaponDamage entity.
type WeaponDamageDelete struct {
	config
	hooks    []Hook
	mutation *WeaponDamageMutation
}

// Where appends a list predicates to the WeaponDamageDelete builder.
func (wdd *WeaponDamageDelete) Where(ps ...predicate.WeaponDamage) *WeaponDamageDelete {
	wdd.mutation.Where(ps...)
	return wdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wdd *WeaponDamageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wdd.sqlExec, wdd.mutation, wdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wdd *WeaponDamageDelete) ExecX(ctx context.Context) int {
	n, err := wdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wdd *WeaponDamageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(weapondamage.Table, sqlgraph.NewFieldSpec(weapondamage.FieldID, field.TypeInt))
	if ps := wdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wdd.mutation.done = true
	return affected, err
}

// WeaponDamageDeleteOne is the builder for deleting a single WeaponDamage entity.
type WeaponDamageDeleteOne struct {
	wdd *WeaponDamageDelete
}

// Where appends a list predicates to the WeaponDamageDelete builder.
func (wddo *WeaponDamageDeleteOne) Where(ps ...predicate.WeaponDamage) *WeaponDamageDeleteOne {
	wddo.wdd.mutation.Where(ps...)
	return wddo
}

// Exec executes the deletion query.
func (wddo *WeaponDamageDeleteOne) Exec(ctx context.Context) error {
	n, err := wddo.wdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{weapondamage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wddo *WeaponDamageDeleteOne) ExecX(ctx context.Context) {
	if err := wddo.Exec(ctx); err != nil {
		panic(err)
	}
}
