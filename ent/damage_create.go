// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/damage"
	"github.com/ecshreve/dndgen/ent/damagetype"
)

// DamageCreate is the builder for creating a Damage entity.
type DamageCreate struct {
	config
	mutation *DamageMutation
	hooks    []Hook
}

// SetDamageDice sets the "damage_dice" field.
func (dc *DamageCreate) SetDamageDice(s string) *DamageCreate {
	dc.mutation.SetDamageDice(s)
	return dc
}

// SetDamageTypeID sets the "damage_type" edge to the DamageType entity by ID.
func (dc *DamageCreate) SetDamageTypeID(id int) *DamageCreate {
	dc.mutation.SetDamageTypeID(id)
	return dc
}

// SetNillableDamageTypeID sets the "damage_type" edge to the DamageType entity by ID if the given value is not nil.
func (dc *DamageCreate) SetNillableDamageTypeID(id *int) *DamageCreate {
	if id != nil {
		dc = dc.SetDamageTypeID(*id)
	}
	return dc
}

// SetDamageType sets the "damage_type" edge to the DamageType entity.
func (dc *DamageCreate) SetDamageType(d *DamageType) *DamageCreate {
	return dc.SetDamageTypeID(d.ID)
}

// Mutation returns the DamageMutation object of the builder.
func (dc *DamageCreate) Mutation() *DamageMutation {
	return dc.mutation
}

// Save creates the Damage in the database.
func (dc *DamageCreate) Save(ctx context.Context) (*Damage, error) {
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DamageCreate) SaveX(ctx context.Context) *Damage {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DamageCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DamageCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DamageCreate) check() error {
	if _, ok := dc.mutation.DamageDice(); !ok {
		return &ValidationError{Name: "damage_dice", err: errors.New(`ent: missing required field "Damage.damage_dice"`)}
	}
	return nil
}

func (dc *DamageCreate) sqlSave(ctx context.Context) (*Damage, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DamageCreate) createSpec() (*Damage, *sqlgraph.CreateSpec) {
	var (
		_node = &Damage{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(damage.Table, sqlgraph.NewFieldSpec(damage.FieldID, field.TypeInt))
	)
	if value, ok := dc.mutation.DamageDice(); ok {
		_spec.SetField(damage.FieldDamageDice, field.TypeString, value)
		_node.DamageDice = value
	}
	if nodes := dc.mutation.DamageTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   damage.DamageTypeTable,
			Columns: []string{damage.DamageTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(damagetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.damage_damage_type = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DamageCreateBulk is the builder for creating many Damage entities in bulk.
type DamageCreateBulk struct {
	config
	err      error
	builders []*DamageCreate
}

// Save creates the Damage entities in the database.
func (dcb *DamageCreateBulk) Save(ctx context.Context) ([]*Damage, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Damage, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DamageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DamageCreateBulk) SaveX(ctx context.Context) []*Damage {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DamageCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DamageCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
