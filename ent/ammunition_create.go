// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/ammunition"
	"github.com/ecshreve/dndgen/ent/equipment"
)

// AmmunitionCreate is the builder for creating a Ammunition entity.
type AmmunitionCreate struct {
	config
	mutation *AmmunitionMutation
	hooks    []Hook
}

// SetQuantity sets the "quantity" field.
func (ac *AmmunitionCreate) SetQuantity(i int) *AmmunitionCreate {
	ac.mutation.SetQuantity(i)
	return ac
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (ac *AmmunitionCreate) AddEquipmentIDs(ids ...int) *AmmunitionCreate {
	ac.mutation.AddEquipmentIDs(ids...)
	return ac
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (ac *AmmunitionCreate) AddEquipment(e ...*Equipment) *AmmunitionCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEquipmentIDs(ids...)
}

// Mutation returns the AmmunitionMutation object of the builder.
func (ac *AmmunitionCreate) Mutation() *AmmunitionMutation {
	return ac.mutation
}

// Save creates the Ammunition in the database.
func (ac *AmmunitionCreate) Save(ctx context.Context) (*Ammunition, error) {
	return withHooks[*Ammunition, AmmunitionMutation](ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AmmunitionCreate) SaveX(ctx context.Context) *Ammunition {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AmmunitionCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AmmunitionCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AmmunitionCreate) check() error {
	if _, ok := ac.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "Ammunition.quantity"`)}
	}
	return nil
}

func (ac *AmmunitionCreate) sqlSave(ctx context.Context) (*Ammunition, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AmmunitionCreate) createSpec() (*Ammunition, *sqlgraph.CreateSpec) {
	var (
		_node = &Ammunition{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(ammunition.Table, sqlgraph.NewFieldSpec(ammunition.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.Quantity(); ok {
		_spec.SetField(ammunition.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if nodes := ac.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ammunition.EquipmentTable,
			Columns: ammunition.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AmmunitionCreateBulk is the builder for creating many Ammunition entities in bulk.
type AmmunitionCreateBulk struct {
	config
	builders []*AmmunitionCreate
}

// Save creates the Ammunition entities in the database.
func (acb *AmmunitionCreateBulk) Save(ctx context.Context) ([]*Ammunition, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Ammunition, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AmmunitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AmmunitionCreateBulk) SaveX(ctx context.Context) []*Ammunition {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AmmunitionCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AmmunitionCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
