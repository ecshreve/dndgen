// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/damage"
	"github.com/ecshreve/dndgen/ent/damagetype"
)

// Damage is the model entity for the Damage schema.
type Damage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DamageDice holds the value of the "damage_dice" field.
	DamageDice string `json:"damage_dice,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DamageQuery when eager-loading is set.
	Edges              DamageEdges `json:"-"`
	damage_damage_type *int
	selectValues       sql.SelectValues
}

// DamageEdges holds the relations/edges for other nodes in the graph.
type DamageEdges struct {
	// DamageType holds the value of the damage_type edge.
	DamageType *DamageType `json:"damage_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// DamageTypeOrErr returns the DamageType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DamageEdges) DamageTypeOrErr() (*DamageType, error) {
	if e.DamageType != nil {
		return e.DamageType, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: damagetype.Label}
	}
	return nil, &NotLoadedError{edge: "damage_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Damage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case damage.FieldID:
			values[i] = new(sql.NullInt64)
		case damage.FieldDamageDice:
			values[i] = new(sql.NullString)
		case damage.ForeignKeys[0]: // damage_damage_type
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Damage fields.
func (d *Damage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case damage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case damage.FieldDamageDice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field damage_dice", values[i])
			} else if value.Valid {
				d.DamageDice = value.String
			}
		case damage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field damage_damage_type", value)
			} else if value.Valid {
				d.damage_damage_type = new(int)
				*d.damage_damage_type = int(value.Int64)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Damage.
// This includes values selected through modifiers, order, etc.
func (d *Damage) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryDamageType queries the "damage_type" edge of the Damage entity.
func (d *Damage) QueryDamageType() *DamageTypeQuery {
	return NewDamageClient(d.config).QueryDamageType(d)
}

// Update returns a builder for updating this Damage.
// Note that you need to call Damage.Unwrap() before calling this method if this Damage
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Damage) Update() *DamageUpdateOne {
	return NewDamageClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Damage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Damage) Unwrap() *Damage {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Damage is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Damage) String() string {
	var builder strings.Builder
	builder.WriteString("Damage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("damage_dice=")
	builder.WriteString(d.DamageDice)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (d *Damage) MarshalJSON() ([]byte, error) {
	type Alias Damage
	return json.Marshal(&struct {
		*Alias
		DamageEdges
	}{
		Alias:       (*Alias)(d),
		DamageEdges: d.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (d *Damage) UnmarshalJSON(data []byte) error {
	type Alias Damage
	aux := &struct {
		*Alias
		DamageEdges
	}{
		Alias: (*Alias)(d),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	d.Edges = aux.DamageEdges
	return nil
}

func (dc *DamageCreate) SetDamage(input *Damage) *DamageCreate {
	dc.SetDamageDice(input.DamageDice)
	return dc
}

// Damages is a parsable slice of Damage.
type Damages []*Damage
