// Code generated by ent, DO NOT EDIT.

package startingequipment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ClassID applies equality check predicate on the "class_id" field. It's identical to ClassIDEQ.
func ClassID(v int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldEQ(FieldClassID, v))
}

// EquipmentID applies equality check predicate on the "equipment_id" field. It's identical to EquipmentIDEQ.
func EquipmentID(v int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldEQ(FieldEquipmentID, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldEQ(FieldQuantity, v))
}

// ClassIDEQ applies the EQ predicate on the "class_id" field.
func ClassIDEQ(v int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldEQ(FieldClassID, v))
}

// ClassIDNEQ applies the NEQ predicate on the "class_id" field.
func ClassIDNEQ(v int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldNEQ(FieldClassID, v))
}

// ClassIDIn applies the In predicate on the "class_id" field.
func ClassIDIn(vs ...int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldIn(FieldClassID, vs...))
}

// ClassIDNotIn applies the NotIn predicate on the "class_id" field.
func ClassIDNotIn(vs ...int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldNotIn(FieldClassID, vs...))
}

// EquipmentIDEQ applies the EQ predicate on the "equipment_id" field.
func EquipmentIDEQ(v int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldEQ(FieldEquipmentID, v))
}

// EquipmentIDNEQ applies the NEQ predicate on the "equipment_id" field.
func EquipmentIDNEQ(v int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldNEQ(FieldEquipmentID, v))
}

// EquipmentIDIn applies the In predicate on the "equipment_id" field.
func EquipmentIDIn(vs ...int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldIn(FieldEquipmentID, vs...))
}

// EquipmentIDNotIn applies the NotIn predicate on the "equipment_id" field.
func EquipmentIDNotIn(vs ...int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldNotIn(FieldEquipmentID, vs...))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.StartingEquipment {
	return predicate.StartingEquipment(sql.FieldLTE(FieldQuantity, v))
}

// HasClass applies the HasEdge predicate on the "class" edge.
func HasClass() predicate.StartingEquipment {
	return predicate.StartingEquipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, ClassColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassWith applies the HasEdge predicate on the "class" edge with a given conditions (other predicates).
func HasClassWith(preds ...predicate.Class) predicate.StartingEquipment {
	return predicate.StartingEquipment(func(s *sql.Selector) {
		step := newClassStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.StartingEquipment {
	return predicate.StartingEquipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, EquipmentColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.StartingEquipment {
	return predicate.StartingEquipment(func(s *sql.Selector) {
		step := newEquipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StartingEquipment) predicate.StartingEquipment {
	return predicate.StartingEquipment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StartingEquipment) predicate.StartingEquipment {
	return predicate.StartingEquipment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StartingEquipment) predicate.StartingEquipment {
	return predicate.StartingEquipment(func(s *sql.Selector) {
		p(s.Not())
	})
}
