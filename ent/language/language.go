// Code generated by ent, DO NOT EDIT.

package language

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the language type in the database.
	Label = "language"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldLanguageType holds the string denoting the language_type field in the database.
	FieldLanguageType = "language_type"
	// FieldScript holds the string denoting the script field in the database.
	FieldScript = "script"
	// EdgeTypicalSpeakers holds the string denoting the typical_speakers edge name in mutations.
	EdgeTypicalSpeakers = "typical_speakers"
	// Table holds the table name of the language in the database.
	Table = "languages"
	// TypicalSpeakersTable is the table that holds the typical_speakers relation/edge.
	TypicalSpeakersTable = "races"
	// TypicalSpeakersInverseTable is the table name for the Race entity.
	// It exists in this package in order to avoid circular dependency with the "race" package.
	TypicalSpeakersInverseTable = "races"
	// TypicalSpeakersColumn is the table column denoting the typical_speakers relation/edge.
	TypicalSpeakersColumn = "language_typical_speakers"
)

// Columns holds all SQL columns for language fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldDesc,
	FieldLanguageType,
	FieldScript,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// LanguageType defines the type for the "language_type" enum field.
type LanguageType string

// LanguageTypeSTANDARD is the default value of the LanguageType enum.
const DefaultLanguageType = LanguageTypeSTANDARD

// LanguageType values.
const (
	LanguageTypeSTANDARD LanguageType = "STANDARD"
	LanguageTypeEXOTIC   LanguageType = "EXOTIC"
)

func (lt LanguageType) String() string {
	return string(lt)
}

// LanguageTypeValidator is a validator for the "language_type" field enum values. It is called by the builders before save.
func LanguageTypeValidator(lt LanguageType) error {
	switch lt {
	case LanguageTypeSTANDARD, LanguageTypeEXOTIC:
		return nil
	default:
		return fmt.Errorf("language: invalid enum value for language_type field: %q", lt)
	}
}

// Script defines the type for the "script" enum field.
type Script string

// ScriptCommon is the default value of the Script enum.
const DefaultScript = ScriptCommon

// Script values.
const (
	ScriptCommon    Script = "Common"
	ScriptDwarvish  Script = "Dwarvish"
	ScriptElvish    Script = "Elvish"
	ScriptInfernal  Script = "Infernal"
	ScriptDraconic  Script = "Draconic"
	ScriptCelestial Script = "Celestial"
	ScriptAbyssal   Script = "Abyssal"
	ScriptGiant     Script = "Giant"
	ScriptGnomish   Script = "Gnomish"
	ScriptGoblin    Script = "Goblin"
	ScriptHalfling  Script = "Halfling"
	ScriptOrc       Script = "Orc"
	ScriptOther     Script = "Other"
)

func (s Script) String() string {
	return string(s)
}

// ScriptValidator is a validator for the "script" field enum values. It is called by the builders before save.
func ScriptValidator(s Script) error {
	switch s {
	case ScriptCommon, ScriptDwarvish, ScriptElvish, ScriptInfernal, ScriptDraconic, ScriptCelestial, ScriptAbyssal, ScriptGiant, ScriptGnomish, ScriptGoblin, ScriptHalfling, ScriptOrc, ScriptOther:
		return nil
	default:
		return fmt.Errorf("language: invalid enum value for script field: %q", s)
	}
}

// OrderOption defines the ordering options for the Language queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDesc orders the results by the desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// ByLanguageType orders the results by the language_type field.
func ByLanguageType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguageType, opts...).ToFunc()
}

// ByScript orders the results by the script field.
func ByScript(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScript, opts...).ToFunc()
}

// ByTypicalSpeakersCount orders the results by typical_speakers count.
func ByTypicalSpeakersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTypicalSpeakersStep(), opts...)
	}
}

// ByTypicalSpeakers orders the results by typical_speakers terms.
func ByTypicalSpeakers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTypicalSpeakersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTypicalSpeakersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TypicalSpeakersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TypicalSpeakersTable, TypicalSpeakersColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e LanguageType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *LanguageType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = LanguageType(str)
	if err := LanguageTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid LanguageType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Script) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Script) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Script(str)
	if err := ScriptValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Script", str)
	}
	return nil
}
