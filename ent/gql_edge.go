// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (ab *AbilityBonus) AbilityScore(ctx context.Context) (*AbilityScore, error) {
	result, err := ab.Edges.AbilityScoreOrErr()
	if IsNotLoaded(err) {
		result, err = ab.QueryAbilityScore().Only(ctx)
	}
	return result, err
}

func (ab *AbilityBonus) Race(ctx context.Context) (*Race, error) {
	result, err := ab.Edges.RaceOrErr()
	if IsNotLoaded(err) {
		result, err = ab.QueryRace().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ab *AbilityBonus) Subrace(ctx context.Context) (*Subrace, error) {
	result, err := ab.Edges.SubraceOrErr()
	if IsNotLoaded(err) {
		result, err = ab.QuerySubrace().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (as *AbilityScore) Skills(ctx context.Context) (result []*Skill, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = as.NamedSkills(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = as.Edges.SkillsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = as.QuerySkills().All(ctx)
	}
	return result, err
}

func (as *AbilityScore) AbilityBonuses(ctx context.Context) (result []*AbilityBonus, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = as.NamedAbilityBonuses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = as.Edges.AbilityBonusesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = as.QueryAbilityBonuses().All(ctx)
	}
	return result, err
}

func (a *Armor) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := a.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (a *Armor) ArmorClass(ctx context.Context) (result []*ArmorClass, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedArmorClass(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.ArmorClassOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryArmorClass().All(ctx)
	}
	return result, err
}

func (c *Class) Proficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryProficiencies().All(ctx)
	}
	return result, err
}

func (c *Class) ProficiencyChoices(ctx context.Context) (result []*ProficiencyChoice, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedProficiencyChoices(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ProficiencyChoicesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryProficiencyChoices().All(ctx)
	}
	return result, err
}

func (c *Class) StartingEquipment(ctx context.Context) (result []*Equipment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedStartingEquipment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.StartingEquipmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryStartingEquipment().All(ctx)
	}
	return result, err
}

func (dt *DamageType) WeaponDamage(ctx context.Context) (result []*WeaponDamage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = dt.NamedWeaponDamage(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = dt.Edges.WeaponDamageOrErr()
	}
	if IsNotLoaded(err) {
		result, err = dt.QueryWeaponDamage().All(ctx)
	}
	return result, err
}

func (e *Equipment) Cost(ctx context.Context) (*Cost, error) {
	result, err := e.Edges.CostOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryCost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Weapon(ctx context.Context) (*Weapon, error) {
	result, err := e.Edges.WeaponOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryWeapon().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Armor(ctx context.Context) (*Armor, error) {
	result, err := e.Edges.ArmorOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryArmor().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Gear(ctx context.Context) (*Gear, error) {
	result, err := e.Edges.GearOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryGear().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Tool(ctx context.Context) (*Tool, error) {
	result, err := e.Edges.ToolOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryTool().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Vehicle(ctx context.Context) (*Vehicle, error) {
	result, err := e.Edges.VehicleOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryVehicle().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Class(ctx context.Context) (result []*Class, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedClass(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.ClassOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryClass().All(ctx)
	}
	return result, err
}

func (ge *Gear) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := ge.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = ge.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (l *Language) RaceSpeakers(ctx context.Context) (result []*Race, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedRaceSpeakers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.RaceSpeakersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryRaceSpeakers().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) Classes(ctx context.Context) (result []*Class, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedClasses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ClassesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryClasses().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) Races(ctx context.Context) (result []*Race, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedRaces(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.RacesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryRaces().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) Subraces(ctx context.Context) (result []*Subrace, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedSubraces(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.SubracesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QuerySubraces().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) ProficiencyChoice(ctx context.Context) (result []*ProficiencyChoice, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedProficiencyChoice(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ProficiencyChoiceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryProficiencyChoice().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) Skill(ctx context.Context) (*Skill, error) {
	result, err := pr.Edges.SkillOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QuerySkill().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Proficiency) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := pr.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryEquipment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Proficiency) SavingThrow(ctx context.Context) (*AbilityScore, error) {
	result, err := pr.Edges.SavingThrowOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QuerySavingThrow().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pc *ProficiencyChoice) Options(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pc.NamedOptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pc.Edges.OptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pc.QueryOptions().All(ctx)
	}
	return result, err
}

func (pc *ProficiencyChoice) Class(ctx context.Context) (result []*Class, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pc.NamedClass(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pc.Edges.ClassOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pc.QueryClass().All(ctx)
	}
	return result, err
}

func (pc *ProficiencyChoice) Race(ctx context.Context) (result []*Race, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pc.NamedRace(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pc.Edges.RaceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pc.QueryRace().All(ctx)
	}
	return result, err
}

func (r *Race) Languages(ctx context.Context) (result []*Language, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedLanguages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.LanguagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryLanguages().All(ctx)
	}
	return result, err
}

func (r *Race) Proficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.ProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryProficiencies().All(ctx)
	}
	return result, err
}

func (r *Race) Subraces(ctx context.Context) (result []*Subrace, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedSubraces(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.SubracesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QuerySubraces().All(ctx)
	}
	return result, err
}

func (r *Race) Traits(ctx context.Context) (result []*Trait, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedTraits(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.TraitsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryTraits().All(ctx)
	}
	return result, err
}

func (r *Race) AbilityBonuses(ctx context.Context) (result []*AbilityBonus, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedAbilityBonuses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.AbilityBonusesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryAbilityBonuses().All(ctx)
	}
	return result, err
}

func (r *Race) StartingProficiencyOption(ctx context.Context) (*ProficiencyChoice, error) {
	result, err := r.Edges.StartingProficiencyOptionOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryStartingProficiencyOption().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Rule) RuleSections(ctx context.Context) (result []*RuleSection, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedRuleSections(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.RuleSectionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryRuleSections().All(ctx)
	}
	return result, err
}

func (rs *RuleSection) Rules(ctx context.Context) (result []*Rule, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = rs.NamedRules(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = rs.Edges.RulesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = rs.QueryRules().All(ctx)
	}
	return result, err
}

func (s *Skill) AbilityScore(ctx context.Context) (*AbilityScore, error) {
	result, err := s.Edges.AbilityScoreOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryAbilityScore().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Subrace) Race(ctx context.Context) (*Race, error) {
	result, err := s.Edges.RaceOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryRace().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Subrace) Proficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryProficiencies().All(ctx)
	}
	return result, err
}

func (s *Subrace) Traits(ctx context.Context) (result []*Trait, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedTraits(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.TraitsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryTraits().All(ctx)
	}
	return result, err
}

func (s *Subrace) AbilityBonuses(ctx context.Context) (result []*AbilityBonus, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedAbilityBonuses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.AbilityBonusesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryAbilityBonuses().All(ctx)
	}
	return result, err
}

func (t *Tool) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := t.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (t *Trait) Races(ctx context.Context) (result []*Race, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedRaces(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.RacesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryRaces().All(ctx)
	}
	return result, err
}

func (t *Trait) Subraces(ctx context.Context) (result []*Subrace, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedSubraces(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.SubracesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QuerySubraces().All(ctx)
	}
	return result, err
}

func (v *Vehicle) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := v.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = v.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (w *Weapon) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := w.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (w *Weapon) WeaponDamage(ctx context.Context) (result []*WeaponDamage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = w.NamedWeaponDamage(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = w.Edges.WeaponDamageOrErr()
	}
	if IsNotLoaded(err) {
		result, err = w.QueryWeaponDamage().All(ctx)
	}
	return result, err
}

func (w *Weapon) WeaponProperties(ctx context.Context) (result []*WeaponProperty, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = w.NamedWeaponProperties(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = w.Edges.WeaponPropertiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = w.QueryWeaponProperties().All(ctx)
	}
	return result, err
}

func (wd *WeaponDamage) Weapon(ctx context.Context) (*Weapon, error) {
	result, err := wd.Edges.WeaponOrErr()
	if IsNotLoaded(err) {
		result, err = wd.QueryWeapon().Only(ctx)
	}
	return result, err
}

func (wd *WeaponDamage) DamageType(ctx context.Context) (*DamageType, error) {
	result, err := wd.Edges.DamageTypeOrErr()
	if IsNotLoaded(err) {
		result, err = wd.QueryDamageType().Only(ctx)
	}
	return result, err
}

func (wp *WeaponProperty) Weapons(ctx context.Context) (result []*Weapon, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = wp.NamedWeapons(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = wp.Edges.WeaponsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = wp.QueryWeapons().All(ctx)
	}
	return result, err
}
