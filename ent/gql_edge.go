// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (ab *AbilityBonus) AbilityScore(ctx context.Context) (*AbilityScore, error) {
	result, err := ab.Edges.AbilityScoreOrErr()
	if IsNotLoaded(err) {
		result, err = ab.QueryAbilityScore().Only(ctx)
	}
	return result, err
}

func (ab *AbilityBonus) Race(ctx context.Context) (result []*Race, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ab.NamedRace(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ab.Edges.RaceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ab.QueryRace().All(ctx)
	}
	return result, err
}

func (ab *AbilityBonus) Options(ctx context.Context) (result []*AbilityBonusChoice, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ab.NamedOptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ab.Edges.OptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ab.QueryOptions().All(ctx)
	}
	return result, err
}

func (ab *AbilityBonus) Subrace(ctx context.Context) (result []*Subrace, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ab.NamedSubrace(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ab.Edges.SubraceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ab.QuerySubrace().All(ctx)
	}
	return result, err
}

func (abc *AbilityBonusChoice) AbilityBonuses(ctx context.Context) (result []*AbilityBonus, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = abc.NamedAbilityBonuses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = abc.Edges.AbilityBonusesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = abc.QueryAbilityBonuses().All(ctx)
	}
	return result, err
}

func (abc *AbilityBonusChoice) Race(ctx context.Context) (result []*Race, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = abc.NamedRace(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = abc.Edges.RaceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = abc.QueryRace().All(ctx)
	}
	return result, err
}

func (as *AbilityScore) Skills(ctx context.Context) (result []*Skill, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = as.NamedSkills(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = as.Edges.SkillsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = as.QuerySkills().All(ctx)
	}
	return result, err
}

func (as *AbilityScore) AbilityBonuses(ctx context.Context) (result []*AbilityBonus, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = as.NamedAbilityBonuses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = as.Edges.AbilityBonusesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = as.QueryAbilityBonuses().All(ctx)
	}
	return result, err
}

func (as *AbilityScore) Classes(ctx context.Context) (result []*Class, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = as.NamedClasses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = as.Edges.ClassesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = as.QueryClasses().All(ctx)
	}
	return result, err
}

func (a *Armor) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := a.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (c *Class) Proficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryProficiencies().All(ctx)
	}
	return result, err
}

func (c *Class) StartingEquipment(ctx context.Context) (result []*EquipmentEntry, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedStartingEquipment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.StartingEquipmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryStartingEquipment().All(ctx)
	}
	return result, err
}

func (c *Class) SavingThrows(ctx context.Context) (result []*AbilityScore, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedSavingThrows(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.SavingThrowsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QuerySavingThrows().All(ctx)
	}
	return result, err
}

func (c *Cost) Coin(ctx context.Context) (*Coin, error) {
	result, err := c.Edges.CoinOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCoin().Only(ctx)
	}
	return result, err
}

func (c *Cost) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := c.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryEquipment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dt *DamageType) Weapons(ctx context.Context) (result []*Weapon, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = dt.NamedWeapons(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = dt.Edges.WeaponsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = dt.QueryWeapons().All(ctx)
	}
	return result, err
}

func (e *Equipment) Cost(ctx context.Context) (*Cost, error) {
	result, err := e.Edges.CostOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryCost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Gear(ctx context.Context) (*Gear, error) {
	result, err := e.Edges.GearOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryGear().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Tool(ctx context.Context) (*Tool, error) {
	result, err := e.Edges.ToolOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryTool().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Weapon(ctx context.Context) (*Weapon, error) {
	result, err := e.Edges.WeaponOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryWeapon().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Vehicle(ctx context.Context) (*Vehicle, error) {
	result, err := e.Edges.VehicleOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryVehicle().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Armor(ctx context.Context) (*Armor, error) {
	result, err := e.Edges.ArmorOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryArmor().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) EquipmentEntries(ctx context.Context) (result []*EquipmentEntry, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedEquipmentEntries(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.EquipmentEntriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryEquipmentEntries().All(ctx)
	}
	return result, err
}

func (ee *EquipmentEntry) Class(ctx context.Context) (result []*Class, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ee.NamedClass(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ee.Edges.ClassOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ee.QueryClass().All(ctx)
	}
	return result, err
}

func (ee *EquipmentEntry) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := ee.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = ee.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (f *Feature) Prerequisites(ctx context.Context) (result []*Prerequisite, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedPrerequisites(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.PrerequisitesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryPrerequisites().All(ctx)
	}
	return result, err
}

func (ge *Gear) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := ge.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = ge.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (l *Language) Race(ctx context.Context) (result []*Race, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedRace(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.RaceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryRace().All(ctx)
	}
	return result, err
}

func (l *Language) Options(ctx context.Context) (result []*LanguageChoice, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedOptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.OptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryOptions().All(ctx)
	}
	return result, err
}

func (lc *LanguageChoice) Languages(ctx context.Context) (result []*Language, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = lc.NamedLanguages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = lc.Edges.LanguagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = lc.QueryLanguages().All(ctx)
	}
	return result, err
}

func (lc *LanguageChoice) Race(ctx context.Context) (*Race, error) {
	result, err := lc.Edges.RaceOrErr()
	if IsNotLoaded(err) {
		result, err = lc.QueryRace().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (lc *LanguageChoice) Subrace(ctx context.Context) (*Subrace, error) {
	result, err := lc.Edges.SubraceOrErr()
	if IsNotLoaded(err) {
		result, err = lc.QuerySubrace().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Prerequisite) Feature(ctx context.Context) (*Feature, error) {
	result, err := pr.Edges.FeatureOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryFeature().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Proficiency) Race(ctx context.Context) (result []*Race, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedRace(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.RaceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryRace().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) Options(ctx context.Context) (result []*ProficiencyChoice, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedOptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.OptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryOptions().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) Subrace(ctx context.Context) (result []*Subrace, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedSubrace(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.SubraceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QuerySubrace().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) Class(ctx context.Context) (result []*Class, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedClass(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ClassOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryClass().All(ctx)
	}
	return result, err
}

func (pc *ProficiencyChoice) Proficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pc.NamedProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pc.Edges.ProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pc.QueryProficiencies().All(ctx)
	}
	return result, err
}

func (pc *ProficiencyChoice) Race(ctx context.Context) (*Race, error) {
	result, err := pc.Edges.RaceOrErr()
	if IsNotLoaded(err) {
		result, err = pc.QueryRace().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Property) Weapons(ctx context.Context) (result []*Weapon, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedWeapons(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.WeaponsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryWeapons().All(ctx)
	}
	return result, err
}

func (r *Race) Traits(ctx context.Context) (result []*Trait, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedTraits(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.TraitsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryTraits().All(ctx)
	}
	return result, err
}

func (r *Race) StartingProficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedStartingProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.StartingProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryStartingProficiencies().All(ctx)
	}
	return result, err
}

func (r *Race) StartingProficiencyOptions(ctx context.Context) (*ProficiencyChoice, error) {
	result, err := r.Edges.StartingProficiencyOptionsOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryStartingProficiencyOptions().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Race) AbilityBonuses(ctx context.Context) (result []*AbilityBonus, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedAbilityBonuses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.AbilityBonusesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryAbilityBonuses().All(ctx)
	}
	return result, err
}

func (r *Race) AbilityBonusOptions(ctx context.Context) (*AbilityBonusChoice, error) {
	result, err := r.Edges.AbilityBonusOptionsOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryAbilityBonusOptions().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Race) Languages(ctx context.Context) (result []*Language, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedLanguages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.LanguagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryLanguages().All(ctx)
	}
	return result, err
}

func (r *Race) LanguageOptions(ctx context.Context) (*LanguageChoice, error) {
	result, err := r.Edges.LanguageOptionsOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryLanguageOptions().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Race) Subraces(ctx context.Context) (result []*Subrace, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedSubraces(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.SubracesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QuerySubraces().All(ctx)
	}
	return result, err
}

func (r *Rule) Sections(ctx context.Context) (result []*RuleSection, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedSections(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.SectionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QuerySections().All(ctx)
	}
	return result, err
}

func (rs *RuleSection) Rule(ctx context.Context) (*Rule, error) {
	result, err := rs.Edges.RuleOrErr()
	if IsNotLoaded(err) {
		result, err = rs.QueryRule().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Skill) AbilityScore(ctx context.Context) (*AbilityScore, error) {
	result, err := s.Edges.AbilityScoreOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryAbilityScore().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Subrace) Race(ctx context.Context) (*Race, error) {
	result, err := s.Edges.RaceOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryRace().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Subrace) AbilityBonuses(ctx context.Context) (result []*AbilityBonus, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedAbilityBonuses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.AbilityBonusesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryAbilityBonuses().All(ctx)
	}
	return result, err
}

func (s *Subrace) Proficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryProficiencies().All(ctx)
	}
	return result, err
}

func (s *Subrace) Traits(ctx context.Context) (result []*Trait, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedTraits(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.TraitsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryTraits().All(ctx)
	}
	return result, err
}

func (s *Subrace) LanguageOptions(ctx context.Context) (result []*LanguageChoice, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedLanguageOptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.LanguageOptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryLanguageOptions().All(ctx)
	}
	return result, err
}

func (t *Tool) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := t.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (t *Trait) Race(ctx context.Context) (result []*Race, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedRace(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.RaceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryRace().All(ctx)
	}
	return result, err
}

func (t *Trait) Subrace(ctx context.Context) (result []*Subrace, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedSubrace(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.SubraceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QuerySubrace().All(ctx)
	}
	return result, err
}

func (v *Vehicle) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := v.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = v.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (w *Weapon) Properties(ctx context.Context) (result []*Property, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = w.NamedProperties(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = w.Edges.PropertiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = w.QueryProperties().All(ctx)
	}
	return result, err
}

func (w *Weapon) DamageType(ctx context.Context) (*DamageType, error) {
	result, err := w.Edges.DamageTypeOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryDamageType().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Weapon) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := w.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryEquipment().Only(ctx)
	}
	return result, err
}
