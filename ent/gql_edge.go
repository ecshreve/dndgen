// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (ab *AbilityBonus) AbilityScore(ctx context.Context) (result []*AbilityScore, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ab.NamedAbilityScore(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ab.Edges.AbilityScoreOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ab.QueryAbilityScore().All(ctx)
	}
	return result, err
}

func (ab *AbilityBonus) Race(ctx context.Context) (result []*Race, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ab.NamedRace(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ab.Edges.RaceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ab.QueryRace().All(ctx)
	}
	return result, err
}

func (as *AbilityScore) Skills(ctx context.Context) (result []*Skill, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = as.NamedSkills(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = as.Edges.SkillsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = as.QuerySkills().All(ctx)
	}
	return result, err
}

func (as *AbilityScore) Proficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = as.NamedProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = as.Edges.ProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = as.QueryProficiencies().All(ctx)
	}
	return result, err
}

func (a *Ammunition) Equipment(ctx context.Context) (result []*Equipment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedEquipment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.EquipmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryEquipment().All(ctx)
	}
	return result, err
}

func (a *Armor) Equipment(ctx context.Context) (result []*Equipment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedEquipment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.EquipmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryEquipment().All(ctx)
	}
	return result, err
}

func (c *Class) SavingThrows(ctx context.Context) (result []*AbilityScore, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedSavingThrows(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.SavingThrowsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QuerySavingThrows().All(ctx)
	}
	return result, err
}

func (c *Class) StartingProficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedStartingProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.StartingProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryStartingProficiencies().All(ctx)
	}
	return result, err
}

func (c *Class) StartingEquipment(ctx context.Context) (result []*Equipment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedStartingEquipment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.StartingEquipmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryStartingEquipment().All(ctx)
	}
	return result, err
}

func (dt *DamageType) WeaponDamage(ctx context.Context) (*WeaponDamage, error) {
	result, err := dt.Edges.WeaponDamageOrErr()
	if IsNotLoaded(err) {
		result, err = dt.QueryWeaponDamage().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Weapon(ctx context.Context) (result []*Weapon, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedWeapon(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.WeaponOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryWeapon().All(ctx)
	}
	return result, err
}

func (e *Equipment) Armor(ctx context.Context) (result []*Armor, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedArmor(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.ArmorOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryArmor().All(ctx)
	}
	return result, err
}

func (e *Equipment) Gear(ctx context.Context) (result []*Gear, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedGear(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.GearOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryGear().All(ctx)
	}
	return result, err
}

func (e *Equipment) Pack(ctx context.Context) (result []*Pack, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedPack(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.PackOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryPack().All(ctx)
	}
	return result, err
}

func (e *Equipment) Ammunition(ctx context.Context) (result []*Ammunition, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedAmmunition(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.AmmunitionOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryAmmunition().All(ctx)
	}
	return result, err
}

func (e *Equipment) Vehicle(ctx context.Context) (result []*Vehicle, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedVehicle(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.VehicleOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryVehicle().All(ctx)
	}
	return result, err
}

func (e *Equipment) MagicItem(ctx context.Context) (result []*MagicItem, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedMagicItem(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.MagicItemOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryMagicItem().All(ctx)
	}
	return result, err
}

func (e *Equipment) Category(ctx context.Context) (result []*EquipmentCategory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedCategory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.CategoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryCategory().All(ctx)
	}
	return result, err
}

func (e *Equipment) Subcategory(ctx context.Context) (result []*EquipmentCategory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedSubcategory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.SubcategoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QuerySubcategory().All(ctx)
	}
	return result, err
}

func (e *Equipment) Proficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.ProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryProficiencies().All(ctx)
	}
	return result, err
}

func (ec *EquipmentCategory) Equipment(ctx context.Context) (result []*Equipment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ec.NamedEquipment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ec.Edges.EquipmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ec.QueryEquipment().All(ctx)
	}
	return result, err
}

func (ge *Gear) Equipment(ctx context.Context) (result []*Equipment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ge.NamedEquipment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ge.Edges.EquipmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ge.QueryEquipment().All(ctx)
	}
	return result, err
}

func (l *Language) Speakers(ctx context.Context) (result []*Race, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedSpeakers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.SpeakersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QuerySpeakers().All(ctx)
	}
	return result, err
}

func (mi *MagicItem) Equipment(ctx context.Context) (result []*Equipment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = mi.NamedEquipment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = mi.Edges.EquipmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = mi.QueryEquipment().All(ctx)
	}
	return result, err
}

func (pa *Pack) Equipment(ctx context.Context) (result []*Equipment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedEquipment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.EquipmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryEquipment().All(ctx)
	}
	return result, err
}

func (pr *Prerequisite) AbilityScore(ctx context.Context) (result []*AbilityScore, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedAbilityScore(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.AbilityScoreOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryAbilityScore().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) Races(ctx context.Context) (result []*Race, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedRaces(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.RacesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryRaces().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) Classes(ctx context.Context) (result []*Class, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedClasses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ClassesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryClasses().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) Skill(ctx context.Context) (result []*Skill, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedSkill(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.SkillOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QuerySkill().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) AbilityScore(ctx context.Context) (result []*AbilityScore, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedAbilityScore(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.AbilityScoreOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryAbilityScore().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) Equipment(ctx context.Context) (result []*Equipment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedEquipment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.EquipmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryEquipment().All(ctx)
	}
	return result, err
}

func (r *Race) Languages(ctx context.Context) (result []*Language, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedLanguages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.LanguagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryLanguages().All(ctx)
	}
	return result, err
}

func (r *Race) AbilityBonuses(ctx context.Context) (result []*AbilityBonus, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedAbilityBonuses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.AbilityBonusesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryAbilityBonuses().All(ctx)
	}
	return result, err
}

func (r *Race) StartingProficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedStartingProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.StartingProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryStartingProficiencies().All(ctx)
	}
	return result, err
}

func (s *Skill) AbilityScore(ctx context.Context) (result []*AbilityScore, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedAbilityScore(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.AbilityScoreOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryAbilityScore().All(ctx)
	}
	return result, err
}

func (s *Skill) Proficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryProficiencies().All(ctx)
	}
	return result, err
}

func (v *Vehicle) Equipment(ctx context.Context) (result []*Equipment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = v.NamedEquipment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = v.Edges.EquipmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = v.QueryEquipment().All(ctx)
	}
	return result, err
}

func (w *Weapon) Range(ctx context.Context) (result []*WeaponRange, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = w.NamedRange(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = w.Edges.RangeOrErr()
	}
	if IsNotLoaded(err) {
		result, err = w.QueryRange().All(ctx)
	}
	return result, err
}

func (w *Weapon) Damage(ctx context.Context) (result []*WeaponDamage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = w.NamedDamage(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = w.Edges.DamageOrErr()
	}
	if IsNotLoaded(err) {
		result, err = w.QueryDamage().All(ctx)
	}
	return result, err
}

func (w *Weapon) TwoHandedDamage(ctx context.Context) (result []*WeaponDamage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = w.NamedTwoHandedDamage(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = w.Edges.TwoHandedDamageOrErr()
	}
	if IsNotLoaded(err) {
		result, err = w.QueryTwoHandedDamage().All(ctx)
	}
	return result, err
}

func (w *Weapon) Equipment(ctx context.Context) (result []*Equipment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = w.NamedEquipment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = w.Edges.EquipmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = w.QueryEquipment().All(ctx)
	}
	return result, err
}

func (wd *WeaponDamage) DamageType(ctx context.Context) (result []*DamageType, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = wd.NamedDamageType(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = wd.Edges.DamageTypeOrErr()
	}
	if IsNotLoaded(err) {
		result, err = wd.QueryDamageType().All(ctx)
	}
	return result, err
}

func (wd *WeaponDamage) Weapon(ctx context.Context) (result []*Weapon, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = wd.NamedWeapon(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = wd.Edges.WeaponOrErr()
	}
	if IsNotLoaded(err) {
		result, err = wd.QueryWeapon().All(ctx)
	}
	return result, err
}

func (wr *WeaponRange) Weapon(ctx context.Context) (result []*Weapon, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = wr.NamedWeapon(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = wr.Edges.WeaponOrErr()
	}
	if IsNotLoaded(err) {
		result, err = wr.QueryWeapon().All(ctx)
	}
	return result, err
}
