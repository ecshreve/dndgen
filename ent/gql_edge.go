// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (as *AbilityScore) Skills(ctx context.Context) (result []*Skill, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = as.NamedSkills(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = as.Edges.SkillsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = as.QuerySkills().All(ctx)
	}
	return result, err
}

func (a *Armor) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := a.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (a *Armor) ArmorClass(ctx context.Context) (result []*ArmorClass, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedArmorClass(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.ArmorClassOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryArmorClass().All(ctx)
	}
	return result, err
}

func (c *Class) Proficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryProficiencies().All(ctx)
	}
	return result, err
}

func (e *Equipment) EquipmentCategory(ctx context.Context) (*EquipmentCategory, error) {
	result, err := e.Edges.EquipmentCategoryOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryEquipmentCategory().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Cost(ctx context.Context) (*Cost, error) {
	result, err := e.Edges.CostOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryCost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Weapon(ctx context.Context) (*Weapon, error) {
	result, err := e.Edges.WeaponOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryWeapon().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Armor(ctx context.Context) (*Armor, error) {
	result, err := e.Edges.ArmorOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryArmor().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Gear(ctx context.Context) (*Gear, error) {
	result, err := e.Edges.GearOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryGear().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Tool(ctx context.Context) (*Tool, error) {
	result, err := e.Edges.ToolOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryTool().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Equipment) Vehicle(ctx context.Context) (*Vehicle, error) {
	result, err := e.Edges.VehicleOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryVehicle().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ec *EquipmentCategory) Equipment(ctx context.Context) (result []*Equipment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ec.NamedEquipment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ec.Edges.EquipmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ec.QueryEquipment().All(ctx)
	}
	return result, err
}

func (ge *Gear) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := ge.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = ge.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (l *Language) Speakers(ctx context.Context) (result []*Race, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedSpeakers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.SpeakersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QuerySpeakers().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) Classes(ctx context.Context) (result []*Class, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedClasses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ClassesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryClasses().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) Races(ctx context.Context) (result []*Race, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedRaces(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.RacesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryRaces().All(ctx)
	}
	return result, err
}

func (pr *Proficiency) Skill(ctx context.Context) (*Skill, error) {
	result, err := pr.Edges.SkillOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QuerySkill().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Proficiency) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := pr.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryEquipment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Proficiency) SavingThrow(ctx context.Context) (*AbilityScore, error) {
	result, err := pr.Edges.SavingThrowOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QuerySavingThrow().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Race) Languages(ctx context.Context) (result []*Language, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedLanguages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.LanguagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryLanguages().All(ctx)
	}
	return result, err
}

func (r *Race) Proficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.ProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryProficiencies().All(ctx)
	}
	return result, err
}

func (s *Skill) AbilityScore(ctx context.Context) (*AbilityScore, error) {
	result, err := s.Edges.AbilityScoreOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryAbilityScore().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Skill) Proficiencies(ctx context.Context) (result []*Proficiency, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedProficiencies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ProficienciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryProficiencies().All(ctx)
	}
	return result, err
}

func (t *Tool) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := t.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (v *Vehicle) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := v.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = v.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (w *Weapon) Equipment(ctx context.Context) (*Equipment, error) {
	result, err := w.Edges.EquipmentOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryEquipment().Only(ctx)
	}
	return result, err
}

func (w *Weapon) Damage(ctx context.Context) (*WeaponDamage, error) {
	result, err := w.Edges.DamageOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryDamage().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (wd *WeaponDamage) DamageType(ctx context.Context) (result []*DamageType, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = wd.NamedDamageType(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = wd.Edges.DamageTypeOrErr()
	}
	if IsNotLoaded(err) {
		result, err = wd.QueryDamageType().All(ctx)
	}
	return result, err
}

func (wd *WeaponDamage) Weapon(ctx context.Context) (*Weapon, error) {
	result, err := wd.Edges.WeaponOrErr()
	if IsNotLoaded(err) {
		result, err = wd.QueryWeapon().Only(ctx)
	}
	return result, MaskNotFound(err)
}
