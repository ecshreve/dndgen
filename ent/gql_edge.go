// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (as *AbilityScore) Skills(ctx context.Context) (result []*Skill, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = as.NamedSkills(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = as.Edges.SkillsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = as.QuerySkills().All(ctx)
	}
	return result, err
}

func (c *Class) SavingThrows(ctx context.Context) (result []*AbilityScore, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedSavingThrows(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.SavingThrowsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QuerySavingThrows().All(ctx)
	}
	return result, err
}

func (s *Skill) AbilityScore(ctx context.Context) (*AbilityScore, error) {
	result, err := s.Edges.AbilityScoreOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryAbilityScore().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Weapon) MeleeRange(ctx context.Context) (*WeaponRange, error) {
	result, err := w.Edges.MeleeRangeOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryMeleeRange().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Weapon) ThrowRange(ctx context.Context) (*WeaponRange, error) {
	result, err := w.Edges.ThrowRangeOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryThrowRange().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (wd *WeaponDamage) DamageType(ctx context.Context) (result []*DamageType, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = wd.NamedDamageType(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = wd.Edges.DamageTypeOrErr()
	}
	if IsNotLoaded(err) {
		result, err = wd.QueryDamageType().All(ctx)
	}
	return result, err
}
