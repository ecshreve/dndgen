// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/pack"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// PackUpdate is the builder for updating Pack entities.
type PackUpdate struct {
	config
	hooks    []Hook
	mutation *PackMutation
}

// Where appends a list predicates to the PackUpdate builder.
func (pu *PackUpdate) Where(ps ...predicate.Pack) *PackUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetContents sets the "contents" field.
func (pu *PackUpdate) SetContents(s string) *PackUpdate {
	pu.mutation.SetContents(s)
	return pu
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (pu *PackUpdate) AddEquipmentIDs(ids ...int) *PackUpdate {
	pu.mutation.AddEquipmentIDs(ids...)
	return pu
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (pu *PackUpdate) AddEquipment(e ...*Equipment) *PackUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.AddEquipmentIDs(ids...)
}

// Mutation returns the PackMutation object of the builder.
func (pu *PackUpdate) Mutation() *PackMutation {
	return pu.mutation
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (pu *PackUpdate) ClearEquipment() *PackUpdate {
	pu.mutation.ClearEquipment()
	return pu
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (pu *PackUpdate) RemoveEquipmentIDs(ids ...int) *PackUpdate {
	pu.mutation.RemoveEquipmentIDs(ids...)
	return pu
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (pu *PackUpdate) RemoveEquipment(e ...*Equipment) *PackUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.RemoveEquipmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PackUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PackMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PackUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PackUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PackUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pack.Table, pack.Columns, sqlgraph.NewFieldSpec(pack.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Contents(); ok {
		_spec.SetField(pack.FieldContents, field.TypeString, value)
	}
	if pu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pack.EquipmentTable,
			Columns: pack.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !pu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pack.EquipmentTable,
			Columns: pack.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pack.EquipmentTable,
			Columns: pack.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pack.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PackUpdateOne is the builder for updating a single Pack entity.
type PackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PackMutation
}

// SetContents sets the "contents" field.
func (puo *PackUpdateOne) SetContents(s string) *PackUpdateOne {
	puo.mutation.SetContents(s)
	return puo
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (puo *PackUpdateOne) AddEquipmentIDs(ids ...int) *PackUpdateOne {
	puo.mutation.AddEquipmentIDs(ids...)
	return puo
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (puo *PackUpdateOne) AddEquipment(e ...*Equipment) *PackUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.AddEquipmentIDs(ids...)
}

// Mutation returns the PackMutation object of the builder.
func (puo *PackUpdateOne) Mutation() *PackMutation {
	return puo.mutation
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (puo *PackUpdateOne) ClearEquipment() *PackUpdateOne {
	puo.mutation.ClearEquipment()
	return puo
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (puo *PackUpdateOne) RemoveEquipmentIDs(ids ...int) *PackUpdateOne {
	puo.mutation.RemoveEquipmentIDs(ids...)
	return puo
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (puo *PackUpdateOne) RemoveEquipment(e ...*Equipment) *PackUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.RemoveEquipmentIDs(ids...)
}

// Where appends a list predicates to the PackUpdate builder.
func (puo *PackUpdateOne) Where(ps ...predicate.Pack) *PackUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PackUpdateOne) Select(field string, fields ...string) *PackUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pack entity.
func (puo *PackUpdateOne) Save(ctx context.Context) (*Pack, error) {
	return withHooks[*Pack, PackMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PackUpdateOne) SaveX(ctx context.Context) *Pack {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PackUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PackUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PackUpdateOne) sqlSave(ctx context.Context) (_node *Pack, err error) {
	_spec := sqlgraph.NewUpdateSpec(pack.Table, pack.Columns, sqlgraph.NewFieldSpec(pack.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pack.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pack.FieldID)
		for _, f := range fields {
			if !pack.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pack.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Contents(); ok {
		_spec.SetField(pack.FieldContents, field.TypeString, value)
	}
	if puo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pack.EquipmentTable,
			Columns: pack.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !puo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pack.EquipmentTable,
			Columns: pack.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pack.EquipmentTable,
			Columns: pack.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pack{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pack.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
