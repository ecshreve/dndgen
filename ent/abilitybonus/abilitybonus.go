// Code generated by ent, DO NOT EDIT.

package abilitybonus

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the abilitybonus type in the database.
	Label = "ability_bonus"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBonus holds the string denoting the bonus field in the database.
	FieldBonus = "bonus"
	// EdgeAbilityScore holds the string denoting the ability_score edge name in mutations.
	EdgeAbilityScore = "ability_score"
	// EdgeRace holds the string denoting the race edge name in mutations.
	EdgeRace = "race"
	// Table holds the table name of the abilitybonus in the database.
	Table = "ability_bonus"
	// AbilityScoreTable is the table that holds the ability_score relation/edge.
	AbilityScoreTable = "ability_scores"
	// AbilityScoreInverseTable is the table name for the AbilityScore entity.
	// It exists in this package in order to avoid circular dependency with the "abilityscore" package.
	AbilityScoreInverseTable = "ability_scores"
	// AbilityScoreColumn is the table column denoting the ability_score relation/edge.
	AbilityScoreColumn = "ability_bonus_ability_score"
	// RaceTable is the table that holds the race relation/edge. The primary key declared below.
	RaceTable = "race_ability_bonuses"
	// RaceInverseTable is the table name for the Race entity.
	// It exists in this package in order to avoid circular dependency with the "race" package.
	RaceInverseTable = "races"
)

// Columns holds all SQL columns for abilitybonus fields.
var Columns = []string{
	FieldID,
	FieldBonus,
}

var (
	// RacePrimaryKey and RaceColumn2 are the table columns denoting the
	// primary key for the race relation (M2M).
	RacePrimaryKey = []string{"race_id", "ability_bonus_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the AbilityBonus queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBonus orders the results by the bonus field.
func ByBonus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBonus, opts...).ToFunc()
}

// ByAbilityScoreCount orders the results by ability_score count.
func ByAbilityScoreCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAbilityScoreStep(), opts...)
	}
}

// ByAbilityScore orders the results by ability_score terms.
func ByAbilityScore(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAbilityScoreStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRaceCount orders the results by race count.
func ByRaceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRaceStep(), opts...)
	}
}

// ByRace orders the results by race terms.
func ByRace(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRaceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAbilityScoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AbilityScoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AbilityScoreTable, AbilityScoreColumn),
	)
}
func newRaceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RaceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RaceTable, RacePrimaryKey...),
	)
}
