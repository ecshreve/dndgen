// Code generated by ent, DO NOT EDIT.

package abilitybonus

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldLTE(FieldID, id))
}

// Bonus applies equality check predicate on the "bonus" field. It's identical to BonusEQ.
func Bonus(v int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldEQ(FieldBonus, v))
}

// BonusEQ applies the EQ predicate on the "bonus" field.
func BonusEQ(v int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldEQ(FieldBonus, v))
}

// BonusNEQ applies the NEQ predicate on the "bonus" field.
func BonusNEQ(v int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldNEQ(FieldBonus, v))
}

// BonusIn applies the In predicate on the "bonus" field.
func BonusIn(vs ...int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldIn(FieldBonus, vs...))
}

// BonusNotIn applies the NotIn predicate on the "bonus" field.
func BonusNotIn(vs ...int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldNotIn(FieldBonus, vs...))
}

// BonusGT applies the GT predicate on the "bonus" field.
func BonusGT(v int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldGT(FieldBonus, v))
}

// BonusGTE applies the GTE predicate on the "bonus" field.
func BonusGTE(v int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldGTE(FieldBonus, v))
}

// BonusLT applies the LT predicate on the "bonus" field.
func BonusLT(v int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldLT(FieldBonus, v))
}

// BonusLTE applies the LTE predicate on the "bonus" field.
func BonusLTE(v int) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.FieldLTE(FieldBonus, v))
}

// HasAbilityScore applies the HasEdge predicate on the "ability_score" edge.
func HasAbilityScore() predicate.AbilityBonus {
	return predicate.AbilityBonus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AbilityScoreTable, AbilityScoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAbilityScoreWith applies the HasEdge predicate on the "ability_score" edge with a given conditions (other predicates).
func HasAbilityScoreWith(preds ...predicate.AbilityScore) predicate.AbilityBonus {
	return predicate.AbilityBonus(func(s *sql.Selector) {
		step := newAbilityScoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRace applies the HasEdge predicate on the "race" edge.
func HasRace() predicate.AbilityBonus {
	return predicate.AbilityBonus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RaceTable, RacePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRaceWith applies the HasEdge predicate on the "race" edge with a given conditions (other predicates).
func HasRaceWith(preds ...predicate.Race) predicate.AbilityBonus {
	return predicate.AbilityBonus(func(s *sql.Selector) {
		step := newRaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOptions applies the HasEdge predicate on the "options" edge.
func HasOptions() predicate.AbilityBonus {
	return predicate.AbilityBonus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OptionsTable, OptionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOptionsWith applies the HasEdge predicate on the "options" edge with a given conditions (other predicates).
func HasOptionsWith(preds ...predicate.AbilityBonusChoice) predicate.AbilityBonus {
	return predicate.AbilityBonus(func(s *sql.Selector) {
		step := newOptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AbilityBonus) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AbilityBonus) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AbilityBonus) predicate.AbilityBonus {
	return predicate.AbilityBonus(sql.NotPredicates(p))
}
