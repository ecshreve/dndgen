// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/pack"
)

// Pack is the model entity for the Pack schema.
type Pack struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Contents holds the value of the "contents" field.
	Contents string `json:"contents,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PackQuery when eager-loading is set.
	Edges        PackEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PackEdges holds the relations/edges for other nodes in the graph.
type PackEdges struct {
	// Equipment holds the value of the equipment edge.
	Equipment []*Equipment `json:"equipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedEquipment map[string][]*Equipment
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading.
func (e PackEdges) EquipmentOrErr() ([]*Equipment, error) {
	if e.loadedTypes[0] {
		return e.Equipment, nil
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pack) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pack.FieldID:
			values[i] = new(sql.NullInt64)
		case pack.FieldContents:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pack fields.
func (pa *Pack) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pack.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case pack.FieldContents:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contents", values[i])
			} else if value.Valid {
				pa.Contents = value.String
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Pack.
// This includes values selected through modifiers, order, etc.
func (pa *Pack) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryEquipment queries the "equipment" edge of the Pack entity.
func (pa *Pack) QueryEquipment() *EquipmentQuery {
	return NewPackClient(pa.config).QueryEquipment(pa)
}

// Update returns a builder for updating this Pack.
// Note that you need to call Pack.Unwrap() before calling this method if this Pack
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Pack) Update() *PackUpdateOne {
	return NewPackClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Pack entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Pack) Unwrap() *Pack {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pack is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Pack) String() string {
	var builder strings.Builder
	builder.WriteString("Pack(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("contents=")
	builder.WriteString(pa.Contents)
	builder.WriteByte(')')
	return builder.String()
}

// NamedEquipment returns the Equipment named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Pack) NamedEquipment(name string) ([]*Equipment, error) {
	if pa.Edges.namedEquipment == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedEquipment[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Pack) appendNamedEquipment(name string, edges ...*Equipment) {
	if pa.Edges.namedEquipment == nil {
		pa.Edges.namedEquipment = make(map[string][]*Equipment)
	}
	if len(edges) == 0 {
		pa.Edges.namedEquipment[name] = []*Equipment{}
	} else {
		pa.Edges.namedEquipment[name] = append(pa.Edges.namedEquipment[name], edges...)
	}
}

// Packs is a parsable slice of Pack.
type Packs []*Pack
