// Code generated by ent, DO NOT EDIT.

package prerequisite

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldLTE(FieldID, id))
}

// Minimum applies equality check predicate on the "minimum" field. It's identical to MinimumEQ.
func Minimum(v int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEQ(FieldMinimum, v))
}

// MinimumEQ applies the EQ predicate on the "minimum" field.
func MinimumEQ(v int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEQ(FieldMinimum, v))
}

// MinimumNEQ applies the NEQ predicate on the "minimum" field.
func MinimumNEQ(v int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNEQ(FieldMinimum, v))
}

// MinimumIn applies the In predicate on the "minimum" field.
func MinimumIn(vs ...int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldIn(FieldMinimum, vs...))
}

// MinimumNotIn applies the NotIn predicate on the "minimum" field.
func MinimumNotIn(vs ...int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNotIn(FieldMinimum, vs...))
}

// MinimumGT applies the GT predicate on the "minimum" field.
func MinimumGT(v int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldGT(FieldMinimum, v))
}

// MinimumGTE applies the GTE predicate on the "minimum" field.
func MinimumGTE(v int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldGTE(FieldMinimum, v))
}

// MinimumLT applies the LT predicate on the "minimum" field.
func MinimumLT(v int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldLT(FieldMinimum, v))
}

// MinimumLTE applies the LTE predicate on the "minimum" field.
func MinimumLTE(v int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldLTE(FieldMinimum, v))
}

// HasAbilityScore applies the HasEdge predicate on the "ability_score" edge.
func HasAbilityScore() predicate.Prerequisite {
	return predicate.Prerequisite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AbilityScoreTable, AbilityScoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAbilityScoreWith applies the HasEdge predicate on the "ability_score" edge with a given conditions (other predicates).
func HasAbilityScoreWith(preds ...predicate.AbilityScore) predicate.Prerequisite {
	return predicate.Prerequisite(func(s *sql.Selector) {
		step := newAbilityScoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Prerequisite) predicate.Prerequisite {
	return predicate.Prerequisite(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Prerequisite) predicate.Prerequisite {
	return predicate.Prerequisite(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Prerequisite) predicate.Prerequisite {
	return predicate.Prerequisite(func(s *sql.Selector) {
		p(s.Not())
	})
}
