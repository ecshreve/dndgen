// Code generated by ent, DO NOT EDIT.

package prerequisite

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldLTE(FieldID, id))
}

// LevelValue applies equality check predicate on the "level_value" field. It's identical to LevelValueEQ.
func LevelValue(v int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEQ(FieldLevelValue, v))
}

// FeatureValue applies equality check predicate on the "feature_value" field. It's identical to FeatureValueEQ.
func FeatureValue(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEQ(FieldFeatureValue, v))
}

// SpellValue applies equality check predicate on the "spell_value" field. It's identical to SpellValueEQ.
func SpellValue(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEQ(FieldSpellValue, v))
}

// PrerequisiteTypeEQ applies the EQ predicate on the "prerequisite_type" field.
func PrerequisiteTypeEQ(v PrerequisiteType) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEQ(FieldPrerequisiteType, v))
}

// PrerequisiteTypeNEQ applies the NEQ predicate on the "prerequisite_type" field.
func PrerequisiteTypeNEQ(v PrerequisiteType) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNEQ(FieldPrerequisiteType, v))
}

// PrerequisiteTypeIn applies the In predicate on the "prerequisite_type" field.
func PrerequisiteTypeIn(vs ...PrerequisiteType) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldIn(FieldPrerequisiteType, vs...))
}

// PrerequisiteTypeNotIn applies the NotIn predicate on the "prerequisite_type" field.
func PrerequisiteTypeNotIn(vs ...PrerequisiteType) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNotIn(FieldPrerequisiteType, vs...))
}

// LevelValueEQ applies the EQ predicate on the "level_value" field.
func LevelValueEQ(v int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEQ(FieldLevelValue, v))
}

// LevelValueNEQ applies the NEQ predicate on the "level_value" field.
func LevelValueNEQ(v int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNEQ(FieldLevelValue, v))
}

// LevelValueIn applies the In predicate on the "level_value" field.
func LevelValueIn(vs ...int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldIn(FieldLevelValue, vs...))
}

// LevelValueNotIn applies the NotIn predicate on the "level_value" field.
func LevelValueNotIn(vs ...int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNotIn(FieldLevelValue, vs...))
}

// LevelValueGT applies the GT predicate on the "level_value" field.
func LevelValueGT(v int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldGT(FieldLevelValue, v))
}

// LevelValueGTE applies the GTE predicate on the "level_value" field.
func LevelValueGTE(v int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldGTE(FieldLevelValue, v))
}

// LevelValueLT applies the LT predicate on the "level_value" field.
func LevelValueLT(v int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldLT(FieldLevelValue, v))
}

// LevelValueLTE applies the LTE predicate on the "level_value" field.
func LevelValueLTE(v int) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldLTE(FieldLevelValue, v))
}

// LevelValueIsNil applies the IsNil predicate on the "level_value" field.
func LevelValueIsNil() predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldIsNull(FieldLevelValue))
}

// LevelValueNotNil applies the NotNil predicate on the "level_value" field.
func LevelValueNotNil() predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNotNull(FieldLevelValue))
}

// FeatureValueEQ applies the EQ predicate on the "feature_value" field.
func FeatureValueEQ(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEQ(FieldFeatureValue, v))
}

// FeatureValueNEQ applies the NEQ predicate on the "feature_value" field.
func FeatureValueNEQ(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNEQ(FieldFeatureValue, v))
}

// FeatureValueIn applies the In predicate on the "feature_value" field.
func FeatureValueIn(vs ...string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldIn(FieldFeatureValue, vs...))
}

// FeatureValueNotIn applies the NotIn predicate on the "feature_value" field.
func FeatureValueNotIn(vs ...string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNotIn(FieldFeatureValue, vs...))
}

// FeatureValueGT applies the GT predicate on the "feature_value" field.
func FeatureValueGT(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldGT(FieldFeatureValue, v))
}

// FeatureValueGTE applies the GTE predicate on the "feature_value" field.
func FeatureValueGTE(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldGTE(FieldFeatureValue, v))
}

// FeatureValueLT applies the LT predicate on the "feature_value" field.
func FeatureValueLT(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldLT(FieldFeatureValue, v))
}

// FeatureValueLTE applies the LTE predicate on the "feature_value" field.
func FeatureValueLTE(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldLTE(FieldFeatureValue, v))
}

// FeatureValueContains applies the Contains predicate on the "feature_value" field.
func FeatureValueContains(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldContains(FieldFeatureValue, v))
}

// FeatureValueHasPrefix applies the HasPrefix predicate on the "feature_value" field.
func FeatureValueHasPrefix(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldHasPrefix(FieldFeatureValue, v))
}

// FeatureValueHasSuffix applies the HasSuffix predicate on the "feature_value" field.
func FeatureValueHasSuffix(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldHasSuffix(FieldFeatureValue, v))
}

// FeatureValueIsNil applies the IsNil predicate on the "feature_value" field.
func FeatureValueIsNil() predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldIsNull(FieldFeatureValue))
}

// FeatureValueNotNil applies the NotNil predicate on the "feature_value" field.
func FeatureValueNotNil() predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNotNull(FieldFeatureValue))
}

// FeatureValueEqualFold applies the EqualFold predicate on the "feature_value" field.
func FeatureValueEqualFold(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEqualFold(FieldFeatureValue, v))
}

// FeatureValueContainsFold applies the ContainsFold predicate on the "feature_value" field.
func FeatureValueContainsFold(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldContainsFold(FieldFeatureValue, v))
}

// SpellValueEQ applies the EQ predicate on the "spell_value" field.
func SpellValueEQ(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEQ(FieldSpellValue, v))
}

// SpellValueNEQ applies the NEQ predicate on the "spell_value" field.
func SpellValueNEQ(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNEQ(FieldSpellValue, v))
}

// SpellValueIn applies the In predicate on the "spell_value" field.
func SpellValueIn(vs ...string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldIn(FieldSpellValue, vs...))
}

// SpellValueNotIn applies the NotIn predicate on the "spell_value" field.
func SpellValueNotIn(vs ...string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNotIn(FieldSpellValue, vs...))
}

// SpellValueGT applies the GT predicate on the "spell_value" field.
func SpellValueGT(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldGT(FieldSpellValue, v))
}

// SpellValueGTE applies the GTE predicate on the "spell_value" field.
func SpellValueGTE(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldGTE(FieldSpellValue, v))
}

// SpellValueLT applies the LT predicate on the "spell_value" field.
func SpellValueLT(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldLT(FieldSpellValue, v))
}

// SpellValueLTE applies the LTE predicate on the "spell_value" field.
func SpellValueLTE(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldLTE(FieldSpellValue, v))
}

// SpellValueContains applies the Contains predicate on the "spell_value" field.
func SpellValueContains(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldContains(FieldSpellValue, v))
}

// SpellValueHasPrefix applies the HasPrefix predicate on the "spell_value" field.
func SpellValueHasPrefix(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldHasPrefix(FieldSpellValue, v))
}

// SpellValueHasSuffix applies the HasSuffix predicate on the "spell_value" field.
func SpellValueHasSuffix(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldHasSuffix(FieldSpellValue, v))
}

// SpellValueIsNil applies the IsNil predicate on the "spell_value" field.
func SpellValueIsNil() predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldIsNull(FieldSpellValue))
}

// SpellValueNotNil applies the NotNil predicate on the "spell_value" field.
func SpellValueNotNil() predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldNotNull(FieldSpellValue))
}

// SpellValueEqualFold applies the EqualFold predicate on the "spell_value" field.
func SpellValueEqualFold(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldEqualFold(FieldSpellValue, v))
}

// SpellValueContainsFold applies the ContainsFold predicate on the "spell_value" field.
func SpellValueContainsFold(v string) predicate.Prerequisite {
	return predicate.Prerequisite(sql.FieldContainsFold(FieldSpellValue, v))
}

// HasFeature applies the HasEdge predicate on the "feature" edge.
func HasFeature() predicate.Prerequisite {
	return predicate.Prerequisite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FeatureTable, FeatureColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeatureWith applies the HasEdge predicate on the "feature" edge with a given conditions (other predicates).
func HasFeatureWith(preds ...predicate.Feature) predicate.Prerequisite {
	return predicate.Prerequisite(func(s *sql.Selector) {
		step := newFeatureStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Prerequisite) predicate.Prerequisite {
	return predicate.Prerequisite(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Prerequisite) predicate.Prerequisite {
	return predicate.Prerequisite(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Prerequisite) predicate.Prerequisite {
	return predicate.Prerequisite(sql.NotPredicates(p))
}
