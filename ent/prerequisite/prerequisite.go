// Code generated by ent, DO NOT EDIT.

package prerequisite

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the prerequisite type in the database.
	Label = "prerequisite"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMinimum holds the string denoting the minimum field in the database.
	FieldMinimum = "minimum"
	// EdgeAbilityScore holds the string denoting the ability_score edge name in mutations.
	EdgeAbilityScore = "ability_score"
	// Table holds the table name of the prerequisite in the database.
	Table = "prerequisites"
	// AbilityScoreTable is the table that holds the ability_score relation/edge.
	AbilityScoreTable = "ability_scores"
	// AbilityScoreInverseTable is the table name for the AbilityScore entity.
	// It exists in this package in order to avoid circular dependency with the "abilityscore" package.
	AbilityScoreInverseTable = "ability_scores"
	// AbilityScoreColumn is the table column denoting the ability_score relation/edge.
	AbilityScoreColumn = "prerequisite_ability_score"
)

// Columns holds all SQL columns for prerequisite fields.
var Columns = []string{
	FieldID,
	FieldMinimum,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Prerequisite queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMinimum orders the results by the minimum field.
func ByMinimum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinimum, opts...).ToFunc()
}

// ByAbilityScoreCount orders the results by ability_score count.
func ByAbilityScoreCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAbilityScoreStep(), opts...)
	}
}

// ByAbilityScore orders the results by ability_score terms.
func ByAbilityScore(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAbilityScoreStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAbilityScoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AbilityScoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AbilityScoreTable, AbilityScoreColumn),
	)
}
