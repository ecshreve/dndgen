// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/abilitybonus"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/subrace"
)

// AbilityBonus is the model entity for the AbilityBonus schema.
type AbilityBonus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AbilityScoreID holds the value of the "ability_score_id" field.
	AbilityScoreID int `json:"ability_score_id,omitempty"`
	// Bonus holds the value of the "bonus" field.
	Bonus int `json:"bonus,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AbilityBonusQuery when eager-loading is set.
	Edges                   AbilityBonusEdges `json:"edges"`
	race_ability_bonuses    *int
	subrace_ability_bonuses *int
	selectValues            sql.SelectValues
}

// AbilityBonusEdges holds the relations/edges for other nodes in the graph.
type AbilityBonusEdges struct {
	// AbilityScore holds the value of the ability_score edge.
	AbilityScore *AbilityScore `json:"ability_score,omitempty"`
	// Race holds the value of the race edge.
	Race *Race `json:"race,omitempty"`
	// Subrace holds the value of the subrace edge.
	Subrace *Subrace `json:"subrace,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// AbilityScoreOrErr returns the AbilityScore value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AbilityBonusEdges) AbilityScoreOrErr() (*AbilityScore, error) {
	if e.loadedTypes[0] {
		if e.AbilityScore == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: abilityscore.Label}
		}
		return e.AbilityScore, nil
	}
	return nil, &NotLoadedError{edge: "ability_score"}
}

// RaceOrErr returns the Race value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AbilityBonusEdges) RaceOrErr() (*Race, error) {
	if e.loadedTypes[1] {
		if e.Race == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: race.Label}
		}
		return e.Race, nil
	}
	return nil, &NotLoadedError{edge: "race"}
}

// SubraceOrErr returns the Subrace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AbilityBonusEdges) SubraceOrErr() (*Subrace, error) {
	if e.loadedTypes[2] {
		if e.Subrace == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: subrace.Label}
		}
		return e.Subrace, nil
	}
	return nil, &NotLoadedError{edge: "subrace"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AbilityBonus) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case abilitybonus.FieldID, abilitybonus.FieldAbilityScoreID, abilitybonus.FieldBonus:
			values[i] = new(sql.NullInt64)
		case abilitybonus.ForeignKeys[0]: // race_ability_bonuses
			values[i] = new(sql.NullInt64)
		case abilitybonus.ForeignKeys[1]: // subrace_ability_bonuses
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AbilityBonus fields.
func (ab *AbilityBonus) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case abilitybonus.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ab.ID = int(value.Int64)
		case abilitybonus.FieldAbilityScoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ability_score_id", values[i])
			} else if value.Valid {
				ab.AbilityScoreID = int(value.Int64)
			}
		case abilitybonus.FieldBonus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bonus", values[i])
			} else if value.Valid {
				ab.Bonus = int(value.Int64)
			}
		case abilitybonus.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field race_ability_bonuses", value)
			} else if value.Valid {
				ab.race_ability_bonuses = new(int)
				*ab.race_ability_bonuses = int(value.Int64)
			}
		case abilitybonus.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field subrace_ability_bonuses", value)
			} else if value.Valid {
				ab.subrace_ability_bonuses = new(int)
				*ab.subrace_ability_bonuses = int(value.Int64)
			}
		default:
			ab.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AbilityBonus.
// This includes values selected through modifiers, order, etc.
func (ab *AbilityBonus) Value(name string) (ent.Value, error) {
	return ab.selectValues.Get(name)
}

// QueryAbilityScore queries the "ability_score" edge of the AbilityBonus entity.
func (ab *AbilityBonus) QueryAbilityScore() *AbilityScoreQuery {
	return NewAbilityBonusClient(ab.config).QueryAbilityScore(ab)
}

// QueryRace queries the "race" edge of the AbilityBonus entity.
func (ab *AbilityBonus) QueryRace() *RaceQuery {
	return NewAbilityBonusClient(ab.config).QueryRace(ab)
}

// QuerySubrace queries the "subrace" edge of the AbilityBonus entity.
func (ab *AbilityBonus) QuerySubrace() *SubraceQuery {
	return NewAbilityBonusClient(ab.config).QuerySubrace(ab)
}

// Update returns a builder for updating this AbilityBonus.
// Note that you need to call AbilityBonus.Unwrap() before calling this method if this AbilityBonus
// was returned from a transaction, and the transaction was committed or rolled back.
func (ab *AbilityBonus) Update() *AbilityBonusUpdateOne {
	return NewAbilityBonusClient(ab.config).UpdateOne(ab)
}

// Unwrap unwraps the AbilityBonus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ab *AbilityBonus) Unwrap() *AbilityBonus {
	_tx, ok := ab.config.driver.(*txDriver)
	if !ok {
		panic("ent: AbilityBonus is not a transactional entity")
	}
	ab.config.driver = _tx.drv
	return ab
}

// String implements the fmt.Stringer.
func (ab *AbilityBonus) String() string {
	var builder strings.Builder
	builder.WriteString("AbilityBonus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ab.ID))
	builder.WriteString("ability_score_id=")
	builder.WriteString(fmt.Sprintf("%v", ab.AbilityScoreID))
	builder.WriteString(", ")
	builder.WriteString("bonus=")
	builder.WriteString(fmt.Sprintf("%v", ab.Bonus))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (ab *AbilityBonus) MarshalJSON() ([]byte, error) {
	type Alias AbilityBonus
	return json.Marshal(&struct {
		*Alias
		AbilityBonusEdges
	}{
		Alias:             (*Alias)(ab),
		AbilityBonusEdges: ab.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (ab *AbilityBonus) UnmarshalJSON(data []byte) error {
	type Alias AbilityBonus
	aux := &struct {
		*Alias
		AbilityBonusEdges
	}{
		Alias: (*Alias)(ab),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	ab.Edges = aux.AbilityBonusEdges
	return nil
}

func (abc *AbilityBonusCreate) SetAbilityBonus(input *AbilityBonus) *AbilityBonusCreate {
	abc.SetAbilityScoreID(input.AbilityScoreID)
	abc.SetBonus(input.Bonus)
	return abc
}

// AbilityBonusSlice is a parsable slice of AbilityBonus.
type AbilityBonusSlice []*AbilityBonus
