// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/language"
	"github.com/ecshreve/dndgen/ent/languagechoice"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/subrace"
)

// LanguageChoiceCreate is the builder for creating a LanguageChoice entity.
type LanguageChoiceCreate struct {
	config
	mutation *LanguageChoiceMutation
	hooks    []Hook
}

// SetChoose sets the "choose" field.
func (lcc *LanguageChoiceCreate) SetChoose(i int) *LanguageChoiceCreate {
	lcc.mutation.SetChoose(i)
	return lcc
}

// AddLanguageIDs adds the "languages" edge to the Language entity by IDs.
func (lcc *LanguageChoiceCreate) AddLanguageIDs(ids ...int) *LanguageChoiceCreate {
	lcc.mutation.AddLanguageIDs(ids...)
	return lcc
}

// AddLanguages adds the "languages" edges to the Language entity.
func (lcc *LanguageChoiceCreate) AddLanguages(l ...*Language) *LanguageChoiceCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lcc.AddLanguageIDs(ids...)
}

// SetRaceID sets the "race" edge to the Race entity by ID.
func (lcc *LanguageChoiceCreate) SetRaceID(id int) *LanguageChoiceCreate {
	lcc.mutation.SetRaceID(id)
	return lcc
}

// SetNillableRaceID sets the "race" edge to the Race entity by ID if the given value is not nil.
func (lcc *LanguageChoiceCreate) SetNillableRaceID(id *int) *LanguageChoiceCreate {
	if id != nil {
		lcc = lcc.SetRaceID(*id)
	}
	return lcc
}

// SetRace sets the "race" edge to the Race entity.
func (lcc *LanguageChoiceCreate) SetRace(r *Race) *LanguageChoiceCreate {
	return lcc.SetRaceID(r.ID)
}

// SetSubraceID sets the "subrace" edge to the Subrace entity by ID.
func (lcc *LanguageChoiceCreate) SetSubraceID(id int) *LanguageChoiceCreate {
	lcc.mutation.SetSubraceID(id)
	return lcc
}

// SetNillableSubraceID sets the "subrace" edge to the Subrace entity by ID if the given value is not nil.
func (lcc *LanguageChoiceCreate) SetNillableSubraceID(id *int) *LanguageChoiceCreate {
	if id != nil {
		lcc = lcc.SetSubraceID(*id)
	}
	return lcc
}

// SetSubrace sets the "subrace" edge to the Subrace entity.
func (lcc *LanguageChoiceCreate) SetSubrace(s *Subrace) *LanguageChoiceCreate {
	return lcc.SetSubraceID(s.ID)
}

// Mutation returns the LanguageChoiceMutation object of the builder.
func (lcc *LanguageChoiceCreate) Mutation() *LanguageChoiceMutation {
	return lcc.mutation
}

// Save creates the LanguageChoice in the database.
func (lcc *LanguageChoiceCreate) Save(ctx context.Context) (*LanguageChoice, error) {
	return withHooks(ctx, lcc.sqlSave, lcc.mutation, lcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lcc *LanguageChoiceCreate) SaveX(ctx context.Context) *LanguageChoice {
	v, err := lcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcc *LanguageChoiceCreate) Exec(ctx context.Context) error {
	_, err := lcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcc *LanguageChoiceCreate) ExecX(ctx context.Context) {
	if err := lcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcc *LanguageChoiceCreate) check() error {
	if _, ok := lcc.mutation.Choose(); !ok {
		return &ValidationError{Name: "choose", err: errors.New(`ent: missing required field "LanguageChoice.choose"`)}
	}
	if v, ok := lcc.mutation.Choose(); ok {
		if err := languagechoice.ChooseValidator(v); err != nil {
			return &ValidationError{Name: "choose", err: fmt.Errorf(`ent: validator failed for field "LanguageChoice.choose": %w`, err)}
		}
	}
	return nil
}

func (lcc *LanguageChoiceCreate) sqlSave(ctx context.Context) (*LanguageChoice, error) {
	if err := lcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lcc.mutation.id = &_node.ID
	lcc.mutation.done = true
	return _node, nil
}

func (lcc *LanguageChoiceCreate) createSpec() (*LanguageChoice, *sqlgraph.CreateSpec) {
	var (
		_node = &LanguageChoice{config: lcc.config}
		_spec = sqlgraph.NewCreateSpec(languagechoice.Table, sqlgraph.NewFieldSpec(languagechoice.FieldID, field.TypeInt))
	)
	if value, ok := lcc.mutation.Choose(); ok {
		_spec.SetField(languagechoice.FieldChoose, field.TypeInt, value)
		_node.Choose = value
	}
	if nodes := lcc.mutation.LanguagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   languagechoice.LanguagesTable,
			Columns: languagechoice.LanguagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lcc.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   languagechoice.RaceTable,
			Columns: []string{languagechoice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.race_language_options = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lcc.mutation.SubraceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   languagechoice.SubraceTable,
			Columns: []string{languagechoice.SubraceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subrace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.subrace_language_options = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LanguageChoiceCreateBulk is the builder for creating many LanguageChoice entities in bulk.
type LanguageChoiceCreateBulk struct {
	config
	err      error
	builders []*LanguageChoiceCreate
}

// Save creates the LanguageChoice entities in the database.
func (lccb *LanguageChoiceCreateBulk) Save(ctx context.Context) ([]*LanguageChoice, error) {
	if lccb.err != nil {
		return nil, lccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lccb.builders))
	nodes := make([]*LanguageChoice, len(lccb.builders))
	mutators := make([]Mutator, len(lccb.builders))
	for i := range lccb.builders {
		func(i int, root context.Context) {
			builder := lccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LanguageChoiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lccb *LanguageChoiceCreateBulk) SaveX(ctx context.Context) []*LanguageChoice {
	v, err := lccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lccb *LanguageChoiceCreateBulk) Exec(ctx context.Context) error {
	_, err := lccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lccb *LanguageChoiceCreateBulk) ExecX(ctx context.Context) {
	if err := lccb.Exec(ctx); err != nil {
		panic(err)
	}
}
