// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/subrace"
	"github.com/ecshreve/dndgen/ent/trait"
)

// TraitQuery is the builder for querying Trait entities.
type TraitQuery struct {
	config
	ctx               *QueryContext
	order             []trait.OrderOption
	inters            []Interceptor
	predicates        []predicate.Trait
	withRaces         *RaceQuery
	withSubraces      *SubraceQuery
	modifiers         []func(*sql.Selector)
	loadTotal         []func(context.Context, []*Trait) error
	withNamedRaces    map[string]*RaceQuery
	withNamedSubraces map[string]*SubraceQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TraitQuery builder.
func (tq *TraitQuery) Where(ps ...predicate.Trait) *TraitQuery {
	tq.predicates = append(tq.predicates, ps...)
	return tq
}

// Limit the number of records to be returned by this query.
func (tq *TraitQuery) Limit(limit int) *TraitQuery {
	tq.ctx.Limit = &limit
	return tq
}

// Offset to start from.
func (tq *TraitQuery) Offset(offset int) *TraitQuery {
	tq.ctx.Offset = &offset
	return tq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tq *TraitQuery) Unique(unique bool) *TraitQuery {
	tq.ctx.Unique = &unique
	return tq
}

// Order specifies how the records should be ordered.
func (tq *TraitQuery) Order(o ...trait.OrderOption) *TraitQuery {
	tq.order = append(tq.order, o...)
	return tq
}

// QueryRaces chains the current query on the "races" edge.
func (tq *TraitQuery) QueryRaces() *RaceQuery {
	query := (&RaceClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trait.Table, trait.FieldID, selector),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, trait.RacesTable, trait.RacesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubraces chains the current query on the "subraces" edge.
func (tq *TraitQuery) QuerySubraces() *SubraceQuery {
	query := (&SubraceClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trait.Table, trait.FieldID, selector),
			sqlgraph.To(subrace.Table, subrace.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, trait.SubracesTable, trait.SubracesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Trait entity from the query.
// Returns a *NotFoundError when no Trait was found.
func (tq *TraitQuery) First(ctx context.Context) (*Trait, error) {
	nodes, err := tq.Limit(1).All(setContextOp(ctx, tq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{trait.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tq *TraitQuery) FirstX(ctx context.Context) *Trait {
	node, err := tq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Trait ID from the query.
// Returns a *NotFoundError when no Trait ID was found.
func (tq *TraitQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tq.Limit(1).IDs(setContextOp(ctx, tq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{trait.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tq *TraitQuery) FirstIDX(ctx context.Context) int {
	id, err := tq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Trait entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Trait entity is found.
// Returns a *NotFoundError when no Trait entities are found.
func (tq *TraitQuery) Only(ctx context.Context) (*Trait, error) {
	nodes, err := tq.Limit(2).All(setContextOp(ctx, tq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{trait.Label}
	default:
		return nil, &NotSingularError{trait.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tq *TraitQuery) OnlyX(ctx context.Context) *Trait {
	node, err := tq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Trait ID in the query.
// Returns a *NotSingularError when more than one Trait ID is found.
// Returns a *NotFoundError when no entities are found.
func (tq *TraitQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tq.Limit(2).IDs(setContextOp(ctx, tq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{trait.Label}
	default:
		err = &NotSingularError{trait.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tq *TraitQuery) OnlyIDX(ctx context.Context) int {
	id, err := tq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Traits.
func (tq *TraitQuery) All(ctx context.Context) ([]*Trait, error) {
	ctx = setContextOp(ctx, tq.ctx, "All")
	if err := tq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Trait, *TraitQuery]()
	return withInterceptors[[]*Trait](ctx, tq, qr, tq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tq *TraitQuery) AllX(ctx context.Context) []*Trait {
	nodes, err := tq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Trait IDs.
func (tq *TraitQuery) IDs(ctx context.Context) (ids []int, err error) {
	if tq.ctx.Unique == nil && tq.path != nil {
		tq.Unique(true)
	}
	ctx = setContextOp(ctx, tq.ctx, "IDs")
	if err = tq.Select(trait.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tq *TraitQuery) IDsX(ctx context.Context) []int {
	ids, err := tq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tq *TraitQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tq.ctx, "Count")
	if err := tq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tq, querierCount[*TraitQuery](), tq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tq *TraitQuery) CountX(ctx context.Context) int {
	count, err := tq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tq *TraitQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tq.ctx, "Exist")
	switch _, err := tq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tq *TraitQuery) ExistX(ctx context.Context) bool {
	exist, err := tq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TraitQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tq *TraitQuery) Clone() *TraitQuery {
	if tq == nil {
		return nil
	}
	return &TraitQuery{
		config:       tq.config,
		ctx:          tq.ctx.Clone(),
		order:        append([]trait.OrderOption{}, tq.order...),
		inters:       append([]Interceptor{}, tq.inters...),
		predicates:   append([]predicate.Trait{}, tq.predicates...),
		withRaces:    tq.withRaces.Clone(),
		withSubraces: tq.withSubraces.Clone(),
		// clone intermediate query.
		sql:  tq.sql.Clone(),
		path: tq.path,
	}
}

// WithRaces tells the query-builder to eager-load the nodes that are connected to
// the "races" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TraitQuery) WithRaces(opts ...func(*RaceQuery)) *TraitQuery {
	query := (&RaceClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withRaces = query
	return tq
}

// WithSubraces tells the query-builder to eager-load the nodes that are connected to
// the "subraces" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TraitQuery) WithSubraces(opts ...func(*SubraceQuery)) *TraitQuery {
	query := (&SubraceClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withSubraces = query
	return tq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Indx string `json:"index"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Trait.Query().
//		GroupBy(trait.FieldIndx).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tq *TraitQuery) GroupBy(field string, fields ...string) *TraitGroupBy {
	tq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TraitGroupBy{build: tq}
	grbuild.flds = &tq.ctx.Fields
	grbuild.label = trait.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Indx string `json:"index"`
//	}
//
//	client.Trait.Query().
//		Select(trait.FieldIndx).
//		Scan(ctx, &v)
func (tq *TraitQuery) Select(fields ...string) *TraitSelect {
	tq.ctx.Fields = append(tq.ctx.Fields, fields...)
	sbuild := &TraitSelect{TraitQuery: tq}
	sbuild.label = trait.Label
	sbuild.flds, sbuild.scan = &tq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TraitSelect configured with the given aggregations.
func (tq *TraitQuery) Aggregate(fns ...AggregateFunc) *TraitSelect {
	return tq.Select().Aggregate(fns...)
}

func (tq *TraitQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tq); err != nil {
				return err
			}
		}
	}
	for _, f := range tq.ctx.Fields {
		if !trait.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tq.path != nil {
		prev, err := tq.path(ctx)
		if err != nil {
			return err
		}
		tq.sql = prev
	}
	return nil
}

func (tq *TraitQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Trait, error) {
	var (
		nodes       = []*Trait{}
		_spec       = tq.querySpec()
		loadedTypes = [2]bool{
			tq.withRaces != nil,
			tq.withSubraces != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Trait).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Trait{config: tq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tq.modifiers) > 0 {
		_spec.Modifiers = tq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tq.withRaces; query != nil {
		if err := tq.loadRaces(ctx, query, nodes,
			func(n *Trait) { n.Edges.Races = []*Race{} },
			func(n *Trait, e *Race) { n.Edges.Races = append(n.Edges.Races, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withSubraces; query != nil {
		if err := tq.loadSubraces(ctx, query, nodes,
			func(n *Trait) { n.Edges.Subraces = []*Subrace{} },
			func(n *Trait, e *Subrace) { n.Edges.Subraces = append(n.Edges.Subraces, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range tq.withNamedRaces {
		if err := tq.loadRaces(ctx, query, nodes,
			func(n *Trait) { n.appendNamedRaces(name) },
			func(n *Trait, e *Race) { n.appendNamedRaces(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range tq.withNamedSubraces {
		if err := tq.loadSubraces(ctx, query, nodes,
			func(n *Trait) { n.appendNamedSubraces(name) },
			func(n *Trait, e *Subrace) { n.appendNamedSubraces(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range tq.loadTotal {
		if err := tq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tq *TraitQuery) loadRaces(ctx context.Context, query *RaceQuery, nodes []*Trait, init func(*Trait), assign func(*Trait, *Race)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Trait)
	nids := make(map[int]map[*Trait]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(trait.RacesTable)
		s.Join(joinT).On(s.C(race.FieldID), joinT.C(trait.RacesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(trait.RacesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(trait.RacesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Trait]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Race](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "races" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TraitQuery) loadSubraces(ctx context.Context, query *SubraceQuery, nodes []*Trait, init func(*Trait), assign func(*Trait, *Subrace)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Trait)
	nids := make(map[int]map[*Trait]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(trait.SubracesTable)
		s.Join(joinT).On(s.C(subrace.FieldID), joinT.C(trait.SubracesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(trait.SubracesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(trait.SubracesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Trait]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Subrace](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subraces" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (tq *TraitQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tq.querySpec()
	if len(tq.modifiers) > 0 {
		_spec.Modifiers = tq.modifiers
	}
	_spec.Node.Columns = tq.ctx.Fields
	if len(tq.ctx.Fields) > 0 {
		_spec.Unique = tq.ctx.Unique != nil && *tq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tq.driver, _spec)
}

func (tq *TraitQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(trait.Table, trait.Columns, sqlgraph.NewFieldSpec(trait.FieldID, field.TypeInt))
	_spec.From = tq.sql
	if unique := tq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tq.path != nil {
		_spec.Unique = true
	}
	if fields := tq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trait.FieldID)
		for i := range fields {
			if fields[i] != trait.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tq *TraitQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tq.driver.Dialect())
	t1 := builder.Table(trait.Table)
	columns := tq.ctx.Fields
	if len(columns) == 0 {
		columns = trait.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tq.sql != nil {
		selector = tq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tq.ctx.Unique != nil && *tq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tq.predicates {
		p(selector)
	}
	for _, p := range tq.order {
		p(selector)
	}
	if offset := tq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedRaces tells the query-builder to eager-load the nodes that are connected to the "races"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tq *TraitQuery) WithNamedRaces(name string, opts ...func(*RaceQuery)) *TraitQuery {
	query := (&RaceClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tq.withNamedRaces == nil {
		tq.withNamedRaces = make(map[string]*RaceQuery)
	}
	tq.withNamedRaces[name] = query
	return tq
}

// WithNamedSubraces tells the query-builder to eager-load the nodes that are connected to the "subraces"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tq *TraitQuery) WithNamedSubraces(name string, opts ...func(*SubraceQuery)) *TraitQuery {
	query := (&SubraceClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tq.withNamedSubraces == nil {
		tq.withNamedSubraces = make(map[string]*SubraceQuery)
	}
	tq.withNamedSubraces[name] = query
	return tq
}

// TraitGroupBy is the group-by builder for Trait entities.
type TraitGroupBy struct {
	selector
	build *TraitQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tgb *TraitGroupBy) Aggregate(fns ...AggregateFunc) *TraitGroupBy {
	tgb.fns = append(tgb.fns, fns...)
	return tgb
}

// Scan applies the selector query and scans the result into the given value.
func (tgb *TraitGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tgb.build.ctx, "GroupBy")
	if err := tgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TraitQuery, *TraitGroupBy](ctx, tgb.build, tgb, tgb.build.inters, v)
}

func (tgb *TraitGroupBy) sqlScan(ctx context.Context, root *TraitQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tgb.fns))
	for _, fn := range tgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tgb.flds)+len(tgb.fns))
		for _, f := range *tgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TraitSelect is the builder for selecting fields of Trait entities.
type TraitSelect struct {
	*TraitQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ts *TraitSelect) Aggregate(fns ...AggregateFunc) *TraitSelect {
	ts.fns = append(ts.fns, fns...)
	return ts
}

// Scan applies the selector query and scans the result into the given value.
func (ts *TraitSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ts.ctx, "Select")
	if err := ts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TraitQuery, *TraitSelect](ctx, ts.TraitQuery, ts, ts.inters, v)
}

func (ts *TraitSelect) sqlScan(ctx context.Context, root *TraitQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ts.fns))
	for _, fn := range ts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
