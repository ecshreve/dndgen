// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/vehicle"
)

// VehicleUpdate is the builder for updating Vehicle entities.
type VehicleUpdate struct {
	config
	hooks    []Hook
	mutation *VehicleMutation
}

// Where appends a list predicates to the VehicleUpdate builder.
func (vu *VehicleUpdate) Where(ps ...predicate.Vehicle) *VehicleUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetVehicleCategory sets the "vehicle_category" field.
func (vu *VehicleUpdate) SetVehicleCategory(vc vehicle.VehicleCategory) *VehicleUpdate {
	vu.mutation.SetVehicleCategory(vc)
	return vu
}

// SetNillableVehicleCategory sets the "vehicle_category" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableVehicleCategory(vc *vehicle.VehicleCategory) *VehicleUpdate {
	if vc != nil {
		vu.SetVehicleCategory(*vc)
	}
	return vu
}

// SetCapacity sets the "capacity" field.
func (vu *VehicleUpdate) SetCapacity(s string) *VehicleUpdate {
	vu.mutation.SetCapacity(s)
	return vu
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableCapacity(s *string) *VehicleUpdate {
	if s != nil {
		vu.SetCapacity(*s)
	}
	return vu
}

// ClearCapacity clears the value of the "capacity" field.
func (vu *VehicleUpdate) ClearCapacity() *VehicleUpdate {
	vu.mutation.ClearCapacity()
	return vu
}

// SetDesc sets the "desc" field.
func (vu *VehicleUpdate) SetDesc(s []string) *VehicleUpdate {
	vu.mutation.SetDesc(s)
	return vu
}

// AppendDesc appends s to the "desc" field.
func (vu *VehicleUpdate) AppendDesc(s []string) *VehicleUpdate {
	vu.mutation.AppendDesc(s)
	return vu
}

// ClearDesc clears the value of the "desc" field.
func (vu *VehicleUpdate) ClearDesc() *VehicleUpdate {
	vu.mutation.ClearDesc()
	return vu
}

// SetSpeedQuantity sets the "speed_quantity" field.
func (vu *VehicleUpdate) SetSpeedQuantity(f float64) *VehicleUpdate {
	vu.mutation.ResetSpeedQuantity()
	vu.mutation.SetSpeedQuantity(f)
	return vu
}

// SetNillableSpeedQuantity sets the "speed_quantity" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableSpeedQuantity(f *float64) *VehicleUpdate {
	if f != nil {
		vu.SetSpeedQuantity(*f)
	}
	return vu
}

// AddSpeedQuantity adds f to the "speed_quantity" field.
func (vu *VehicleUpdate) AddSpeedQuantity(f float64) *VehicleUpdate {
	vu.mutation.AddSpeedQuantity(f)
	return vu
}

// ClearSpeedQuantity clears the value of the "speed_quantity" field.
func (vu *VehicleUpdate) ClearSpeedQuantity() *VehicleUpdate {
	vu.mutation.ClearSpeedQuantity()
	return vu
}

// SetSpeedUnits sets the "speed_units" field.
func (vu *VehicleUpdate) SetSpeedUnits(value vehicle.SpeedUnits) *VehicleUpdate {
	vu.mutation.SetSpeedUnits(value)
	return vu
}

// SetNillableSpeedUnits sets the "speed_units" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableSpeedUnits(value *vehicle.SpeedUnits) *VehicleUpdate {
	if value != nil {
		vu.SetSpeedUnits(*value)
	}
	return vu
}

// ClearSpeedUnits clears the value of the "speed_units" field.
func (vu *VehicleUpdate) ClearSpeedUnits() *VehicleUpdate {
	vu.mutation.ClearSpeedUnits()
	return vu
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by ID.
func (vu *VehicleUpdate) SetEquipmentID(id int) *VehicleUpdate {
	vu.mutation.SetEquipmentID(id)
	return vu
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (vu *VehicleUpdate) SetEquipment(e *Equipment) *VehicleUpdate {
	return vu.SetEquipmentID(e.ID)
}

// Mutation returns the VehicleMutation object of the builder.
func (vu *VehicleUpdate) Mutation() *VehicleMutation {
	return vu.mutation
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (vu *VehicleUpdate) ClearEquipment() *VehicleUpdate {
	vu.mutation.ClearEquipment()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VehicleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VehicleUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VehicleUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VehicleUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VehicleUpdate) check() error {
	if v, ok := vu.mutation.VehicleCategory(); ok {
		if err := vehicle.VehicleCategoryValidator(v); err != nil {
			return &ValidationError{Name: "vehicle_category", err: fmt.Errorf(`ent: validator failed for field "Vehicle.vehicle_category": %w`, err)}
		}
	}
	if v, ok := vu.mutation.SpeedUnits(); ok {
		if err := vehicle.SpeedUnitsValidator(v); err != nil {
			return &ValidationError{Name: "speed_units", err: fmt.Errorf(`ent: validator failed for field "Vehicle.speed_units": %w`, err)}
		}
	}
	if vu.mutation.EquipmentCleared() && len(vu.mutation.EquipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vehicle.equipment"`)
	}
	return nil
}

func (vu *VehicleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vehicle.Table, vehicle.Columns, sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.VehicleCategory(); ok {
		_spec.SetField(vehicle.FieldVehicleCategory, field.TypeEnum, value)
	}
	if value, ok := vu.mutation.Capacity(); ok {
		_spec.SetField(vehicle.FieldCapacity, field.TypeString, value)
	}
	if vu.mutation.CapacityCleared() {
		_spec.ClearField(vehicle.FieldCapacity, field.TypeString)
	}
	if value, ok := vu.mutation.Desc(); ok {
		_spec.SetField(vehicle.FieldDesc, field.TypeJSON, value)
	}
	if value, ok := vu.mutation.AppendedDesc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vehicle.FieldDesc, value)
		})
	}
	if vu.mutation.DescCleared() {
		_spec.ClearField(vehicle.FieldDesc, field.TypeJSON)
	}
	if value, ok := vu.mutation.SpeedQuantity(); ok {
		_spec.SetField(vehicle.FieldSpeedQuantity, field.TypeFloat64, value)
	}
	if value, ok := vu.mutation.AddedSpeedQuantity(); ok {
		_spec.AddField(vehicle.FieldSpeedQuantity, field.TypeFloat64, value)
	}
	if vu.mutation.SpeedQuantityCleared() {
		_spec.ClearField(vehicle.FieldSpeedQuantity, field.TypeFloat64)
	}
	if value, ok := vu.mutation.SpeedUnits(); ok {
		_spec.SetField(vehicle.FieldSpeedUnits, field.TypeEnum, value)
	}
	if vu.mutation.SpeedUnitsCleared() {
		_spec.ClearField(vehicle.FieldSpeedUnits, field.TypeEnum)
	}
	if vu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vehicle.EquipmentTable,
			Columns: []string{vehicle.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vehicle.EquipmentTable,
			Columns: []string{vehicle.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VehicleUpdateOne is the builder for updating a single Vehicle entity.
type VehicleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VehicleMutation
}

// SetVehicleCategory sets the "vehicle_category" field.
func (vuo *VehicleUpdateOne) SetVehicleCategory(vc vehicle.VehicleCategory) *VehicleUpdateOne {
	vuo.mutation.SetVehicleCategory(vc)
	return vuo
}

// SetNillableVehicleCategory sets the "vehicle_category" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableVehicleCategory(vc *vehicle.VehicleCategory) *VehicleUpdateOne {
	if vc != nil {
		vuo.SetVehicleCategory(*vc)
	}
	return vuo
}

// SetCapacity sets the "capacity" field.
func (vuo *VehicleUpdateOne) SetCapacity(s string) *VehicleUpdateOne {
	vuo.mutation.SetCapacity(s)
	return vuo
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableCapacity(s *string) *VehicleUpdateOne {
	if s != nil {
		vuo.SetCapacity(*s)
	}
	return vuo
}

// ClearCapacity clears the value of the "capacity" field.
func (vuo *VehicleUpdateOne) ClearCapacity() *VehicleUpdateOne {
	vuo.mutation.ClearCapacity()
	return vuo
}

// SetDesc sets the "desc" field.
func (vuo *VehicleUpdateOne) SetDesc(s []string) *VehicleUpdateOne {
	vuo.mutation.SetDesc(s)
	return vuo
}

// AppendDesc appends s to the "desc" field.
func (vuo *VehicleUpdateOne) AppendDesc(s []string) *VehicleUpdateOne {
	vuo.mutation.AppendDesc(s)
	return vuo
}

// ClearDesc clears the value of the "desc" field.
func (vuo *VehicleUpdateOne) ClearDesc() *VehicleUpdateOne {
	vuo.mutation.ClearDesc()
	return vuo
}

// SetSpeedQuantity sets the "speed_quantity" field.
func (vuo *VehicleUpdateOne) SetSpeedQuantity(f float64) *VehicleUpdateOne {
	vuo.mutation.ResetSpeedQuantity()
	vuo.mutation.SetSpeedQuantity(f)
	return vuo
}

// SetNillableSpeedQuantity sets the "speed_quantity" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableSpeedQuantity(f *float64) *VehicleUpdateOne {
	if f != nil {
		vuo.SetSpeedQuantity(*f)
	}
	return vuo
}

// AddSpeedQuantity adds f to the "speed_quantity" field.
func (vuo *VehicleUpdateOne) AddSpeedQuantity(f float64) *VehicleUpdateOne {
	vuo.mutation.AddSpeedQuantity(f)
	return vuo
}

// ClearSpeedQuantity clears the value of the "speed_quantity" field.
func (vuo *VehicleUpdateOne) ClearSpeedQuantity() *VehicleUpdateOne {
	vuo.mutation.ClearSpeedQuantity()
	return vuo
}

// SetSpeedUnits sets the "speed_units" field.
func (vuo *VehicleUpdateOne) SetSpeedUnits(vu vehicle.SpeedUnits) *VehicleUpdateOne {
	vuo.mutation.SetSpeedUnits(vu)
	return vuo
}

// SetNillableSpeedUnits sets the "speed_units" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableSpeedUnits(vu *vehicle.SpeedUnits) *VehicleUpdateOne {
	if vu != nil {
		vuo.SetSpeedUnits(*vu)
	}
	return vuo
}

// ClearSpeedUnits clears the value of the "speed_units" field.
func (vuo *VehicleUpdateOne) ClearSpeedUnits() *VehicleUpdateOne {
	vuo.mutation.ClearSpeedUnits()
	return vuo
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by ID.
func (vuo *VehicleUpdateOne) SetEquipmentID(id int) *VehicleUpdateOne {
	vuo.mutation.SetEquipmentID(id)
	return vuo
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (vuo *VehicleUpdateOne) SetEquipment(e *Equipment) *VehicleUpdateOne {
	return vuo.SetEquipmentID(e.ID)
}

// Mutation returns the VehicleMutation object of the builder.
func (vuo *VehicleUpdateOne) Mutation() *VehicleMutation {
	return vuo.mutation
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (vuo *VehicleUpdateOne) ClearEquipment() *VehicleUpdateOne {
	vuo.mutation.ClearEquipment()
	return vuo
}

// Where appends a list predicates to the VehicleUpdate builder.
func (vuo *VehicleUpdateOne) Where(ps ...predicate.Vehicle) *VehicleUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VehicleUpdateOne) Select(field string, fields ...string) *VehicleUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vehicle entity.
func (vuo *VehicleUpdateOne) Save(ctx context.Context) (*Vehicle, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VehicleUpdateOne) SaveX(ctx context.Context) *Vehicle {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VehicleUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VehicleUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VehicleUpdateOne) check() error {
	if v, ok := vuo.mutation.VehicleCategory(); ok {
		if err := vehicle.VehicleCategoryValidator(v); err != nil {
			return &ValidationError{Name: "vehicle_category", err: fmt.Errorf(`ent: validator failed for field "Vehicle.vehicle_category": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.SpeedUnits(); ok {
		if err := vehicle.SpeedUnitsValidator(v); err != nil {
			return &ValidationError{Name: "speed_units", err: fmt.Errorf(`ent: validator failed for field "Vehicle.speed_units": %w`, err)}
		}
	}
	if vuo.mutation.EquipmentCleared() && len(vuo.mutation.EquipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vehicle.equipment"`)
	}
	return nil
}

func (vuo *VehicleUpdateOne) sqlSave(ctx context.Context) (_node *Vehicle, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vehicle.Table, vehicle.Columns, sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vehicle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicle.FieldID)
		for _, f := range fields {
			if !vehicle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehicle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.VehicleCategory(); ok {
		_spec.SetField(vehicle.FieldVehicleCategory, field.TypeEnum, value)
	}
	if value, ok := vuo.mutation.Capacity(); ok {
		_spec.SetField(vehicle.FieldCapacity, field.TypeString, value)
	}
	if vuo.mutation.CapacityCleared() {
		_spec.ClearField(vehicle.FieldCapacity, field.TypeString)
	}
	if value, ok := vuo.mutation.Desc(); ok {
		_spec.SetField(vehicle.FieldDesc, field.TypeJSON, value)
	}
	if value, ok := vuo.mutation.AppendedDesc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vehicle.FieldDesc, value)
		})
	}
	if vuo.mutation.DescCleared() {
		_spec.ClearField(vehicle.FieldDesc, field.TypeJSON)
	}
	if value, ok := vuo.mutation.SpeedQuantity(); ok {
		_spec.SetField(vehicle.FieldSpeedQuantity, field.TypeFloat64, value)
	}
	if value, ok := vuo.mutation.AddedSpeedQuantity(); ok {
		_spec.AddField(vehicle.FieldSpeedQuantity, field.TypeFloat64, value)
	}
	if vuo.mutation.SpeedQuantityCleared() {
		_spec.ClearField(vehicle.FieldSpeedQuantity, field.TypeFloat64)
	}
	if value, ok := vuo.mutation.SpeedUnits(); ok {
		_spec.SetField(vehicle.FieldSpeedUnits, field.TypeEnum, value)
	}
	if vuo.mutation.SpeedUnitsCleared() {
		_spec.ClearField(vehicle.FieldSpeedUnits, field.TypeEnum)
	}
	if vuo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vehicle.EquipmentTable,
			Columns: []string{vehicle.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vehicle.EquipmentTable,
			Columns: []string{vehicle.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vehicle{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
