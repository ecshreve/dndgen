// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/coin"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/equipmentcost"
)

// EquipmentCost is the model entity for the EquipmentCost schema.
type EquipmentCost struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmentCostQuery when eager-loading is set.
	Edges                     EquipmentCostEdges `json:"-"`
	equipment_equipment_costs *int
	equipment_cost_coin       *int
	selectValues              sql.SelectValues
}

// EquipmentCostEdges holds the relations/edges for other nodes in the graph.
type EquipmentCostEdges struct {
	// Coin holds the value of the coin edge.
	Coin *Coin `json:"coin,omitempty"`
	// Equipment holds the value of the equipment edge.
	Equipment *Equipment `json:"equipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// CoinOrErr returns the Coin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentCostEdges) CoinOrErr() (*Coin, error) {
	if e.Coin != nil {
		return e.Coin, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: coin.Label}
	}
	return nil, &NotLoadedError{edge: "coin"}
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentCostEdges) EquipmentOrErr() (*Equipment, error) {
	if e.Equipment != nil {
		return e.Equipment, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: equipment.Label}
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EquipmentCost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case equipmentcost.FieldID, equipmentcost.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case equipmentcost.ForeignKeys[0]: // equipment_equipment_costs
			values[i] = new(sql.NullInt64)
		case equipmentcost.ForeignKeys[1]: // equipment_cost_coin
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EquipmentCost fields.
func (ec *EquipmentCost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case equipmentcost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ec.ID = int(value.Int64)
		case equipmentcost.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				ec.Quantity = int(value.Int64)
			}
		case equipmentcost.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field equipment_equipment_costs", value)
			} else if value.Valid {
				ec.equipment_equipment_costs = new(int)
				*ec.equipment_equipment_costs = int(value.Int64)
			}
		case equipmentcost.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field equipment_cost_coin", value)
			} else if value.Valid {
				ec.equipment_cost_coin = new(int)
				*ec.equipment_cost_coin = int(value.Int64)
			}
		default:
			ec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EquipmentCost.
// This includes values selected through modifiers, order, etc.
func (ec *EquipmentCost) Value(name string) (ent.Value, error) {
	return ec.selectValues.Get(name)
}

// QueryCoin queries the "coin" edge of the EquipmentCost entity.
func (ec *EquipmentCost) QueryCoin() *CoinQuery {
	return NewEquipmentCostClient(ec.config).QueryCoin(ec)
}

// QueryEquipment queries the "equipment" edge of the EquipmentCost entity.
func (ec *EquipmentCost) QueryEquipment() *EquipmentQuery {
	return NewEquipmentCostClient(ec.config).QueryEquipment(ec)
}

// Update returns a builder for updating this EquipmentCost.
// Note that you need to call EquipmentCost.Unwrap() before calling this method if this EquipmentCost
// was returned from a transaction, and the transaction was committed or rolled back.
func (ec *EquipmentCost) Update() *EquipmentCostUpdateOne {
	return NewEquipmentCostClient(ec.config).UpdateOne(ec)
}

// Unwrap unwraps the EquipmentCost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ec *EquipmentCost) Unwrap() *EquipmentCost {
	_tx, ok := ec.config.driver.(*txDriver)
	if !ok {
		panic("ent: EquipmentCost is not a transactional entity")
	}
	ec.config.driver = _tx.drv
	return ec
}

// String implements the fmt.Stringer.
func (ec *EquipmentCost) String() string {
	var builder strings.Builder
	builder.WriteString("EquipmentCost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ec.ID))
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", ec.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (ec *EquipmentCost) MarshalJSON() ([]byte, error) {
	type Alias EquipmentCost
	return json.Marshal(&struct {
		*Alias
		EquipmentCostEdges
	}{
		Alias:              (*Alias)(ec),
		EquipmentCostEdges: ec.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (ec *EquipmentCost) UnmarshalJSON(data []byte) error {
	type Alias EquipmentCost
	aux := &struct {
		*Alias
		EquipmentCostEdges
	}{
		Alias: (*Alias)(ec),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	ec.Edges = aux.EquipmentCostEdges
	return nil
}

func (ecc *EquipmentCostCreate) SetEquipmentCost(input *EquipmentCost) *EquipmentCostCreate {
	ecc.SetQuantity(input.Quantity)
	return ecc
}

// EquipmentCosts is a parsable slice of EquipmentCost.
type EquipmentCosts []*EquipmentCost
