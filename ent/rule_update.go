// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/rule"
	"github.com/ecshreve/dndgen/ent/rulesection"
)

// RuleUpdate is the builder for updating Rule entities.
type RuleUpdate struct {
	config
	hooks    []Hook
	mutation *RuleMutation
}

// Where appends a list predicates to the RuleUpdate builder.
func (ru *RuleUpdate) Where(ps ...predicate.Rule) *RuleUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetIndx sets the "indx" field.
func (ru *RuleUpdate) SetIndx(s string) *RuleUpdate {
	ru.mutation.SetIndx(s)
	return ru
}

// SetName sets the "name" field.
func (ru *RuleUpdate) SetName(s string) *RuleUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetDesc sets the "desc" field.
func (ru *RuleUpdate) SetDesc(s string) *RuleUpdate {
	ru.mutation.SetDesc(s)
	return ru
}

// AddRuleSectionIDs adds the "rule_sections" edge to the RuleSection entity by IDs.
func (ru *RuleUpdate) AddRuleSectionIDs(ids ...int) *RuleUpdate {
	ru.mutation.AddRuleSectionIDs(ids...)
	return ru
}

// AddRuleSections adds the "rule_sections" edges to the RuleSection entity.
func (ru *RuleUpdate) AddRuleSections(r ...*RuleSection) *RuleUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRuleSectionIDs(ids...)
}

// Mutation returns the RuleMutation object of the builder.
func (ru *RuleUpdate) Mutation() *RuleMutation {
	return ru.mutation
}

// ClearRuleSections clears all "rule_sections" edges to the RuleSection entity.
func (ru *RuleUpdate) ClearRuleSections() *RuleUpdate {
	ru.mutation.ClearRuleSections()
	return ru
}

// RemoveRuleSectionIDs removes the "rule_sections" edge to RuleSection entities by IDs.
func (ru *RuleUpdate) RemoveRuleSectionIDs(ids ...int) *RuleUpdate {
	ru.mutation.RemoveRuleSectionIDs(ids...)
	return ru
}

// RemoveRuleSections removes "rule_sections" edges to RuleSection entities.
func (ru *RuleUpdate) RemoveRuleSections(r ...*RuleSection) *RuleUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRuleSectionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RuleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RuleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RuleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RuleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RuleUpdate) check() error {
	if v, ok := ru.mutation.Indx(); ok {
		if err := rule.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Rule.indx": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Name(); ok {
		if err := rule.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Rule.name": %w`, err)}
		}
	}
	return nil
}

func (ru *RuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rule.Table, rule.Columns, sqlgraph.NewFieldSpec(rule.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Indx(); ok {
		_spec.SetField(rule.FieldIndx, field.TypeString, value)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(rule.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Desc(); ok {
		_spec.SetField(rule.FieldDesc, field.TypeString, value)
	}
	if ru.mutation.RuleSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rule.RuleSectionsTable,
			Columns: rule.RuleSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rulesection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRuleSectionsIDs(); len(nodes) > 0 && !ru.mutation.RuleSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rule.RuleSectionsTable,
			Columns: rule.RuleSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rulesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RuleSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rule.RuleSectionsTable,
			Columns: rule.RuleSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rulesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RuleUpdateOne is the builder for updating a single Rule entity.
type RuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RuleMutation
}

// SetIndx sets the "indx" field.
func (ruo *RuleUpdateOne) SetIndx(s string) *RuleUpdateOne {
	ruo.mutation.SetIndx(s)
	return ruo
}

// SetName sets the "name" field.
func (ruo *RuleUpdateOne) SetName(s string) *RuleUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetDesc sets the "desc" field.
func (ruo *RuleUpdateOne) SetDesc(s string) *RuleUpdateOne {
	ruo.mutation.SetDesc(s)
	return ruo
}

// AddRuleSectionIDs adds the "rule_sections" edge to the RuleSection entity by IDs.
func (ruo *RuleUpdateOne) AddRuleSectionIDs(ids ...int) *RuleUpdateOne {
	ruo.mutation.AddRuleSectionIDs(ids...)
	return ruo
}

// AddRuleSections adds the "rule_sections" edges to the RuleSection entity.
func (ruo *RuleUpdateOne) AddRuleSections(r ...*RuleSection) *RuleUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRuleSectionIDs(ids...)
}

// Mutation returns the RuleMutation object of the builder.
func (ruo *RuleUpdateOne) Mutation() *RuleMutation {
	return ruo.mutation
}

// ClearRuleSections clears all "rule_sections" edges to the RuleSection entity.
func (ruo *RuleUpdateOne) ClearRuleSections() *RuleUpdateOne {
	ruo.mutation.ClearRuleSections()
	return ruo
}

// RemoveRuleSectionIDs removes the "rule_sections" edge to RuleSection entities by IDs.
func (ruo *RuleUpdateOne) RemoveRuleSectionIDs(ids ...int) *RuleUpdateOne {
	ruo.mutation.RemoveRuleSectionIDs(ids...)
	return ruo
}

// RemoveRuleSections removes "rule_sections" edges to RuleSection entities.
func (ruo *RuleUpdateOne) RemoveRuleSections(r ...*RuleSection) *RuleUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRuleSectionIDs(ids...)
}

// Where appends a list predicates to the RuleUpdate builder.
func (ruo *RuleUpdateOne) Where(ps ...predicate.Rule) *RuleUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RuleUpdateOne) Select(field string, fields ...string) *RuleUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Rule entity.
func (ruo *RuleUpdateOne) Save(ctx context.Context) (*Rule, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RuleUpdateOne) SaveX(ctx context.Context) *Rule {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RuleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RuleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RuleUpdateOne) check() error {
	if v, ok := ruo.mutation.Indx(); ok {
		if err := rule.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Rule.indx": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Name(); ok {
		if err := rule.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Rule.name": %w`, err)}
		}
	}
	return nil
}

func (ruo *RuleUpdateOne) sqlSave(ctx context.Context) (_node *Rule, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rule.Table, rule.Columns, sqlgraph.NewFieldSpec(rule.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rule.FieldID)
		for _, f := range fields {
			if !rule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Indx(); ok {
		_spec.SetField(rule.FieldIndx, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(rule.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Desc(); ok {
		_spec.SetField(rule.FieldDesc, field.TypeString, value)
	}
	if ruo.mutation.RuleSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rule.RuleSectionsTable,
			Columns: rule.RuleSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rulesection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRuleSectionsIDs(); len(nodes) > 0 && !ruo.mutation.RuleSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rule.RuleSectionsTable,
			Columns: rule.RuleSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rulesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RuleSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rule.RuleSectionsTable,
			Columns: rule.RuleSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rulesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rule{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
