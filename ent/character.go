// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/character"
)

// Character is the model entity for the Character schema.
type Character struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"index"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CharacterQuery when eager-loading is set.
	Edges        CharacterEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CharacterEdges holds the relations/edges for other nodes in the graph.
type CharacterEdges struct {
	// Race holds the value of the race edge.
	Race []*Race `json:"race,omitempty"`
	// Class holds the value of the class edge.
	Class []*Class `json:"class,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedRace  map[string][]*Race
	namedClass map[string][]*Class
}

// RaceOrErr returns the Race value or an error if the edge
// was not loaded in eager-loading.
func (e CharacterEdges) RaceOrErr() ([]*Race, error) {
	if e.loadedTypes[0] {
		return e.Race, nil
	}
	return nil, &NotLoadedError{edge: "race"}
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading.
func (e CharacterEdges) ClassOrErr() ([]*Class, error) {
	if e.loadedTypes[1] {
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Character) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case character.FieldID, character.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Character fields.
func (c *Character) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case character.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case character.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Character.
// This includes values selected through modifiers, order, etc.
func (c *Character) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryRace queries the "race" edge of the Character entity.
func (c *Character) QueryRace() *RaceQuery {
	return NewCharacterClient(c.config).QueryRace(c)
}

// QueryClass queries the "class" edge of the Character entity.
func (c *Character) QueryClass() *ClassQuery {
	return NewCharacterClient(c.config).QueryClass(c)
}

// Update returns a builder for updating this Character.
// Note that you need to call Character.Unwrap() before calling this method if this Character
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Character) Update() *CharacterUpdateOne {
	return NewCharacterClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Character entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Character) Unwrap() *Character {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Character is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Character) String() string {
	var builder strings.Builder
	builder.WriteString("Character(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteByte(')')
	return builder.String()
}

func (cc *CharacterCreate) SetCharacter(input *Character) *CharacterCreate {
	cc.SetID(input.ID)
	cc.SetName(input.Name)
	return cc
}

// NamedRace returns the Race named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Character) NamedRace(name string) ([]*Race, error) {
	if c.Edges.namedRace == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedRace[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Character) appendNamedRace(name string, edges ...*Race) {
	if c.Edges.namedRace == nil {
		c.Edges.namedRace = make(map[string][]*Race)
	}
	if len(edges) == 0 {
		c.Edges.namedRace[name] = []*Race{}
	} else {
		c.Edges.namedRace[name] = append(c.Edges.namedRace[name], edges...)
	}
}

// NamedClass returns the Class named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Character) NamedClass(name string) ([]*Class, error) {
	if c.Edges.namedClass == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedClass[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Character) appendNamedClass(name string, edges ...*Class) {
	if c.Edges.namedClass == nil {
		c.Edges.namedClass = make(map[string][]*Class)
	}
	if len(edges) == 0 {
		c.Edges.namedClass[name] = []*Class{}
	} else {
		c.Edges.namedClass[name] = append(c.Edges.namedClass[name], edges...)
	}
}

// Characters is a parsable slice of Character.
type Characters []*Character
