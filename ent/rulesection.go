// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/rule"
	"github.com/ecshreve/dndgen/ent/rulesection"
)

// RuleSection is the model entity for the RuleSection schema.
type RuleSection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Indx holds the value of the "indx" field.
	Indx string `json:"index"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc []string `json:"desc,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RuleSectionQuery when eager-loading is set.
	Edges        RuleSectionEdges `json:"-"`
	rule_id      *int
	selectValues sql.SelectValues
}

// RuleSectionEdges holds the relations/edges for other nodes in the graph.
type RuleSectionEdges struct {
	// Rule holds the value of the rule edge.
	Rule *Rule `json:"rule,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// RuleOrErr returns the Rule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RuleSectionEdges) RuleOrErr() (*Rule, error) {
	if e.Rule != nil {
		return e.Rule, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: rule.Label}
	}
	return nil, &NotLoadedError{edge: "rule"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RuleSection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rulesection.FieldDesc:
			values[i] = new([]byte)
		case rulesection.FieldID:
			values[i] = new(sql.NullInt64)
		case rulesection.FieldIndx, rulesection.FieldName:
			values[i] = new(sql.NullString)
		case rulesection.ForeignKeys[0]: // rule_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RuleSection fields.
func (rs *RuleSection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rulesection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rs.ID = int(value.Int64)
		case rulesection.FieldIndx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field indx", values[i])
			} else if value.Valid {
				rs.Indx = value.String
			}
		case rulesection.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rs.Name = value.String
			}
		case rulesection.FieldDesc:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rs.Desc); err != nil {
					return fmt.Errorf("unmarshal field desc: %w", err)
				}
			}
		case rulesection.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field rule_id", value)
			} else if value.Valid {
				rs.rule_id = new(int)
				*rs.rule_id = int(value.Int64)
			}
		default:
			rs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RuleSection.
// This includes values selected through modifiers, order, etc.
func (rs *RuleSection) Value(name string) (ent.Value, error) {
	return rs.selectValues.Get(name)
}

// QueryRule queries the "rule" edge of the RuleSection entity.
func (rs *RuleSection) QueryRule() *RuleQuery {
	return NewRuleSectionClient(rs.config).QueryRule(rs)
}

// Update returns a builder for updating this RuleSection.
// Note that you need to call RuleSection.Unwrap() before calling this method if this RuleSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (rs *RuleSection) Update() *RuleSectionUpdateOne {
	return NewRuleSectionClient(rs.config).UpdateOne(rs)
}

// Unwrap unwraps the RuleSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rs *RuleSection) Unwrap() *RuleSection {
	_tx, ok := rs.config.driver.(*txDriver)
	if !ok {
		panic("ent: RuleSection is not a transactional entity")
	}
	rs.config.driver = _tx.drv
	return rs
}

// String implements the fmt.Stringer.
func (rs *RuleSection) String() string {
	var builder strings.Builder
	builder.WriteString("RuleSection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rs.ID))
	builder.WriteString("indx=")
	builder.WriteString(rs.Indx)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rs.Name)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(fmt.Sprintf("%v", rs.Desc))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (rs *RuleSection) MarshalJSON() ([]byte, error) {
	type Alias RuleSection
	return json.Marshal(&struct {
		*Alias
		RuleSectionEdges
	}{
		Alias:            (*Alias)(rs),
		RuleSectionEdges: rs.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (rs *RuleSection) UnmarshalJSON(data []byte) error {
	type Alias RuleSection
	aux := &struct {
		*Alias
		RuleSectionEdges
	}{
		Alias: (*Alias)(rs),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	rs.Edges = aux.RuleSectionEdges
	return nil
}

func (rsc *RuleSectionCreate) SetRuleSection(input *RuleSection) *RuleSectionCreate {
	rsc.SetIndx(input.Indx)
	rsc.SetName(input.Name)
	rsc.SetDesc(input.Desc)
	return rsc
}

// RuleSections is a parsable slice of RuleSection.
type RuleSections []*RuleSection
