// Code generated by ent, DO NOT EDIT.

package rule

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rule type in the database.
	Label = "rule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// EdgeRuleSections holds the string denoting the rule_sections edge name in mutations.
	EdgeRuleSections = "rule_sections"
	// Table holds the table name of the rule in the database.
	Table = "rules"
	// RuleSectionsTable is the table that holds the rule_sections relation/edge. The primary key declared below.
	RuleSectionsTable = "rule_rule_sections"
	// RuleSectionsInverseTable is the table name for the RuleSection entity.
	// It exists in this package in order to avoid circular dependency with the "rulesection" package.
	RuleSectionsInverseTable = "rule_sections"
)

// Columns holds all SQL columns for rule fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldDesc,
}

var (
	// RuleSectionsPrimaryKey and RuleSectionsColumn2 are the table columns denoting the
	// primary key for the rule_sections relation (M2M).
	RuleSectionsPrimaryKey = []string{"rule_id", "rule_section_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Rule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDesc orders the results by the desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// ByRuleSectionsCount orders the results by rule_sections count.
func ByRuleSectionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRuleSectionsStep(), opts...)
	}
}

// ByRuleSections orders the results by rule_sections terms.
func ByRuleSections(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRuleSectionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRuleSectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RuleSectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RuleSectionsTable, RuleSectionsPrimaryKey...),
	)
}
