// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/coin"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/equipmentcost"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// EquipmentCostUpdate is the builder for updating EquipmentCost entities.
type EquipmentCostUpdate struct {
	config
	hooks    []Hook
	mutation *EquipmentCostMutation
}

// Where appends a list predicates to the EquipmentCostUpdate builder.
func (ecu *EquipmentCostUpdate) Where(ps ...predicate.EquipmentCost) *EquipmentCostUpdate {
	ecu.mutation.Where(ps...)
	return ecu
}

// SetQuantity sets the "quantity" field.
func (ecu *EquipmentCostUpdate) SetQuantity(i int) *EquipmentCostUpdate {
	ecu.mutation.ResetQuantity()
	ecu.mutation.SetQuantity(i)
	return ecu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (ecu *EquipmentCostUpdate) SetNillableQuantity(i *int) *EquipmentCostUpdate {
	if i != nil {
		ecu.SetQuantity(*i)
	}
	return ecu
}

// AddQuantity adds i to the "quantity" field.
func (ecu *EquipmentCostUpdate) AddQuantity(i int) *EquipmentCostUpdate {
	ecu.mutation.AddQuantity(i)
	return ecu
}

// SetEquipmentID sets the "equipment_id" field.
func (ecu *EquipmentCostUpdate) SetEquipmentID(i int) *EquipmentCostUpdate {
	ecu.mutation.SetEquipmentID(i)
	return ecu
}

// SetNillableEquipmentID sets the "equipment_id" field if the given value is not nil.
func (ecu *EquipmentCostUpdate) SetNillableEquipmentID(i *int) *EquipmentCostUpdate {
	if i != nil {
		ecu.SetEquipmentID(*i)
	}
	return ecu
}

// SetCoinID sets the "coin_id" field.
func (ecu *EquipmentCostUpdate) SetCoinID(i int) *EquipmentCostUpdate {
	ecu.mutation.SetCoinID(i)
	return ecu
}

// SetNillableCoinID sets the "coin_id" field if the given value is not nil.
func (ecu *EquipmentCostUpdate) SetNillableCoinID(i *int) *EquipmentCostUpdate {
	if i != nil {
		ecu.SetCoinID(*i)
	}
	return ecu
}

// SetCoin sets the "coin" edge to the Coin entity.
func (ecu *EquipmentCostUpdate) SetCoin(c *Coin) *EquipmentCostUpdate {
	return ecu.SetCoinID(c.ID)
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (ecu *EquipmentCostUpdate) SetEquipment(e *Equipment) *EquipmentCostUpdate {
	return ecu.SetEquipmentID(e.ID)
}

// Mutation returns the EquipmentCostMutation object of the builder.
func (ecu *EquipmentCostUpdate) Mutation() *EquipmentCostMutation {
	return ecu.mutation
}

// ClearCoin clears the "coin" edge to the Coin entity.
func (ecu *EquipmentCostUpdate) ClearCoin() *EquipmentCostUpdate {
	ecu.mutation.ClearCoin()
	return ecu
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (ecu *EquipmentCostUpdate) ClearEquipment() *EquipmentCostUpdate {
	ecu.mutation.ClearEquipment()
	return ecu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecu *EquipmentCostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ecu.sqlSave, ecu.mutation, ecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecu *EquipmentCostUpdate) SaveX(ctx context.Context) int {
	affected, err := ecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecu *EquipmentCostUpdate) Exec(ctx context.Context) error {
	_, err := ecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecu *EquipmentCostUpdate) ExecX(ctx context.Context) {
	if err := ecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecu *EquipmentCostUpdate) check() error {
	if ecu.mutation.CoinCleared() && len(ecu.mutation.CoinIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EquipmentCost.coin"`)
	}
	if ecu.mutation.EquipmentCleared() && len(ecu.mutation.EquipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EquipmentCost.equipment"`)
	}
	return nil
}

func (ecu *EquipmentCostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ecu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(equipmentcost.Table, equipmentcost.Columns, sqlgraph.NewFieldSpec(equipmentcost.FieldID, field.TypeInt))
	if ps := ecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecu.mutation.Quantity(); ok {
		_spec.SetField(equipmentcost.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := ecu.mutation.AddedQuantity(); ok {
		_spec.AddField(equipmentcost.FieldQuantity, field.TypeInt, value)
	}
	if ecu.mutation.CoinCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   equipmentcost.CoinTable,
			Columns: []string{equipmentcost.CoinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.CoinIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   equipmentcost.CoinTable,
			Columns: []string{equipmentcost.CoinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   equipmentcost.EquipmentTable,
			Columns: []string{equipmentcost.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   equipmentcost.EquipmentTable,
			Columns: []string{equipmentcost.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipmentcost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ecu.mutation.done = true
	return n, nil
}

// EquipmentCostUpdateOne is the builder for updating a single EquipmentCost entity.
type EquipmentCostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EquipmentCostMutation
}

// SetQuantity sets the "quantity" field.
func (ecuo *EquipmentCostUpdateOne) SetQuantity(i int) *EquipmentCostUpdateOne {
	ecuo.mutation.ResetQuantity()
	ecuo.mutation.SetQuantity(i)
	return ecuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (ecuo *EquipmentCostUpdateOne) SetNillableQuantity(i *int) *EquipmentCostUpdateOne {
	if i != nil {
		ecuo.SetQuantity(*i)
	}
	return ecuo
}

// AddQuantity adds i to the "quantity" field.
func (ecuo *EquipmentCostUpdateOne) AddQuantity(i int) *EquipmentCostUpdateOne {
	ecuo.mutation.AddQuantity(i)
	return ecuo
}

// SetEquipmentID sets the "equipment_id" field.
func (ecuo *EquipmentCostUpdateOne) SetEquipmentID(i int) *EquipmentCostUpdateOne {
	ecuo.mutation.SetEquipmentID(i)
	return ecuo
}

// SetNillableEquipmentID sets the "equipment_id" field if the given value is not nil.
func (ecuo *EquipmentCostUpdateOne) SetNillableEquipmentID(i *int) *EquipmentCostUpdateOne {
	if i != nil {
		ecuo.SetEquipmentID(*i)
	}
	return ecuo
}

// SetCoinID sets the "coin_id" field.
func (ecuo *EquipmentCostUpdateOne) SetCoinID(i int) *EquipmentCostUpdateOne {
	ecuo.mutation.SetCoinID(i)
	return ecuo
}

// SetNillableCoinID sets the "coin_id" field if the given value is not nil.
func (ecuo *EquipmentCostUpdateOne) SetNillableCoinID(i *int) *EquipmentCostUpdateOne {
	if i != nil {
		ecuo.SetCoinID(*i)
	}
	return ecuo
}

// SetCoin sets the "coin" edge to the Coin entity.
func (ecuo *EquipmentCostUpdateOne) SetCoin(c *Coin) *EquipmentCostUpdateOne {
	return ecuo.SetCoinID(c.ID)
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (ecuo *EquipmentCostUpdateOne) SetEquipment(e *Equipment) *EquipmentCostUpdateOne {
	return ecuo.SetEquipmentID(e.ID)
}

// Mutation returns the EquipmentCostMutation object of the builder.
func (ecuo *EquipmentCostUpdateOne) Mutation() *EquipmentCostMutation {
	return ecuo.mutation
}

// ClearCoin clears the "coin" edge to the Coin entity.
func (ecuo *EquipmentCostUpdateOne) ClearCoin() *EquipmentCostUpdateOne {
	ecuo.mutation.ClearCoin()
	return ecuo
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (ecuo *EquipmentCostUpdateOne) ClearEquipment() *EquipmentCostUpdateOne {
	ecuo.mutation.ClearEquipment()
	return ecuo
}

// Where appends a list predicates to the EquipmentCostUpdate builder.
func (ecuo *EquipmentCostUpdateOne) Where(ps ...predicate.EquipmentCost) *EquipmentCostUpdateOne {
	ecuo.mutation.Where(ps...)
	return ecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecuo *EquipmentCostUpdateOne) Select(field string, fields ...string) *EquipmentCostUpdateOne {
	ecuo.fields = append([]string{field}, fields...)
	return ecuo
}

// Save executes the query and returns the updated EquipmentCost entity.
func (ecuo *EquipmentCostUpdateOne) Save(ctx context.Context) (*EquipmentCost, error) {
	return withHooks(ctx, ecuo.sqlSave, ecuo.mutation, ecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecuo *EquipmentCostUpdateOne) SaveX(ctx context.Context) *EquipmentCost {
	node, err := ecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecuo *EquipmentCostUpdateOne) Exec(ctx context.Context) error {
	_, err := ecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecuo *EquipmentCostUpdateOne) ExecX(ctx context.Context) {
	if err := ecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecuo *EquipmentCostUpdateOne) check() error {
	if ecuo.mutation.CoinCleared() && len(ecuo.mutation.CoinIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EquipmentCost.coin"`)
	}
	if ecuo.mutation.EquipmentCleared() && len(ecuo.mutation.EquipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EquipmentCost.equipment"`)
	}
	return nil
}

func (ecuo *EquipmentCostUpdateOne) sqlSave(ctx context.Context) (_node *EquipmentCost, err error) {
	if err := ecuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(equipmentcost.Table, equipmentcost.Columns, sqlgraph.NewFieldSpec(equipmentcost.FieldID, field.TypeInt))
	id, ok := ecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EquipmentCost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, equipmentcost.FieldID)
		for _, f := range fields {
			if !equipmentcost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != equipmentcost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecuo.mutation.Quantity(); ok {
		_spec.SetField(equipmentcost.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := ecuo.mutation.AddedQuantity(); ok {
		_spec.AddField(equipmentcost.FieldQuantity, field.TypeInt, value)
	}
	if ecuo.mutation.CoinCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   equipmentcost.CoinTable,
			Columns: []string{equipmentcost.CoinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.CoinIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   equipmentcost.CoinTable,
			Columns: []string{equipmentcost.CoinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecuo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   equipmentcost.EquipmentTable,
			Columns: []string{equipmentcost.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   equipmentcost.EquipmentTable,
			Columns: []string{equipmentcost.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EquipmentCost{config: ecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipmentcost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ecuo.mutation.done = true
	return _node, nil
}
