// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/weaponrange"
)

// WeaponRangeQuery is the builder for querying WeaponRange entities.
type WeaponRangeQuery struct {
	config
	ctx        *QueryContext
	order      []weaponrange.OrderOption
	inters     []Interceptor
	predicates []predicate.WeaponRange
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WeaponRangeQuery builder.
func (wrq *WeaponRangeQuery) Where(ps ...predicate.WeaponRange) *WeaponRangeQuery {
	wrq.predicates = append(wrq.predicates, ps...)
	return wrq
}

// Limit the number of records to be returned by this query.
func (wrq *WeaponRangeQuery) Limit(limit int) *WeaponRangeQuery {
	wrq.ctx.Limit = &limit
	return wrq
}

// Offset to start from.
func (wrq *WeaponRangeQuery) Offset(offset int) *WeaponRangeQuery {
	wrq.ctx.Offset = &offset
	return wrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wrq *WeaponRangeQuery) Unique(unique bool) *WeaponRangeQuery {
	wrq.ctx.Unique = &unique
	return wrq
}

// Order specifies how the records should be ordered.
func (wrq *WeaponRangeQuery) Order(o ...weaponrange.OrderOption) *WeaponRangeQuery {
	wrq.order = append(wrq.order, o...)
	return wrq
}

// First returns the first WeaponRange entity from the query.
// Returns a *NotFoundError when no WeaponRange was found.
func (wrq *WeaponRangeQuery) First(ctx context.Context) (*WeaponRange, error) {
	nodes, err := wrq.Limit(1).All(setContextOp(ctx, wrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{weaponrange.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wrq *WeaponRangeQuery) FirstX(ctx context.Context) *WeaponRange {
	node, err := wrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WeaponRange ID from the query.
// Returns a *NotFoundError when no WeaponRange ID was found.
func (wrq *WeaponRangeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wrq.Limit(1).IDs(setContextOp(ctx, wrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{weaponrange.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wrq *WeaponRangeQuery) FirstIDX(ctx context.Context) int {
	id, err := wrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WeaponRange entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WeaponRange entity is found.
// Returns a *NotFoundError when no WeaponRange entities are found.
func (wrq *WeaponRangeQuery) Only(ctx context.Context) (*WeaponRange, error) {
	nodes, err := wrq.Limit(2).All(setContextOp(ctx, wrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{weaponrange.Label}
	default:
		return nil, &NotSingularError{weaponrange.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wrq *WeaponRangeQuery) OnlyX(ctx context.Context) *WeaponRange {
	node, err := wrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WeaponRange ID in the query.
// Returns a *NotSingularError when more than one WeaponRange ID is found.
// Returns a *NotFoundError when no entities are found.
func (wrq *WeaponRangeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wrq.Limit(2).IDs(setContextOp(ctx, wrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{weaponrange.Label}
	default:
		err = &NotSingularError{weaponrange.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wrq *WeaponRangeQuery) OnlyIDX(ctx context.Context) int {
	id, err := wrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WeaponRanges.
func (wrq *WeaponRangeQuery) All(ctx context.Context) ([]*WeaponRange, error) {
	ctx = setContextOp(ctx, wrq.ctx, "All")
	if err := wrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WeaponRange, *WeaponRangeQuery]()
	return withInterceptors[[]*WeaponRange](ctx, wrq, qr, wrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wrq *WeaponRangeQuery) AllX(ctx context.Context) []*WeaponRange {
	nodes, err := wrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WeaponRange IDs.
func (wrq *WeaponRangeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if wrq.ctx.Unique == nil && wrq.path != nil {
		wrq.Unique(true)
	}
	ctx = setContextOp(ctx, wrq.ctx, "IDs")
	if err = wrq.Select(weaponrange.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wrq *WeaponRangeQuery) IDsX(ctx context.Context) []int {
	ids, err := wrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wrq *WeaponRangeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wrq.ctx, "Count")
	if err := wrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wrq, querierCount[*WeaponRangeQuery](), wrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wrq *WeaponRangeQuery) CountX(ctx context.Context) int {
	count, err := wrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wrq *WeaponRangeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wrq.ctx, "Exist")
	switch _, err := wrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wrq *WeaponRangeQuery) ExistX(ctx context.Context) bool {
	exist, err := wrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WeaponRangeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wrq *WeaponRangeQuery) Clone() *WeaponRangeQuery {
	if wrq == nil {
		return nil
	}
	return &WeaponRangeQuery{
		config:     wrq.config,
		ctx:        wrq.ctx.Clone(),
		order:      append([]weaponrange.OrderOption{}, wrq.order...),
		inters:     append([]Interceptor{}, wrq.inters...),
		predicates: append([]predicate.WeaponRange{}, wrq.predicates...),
		// clone intermediate query.
		sql:  wrq.sql.Clone(),
		path: wrq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Desc string `json:"desc,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WeaponRange.Query().
//		GroupBy(weaponrange.FieldDesc).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wrq *WeaponRangeQuery) GroupBy(field string, fields ...string) *WeaponRangeGroupBy {
	wrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WeaponRangeGroupBy{build: wrq}
	grbuild.flds = &wrq.ctx.Fields
	grbuild.label = weaponrange.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Desc string `json:"desc,omitempty"`
//	}
//
//	client.WeaponRange.Query().
//		Select(weaponrange.FieldDesc).
//		Scan(ctx, &v)
func (wrq *WeaponRangeQuery) Select(fields ...string) *WeaponRangeSelect {
	wrq.ctx.Fields = append(wrq.ctx.Fields, fields...)
	sbuild := &WeaponRangeSelect{WeaponRangeQuery: wrq}
	sbuild.label = weaponrange.Label
	sbuild.flds, sbuild.scan = &wrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WeaponRangeSelect configured with the given aggregations.
func (wrq *WeaponRangeQuery) Aggregate(fns ...AggregateFunc) *WeaponRangeSelect {
	return wrq.Select().Aggregate(fns...)
}

func (wrq *WeaponRangeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wrq); err != nil {
				return err
			}
		}
	}
	for _, f := range wrq.ctx.Fields {
		if !weaponrange.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wrq.path != nil {
		prev, err := wrq.path(ctx)
		if err != nil {
			return err
		}
		wrq.sql = prev
	}
	return nil
}

func (wrq *WeaponRangeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WeaponRange, error) {
	var (
		nodes   = []*WeaponRange{}
		withFKs = wrq.withFKs
		_spec   = wrq.querySpec()
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, weaponrange.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WeaponRange).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WeaponRange{config: wrq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (wrq *WeaponRangeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wrq.querySpec()
	_spec.Node.Columns = wrq.ctx.Fields
	if len(wrq.ctx.Fields) > 0 {
		_spec.Unique = wrq.ctx.Unique != nil && *wrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wrq.driver, _spec)
}

func (wrq *WeaponRangeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(weaponrange.Table, weaponrange.Columns, sqlgraph.NewFieldSpec(weaponrange.FieldID, field.TypeInt))
	_spec.From = wrq.sql
	if unique := wrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wrq.path != nil {
		_spec.Unique = true
	}
	if fields := wrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weaponrange.FieldID)
		for i := range fields {
			if fields[i] != weaponrange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := wrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wrq *WeaponRangeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wrq.driver.Dialect())
	t1 := builder.Table(weaponrange.Table)
	columns := wrq.ctx.Fields
	if len(columns) == 0 {
		columns = weaponrange.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wrq.sql != nil {
		selector = wrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wrq.ctx.Unique != nil && *wrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wrq.predicates {
		p(selector)
	}
	for _, p := range wrq.order {
		p(selector)
	}
	if offset := wrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WeaponRangeGroupBy is the group-by builder for WeaponRange entities.
type WeaponRangeGroupBy struct {
	selector
	build *WeaponRangeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wrgb *WeaponRangeGroupBy) Aggregate(fns ...AggregateFunc) *WeaponRangeGroupBy {
	wrgb.fns = append(wrgb.fns, fns...)
	return wrgb
}

// Scan applies the selector query and scans the result into the given value.
func (wrgb *WeaponRangeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wrgb.build.ctx, "GroupBy")
	if err := wrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WeaponRangeQuery, *WeaponRangeGroupBy](ctx, wrgb.build, wrgb, wrgb.build.inters, v)
}

func (wrgb *WeaponRangeGroupBy) sqlScan(ctx context.Context, root *WeaponRangeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wrgb.fns))
	for _, fn := range wrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wrgb.flds)+len(wrgb.fns))
		for _, f := range *wrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WeaponRangeSelect is the builder for selecting fields of WeaponRange entities.
type WeaponRangeSelect struct {
	*WeaponRangeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wrs *WeaponRangeSelect) Aggregate(fns ...AggregateFunc) *WeaponRangeSelect {
	wrs.fns = append(wrs.fns, fns...)
	return wrs
}

// Scan applies the selector query and scans the result into the given value.
func (wrs *WeaponRangeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wrs.ctx, "Select")
	if err := wrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WeaponRangeQuery, *WeaponRangeSelect](ctx, wrs.WeaponRangeQuery, wrs, wrs.inters, v)
}

func (wrs *WeaponRangeSelect) sqlScan(ctx context.Context, root *WeaponRangeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wrs.fns))
	for _, fn := range wrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
