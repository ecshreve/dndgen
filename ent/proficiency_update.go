// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/skill"
)

// ProficiencyUpdate is the builder for updating Proficiency entities.
type ProficiencyUpdate struct {
	config
	hooks    []Hook
	mutation *ProficiencyMutation
}

// Where appends a list predicates to the ProficiencyUpdate builder.
func (pu *ProficiencyUpdate) Where(ps ...predicate.Proficiency) *ProficiencyUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetIndx sets the "indx" field.
func (pu *ProficiencyUpdate) SetIndx(s string) *ProficiencyUpdate {
	pu.mutation.SetIndx(s)
	return pu
}

// SetName sets the "name" field.
func (pu *ProficiencyUpdate) SetName(s string) *ProficiencyUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetDesc sets the "desc" field.
func (pu *ProficiencyUpdate) SetDesc(s []string) *ProficiencyUpdate {
	pu.mutation.SetDesc(s)
	return pu
}

// AppendDesc appends s to the "desc" field.
func (pu *ProficiencyUpdate) AppendDesc(s []string) *ProficiencyUpdate {
	pu.mutation.AppendDesc(s)
	return pu
}

// ClearDesc clears the value of the "desc" field.
func (pu *ProficiencyUpdate) ClearDesc() *ProficiencyUpdate {
	pu.mutation.ClearDesc()
	return pu
}

// SetTier sets the "tier" field.
func (pu *ProficiencyUpdate) SetTier(s string) *ProficiencyUpdate {
	pu.mutation.SetTier(s)
	return pu
}

// AddRaceIDs adds the "races" edge to the Race entity by IDs.
func (pu *ProficiencyUpdate) AddRaceIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.AddRaceIDs(ids...)
	return pu
}

// AddRaces adds the "races" edges to the Race entity.
func (pu *ProficiencyUpdate) AddRaces(r ...*Race) *ProficiencyUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRaceIDs(ids...)
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (pu *ProficiencyUpdate) AddClassIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.AddClassIDs(ids...)
	return pu
}

// AddClasses adds the "classes" edges to the Class entity.
func (pu *ProficiencyUpdate) AddClasses(c ...*Class) *ProficiencyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddClassIDs(ids...)
}

// AddSkillIDs adds the "skill" edge to the Skill entity by IDs.
func (pu *ProficiencyUpdate) AddSkillIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.AddSkillIDs(ids...)
	return pu
}

// AddSkill adds the "skill" edges to the Skill entity.
func (pu *ProficiencyUpdate) AddSkill(s ...*Skill) *ProficiencyUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSkillIDs(ids...)
}

// AddAbilityScoreIDs adds the "ability_score" edge to the AbilityScore entity by IDs.
func (pu *ProficiencyUpdate) AddAbilityScoreIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.AddAbilityScoreIDs(ids...)
	return pu
}

// AddAbilityScore adds the "ability_score" edges to the AbilityScore entity.
func (pu *ProficiencyUpdate) AddAbilityScore(a ...*AbilityScore) *ProficiencyUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAbilityScoreIDs(ids...)
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (pu *ProficiencyUpdate) AddEquipmentIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.AddEquipmentIDs(ids...)
	return pu
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (pu *ProficiencyUpdate) AddEquipment(e ...*Equipment) *ProficiencyUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.AddEquipmentIDs(ids...)
}

// Mutation returns the ProficiencyMutation object of the builder.
func (pu *ProficiencyUpdate) Mutation() *ProficiencyMutation {
	return pu.mutation
}

// ClearRaces clears all "races" edges to the Race entity.
func (pu *ProficiencyUpdate) ClearRaces() *ProficiencyUpdate {
	pu.mutation.ClearRaces()
	return pu
}

// RemoveRaceIDs removes the "races" edge to Race entities by IDs.
func (pu *ProficiencyUpdate) RemoveRaceIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.RemoveRaceIDs(ids...)
	return pu
}

// RemoveRaces removes "races" edges to Race entities.
func (pu *ProficiencyUpdate) RemoveRaces(r ...*Race) *ProficiencyUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRaceIDs(ids...)
}

// ClearClasses clears all "classes" edges to the Class entity.
func (pu *ProficiencyUpdate) ClearClasses() *ProficiencyUpdate {
	pu.mutation.ClearClasses()
	return pu
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (pu *ProficiencyUpdate) RemoveClassIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.RemoveClassIDs(ids...)
	return pu
}

// RemoveClasses removes "classes" edges to Class entities.
func (pu *ProficiencyUpdate) RemoveClasses(c ...*Class) *ProficiencyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveClassIDs(ids...)
}

// ClearSkill clears all "skill" edges to the Skill entity.
func (pu *ProficiencyUpdate) ClearSkill() *ProficiencyUpdate {
	pu.mutation.ClearSkill()
	return pu
}

// RemoveSkillIDs removes the "skill" edge to Skill entities by IDs.
func (pu *ProficiencyUpdate) RemoveSkillIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.RemoveSkillIDs(ids...)
	return pu
}

// RemoveSkill removes "skill" edges to Skill entities.
func (pu *ProficiencyUpdate) RemoveSkill(s ...*Skill) *ProficiencyUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSkillIDs(ids...)
}

// ClearAbilityScore clears all "ability_score" edges to the AbilityScore entity.
func (pu *ProficiencyUpdate) ClearAbilityScore() *ProficiencyUpdate {
	pu.mutation.ClearAbilityScore()
	return pu
}

// RemoveAbilityScoreIDs removes the "ability_score" edge to AbilityScore entities by IDs.
func (pu *ProficiencyUpdate) RemoveAbilityScoreIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.RemoveAbilityScoreIDs(ids...)
	return pu
}

// RemoveAbilityScore removes "ability_score" edges to AbilityScore entities.
func (pu *ProficiencyUpdate) RemoveAbilityScore(a ...*AbilityScore) *ProficiencyUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAbilityScoreIDs(ids...)
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (pu *ProficiencyUpdate) ClearEquipment() *ProficiencyUpdate {
	pu.mutation.ClearEquipment()
	return pu
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (pu *ProficiencyUpdate) RemoveEquipmentIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.RemoveEquipmentIDs(ids...)
	return pu
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (pu *ProficiencyUpdate) RemoveEquipment(e ...*Equipment) *ProficiencyUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.RemoveEquipmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProficiencyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ProficiencyMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProficiencyUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProficiencyUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProficiencyUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProficiencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(proficiency.Table, proficiency.Columns, sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Indx(); ok {
		_spec.SetField(proficiency.FieldIndx, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(proficiency.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Desc(); ok {
		_spec.SetField(proficiency.FieldDesc, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedDesc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, proficiency.FieldDesc, value)
		})
	}
	if pu.mutation.DescCleared() {
		_spec.ClearField(proficiency.FieldDesc, field.TypeJSON)
	}
	if value, ok := pu.mutation.Tier(); ok {
		_spec.SetField(proficiency.FieldTier, field.TypeString, value)
	}
	if pu.mutation.RacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.RacesTable,
			Columns: proficiency.RacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRacesIDs(); len(nodes) > 0 && !pu.mutation.RacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.RacesTable,
			Columns: proficiency.RacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.RacesTable,
			Columns: proficiency.RacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.ClassesTable,
			Columns: proficiency.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedClassesIDs(); len(nodes) > 0 && !pu.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.ClassesTable,
			Columns: proficiency.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.ClassesTable,
			Columns: proficiency.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.SkillTable,
			Columns: proficiency.SkillPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSkillIDs(); len(nodes) > 0 && !pu.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.SkillTable,
			Columns: proficiency.SkillPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.SkillTable,
			Columns: proficiency.SkillPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AbilityScoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.AbilityScoreTable,
			Columns: proficiency.AbilityScorePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAbilityScoreIDs(); len(nodes) > 0 && !pu.mutation.AbilityScoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.AbilityScoreTable,
			Columns: proficiency.AbilityScorePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AbilityScoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.AbilityScoreTable,
			Columns: proficiency.AbilityScorePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.EquipmentTable,
			Columns: proficiency.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !pu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.EquipmentTable,
			Columns: proficiency.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.EquipmentTable,
			Columns: proficiency.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proficiency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProficiencyUpdateOne is the builder for updating a single Proficiency entity.
type ProficiencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProficiencyMutation
}

// SetIndx sets the "indx" field.
func (puo *ProficiencyUpdateOne) SetIndx(s string) *ProficiencyUpdateOne {
	puo.mutation.SetIndx(s)
	return puo
}

// SetName sets the "name" field.
func (puo *ProficiencyUpdateOne) SetName(s string) *ProficiencyUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetDesc sets the "desc" field.
func (puo *ProficiencyUpdateOne) SetDesc(s []string) *ProficiencyUpdateOne {
	puo.mutation.SetDesc(s)
	return puo
}

// AppendDesc appends s to the "desc" field.
func (puo *ProficiencyUpdateOne) AppendDesc(s []string) *ProficiencyUpdateOne {
	puo.mutation.AppendDesc(s)
	return puo
}

// ClearDesc clears the value of the "desc" field.
func (puo *ProficiencyUpdateOne) ClearDesc() *ProficiencyUpdateOne {
	puo.mutation.ClearDesc()
	return puo
}

// SetTier sets the "tier" field.
func (puo *ProficiencyUpdateOne) SetTier(s string) *ProficiencyUpdateOne {
	puo.mutation.SetTier(s)
	return puo
}

// AddRaceIDs adds the "races" edge to the Race entity by IDs.
func (puo *ProficiencyUpdateOne) AddRaceIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.AddRaceIDs(ids...)
	return puo
}

// AddRaces adds the "races" edges to the Race entity.
func (puo *ProficiencyUpdateOne) AddRaces(r ...*Race) *ProficiencyUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRaceIDs(ids...)
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (puo *ProficiencyUpdateOne) AddClassIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.AddClassIDs(ids...)
	return puo
}

// AddClasses adds the "classes" edges to the Class entity.
func (puo *ProficiencyUpdateOne) AddClasses(c ...*Class) *ProficiencyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddClassIDs(ids...)
}

// AddSkillIDs adds the "skill" edge to the Skill entity by IDs.
func (puo *ProficiencyUpdateOne) AddSkillIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.AddSkillIDs(ids...)
	return puo
}

// AddSkill adds the "skill" edges to the Skill entity.
func (puo *ProficiencyUpdateOne) AddSkill(s ...*Skill) *ProficiencyUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSkillIDs(ids...)
}

// AddAbilityScoreIDs adds the "ability_score" edge to the AbilityScore entity by IDs.
func (puo *ProficiencyUpdateOne) AddAbilityScoreIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.AddAbilityScoreIDs(ids...)
	return puo
}

// AddAbilityScore adds the "ability_score" edges to the AbilityScore entity.
func (puo *ProficiencyUpdateOne) AddAbilityScore(a ...*AbilityScore) *ProficiencyUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAbilityScoreIDs(ids...)
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (puo *ProficiencyUpdateOne) AddEquipmentIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.AddEquipmentIDs(ids...)
	return puo
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (puo *ProficiencyUpdateOne) AddEquipment(e ...*Equipment) *ProficiencyUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.AddEquipmentIDs(ids...)
}

// Mutation returns the ProficiencyMutation object of the builder.
func (puo *ProficiencyUpdateOne) Mutation() *ProficiencyMutation {
	return puo.mutation
}

// ClearRaces clears all "races" edges to the Race entity.
func (puo *ProficiencyUpdateOne) ClearRaces() *ProficiencyUpdateOne {
	puo.mutation.ClearRaces()
	return puo
}

// RemoveRaceIDs removes the "races" edge to Race entities by IDs.
func (puo *ProficiencyUpdateOne) RemoveRaceIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.RemoveRaceIDs(ids...)
	return puo
}

// RemoveRaces removes "races" edges to Race entities.
func (puo *ProficiencyUpdateOne) RemoveRaces(r ...*Race) *ProficiencyUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRaceIDs(ids...)
}

// ClearClasses clears all "classes" edges to the Class entity.
func (puo *ProficiencyUpdateOne) ClearClasses() *ProficiencyUpdateOne {
	puo.mutation.ClearClasses()
	return puo
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (puo *ProficiencyUpdateOne) RemoveClassIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.RemoveClassIDs(ids...)
	return puo
}

// RemoveClasses removes "classes" edges to Class entities.
func (puo *ProficiencyUpdateOne) RemoveClasses(c ...*Class) *ProficiencyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveClassIDs(ids...)
}

// ClearSkill clears all "skill" edges to the Skill entity.
func (puo *ProficiencyUpdateOne) ClearSkill() *ProficiencyUpdateOne {
	puo.mutation.ClearSkill()
	return puo
}

// RemoveSkillIDs removes the "skill" edge to Skill entities by IDs.
func (puo *ProficiencyUpdateOne) RemoveSkillIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.RemoveSkillIDs(ids...)
	return puo
}

// RemoveSkill removes "skill" edges to Skill entities.
func (puo *ProficiencyUpdateOne) RemoveSkill(s ...*Skill) *ProficiencyUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSkillIDs(ids...)
}

// ClearAbilityScore clears all "ability_score" edges to the AbilityScore entity.
func (puo *ProficiencyUpdateOne) ClearAbilityScore() *ProficiencyUpdateOne {
	puo.mutation.ClearAbilityScore()
	return puo
}

// RemoveAbilityScoreIDs removes the "ability_score" edge to AbilityScore entities by IDs.
func (puo *ProficiencyUpdateOne) RemoveAbilityScoreIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.RemoveAbilityScoreIDs(ids...)
	return puo
}

// RemoveAbilityScore removes "ability_score" edges to AbilityScore entities.
func (puo *ProficiencyUpdateOne) RemoveAbilityScore(a ...*AbilityScore) *ProficiencyUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAbilityScoreIDs(ids...)
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (puo *ProficiencyUpdateOne) ClearEquipment() *ProficiencyUpdateOne {
	puo.mutation.ClearEquipment()
	return puo
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (puo *ProficiencyUpdateOne) RemoveEquipmentIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.RemoveEquipmentIDs(ids...)
	return puo
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (puo *ProficiencyUpdateOne) RemoveEquipment(e ...*Equipment) *ProficiencyUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.RemoveEquipmentIDs(ids...)
}

// Where appends a list predicates to the ProficiencyUpdate builder.
func (puo *ProficiencyUpdateOne) Where(ps ...predicate.Proficiency) *ProficiencyUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProficiencyUpdateOne) Select(field string, fields ...string) *ProficiencyUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Proficiency entity.
func (puo *ProficiencyUpdateOne) Save(ctx context.Context) (*Proficiency, error) {
	return withHooks[*Proficiency, ProficiencyMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProficiencyUpdateOne) SaveX(ctx context.Context) *Proficiency {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProficiencyUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProficiencyUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProficiencyUpdateOne) sqlSave(ctx context.Context) (_node *Proficiency, err error) {
	_spec := sqlgraph.NewUpdateSpec(proficiency.Table, proficiency.Columns, sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Proficiency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, proficiency.FieldID)
		for _, f := range fields {
			if !proficiency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != proficiency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Indx(); ok {
		_spec.SetField(proficiency.FieldIndx, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(proficiency.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Desc(); ok {
		_spec.SetField(proficiency.FieldDesc, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedDesc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, proficiency.FieldDesc, value)
		})
	}
	if puo.mutation.DescCleared() {
		_spec.ClearField(proficiency.FieldDesc, field.TypeJSON)
	}
	if value, ok := puo.mutation.Tier(); ok {
		_spec.SetField(proficiency.FieldTier, field.TypeString, value)
	}
	if puo.mutation.RacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.RacesTable,
			Columns: proficiency.RacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRacesIDs(); len(nodes) > 0 && !puo.mutation.RacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.RacesTable,
			Columns: proficiency.RacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.RacesTable,
			Columns: proficiency.RacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.ClassesTable,
			Columns: proficiency.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedClassesIDs(); len(nodes) > 0 && !puo.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.ClassesTable,
			Columns: proficiency.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.ClassesTable,
			Columns: proficiency.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.SkillTable,
			Columns: proficiency.SkillPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSkillIDs(); len(nodes) > 0 && !puo.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.SkillTable,
			Columns: proficiency.SkillPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.SkillTable,
			Columns: proficiency.SkillPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AbilityScoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.AbilityScoreTable,
			Columns: proficiency.AbilityScorePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAbilityScoreIDs(); len(nodes) > 0 && !puo.mutation.AbilityScoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.AbilityScoreTable,
			Columns: proficiency.AbilityScorePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AbilityScoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.AbilityScoreTable,
			Columns: proficiency.AbilityScorePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.EquipmentTable,
			Columns: proficiency.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !puo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.EquipmentTable,
			Columns: proficiency.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiency.EquipmentTable,
			Columns: proficiency.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Proficiency{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proficiency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
