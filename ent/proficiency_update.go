// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/characterproficiency"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/proficiencychoice"
	"github.com/ecshreve/dndgen/ent/race"
)

// ProficiencyUpdate is the builder for updating Proficiency entities.
type ProficiencyUpdate struct {
	config
	hooks    []Hook
	mutation *ProficiencyMutation
}

// Where appends a list predicates to the ProficiencyUpdate builder.
func (pu *ProficiencyUpdate) Where(ps ...predicate.Proficiency) *ProficiencyUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetIndx sets the "indx" field.
func (pu *ProficiencyUpdate) SetIndx(s string) *ProficiencyUpdate {
	pu.mutation.SetIndx(s)
	return pu
}

// SetNillableIndx sets the "indx" field if the given value is not nil.
func (pu *ProficiencyUpdate) SetNillableIndx(s *string) *ProficiencyUpdate {
	if s != nil {
		pu.SetIndx(*s)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *ProficiencyUpdate) SetName(s string) *ProficiencyUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProficiencyUpdate) SetNillableName(s *string) *ProficiencyUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetReference sets the "reference" field.
func (pu *ProficiencyUpdate) SetReference(s string) *ProficiencyUpdate {
	pu.mutation.SetReference(s)
	return pu
}

// SetNillableReference sets the "reference" field if the given value is not nil.
func (pu *ProficiencyUpdate) SetNillableReference(s *string) *ProficiencyUpdate {
	if s != nil {
		pu.SetReference(*s)
	}
	return pu
}

// AddRaceIDs adds the "race" edge to the Race entity by IDs.
func (pu *ProficiencyUpdate) AddRaceIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.AddRaceIDs(ids...)
	return pu
}

// AddRace adds the "race" edges to the Race entity.
func (pu *ProficiencyUpdate) AddRace(r ...*Race) *ProficiencyUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRaceIDs(ids...)
}

// AddOptionIDs adds the "options" edge to the ProficiencyChoice entity by IDs.
func (pu *ProficiencyUpdate) AddOptionIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.AddOptionIDs(ids...)
	return pu
}

// AddOptions adds the "options" edges to the ProficiencyChoice entity.
func (pu *ProficiencyUpdate) AddOptions(p ...*ProficiencyChoice) *ProficiencyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddOptionIDs(ids...)
}

// AddClasIDs adds the "class" edge to the Class entity by IDs.
func (pu *ProficiencyUpdate) AddClasIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.AddClasIDs(ids...)
	return pu
}

// AddClass adds the "class" edges to the Class entity.
func (pu *ProficiencyUpdate) AddClass(c ...*Class) *ProficiencyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddClasIDs(ids...)
}

// AddCharacterProficiencyIDs adds the "character_proficiencies" edge to the CharacterProficiency entity by IDs.
func (pu *ProficiencyUpdate) AddCharacterProficiencyIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.AddCharacterProficiencyIDs(ids...)
	return pu
}

// AddCharacterProficiencies adds the "character_proficiencies" edges to the CharacterProficiency entity.
func (pu *ProficiencyUpdate) AddCharacterProficiencies(c ...*CharacterProficiency) *ProficiencyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCharacterProficiencyIDs(ids...)
}

// Mutation returns the ProficiencyMutation object of the builder.
func (pu *ProficiencyUpdate) Mutation() *ProficiencyMutation {
	return pu.mutation
}

// ClearRace clears all "race" edges to the Race entity.
func (pu *ProficiencyUpdate) ClearRace() *ProficiencyUpdate {
	pu.mutation.ClearRace()
	return pu
}

// RemoveRaceIDs removes the "race" edge to Race entities by IDs.
func (pu *ProficiencyUpdate) RemoveRaceIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.RemoveRaceIDs(ids...)
	return pu
}

// RemoveRace removes "race" edges to Race entities.
func (pu *ProficiencyUpdate) RemoveRace(r ...*Race) *ProficiencyUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRaceIDs(ids...)
}

// ClearOptions clears all "options" edges to the ProficiencyChoice entity.
func (pu *ProficiencyUpdate) ClearOptions() *ProficiencyUpdate {
	pu.mutation.ClearOptions()
	return pu
}

// RemoveOptionIDs removes the "options" edge to ProficiencyChoice entities by IDs.
func (pu *ProficiencyUpdate) RemoveOptionIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.RemoveOptionIDs(ids...)
	return pu
}

// RemoveOptions removes "options" edges to ProficiencyChoice entities.
func (pu *ProficiencyUpdate) RemoveOptions(p ...*ProficiencyChoice) *ProficiencyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveOptionIDs(ids...)
}

// ClearClass clears all "class" edges to the Class entity.
func (pu *ProficiencyUpdate) ClearClass() *ProficiencyUpdate {
	pu.mutation.ClearClass()
	return pu
}

// RemoveClasIDs removes the "class" edge to Class entities by IDs.
func (pu *ProficiencyUpdate) RemoveClasIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.RemoveClasIDs(ids...)
	return pu
}

// RemoveClass removes "class" edges to Class entities.
func (pu *ProficiencyUpdate) RemoveClass(c ...*Class) *ProficiencyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveClasIDs(ids...)
}

// ClearCharacterProficiencies clears all "character_proficiencies" edges to the CharacterProficiency entity.
func (pu *ProficiencyUpdate) ClearCharacterProficiencies() *ProficiencyUpdate {
	pu.mutation.ClearCharacterProficiencies()
	return pu
}

// RemoveCharacterProficiencyIDs removes the "character_proficiencies" edge to CharacterProficiency entities by IDs.
func (pu *ProficiencyUpdate) RemoveCharacterProficiencyIDs(ids ...int) *ProficiencyUpdate {
	pu.mutation.RemoveCharacterProficiencyIDs(ids...)
	return pu
}

// RemoveCharacterProficiencies removes "character_proficiencies" edges to CharacterProficiency entities.
func (pu *ProficiencyUpdate) RemoveCharacterProficiencies(c ...*CharacterProficiency) *ProficiencyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCharacterProficiencyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProficiencyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProficiencyUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProficiencyUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProficiencyUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProficiencyUpdate) check() error {
	if v, ok := pu.mutation.Indx(); ok {
		if err := proficiency.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Proficiency.indx": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := proficiency.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Proficiency.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Reference(); ok {
		if err := proficiency.ReferenceValidator(v); err != nil {
			return &ValidationError{Name: "reference", err: fmt.Errorf(`ent: validator failed for field "Proficiency.reference": %w`, err)}
		}
	}
	return nil
}

func (pu *ProficiencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(proficiency.Table, proficiency.Columns, sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Indx(); ok {
		_spec.SetField(proficiency.FieldIndx, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(proficiency.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Reference(); ok {
		_spec.SetField(proficiency.FieldReference, field.TypeString, value)
	}
	if pu.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.RaceTable,
			Columns: proficiency.RacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRaceIDs(); len(nodes) > 0 && !pu.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.RaceTable,
			Columns: proficiency.RacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.RaceTable,
			Columns: proficiency.RacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.OptionsTable,
			Columns: proficiency.OptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiencychoice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOptionsIDs(); len(nodes) > 0 && !pu.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.OptionsTable,
			Columns: proficiency.OptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiencychoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.OptionsTable,
			Columns: proficiency.OptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiencychoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.ClassTable,
			Columns: proficiency.ClassPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedClassIDs(); len(nodes) > 0 && !pu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.ClassTable,
			Columns: proficiency.ClassPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.ClassTable,
			Columns: proficiency.ClassPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CharacterProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   proficiency.CharacterProficienciesTable,
			Columns: []string{proficiency.CharacterProficienciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterproficiency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCharacterProficienciesIDs(); len(nodes) > 0 && !pu.mutation.CharacterProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   proficiency.CharacterProficienciesTable,
			Columns: []string{proficiency.CharacterProficienciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterproficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CharacterProficienciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   proficiency.CharacterProficienciesTable,
			Columns: []string{proficiency.CharacterProficienciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterproficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proficiency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProficiencyUpdateOne is the builder for updating a single Proficiency entity.
type ProficiencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProficiencyMutation
}

// SetIndx sets the "indx" field.
func (puo *ProficiencyUpdateOne) SetIndx(s string) *ProficiencyUpdateOne {
	puo.mutation.SetIndx(s)
	return puo
}

// SetNillableIndx sets the "indx" field if the given value is not nil.
func (puo *ProficiencyUpdateOne) SetNillableIndx(s *string) *ProficiencyUpdateOne {
	if s != nil {
		puo.SetIndx(*s)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *ProficiencyUpdateOne) SetName(s string) *ProficiencyUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProficiencyUpdateOne) SetNillableName(s *string) *ProficiencyUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetReference sets the "reference" field.
func (puo *ProficiencyUpdateOne) SetReference(s string) *ProficiencyUpdateOne {
	puo.mutation.SetReference(s)
	return puo
}

// SetNillableReference sets the "reference" field if the given value is not nil.
func (puo *ProficiencyUpdateOne) SetNillableReference(s *string) *ProficiencyUpdateOne {
	if s != nil {
		puo.SetReference(*s)
	}
	return puo
}

// AddRaceIDs adds the "race" edge to the Race entity by IDs.
func (puo *ProficiencyUpdateOne) AddRaceIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.AddRaceIDs(ids...)
	return puo
}

// AddRace adds the "race" edges to the Race entity.
func (puo *ProficiencyUpdateOne) AddRace(r ...*Race) *ProficiencyUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRaceIDs(ids...)
}

// AddOptionIDs adds the "options" edge to the ProficiencyChoice entity by IDs.
func (puo *ProficiencyUpdateOne) AddOptionIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.AddOptionIDs(ids...)
	return puo
}

// AddOptions adds the "options" edges to the ProficiencyChoice entity.
func (puo *ProficiencyUpdateOne) AddOptions(p ...*ProficiencyChoice) *ProficiencyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddOptionIDs(ids...)
}

// AddClasIDs adds the "class" edge to the Class entity by IDs.
func (puo *ProficiencyUpdateOne) AddClasIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.AddClasIDs(ids...)
	return puo
}

// AddClass adds the "class" edges to the Class entity.
func (puo *ProficiencyUpdateOne) AddClass(c ...*Class) *ProficiencyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddClasIDs(ids...)
}

// AddCharacterProficiencyIDs adds the "character_proficiencies" edge to the CharacterProficiency entity by IDs.
func (puo *ProficiencyUpdateOne) AddCharacterProficiencyIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.AddCharacterProficiencyIDs(ids...)
	return puo
}

// AddCharacterProficiencies adds the "character_proficiencies" edges to the CharacterProficiency entity.
func (puo *ProficiencyUpdateOne) AddCharacterProficiencies(c ...*CharacterProficiency) *ProficiencyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCharacterProficiencyIDs(ids...)
}

// Mutation returns the ProficiencyMutation object of the builder.
func (puo *ProficiencyUpdateOne) Mutation() *ProficiencyMutation {
	return puo.mutation
}

// ClearRace clears all "race" edges to the Race entity.
func (puo *ProficiencyUpdateOne) ClearRace() *ProficiencyUpdateOne {
	puo.mutation.ClearRace()
	return puo
}

// RemoveRaceIDs removes the "race" edge to Race entities by IDs.
func (puo *ProficiencyUpdateOne) RemoveRaceIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.RemoveRaceIDs(ids...)
	return puo
}

// RemoveRace removes "race" edges to Race entities.
func (puo *ProficiencyUpdateOne) RemoveRace(r ...*Race) *ProficiencyUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRaceIDs(ids...)
}

// ClearOptions clears all "options" edges to the ProficiencyChoice entity.
func (puo *ProficiencyUpdateOne) ClearOptions() *ProficiencyUpdateOne {
	puo.mutation.ClearOptions()
	return puo
}

// RemoveOptionIDs removes the "options" edge to ProficiencyChoice entities by IDs.
func (puo *ProficiencyUpdateOne) RemoveOptionIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.RemoveOptionIDs(ids...)
	return puo
}

// RemoveOptions removes "options" edges to ProficiencyChoice entities.
func (puo *ProficiencyUpdateOne) RemoveOptions(p ...*ProficiencyChoice) *ProficiencyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveOptionIDs(ids...)
}

// ClearClass clears all "class" edges to the Class entity.
func (puo *ProficiencyUpdateOne) ClearClass() *ProficiencyUpdateOne {
	puo.mutation.ClearClass()
	return puo
}

// RemoveClasIDs removes the "class" edge to Class entities by IDs.
func (puo *ProficiencyUpdateOne) RemoveClasIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.RemoveClasIDs(ids...)
	return puo
}

// RemoveClass removes "class" edges to Class entities.
func (puo *ProficiencyUpdateOne) RemoveClass(c ...*Class) *ProficiencyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveClasIDs(ids...)
}

// ClearCharacterProficiencies clears all "character_proficiencies" edges to the CharacterProficiency entity.
func (puo *ProficiencyUpdateOne) ClearCharacterProficiencies() *ProficiencyUpdateOne {
	puo.mutation.ClearCharacterProficiencies()
	return puo
}

// RemoveCharacterProficiencyIDs removes the "character_proficiencies" edge to CharacterProficiency entities by IDs.
func (puo *ProficiencyUpdateOne) RemoveCharacterProficiencyIDs(ids ...int) *ProficiencyUpdateOne {
	puo.mutation.RemoveCharacterProficiencyIDs(ids...)
	return puo
}

// RemoveCharacterProficiencies removes "character_proficiencies" edges to CharacterProficiency entities.
func (puo *ProficiencyUpdateOne) RemoveCharacterProficiencies(c ...*CharacterProficiency) *ProficiencyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCharacterProficiencyIDs(ids...)
}

// Where appends a list predicates to the ProficiencyUpdate builder.
func (puo *ProficiencyUpdateOne) Where(ps ...predicate.Proficiency) *ProficiencyUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProficiencyUpdateOne) Select(field string, fields ...string) *ProficiencyUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Proficiency entity.
func (puo *ProficiencyUpdateOne) Save(ctx context.Context) (*Proficiency, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProficiencyUpdateOne) SaveX(ctx context.Context) *Proficiency {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProficiencyUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProficiencyUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProficiencyUpdateOne) check() error {
	if v, ok := puo.mutation.Indx(); ok {
		if err := proficiency.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Proficiency.indx": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := proficiency.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Proficiency.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Reference(); ok {
		if err := proficiency.ReferenceValidator(v); err != nil {
			return &ValidationError{Name: "reference", err: fmt.Errorf(`ent: validator failed for field "Proficiency.reference": %w`, err)}
		}
	}
	return nil
}

func (puo *ProficiencyUpdateOne) sqlSave(ctx context.Context) (_node *Proficiency, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(proficiency.Table, proficiency.Columns, sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Proficiency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, proficiency.FieldID)
		for _, f := range fields {
			if !proficiency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != proficiency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Indx(); ok {
		_spec.SetField(proficiency.FieldIndx, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(proficiency.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Reference(); ok {
		_spec.SetField(proficiency.FieldReference, field.TypeString, value)
	}
	if puo.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.RaceTable,
			Columns: proficiency.RacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRaceIDs(); len(nodes) > 0 && !puo.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.RaceTable,
			Columns: proficiency.RacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.RaceTable,
			Columns: proficiency.RacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.OptionsTable,
			Columns: proficiency.OptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiencychoice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOptionsIDs(); len(nodes) > 0 && !puo.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.OptionsTable,
			Columns: proficiency.OptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiencychoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.OptionsTable,
			Columns: proficiency.OptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiencychoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.ClassTable,
			Columns: proficiency.ClassPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedClassIDs(); len(nodes) > 0 && !puo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.ClassTable,
			Columns: proficiency.ClassPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proficiency.ClassTable,
			Columns: proficiency.ClassPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CharacterProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   proficiency.CharacterProficienciesTable,
			Columns: []string{proficiency.CharacterProficienciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterproficiency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCharacterProficienciesIDs(); len(nodes) > 0 && !puo.mutation.CharacterProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   proficiency.CharacterProficienciesTable,
			Columns: []string{proficiency.CharacterProficienciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterproficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CharacterProficienciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   proficiency.CharacterProficienciesTable,
			Columns: []string{proficiency.CharacterProficienciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterproficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Proficiency{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proficiency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
