// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/skill"
)

// ProficiencyUpdate is the builder for updating Proficiency entities.
type ProficiencyUpdate struct {
	config
	hooks    []Hook
	mutation *ProficiencyMutation
}

// Where appends a list predicates to the ProficiencyUpdate builder.
func (pu *ProficiencyUpdate) Where(ps ...predicate.Proficiency) *ProficiencyUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetIndx sets the "indx" field.
func (pu *ProficiencyUpdate) SetIndx(s string) *ProficiencyUpdate {
	pu.mutation.SetIndx(s)
	return pu
}

// SetNillableIndx sets the "indx" field if the given value is not nil.
func (pu *ProficiencyUpdate) SetNillableIndx(s *string) *ProficiencyUpdate {
	if s != nil {
		pu.SetIndx(*s)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *ProficiencyUpdate) SetName(s string) *ProficiencyUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProficiencyUpdate) SetNillableName(s *string) *ProficiencyUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetCategory sets the "category" field.
func (pu *ProficiencyUpdate) SetCategory(s string) *ProficiencyUpdate {
	pu.mutation.SetCategory(s)
	return pu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pu *ProficiencyUpdate) SetNillableCategory(s *string) *ProficiencyUpdate {
	if s != nil {
		pu.SetCategory(*s)
	}
	return pu
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by ID.
func (pu *ProficiencyUpdate) SetEquipmentID(id int) *ProficiencyUpdate {
	pu.mutation.SetEquipmentID(id)
	return pu
}

// SetNillableEquipmentID sets the "equipment" edge to the Equipment entity by ID if the given value is not nil.
func (pu *ProficiencyUpdate) SetNillableEquipmentID(id *int) *ProficiencyUpdate {
	if id != nil {
		pu = pu.SetEquipmentID(*id)
	}
	return pu
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (pu *ProficiencyUpdate) SetEquipment(e *Equipment) *ProficiencyUpdate {
	return pu.SetEquipmentID(e.ID)
}

// SetSkillID sets the "skill" edge to the Skill entity by ID.
func (pu *ProficiencyUpdate) SetSkillID(id int) *ProficiencyUpdate {
	pu.mutation.SetSkillID(id)
	return pu
}

// SetNillableSkillID sets the "skill" edge to the Skill entity by ID if the given value is not nil.
func (pu *ProficiencyUpdate) SetNillableSkillID(id *int) *ProficiencyUpdate {
	if id != nil {
		pu = pu.SetSkillID(*id)
	}
	return pu
}

// SetSkill sets the "skill" edge to the Skill entity.
func (pu *ProficiencyUpdate) SetSkill(s *Skill) *ProficiencyUpdate {
	return pu.SetSkillID(s.ID)
}

// SetSavingThrowID sets the "saving_throw" edge to the AbilityScore entity by ID.
func (pu *ProficiencyUpdate) SetSavingThrowID(id int) *ProficiencyUpdate {
	pu.mutation.SetSavingThrowID(id)
	return pu
}

// SetNillableSavingThrowID sets the "saving_throw" edge to the AbilityScore entity by ID if the given value is not nil.
func (pu *ProficiencyUpdate) SetNillableSavingThrowID(id *int) *ProficiencyUpdate {
	if id != nil {
		pu = pu.SetSavingThrowID(*id)
	}
	return pu
}

// SetSavingThrow sets the "saving_throw" edge to the AbilityScore entity.
func (pu *ProficiencyUpdate) SetSavingThrow(a *AbilityScore) *ProficiencyUpdate {
	return pu.SetSavingThrowID(a.ID)
}

// Mutation returns the ProficiencyMutation object of the builder.
func (pu *ProficiencyUpdate) Mutation() *ProficiencyMutation {
	return pu.mutation
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (pu *ProficiencyUpdate) ClearEquipment() *ProficiencyUpdate {
	pu.mutation.ClearEquipment()
	return pu
}

// ClearSkill clears the "skill" edge to the Skill entity.
func (pu *ProficiencyUpdate) ClearSkill() *ProficiencyUpdate {
	pu.mutation.ClearSkill()
	return pu
}

// ClearSavingThrow clears the "saving_throw" edge to the AbilityScore entity.
func (pu *ProficiencyUpdate) ClearSavingThrow() *ProficiencyUpdate {
	pu.mutation.ClearSavingThrow()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProficiencyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProficiencyUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProficiencyUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProficiencyUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProficiencyUpdate) check() error {
	if v, ok := pu.mutation.Indx(); ok {
		if err := proficiency.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Proficiency.indx": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := proficiency.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Proficiency.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Category(); ok {
		if err := proficiency.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Proficiency.category": %w`, err)}
		}
	}
	return nil
}

func (pu *ProficiencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(proficiency.Table, proficiency.Columns, sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Indx(); ok {
		_spec.SetField(proficiency.FieldIndx, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(proficiency.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Category(); ok {
		_spec.SetField(proficiency.FieldCategory, field.TypeString, value)
	}
	if pu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   proficiency.EquipmentTable,
			Columns: []string{proficiency.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   proficiency.EquipmentTable,
			Columns: []string{proficiency.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   proficiency.SkillTable,
			Columns: []string{proficiency.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   proficiency.SkillTable,
			Columns: []string{proficiency.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SavingThrowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   proficiency.SavingThrowTable,
			Columns: []string{proficiency.SavingThrowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SavingThrowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   proficiency.SavingThrowTable,
			Columns: []string{proficiency.SavingThrowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proficiency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProficiencyUpdateOne is the builder for updating a single Proficiency entity.
type ProficiencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProficiencyMutation
}

// SetIndx sets the "indx" field.
func (puo *ProficiencyUpdateOne) SetIndx(s string) *ProficiencyUpdateOne {
	puo.mutation.SetIndx(s)
	return puo
}

// SetNillableIndx sets the "indx" field if the given value is not nil.
func (puo *ProficiencyUpdateOne) SetNillableIndx(s *string) *ProficiencyUpdateOne {
	if s != nil {
		puo.SetIndx(*s)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *ProficiencyUpdateOne) SetName(s string) *ProficiencyUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProficiencyUpdateOne) SetNillableName(s *string) *ProficiencyUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetCategory sets the "category" field.
func (puo *ProficiencyUpdateOne) SetCategory(s string) *ProficiencyUpdateOne {
	puo.mutation.SetCategory(s)
	return puo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (puo *ProficiencyUpdateOne) SetNillableCategory(s *string) *ProficiencyUpdateOne {
	if s != nil {
		puo.SetCategory(*s)
	}
	return puo
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by ID.
func (puo *ProficiencyUpdateOne) SetEquipmentID(id int) *ProficiencyUpdateOne {
	puo.mutation.SetEquipmentID(id)
	return puo
}

// SetNillableEquipmentID sets the "equipment" edge to the Equipment entity by ID if the given value is not nil.
func (puo *ProficiencyUpdateOne) SetNillableEquipmentID(id *int) *ProficiencyUpdateOne {
	if id != nil {
		puo = puo.SetEquipmentID(*id)
	}
	return puo
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (puo *ProficiencyUpdateOne) SetEquipment(e *Equipment) *ProficiencyUpdateOne {
	return puo.SetEquipmentID(e.ID)
}

// SetSkillID sets the "skill" edge to the Skill entity by ID.
func (puo *ProficiencyUpdateOne) SetSkillID(id int) *ProficiencyUpdateOne {
	puo.mutation.SetSkillID(id)
	return puo
}

// SetNillableSkillID sets the "skill" edge to the Skill entity by ID if the given value is not nil.
func (puo *ProficiencyUpdateOne) SetNillableSkillID(id *int) *ProficiencyUpdateOne {
	if id != nil {
		puo = puo.SetSkillID(*id)
	}
	return puo
}

// SetSkill sets the "skill" edge to the Skill entity.
func (puo *ProficiencyUpdateOne) SetSkill(s *Skill) *ProficiencyUpdateOne {
	return puo.SetSkillID(s.ID)
}

// SetSavingThrowID sets the "saving_throw" edge to the AbilityScore entity by ID.
func (puo *ProficiencyUpdateOne) SetSavingThrowID(id int) *ProficiencyUpdateOne {
	puo.mutation.SetSavingThrowID(id)
	return puo
}

// SetNillableSavingThrowID sets the "saving_throw" edge to the AbilityScore entity by ID if the given value is not nil.
func (puo *ProficiencyUpdateOne) SetNillableSavingThrowID(id *int) *ProficiencyUpdateOne {
	if id != nil {
		puo = puo.SetSavingThrowID(*id)
	}
	return puo
}

// SetSavingThrow sets the "saving_throw" edge to the AbilityScore entity.
func (puo *ProficiencyUpdateOne) SetSavingThrow(a *AbilityScore) *ProficiencyUpdateOne {
	return puo.SetSavingThrowID(a.ID)
}

// Mutation returns the ProficiencyMutation object of the builder.
func (puo *ProficiencyUpdateOne) Mutation() *ProficiencyMutation {
	return puo.mutation
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (puo *ProficiencyUpdateOne) ClearEquipment() *ProficiencyUpdateOne {
	puo.mutation.ClearEquipment()
	return puo
}

// ClearSkill clears the "skill" edge to the Skill entity.
func (puo *ProficiencyUpdateOne) ClearSkill() *ProficiencyUpdateOne {
	puo.mutation.ClearSkill()
	return puo
}

// ClearSavingThrow clears the "saving_throw" edge to the AbilityScore entity.
func (puo *ProficiencyUpdateOne) ClearSavingThrow() *ProficiencyUpdateOne {
	puo.mutation.ClearSavingThrow()
	return puo
}

// Where appends a list predicates to the ProficiencyUpdate builder.
func (puo *ProficiencyUpdateOne) Where(ps ...predicate.Proficiency) *ProficiencyUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProficiencyUpdateOne) Select(field string, fields ...string) *ProficiencyUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Proficiency entity.
func (puo *ProficiencyUpdateOne) Save(ctx context.Context) (*Proficiency, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProficiencyUpdateOne) SaveX(ctx context.Context) *Proficiency {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProficiencyUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProficiencyUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProficiencyUpdateOne) check() error {
	if v, ok := puo.mutation.Indx(); ok {
		if err := proficiency.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Proficiency.indx": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := proficiency.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Proficiency.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Category(); ok {
		if err := proficiency.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Proficiency.category": %w`, err)}
		}
	}
	return nil
}

func (puo *ProficiencyUpdateOne) sqlSave(ctx context.Context) (_node *Proficiency, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(proficiency.Table, proficiency.Columns, sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Proficiency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, proficiency.FieldID)
		for _, f := range fields {
			if !proficiency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != proficiency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Indx(); ok {
		_spec.SetField(proficiency.FieldIndx, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(proficiency.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Category(); ok {
		_spec.SetField(proficiency.FieldCategory, field.TypeString, value)
	}
	if puo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   proficiency.EquipmentTable,
			Columns: []string{proficiency.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   proficiency.EquipmentTable,
			Columns: []string{proficiency.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   proficiency.SkillTable,
			Columns: []string{proficiency.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   proficiency.SkillTable,
			Columns: []string{proficiency.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SavingThrowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   proficiency.SavingThrowTable,
			Columns: []string{proficiency.SavingThrowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SavingThrowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   proficiency.SavingThrowTable,
			Columns: []string{proficiency.SavingThrowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Proficiency{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proficiency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
