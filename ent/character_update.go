// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/alignment"
	"github.com/ecshreve/dndgen/ent/character"
	"github.com/ecshreve/dndgen/ent/characterabilityscore"
	"github.com/ecshreve/dndgen/ent/characterproficiency"
	"github.com/ecshreve/dndgen/ent/characterskill"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/race"
)

// CharacterUpdate is the builder for updating Character entities.
type CharacterUpdate struct {
	config
	hooks    []Hook
	mutation *CharacterMutation
}

// Where appends a list predicates to the CharacterUpdate builder.
func (cu *CharacterUpdate) Where(ps ...predicate.Character) *CharacterUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CharacterUpdate) SetName(s string) *CharacterUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableName(s *string) *CharacterUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetAge sets the "age" field.
func (cu *CharacterUpdate) SetAge(i int) *CharacterUpdate {
	cu.mutation.ResetAge()
	cu.mutation.SetAge(i)
	return cu
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableAge(i *int) *CharacterUpdate {
	if i != nil {
		cu.SetAge(*i)
	}
	return cu
}

// AddAge adds i to the "age" field.
func (cu *CharacterUpdate) AddAge(i int) *CharacterUpdate {
	cu.mutation.AddAge(i)
	return cu
}

// SetLevel sets the "level" field.
func (cu *CharacterUpdate) SetLevel(i int) *CharacterUpdate {
	cu.mutation.ResetLevel()
	cu.mutation.SetLevel(i)
	return cu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableLevel(i *int) *CharacterUpdate {
	if i != nil {
		cu.SetLevel(*i)
	}
	return cu
}

// AddLevel adds i to the "level" field.
func (cu *CharacterUpdate) AddLevel(i int) *CharacterUpdate {
	cu.mutation.AddLevel(i)
	return cu
}

// SetProficiencyBonus sets the "proficiency_bonus" field.
func (cu *CharacterUpdate) SetProficiencyBonus(i int) *CharacterUpdate {
	cu.mutation.ResetProficiencyBonus()
	cu.mutation.SetProficiencyBonus(i)
	return cu
}

// SetNillableProficiencyBonus sets the "proficiency_bonus" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableProficiencyBonus(i *int) *CharacterUpdate {
	if i != nil {
		cu.SetProficiencyBonus(*i)
	}
	return cu
}

// AddProficiencyBonus adds i to the "proficiency_bonus" field.
func (cu *CharacterUpdate) AddProficiencyBonus(i int) *CharacterUpdate {
	cu.mutation.AddProficiencyBonus(i)
	return cu
}

// SetRaceID sets the "race" edge to the Race entity by ID.
func (cu *CharacterUpdate) SetRaceID(id int) *CharacterUpdate {
	cu.mutation.SetRaceID(id)
	return cu
}

// SetNillableRaceID sets the "race" edge to the Race entity by ID if the given value is not nil.
func (cu *CharacterUpdate) SetNillableRaceID(id *int) *CharacterUpdate {
	if id != nil {
		cu = cu.SetRaceID(*id)
	}
	return cu
}

// SetRace sets the "race" edge to the Race entity.
func (cu *CharacterUpdate) SetRace(r *Race) *CharacterUpdate {
	return cu.SetRaceID(r.ID)
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (cu *CharacterUpdate) SetClassID(id int) *CharacterUpdate {
	cu.mutation.SetClassID(id)
	return cu
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (cu *CharacterUpdate) SetNillableClassID(id *int) *CharacterUpdate {
	if id != nil {
		cu = cu.SetClassID(*id)
	}
	return cu
}

// SetClass sets the "class" edge to the Class entity.
func (cu *CharacterUpdate) SetClass(c *Class) *CharacterUpdate {
	return cu.SetClassID(c.ID)
}

// SetAlignmentID sets the "alignment" edge to the Alignment entity by ID.
func (cu *CharacterUpdate) SetAlignmentID(id int) *CharacterUpdate {
	cu.mutation.SetAlignmentID(id)
	return cu
}

// SetNillableAlignmentID sets the "alignment" edge to the Alignment entity by ID if the given value is not nil.
func (cu *CharacterUpdate) SetNillableAlignmentID(id *int) *CharacterUpdate {
	if id != nil {
		cu = cu.SetAlignmentID(*id)
	}
	return cu
}

// SetAlignment sets the "alignment" edge to the Alignment entity.
func (cu *CharacterUpdate) SetAlignment(a *Alignment) *CharacterUpdate {
	return cu.SetAlignmentID(a.ID)
}

// AddCharacterAbilityScoreIDs adds the "character_ability_scores" edge to the CharacterAbilityScore entity by IDs.
func (cu *CharacterUpdate) AddCharacterAbilityScoreIDs(ids ...int) *CharacterUpdate {
	cu.mutation.AddCharacterAbilityScoreIDs(ids...)
	return cu
}

// AddCharacterAbilityScores adds the "character_ability_scores" edges to the CharacterAbilityScore entity.
func (cu *CharacterUpdate) AddCharacterAbilityScores(c ...*CharacterAbilityScore) *CharacterUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCharacterAbilityScoreIDs(ids...)
}

// AddCharacterSkillIDs adds the "character_skills" edge to the CharacterSkill entity by IDs.
func (cu *CharacterUpdate) AddCharacterSkillIDs(ids ...int) *CharacterUpdate {
	cu.mutation.AddCharacterSkillIDs(ids...)
	return cu
}

// AddCharacterSkills adds the "character_skills" edges to the CharacterSkill entity.
func (cu *CharacterUpdate) AddCharacterSkills(c ...*CharacterSkill) *CharacterUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCharacterSkillIDs(ids...)
}

// AddCharacterProficiencyIDs adds the "character_proficiencies" edge to the CharacterProficiency entity by IDs.
func (cu *CharacterUpdate) AddCharacterProficiencyIDs(ids ...int) *CharacterUpdate {
	cu.mutation.AddCharacterProficiencyIDs(ids...)
	return cu
}

// AddCharacterProficiencies adds the "character_proficiencies" edges to the CharacterProficiency entity.
func (cu *CharacterUpdate) AddCharacterProficiencies(c ...*CharacterProficiency) *CharacterUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCharacterProficiencyIDs(ids...)
}

// Mutation returns the CharacterMutation object of the builder.
func (cu *CharacterUpdate) Mutation() *CharacterMutation {
	return cu.mutation
}

// ClearRace clears the "race" edge to the Race entity.
func (cu *CharacterUpdate) ClearRace() *CharacterUpdate {
	cu.mutation.ClearRace()
	return cu
}

// ClearClass clears the "class" edge to the Class entity.
func (cu *CharacterUpdate) ClearClass() *CharacterUpdate {
	cu.mutation.ClearClass()
	return cu
}

// ClearAlignment clears the "alignment" edge to the Alignment entity.
func (cu *CharacterUpdate) ClearAlignment() *CharacterUpdate {
	cu.mutation.ClearAlignment()
	return cu
}

// ClearCharacterAbilityScores clears all "character_ability_scores" edges to the CharacterAbilityScore entity.
func (cu *CharacterUpdate) ClearCharacterAbilityScores() *CharacterUpdate {
	cu.mutation.ClearCharacterAbilityScores()
	return cu
}

// RemoveCharacterAbilityScoreIDs removes the "character_ability_scores" edge to CharacterAbilityScore entities by IDs.
func (cu *CharacterUpdate) RemoveCharacterAbilityScoreIDs(ids ...int) *CharacterUpdate {
	cu.mutation.RemoveCharacterAbilityScoreIDs(ids...)
	return cu
}

// RemoveCharacterAbilityScores removes "character_ability_scores" edges to CharacterAbilityScore entities.
func (cu *CharacterUpdate) RemoveCharacterAbilityScores(c ...*CharacterAbilityScore) *CharacterUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCharacterAbilityScoreIDs(ids...)
}

// ClearCharacterSkills clears all "character_skills" edges to the CharacterSkill entity.
func (cu *CharacterUpdate) ClearCharacterSkills() *CharacterUpdate {
	cu.mutation.ClearCharacterSkills()
	return cu
}

// RemoveCharacterSkillIDs removes the "character_skills" edge to CharacterSkill entities by IDs.
func (cu *CharacterUpdate) RemoveCharacterSkillIDs(ids ...int) *CharacterUpdate {
	cu.mutation.RemoveCharacterSkillIDs(ids...)
	return cu
}

// RemoveCharacterSkills removes "character_skills" edges to CharacterSkill entities.
func (cu *CharacterUpdate) RemoveCharacterSkills(c ...*CharacterSkill) *CharacterUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCharacterSkillIDs(ids...)
}

// ClearCharacterProficiencies clears all "character_proficiencies" edges to the CharacterProficiency entity.
func (cu *CharacterUpdate) ClearCharacterProficiencies() *CharacterUpdate {
	cu.mutation.ClearCharacterProficiencies()
	return cu
}

// RemoveCharacterProficiencyIDs removes the "character_proficiencies" edge to CharacterProficiency entities by IDs.
func (cu *CharacterUpdate) RemoveCharacterProficiencyIDs(ids ...int) *CharacterUpdate {
	cu.mutation.RemoveCharacterProficiencyIDs(ids...)
	return cu
}

// RemoveCharacterProficiencies removes "character_proficiencies" edges to CharacterProficiency entities.
func (cu *CharacterUpdate) RemoveCharacterProficiencies(c ...*CharacterProficiency) *CharacterUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCharacterProficiencyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CharacterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CharacterUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CharacterUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CharacterUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CharacterUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := character.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Character.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Age(); ok {
		if err := character.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "Character.age": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Level(); ok {
		if err := character.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Character.level": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ProficiencyBonus(); ok {
		if err := character.ProficiencyBonusValidator(v); err != nil {
			return &ValidationError{Name: "proficiency_bonus", err: fmt.Errorf(`ent: validator failed for field "Character.proficiency_bonus": %w`, err)}
		}
	}
	return nil
}

func (cu *CharacterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(character.Table, character.Columns, sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(character.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Age(); ok {
		_spec.SetField(character.FieldAge, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedAge(); ok {
		_spec.AddField(character.FieldAge, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Level(); ok {
		_spec.SetField(character.FieldLevel, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedLevel(); ok {
		_spec.AddField(character.FieldLevel, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ProficiencyBonus(); ok {
		_spec.SetField(character.FieldProficiencyBonus, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedProficiencyBonus(); ok {
		_spec.AddField(character.FieldProficiencyBonus, field.TypeInt, value)
	}
	if cu.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   character.RaceTable,
			Columns: []string{character.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   character.RaceTable,
			Columns: []string{character.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   character.ClassTable,
			Columns: []string{character.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   character.ClassTable,
			Columns: []string{character.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AlignmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   character.AlignmentTable,
			Columns: []string{character.AlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AlignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   character.AlignmentTable,
			Columns: []string{character.AlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CharacterAbilityScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterAbilityScoresTable,
			Columns: []string{character.CharacterAbilityScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterabilityscore.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCharacterAbilityScoresIDs(); len(nodes) > 0 && !cu.mutation.CharacterAbilityScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterAbilityScoresTable,
			Columns: []string{character.CharacterAbilityScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterabilityscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CharacterAbilityScoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterAbilityScoresTable,
			Columns: []string{character.CharacterAbilityScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterabilityscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CharacterSkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterSkillsTable,
			Columns: []string{character.CharacterSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterskill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCharacterSkillsIDs(); len(nodes) > 0 && !cu.mutation.CharacterSkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterSkillsTable,
			Columns: []string{character.CharacterSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterskill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CharacterSkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterSkillsTable,
			Columns: []string{character.CharacterSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterskill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CharacterProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterProficienciesTable,
			Columns: []string{character.CharacterProficienciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterproficiency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCharacterProficienciesIDs(); len(nodes) > 0 && !cu.mutation.CharacterProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterProficienciesTable,
			Columns: []string{character.CharacterProficienciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterproficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CharacterProficienciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterProficienciesTable,
			Columns: []string{character.CharacterProficienciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterproficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{character.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CharacterUpdateOne is the builder for updating a single Character entity.
type CharacterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CharacterMutation
}

// SetName sets the "name" field.
func (cuo *CharacterUpdateOne) SetName(s string) *CharacterUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableName(s *string) *CharacterUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetAge sets the "age" field.
func (cuo *CharacterUpdateOne) SetAge(i int) *CharacterUpdateOne {
	cuo.mutation.ResetAge()
	cuo.mutation.SetAge(i)
	return cuo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableAge(i *int) *CharacterUpdateOne {
	if i != nil {
		cuo.SetAge(*i)
	}
	return cuo
}

// AddAge adds i to the "age" field.
func (cuo *CharacterUpdateOne) AddAge(i int) *CharacterUpdateOne {
	cuo.mutation.AddAge(i)
	return cuo
}

// SetLevel sets the "level" field.
func (cuo *CharacterUpdateOne) SetLevel(i int) *CharacterUpdateOne {
	cuo.mutation.ResetLevel()
	cuo.mutation.SetLevel(i)
	return cuo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableLevel(i *int) *CharacterUpdateOne {
	if i != nil {
		cuo.SetLevel(*i)
	}
	return cuo
}

// AddLevel adds i to the "level" field.
func (cuo *CharacterUpdateOne) AddLevel(i int) *CharacterUpdateOne {
	cuo.mutation.AddLevel(i)
	return cuo
}

// SetProficiencyBonus sets the "proficiency_bonus" field.
func (cuo *CharacterUpdateOne) SetProficiencyBonus(i int) *CharacterUpdateOne {
	cuo.mutation.ResetProficiencyBonus()
	cuo.mutation.SetProficiencyBonus(i)
	return cuo
}

// SetNillableProficiencyBonus sets the "proficiency_bonus" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableProficiencyBonus(i *int) *CharacterUpdateOne {
	if i != nil {
		cuo.SetProficiencyBonus(*i)
	}
	return cuo
}

// AddProficiencyBonus adds i to the "proficiency_bonus" field.
func (cuo *CharacterUpdateOne) AddProficiencyBonus(i int) *CharacterUpdateOne {
	cuo.mutation.AddProficiencyBonus(i)
	return cuo
}

// SetRaceID sets the "race" edge to the Race entity by ID.
func (cuo *CharacterUpdateOne) SetRaceID(id int) *CharacterUpdateOne {
	cuo.mutation.SetRaceID(id)
	return cuo
}

// SetNillableRaceID sets the "race" edge to the Race entity by ID if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableRaceID(id *int) *CharacterUpdateOne {
	if id != nil {
		cuo = cuo.SetRaceID(*id)
	}
	return cuo
}

// SetRace sets the "race" edge to the Race entity.
func (cuo *CharacterUpdateOne) SetRace(r *Race) *CharacterUpdateOne {
	return cuo.SetRaceID(r.ID)
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (cuo *CharacterUpdateOne) SetClassID(id int) *CharacterUpdateOne {
	cuo.mutation.SetClassID(id)
	return cuo
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableClassID(id *int) *CharacterUpdateOne {
	if id != nil {
		cuo = cuo.SetClassID(*id)
	}
	return cuo
}

// SetClass sets the "class" edge to the Class entity.
func (cuo *CharacterUpdateOne) SetClass(c *Class) *CharacterUpdateOne {
	return cuo.SetClassID(c.ID)
}

// SetAlignmentID sets the "alignment" edge to the Alignment entity by ID.
func (cuo *CharacterUpdateOne) SetAlignmentID(id int) *CharacterUpdateOne {
	cuo.mutation.SetAlignmentID(id)
	return cuo
}

// SetNillableAlignmentID sets the "alignment" edge to the Alignment entity by ID if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableAlignmentID(id *int) *CharacterUpdateOne {
	if id != nil {
		cuo = cuo.SetAlignmentID(*id)
	}
	return cuo
}

// SetAlignment sets the "alignment" edge to the Alignment entity.
func (cuo *CharacterUpdateOne) SetAlignment(a *Alignment) *CharacterUpdateOne {
	return cuo.SetAlignmentID(a.ID)
}

// AddCharacterAbilityScoreIDs adds the "character_ability_scores" edge to the CharacterAbilityScore entity by IDs.
func (cuo *CharacterUpdateOne) AddCharacterAbilityScoreIDs(ids ...int) *CharacterUpdateOne {
	cuo.mutation.AddCharacterAbilityScoreIDs(ids...)
	return cuo
}

// AddCharacterAbilityScores adds the "character_ability_scores" edges to the CharacterAbilityScore entity.
func (cuo *CharacterUpdateOne) AddCharacterAbilityScores(c ...*CharacterAbilityScore) *CharacterUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCharacterAbilityScoreIDs(ids...)
}

// AddCharacterSkillIDs adds the "character_skills" edge to the CharacterSkill entity by IDs.
func (cuo *CharacterUpdateOne) AddCharacterSkillIDs(ids ...int) *CharacterUpdateOne {
	cuo.mutation.AddCharacterSkillIDs(ids...)
	return cuo
}

// AddCharacterSkills adds the "character_skills" edges to the CharacterSkill entity.
func (cuo *CharacterUpdateOne) AddCharacterSkills(c ...*CharacterSkill) *CharacterUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCharacterSkillIDs(ids...)
}

// AddCharacterProficiencyIDs adds the "character_proficiencies" edge to the CharacterProficiency entity by IDs.
func (cuo *CharacterUpdateOne) AddCharacterProficiencyIDs(ids ...int) *CharacterUpdateOne {
	cuo.mutation.AddCharacterProficiencyIDs(ids...)
	return cuo
}

// AddCharacterProficiencies adds the "character_proficiencies" edges to the CharacterProficiency entity.
func (cuo *CharacterUpdateOne) AddCharacterProficiencies(c ...*CharacterProficiency) *CharacterUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCharacterProficiencyIDs(ids...)
}

// Mutation returns the CharacterMutation object of the builder.
func (cuo *CharacterUpdateOne) Mutation() *CharacterMutation {
	return cuo.mutation
}

// ClearRace clears the "race" edge to the Race entity.
func (cuo *CharacterUpdateOne) ClearRace() *CharacterUpdateOne {
	cuo.mutation.ClearRace()
	return cuo
}

// ClearClass clears the "class" edge to the Class entity.
func (cuo *CharacterUpdateOne) ClearClass() *CharacterUpdateOne {
	cuo.mutation.ClearClass()
	return cuo
}

// ClearAlignment clears the "alignment" edge to the Alignment entity.
func (cuo *CharacterUpdateOne) ClearAlignment() *CharacterUpdateOne {
	cuo.mutation.ClearAlignment()
	return cuo
}

// ClearCharacterAbilityScores clears all "character_ability_scores" edges to the CharacterAbilityScore entity.
func (cuo *CharacterUpdateOne) ClearCharacterAbilityScores() *CharacterUpdateOne {
	cuo.mutation.ClearCharacterAbilityScores()
	return cuo
}

// RemoveCharacterAbilityScoreIDs removes the "character_ability_scores" edge to CharacterAbilityScore entities by IDs.
func (cuo *CharacterUpdateOne) RemoveCharacterAbilityScoreIDs(ids ...int) *CharacterUpdateOne {
	cuo.mutation.RemoveCharacterAbilityScoreIDs(ids...)
	return cuo
}

// RemoveCharacterAbilityScores removes "character_ability_scores" edges to CharacterAbilityScore entities.
func (cuo *CharacterUpdateOne) RemoveCharacterAbilityScores(c ...*CharacterAbilityScore) *CharacterUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCharacterAbilityScoreIDs(ids...)
}

// ClearCharacterSkills clears all "character_skills" edges to the CharacterSkill entity.
func (cuo *CharacterUpdateOne) ClearCharacterSkills() *CharacterUpdateOne {
	cuo.mutation.ClearCharacterSkills()
	return cuo
}

// RemoveCharacterSkillIDs removes the "character_skills" edge to CharacterSkill entities by IDs.
func (cuo *CharacterUpdateOne) RemoveCharacterSkillIDs(ids ...int) *CharacterUpdateOne {
	cuo.mutation.RemoveCharacterSkillIDs(ids...)
	return cuo
}

// RemoveCharacterSkills removes "character_skills" edges to CharacterSkill entities.
func (cuo *CharacterUpdateOne) RemoveCharacterSkills(c ...*CharacterSkill) *CharacterUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCharacterSkillIDs(ids...)
}

// ClearCharacterProficiencies clears all "character_proficiencies" edges to the CharacterProficiency entity.
func (cuo *CharacterUpdateOne) ClearCharacterProficiencies() *CharacterUpdateOne {
	cuo.mutation.ClearCharacterProficiencies()
	return cuo
}

// RemoveCharacterProficiencyIDs removes the "character_proficiencies" edge to CharacterProficiency entities by IDs.
func (cuo *CharacterUpdateOne) RemoveCharacterProficiencyIDs(ids ...int) *CharacterUpdateOne {
	cuo.mutation.RemoveCharacterProficiencyIDs(ids...)
	return cuo
}

// RemoveCharacterProficiencies removes "character_proficiencies" edges to CharacterProficiency entities.
func (cuo *CharacterUpdateOne) RemoveCharacterProficiencies(c ...*CharacterProficiency) *CharacterUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCharacterProficiencyIDs(ids...)
}

// Where appends a list predicates to the CharacterUpdate builder.
func (cuo *CharacterUpdateOne) Where(ps ...predicate.Character) *CharacterUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CharacterUpdateOne) Select(field string, fields ...string) *CharacterUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Character entity.
func (cuo *CharacterUpdateOne) Save(ctx context.Context) (*Character, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CharacterUpdateOne) SaveX(ctx context.Context) *Character {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CharacterUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CharacterUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CharacterUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := character.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Character.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Age(); ok {
		if err := character.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "Character.age": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Level(); ok {
		if err := character.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Character.level": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ProficiencyBonus(); ok {
		if err := character.ProficiencyBonusValidator(v); err != nil {
			return &ValidationError{Name: "proficiency_bonus", err: fmt.Errorf(`ent: validator failed for field "Character.proficiency_bonus": %w`, err)}
		}
	}
	return nil
}

func (cuo *CharacterUpdateOne) sqlSave(ctx context.Context) (_node *Character, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(character.Table, character.Columns, sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Character.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, character.FieldID)
		for _, f := range fields {
			if !character.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != character.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(character.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Age(); ok {
		_spec.SetField(character.FieldAge, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedAge(); ok {
		_spec.AddField(character.FieldAge, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Level(); ok {
		_spec.SetField(character.FieldLevel, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedLevel(); ok {
		_spec.AddField(character.FieldLevel, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ProficiencyBonus(); ok {
		_spec.SetField(character.FieldProficiencyBonus, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedProficiencyBonus(); ok {
		_spec.AddField(character.FieldProficiencyBonus, field.TypeInt, value)
	}
	if cuo.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   character.RaceTable,
			Columns: []string{character.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   character.RaceTable,
			Columns: []string{character.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   character.ClassTable,
			Columns: []string{character.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   character.ClassTable,
			Columns: []string{character.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AlignmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   character.AlignmentTable,
			Columns: []string{character.AlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AlignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   character.AlignmentTable,
			Columns: []string{character.AlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CharacterAbilityScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterAbilityScoresTable,
			Columns: []string{character.CharacterAbilityScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterabilityscore.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCharacterAbilityScoresIDs(); len(nodes) > 0 && !cuo.mutation.CharacterAbilityScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterAbilityScoresTable,
			Columns: []string{character.CharacterAbilityScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterabilityscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CharacterAbilityScoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterAbilityScoresTable,
			Columns: []string{character.CharacterAbilityScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterabilityscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CharacterSkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterSkillsTable,
			Columns: []string{character.CharacterSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterskill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCharacterSkillsIDs(); len(nodes) > 0 && !cuo.mutation.CharacterSkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterSkillsTable,
			Columns: []string{character.CharacterSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterskill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CharacterSkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterSkillsTable,
			Columns: []string{character.CharacterSkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterskill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CharacterProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterProficienciesTable,
			Columns: []string{character.CharacterProficienciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterproficiency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCharacterProficienciesIDs(); len(nodes) > 0 && !cuo.mutation.CharacterProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterProficienciesTable,
			Columns: []string{character.CharacterProficienciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterproficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CharacterProficienciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   character.CharacterProficienciesTable,
			Columns: []string{character.CharacterProficienciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(characterproficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Character{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{character.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
