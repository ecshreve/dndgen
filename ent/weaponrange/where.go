// Code generated by ent, DO NOT EDIT.

package weaponrange

import (
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldLTE(FieldID, id))
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldEQ(FieldDesc, v))
}

// Normal applies equality check predicate on the "normal" field. It's identical to NormalEQ.
func Normal(v int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldEQ(FieldNormal, v))
}

// Long applies equality check predicate on the "long" field. It's identical to LongEQ.
func Long(v int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldEQ(FieldLong, v))
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldEQ(FieldDesc, v))
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldNEQ(FieldDesc, v))
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldIn(FieldDesc, vs...))
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldNotIn(FieldDesc, vs...))
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldGT(FieldDesc, v))
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldGTE(FieldDesc, v))
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldLT(FieldDesc, v))
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldLTE(FieldDesc, v))
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldContains(FieldDesc, v))
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldHasPrefix(FieldDesc, v))
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldHasSuffix(FieldDesc, v))
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldEqualFold(FieldDesc, v))
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldContainsFold(FieldDesc, v))
}

// NormalEQ applies the EQ predicate on the "normal" field.
func NormalEQ(v int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldEQ(FieldNormal, v))
}

// NormalNEQ applies the NEQ predicate on the "normal" field.
func NormalNEQ(v int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldNEQ(FieldNormal, v))
}

// NormalIn applies the In predicate on the "normal" field.
func NormalIn(vs ...int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldIn(FieldNormal, vs...))
}

// NormalNotIn applies the NotIn predicate on the "normal" field.
func NormalNotIn(vs ...int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldNotIn(FieldNormal, vs...))
}

// NormalGT applies the GT predicate on the "normal" field.
func NormalGT(v int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldGT(FieldNormal, v))
}

// NormalGTE applies the GTE predicate on the "normal" field.
func NormalGTE(v int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldGTE(FieldNormal, v))
}

// NormalLT applies the LT predicate on the "normal" field.
func NormalLT(v int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldLT(FieldNormal, v))
}

// NormalLTE applies the LTE predicate on the "normal" field.
func NormalLTE(v int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldLTE(FieldNormal, v))
}

// LongEQ applies the EQ predicate on the "long" field.
func LongEQ(v int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldEQ(FieldLong, v))
}

// LongNEQ applies the NEQ predicate on the "long" field.
func LongNEQ(v int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldNEQ(FieldLong, v))
}

// LongIn applies the In predicate on the "long" field.
func LongIn(vs ...int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldIn(FieldLong, vs...))
}

// LongNotIn applies the NotIn predicate on the "long" field.
func LongNotIn(vs ...int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldNotIn(FieldLong, vs...))
}

// LongGT applies the GT predicate on the "long" field.
func LongGT(v int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldGT(FieldLong, v))
}

// LongGTE applies the GTE predicate on the "long" field.
func LongGTE(v int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldGTE(FieldLong, v))
}

// LongLT applies the LT predicate on the "long" field.
func LongLT(v int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldLT(FieldLong, v))
}

// LongLTE applies the LTE predicate on the "long" field.
func LongLTE(v int) predicate.WeaponRange {
	return predicate.WeaponRange(sql.FieldLTE(FieldLong, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WeaponRange) predicate.WeaponRange {
	return predicate.WeaponRange(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WeaponRange) predicate.WeaponRange {
	return predicate.WeaponRange(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WeaponRange) predicate.WeaponRange {
	return predicate.WeaponRange(func(s *sql.Selector) {
		p(s.Not())
	})
}
