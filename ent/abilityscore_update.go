// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// AbilityScoreUpdate is the builder for updating AbilityScore entities.
type AbilityScoreUpdate struct {
	config
	hooks    []Hook
	mutation *AbilityScoreMutation
}

// Where appends a list predicates to the AbilityScoreUpdate builder.
func (asu *AbilityScoreUpdate) Where(ps ...predicate.AbilityScore) *AbilityScoreUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetIndx sets the "indx" field.
func (asu *AbilityScoreUpdate) SetIndx(s string) *AbilityScoreUpdate {
	asu.mutation.SetIndx(s)
	return asu
}

// SetAbbr sets the "abbr" field.
func (asu *AbilityScoreUpdate) SetAbbr(s string) *AbilityScoreUpdate {
	asu.mutation.SetAbbr(s)
	return asu
}

// SetName sets the "name" field.
func (asu *AbilityScoreUpdate) SetName(s string) *AbilityScoreUpdate {
	asu.mutation.SetName(s)
	return asu
}

// SetDesc sets the "desc" field.
func (asu *AbilityScoreUpdate) SetDesc(s string) *AbilityScoreUpdate {
	asu.mutation.SetDesc(s)
	return asu
}

// Mutation returns the AbilityScoreMutation object of the builder.
func (asu *AbilityScoreUpdate) Mutation() *AbilityScoreMutation {
	return asu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AbilityScoreUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AbilityScoreMutation](ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AbilityScoreUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AbilityScoreUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AbilityScoreUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asu *AbilityScoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(abilityscore.Table, abilityscore.Columns, sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.Indx(); ok {
		_spec.SetField(abilityscore.FieldIndx, field.TypeString, value)
	}
	if value, ok := asu.mutation.Abbr(); ok {
		_spec.SetField(abilityscore.FieldAbbr, field.TypeString, value)
	}
	if value, ok := asu.mutation.Name(); ok {
		_spec.SetField(abilityscore.FieldName, field.TypeString, value)
	}
	if value, ok := asu.mutation.Desc(); ok {
		_spec.SetField(abilityscore.FieldDesc, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abilityscore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AbilityScoreUpdateOne is the builder for updating a single AbilityScore entity.
type AbilityScoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AbilityScoreMutation
}

// SetIndx sets the "indx" field.
func (asuo *AbilityScoreUpdateOne) SetIndx(s string) *AbilityScoreUpdateOne {
	asuo.mutation.SetIndx(s)
	return asuo
}

// SetAbbr sets the "abbr" field.
func (asuo *AbilityScoreUpdateOne) SetAbbr(s string) *AbilityScoreUpdateOne {
	asuo.mutation.SetAbbr(s)
	return asuo
}

// SetName sets the "name" field.
func (asuo *AbilityScoreUpdateOne) SetName(s string) *AbilityScoreUpdateOne {
	asuo.mutation.SetName(s)
	return asuo
}

// SetDesc sets the "desc" field.
func (asuo *AbilityScoreUpdateOne) SetDesc(s string) *AbilityScoreUpdateOne {
	asuo.mutation.SetDesc(s)
	return asuo
}

// Mutation returns the AbilityScoreMutation object of the builder.
func (asuo *AbilityScoreUpdateOne) Mutation() *AbilityScoreMutation {
	return asuo.mutation
}

// Where appends a list predicates to the AbilityScoreUpdate builder.
func (asuo *AbilityScoreUpdateOne) Where(ps ...predicate.AbilityScore) *AbilityScoreUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AbilityScoreUpdateOne) Select(field string, fields ...string) *AbilityScoreUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AbilityScore entity.
func (asuo *AbilityScoreUpdateOne) Save(ctx context.Context) (*AbilityScore, error) {
	return withHooks[*AbilityScore, AbilityScoreMutation](ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AbilityScoreUpdateOne) SaveX(ctx context.Context) *AbilityScore {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AbilityScoreUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AbilityScoreUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asuo *AbilityScoreUpdateOne) sqlSave(ctx context.Context) (_node *AbilityScore, err error) {
	_spec := sqlgraph.NewUpdateSpec(abilityscore.Table, abilityscore.Columns, sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AbilityScore.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, abilityscore.FieldID)
		for _, f := range fields {
			if !abilityscore.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != abilityscore.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.Indx(); ok {
		_spec.SetField(abilityscore.FieldIndx, field.TypeString, value)
	}
	if value, ok := asuo.mutation.Abbr(); ok {
		_spec.SetField(abilityscore.FieldAbbr, field.TypeString, value)
	}
	if value, ok := asuo.mutation.Name(); ok {
		_spec.SetField(abilityscore.FieldName, field.TypeString, value)
	}
	if value, ok := asuo.mutation.Desc(); ok {
		_spec.SetField(abilityscore.FieldDesc, field.TypeString, value)
	}
	_node = &AbilityScore{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abilityscore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
