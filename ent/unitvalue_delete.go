// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/unitvalue"
)

// UnitValueDelete is the builder for deleting a UnitValue entity.
type UnitValueDelete struct {
	config
	hooks    []Hook
	mutation *UnitValueMutation
}

// Where appends a list predicates to the UnitValueDelete builder.
func (uvd *UnitValueDelete) Where(ps ...predicate.UnitValue) *UnitValueDelete {
	uvd.mutation.Where(ps...)
	return uvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uvd *UnitValueDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, UnitValueMutation](ctx, uvd.sqlExec, uvd.mutation, uvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uvd *UnitValueDelete) ExecX(ctx context.Context) int {
	n, err := uvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uvd *UnitValueDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(unitvalue.Table, sqlgraph.NewFieldSpec(unitvalue.FieldID, field.TypeInt))
	if ps := uvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uvd.mutation.done = true
	return affected, err
}

// UnitValueDeleteOne is the builder for deleting a single UnitValue entity.
type UnitValueDeleteOne struct {
	uvd *UnitValueDelete
}

// Where appends a list predicates to the UnitValueDelete builder.
func (uvdo *UnitValueDeleteOne) Where(ps ...predicate.UnitValue) *UnitValueDeleteOne {
	uvdo.uvd.mutation.Where(ps...)
	return uvdo
}

// Exec executes the deletion query.
func (uvdo *UnitValueDeleteOne) Exec(ctx context.Context) error {
	n, err := uvdo.uvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{unitvalue.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uvdo *UnitValueDeleteOne) ExecX(ctx context.Context) {
	if err := uvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
