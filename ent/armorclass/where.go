// Code generated by ent, DO NOT EDIT.

package armorclass

import (
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldLTE(FieldID, id))
}

// Base applies equality check predicate on the "base" field. It's identical to BaseEQ.
func Base(v int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldEQ(FieldBase, v))
}

// DexBonus applies equality check predicate on the "dex_bonus" field. It's identical to DexBonusEQ.
func DexBonus(v bool) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldEQ(FieldDexBonus, v))
}

// MaxBonus applies equality check predicate on the "max_bonus" field. It's identical to MaxBonusEQ.
func MaxBonus(v int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldEQ(FieldMaxBonus, v))
}

// BaseEQ applies the EQ predicate on the "base" field.
func BaseEQ(v int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldEQ(FieldBase, v))
}

// BaseNEQ applies the NEQ predicate on the "base" field.
func BaseNEQ(v int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldNEQ(FieldBase, v))
}

// BaseIn applies the In predicate on the "base" field.
func BaseIn(vs ...int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldIn(FieldBase, vs...))
}

// BaseNotIn applies the NotIn predicate on the "base" field.
func BaseNotIn(vs ...int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldNotIn(FieldBase, vs...))
}

// BaseGT applies the GT predicate on the "base" field.
func BaseGT(v int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldGT(FieldBase, v))
}

// BaseGTE applies the GTE predicate on the "base" field.
func BaseGTE(v int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldGTE(FieldBase, v))
}

// BaseLT applies the LT predicate on the "base" field.
func BaseLT(v int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldLT(FieldBase, v))
}

// BaseLTE applies the LTE predicate on the "base" field.
func BaseLTE(v int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldLTE(FieldBase, v))
}

// DexBonusEQ applies the EQ predicate on the "dex_bonus" field.
func DexBonusEQ(v bool) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldEQ(FieldDexBonus, v))
}

// DexBonusNEQ applies the NEQ predicate on the "dex_bonus" field.
func DexBonusNEQ(v bool) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldNEQ(FieldDexBonus, v))
}

// MaxBonusEQ applies the EQ predicate on the "max_bonus" field.
func MaxBonusEQ(v int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldEQ(FieldMaxBonus, v))
}

// MaxBonusNEQ applies the NEQ predicate on the "max_bonus" field.
func MaxBonusNEQ(v int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldNEQ(FieldMaxBonus, v))
}

// MaxBonusIn applies the In predicate on the "max_bonus" field.
func MaxBonusIn(vs ...int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldIn(FieldMaxBonus, vs...))
}

// MaxBonusNotIn applies the NotIn predicate on the "max_bonus" field.
func MaxBonusNotIn(vs ...int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldNotIn(FieldMaxBonus, vs...))
}

// MaxBonusGT applies the GT predicate on the "max_bonus" field.
func MaxBonusGT(v int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldGT(FieldMaxBonus, v))
}

// MaxBonusGTE applies the GTE predicate on the "max_bonus" field.
func MaxBonusGTE(v int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldGTE(FieldMaxBonus, v))
}

// MaxBonusLT applies the LT predicate on the "max_bonus" field.
func MaxBonusLT(v int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldLT(FieldMaxBonus, v))
}

// MaxBonusLTE applies the LTE predicate on the "max_bonus" field.
func MaxBonusLTE(v int) predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldLTE(FieldMaxBonus, v))
}

// MaxBonusIsNil applies the IsNil predicate on the "max_bonus" field.
func MaxBonusIsNil() predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldIsNull(FieldMaxBonus))
}

// MaxBonusNotNil applies the NotNil predicate on the "max_bonus" field.
func MaxBonusNotNil() predicate.ArmorClass {
	return predicate.ArmorClass(sql.FieldNotNull(FieldMaxBonus))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ArmorClass) predicate.ArmorClass {
	return predicate.ArmorClass(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ArmorClass) predicate.ArmorClass {
	return predicate.ArmorClass(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ArmorClass) predicate.ArmorClass {
	return predicate.ArmorClass(func(s *sql.Selector) {
		p(s.Not())
	})
}
