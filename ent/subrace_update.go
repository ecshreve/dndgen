// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/abilitybonus"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/subrace"
	"github.com/ecshreve/dndgen/ent/trait"
)

// SubraceUpdate is the builder for updating Subrace entities.
type SubraceUpdate struct {
	config
	hooks    []Hook
	mutation *SubraceMutation
}

// Where appends a list predicates to the SubraceUpdate builder.
func (su *SubraceUpdate) Where(ps ...predicate.Subrace) *SubraceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetIndx sets the "indx" field.
func (su *SubraceUpdate) SetIndx(s string) *SubraceUpdate {
	su.mutation.SetIndx(s)
	return su
}

// SetName sets the "name" field.
func (su *SubraceUpdate) SetName(s string) *SubraceUpdate {
	su.mutation.SetName(s)
	return su
}

// SetDesc sets the "desc" field.
func (su *SubraceUpdate) SetDesc(s string) *SubraceUpdate {
	su.mutation.SetDesc(s)
	return su
}

// SetRaceID sets the "race" edge to the Race entity by ID.
func (su *SubraceUpdate) SetRaceID(id int) *SubraceUpdate {
	su.mutation.SetRaceID(id)
	return su
}

// SetNillableRaceID sets the "race" edge to the Race entity by ID if the given value is not nil.
func (su *SubraceUpdate) SetNillableRaceID(id *int) *SubraceUpdate {
	if id != nil {
		su = su.SetRaceID(*id)
	}
	return su
}

// SetRace sets the "race" edge to the Race entity.
func (su *SubraceUpdate) SetRace(r *Race) *SubraceUpdate {
	return su.SetRaceID(r.ID)
}

// AddProficiencyIDs adds the "proficiencies" edge to the Proficiency entity by IDs.
func (su *SubraceUpdate) AddProficiencyIDs(ids ...int) *SubraceUpdate {
	su.mutation.AddProficiencyIDs(ids...)
	return su
}

// AddProficiencies adds the "proficiencies" edges to the Proficiency entity.
func (su *SubraceUpdate) AddProficiencies(p ...*Proficiency) *SubraceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProficiencyIDs(ids...)
}

// AddTraitIDs adds the "traits" edge to the Trait entity by IDs.
func (su *SubraceUpdate) AddTraitIDs(ids ...int) *SubraceUpdate {
	su.mutation.AddTraitIDs(ids...)
	return su
}

// AddTraits adds the "traits" edges to the Trait entity.
func (su *SubraceUpdate) AddTraits(t ...*Trait) *SubraceUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTraitIDs(ids...)
}

// AddAbilityBonuseIDs adds the "ability_bonuses" edge to the AbilityBonus entity by IDs.
func (su *SubraceUpdate) AddAbilityBonuseIDs(ids ...int) *SubraceUpdate {
	su.mutation.AddAbilityBonuseIDs(ids...)
	return su
}

// AddAbilityBonuses adds the "ability_bonuses" edges to the AbilityBonus entity.
func (su *SubraceUpdate) AddAbilityBonuses(a ...*AbilityBonus) *SubraceUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddAbilityBonuseIDs(ids...)
}

// Mutation returns the SubraceMutation object of the builder.
func (su *SubraceUpdate) Mutation() *SubraceMutation {
	return su.mutation
}

// ClearRace clears the "race" edge to the Race entity.
func (su *SubraceUpdate) ClearRace() *SubraceUpdate {
	su.mutation.ClearRace()
	return su
}

// ClearProficiencies clears all "proficiencies" edges to the Proficiency entity.
func (su *SubraceUpdate) ClearProficiencies() *SubraceUpdate {
	su.mutation.ClearProficiencies()
	return su
}

// RemoveProficiencyIDs removes the "proficiencies" edge to Proficiency entities by IDs.
func (su *SubraceUpdate) RemoveProficiencyIDs(ids ...int) *SubraceUpdate {
	su.mutation.RemoveProficiencyIDs(ids...)
	return su
}

// RemoveProficiencies removes "proficiencies" edges to Proficiency entities.
func (su *SubraceUpdate) RemoveProficiencies(p ...*Proficiency) *SubraceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProficiencyIDs(ids...)
}

// ClearTraits clears all "traits" edges to the Trait entity.
func (su *SubraceUpdate) ClearTraits() *SubraceUpdate {
	su.mutation.ClearTraits()
	return su
}

// RemoveTraitIDs removes the "traits" edge to Trait entities by IDs.
func (su *SubraceUpdate) RemoveTraitIDs(ids ...int) *SubraceUpdate {
	su.mutation.RemoveTraitIDs(ids...)
	return su
}

// RemoveTraits removes "traits" edges to Trait entities.
func (su *SubraceUpdate) RemoveTraits(t ...*Trait) *SubraceUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTraitIDs(ids...)
}

// ClearAbilityBonuses clears all "ability_bonuses" edges to the AbilityBonus entity.
func (su *SubraceUpdate) ClearAbilityBonuses() *SubraceUpdate {
	su.mutation.ClearAbilityBonuses()
	return su
}

// RemoveAbilityBonuseIDs removes the "ability_bonuses" edge to AbilityBonus entities by IDs.
func (su *SubraceUpdate) RemoveAbilityBonuseIDs(ids ...int) *SubraceUpdate {
	su.mutation.RemoveAbilityBonuseIDs(ids...)
	return su
}

// RemoveAbilityBonuses removes "ability_bonuses" edges to AbilityBonus entities.
func (su *SubraceUpdate) RemoveAbilityBonuses(a ...*AbilityBonus) *SubraceUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveAbilityBonuseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubraceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubraceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubraceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubraceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubraceUpdate) check() error {
	if v, ok := su.mutation.Indx(); ok {
		if err := subrace.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Subrace.indx": %w`, err)}
		}
	}
	if v, ok := su.mutation.Name(); ok {
		if err := subrace.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Subrace.name": %w`, err)}
		}
	}
	return nil
}

func (su *SubraceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subrace.Table, subrace.Columns, sqlgraph.NewFieldSpec(subrace.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Indx(); ok {
		_spec.SetField(subrace.FieldIndx, field.TypeString, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(subrace.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Desc(); ok {
		_spec.SetField(subrace.FieldDesc, field.TypeString, value)
	}
	if su.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subrace.RaceTable,
			Columns: []string{subrace.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subrace.RaceTable,
			Columns: []string{subrace.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subrace.ProficienciesTable,
			Columns: subrace.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedProficienciesIDs(); len(nodes) > 0 && !su.mutation.ProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subrace.ProficienciesTable,
			Columns: subrace.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProficienciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subrace.ProficienciesTable,
			Columns: subrace.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TraitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subrace.TraitsTable,
			Columns: subrace.TraitsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trait.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTraitsIDs(); len(nodes) > 0 && !su.mutation.TraitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subrace.TraitsTable,
			Columns: subrace.TraitsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trait.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TraitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subrace.TraitsTable,
			Columns: subrace.TraitsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trait.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AbilityBonusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subrace.AbilityBonusesTable,
			Columns: []string{subrace.AbilityBonusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilitybonus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAbilityBonusesIDs(); len(nodes) > 0 && !su.mutation.AbilityBonusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subrace.AbilityBonusesTable,
			Columns: []string{subrace.AbilityBonusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilitybonus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AbilityBonusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subrace.AbilityBonusesTable,
			Columns: []string{subrace.AbilityBonusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilitybonus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subrace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubraceUpdateOne is the builder for updating a single Subrace entity.
type SubraceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubraceMutation
}

// SetIndx sets the "indx" field.
func (suo *SubraceUpdateOne) SetIndx(s string) *SubraceUpdateOne {
	suo.mutation.SetIndx(s)
	return suo
}

// SetName sets the "name" field.
func (suo *SubraceUpdateOne) SetName(s string) *SubraceUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetDesc sets the "desc" field.
func (suo *SubraceUpdateOne) SetDesc(s string) *SubraceUpdateOne {
	suo.mutation.SetDesc(s)
	return suo
}

// SetRaceID sets the "race" edge to the Race entity by ID.
func (suo *SubraceUpdateOne) SetRaceID(id int) *SubraceUpdateOne {
	suo.mutation.SetRaceID(id)
	return suo
}

// SetNillableRaceID sets the "race" edge to the Race entity by ID if the given value is not nil.
func (suo *SubraceUpdateOne) SetNillableRaceID(id *int) *SubraceUpdateOne {
	if id != nil {
		suo = suo.SetRaceID(*id)
	}
	return suo
}

// SetRace sets the "race" edge to the Race entity.
func (suo *SubraceUpdateOne) SetRace(r *Race) *SubraceUpdateOne {
	return suo.SetRaceID(r.ID)
}

// AddProficiencyIDs adds the "proficiencies" edge to the Proficiency entity by IDs.
func (suo *SubraceUpdateOne) AddProficiencyIDs(ids ...int) *SubraceUpdateOne {
	suo.mutation.AddProficiencyIDs(ids...)
	return suo
}

// AddProficiencies adds the "proficiencies" edges to the Proficiency entity.
func (suo *SubraceUpdateOne) AddProficiencies(p ...*Proficiency) *SubraceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProficiencyIDs(ids...)
}

// AddTraitIDs adds the "traits" edge to the Trait entity by IDs.
func (suo *SubraceUpdateOne) AddTraitIDs(ids ...int) *SubraceUpdateOne {
	suo.mutation.AddTraitIDs(ids...)
	return suo
}

// AddTraits adds the "traits" edges to the Trait entity.
func (suo *SubraceUpdateOne) AddTraits(t ...*Trait) *SubraceUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTraitIDs(ids...)
}

// AddAbilityBonuseIDs adds the "ability_bonuses" edge to the AbilityBonus entity by IDs.
func (suo *SubraceUpdateOne) AddAbilityBonuseIDs(ids ...int) *SubraceUpdateOne {
	suo.mutation.AddAbilityBonuseIDs(ids...)
	return suo
}

// AddAbilityBonuses adds the "ability_bonuses" edges to the AbilityBonus entity.
func (suo *SubraceUpdateOne) AddAbilityBonuses(a ...*AbilityBonus) *SubraceUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddAbilityBonuseIDs(ids...)
}

// Mutation returns the SubraceMutation object of the builder.
func (suo *SubraceUpdateOne) Mutation() *SubraceMutation {
	return suo.mutation
}

// ClearRace clears the "race" edge to the Race entity.
func (suo *SubraceUpdateOne) ClearRace() *SubraceUpdateOne {
	suo.mutation.ClearRace()
	return suo
}

// ClearProficiencies clears all "proficiencies" edges to the Proficiency entity.
func (suo *SubraceUpdateOne) ClearProficiencies() *SubraceUpdateOne {
	suo.mutation.ClearProficiencies()
	return suo
}

// RemoveProficiencyIDs removes the "proficiencies" edge to Proficiency entities by IDs.
func (suo *SubraceUpdateOne) RemoveProficiencyIDs(ids ...int) *SubraceUpdateOne {
	suo.mutation.RemoveProficiencyIDs(ids...)
	return suo
}

// RemoveProficiencies removes "proficiencies" edges to Proficiency entities.
func (suo *SubraceUpdateOne) RemoveProficiencies(p ...*Proficiency) *SubraceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProficiencyIDs(ids...)
}

// ClearTraits clears all "traits" edges to the Trait entity.
func (suo *SubraceUpdateOne) ClearTraits() *SubraceUpdateOne {
	suo.mutation.ClearTraits()
	return suo
}

// RemoveTraitIDs removes the "traits" edge to Trait entities by IDs.
func (suo *SubraceUpdateOne) RemoveTraitIDs(ids ...int) *SubraceUpdateOne {
	suo.mutation.RemoveTraitIDs(ids...)
	return suo
}

// RemoveTraits removes "traits" edges to Trait entities.
func (suo *SubraceUpdateOne) RemoveTraits(t ...*Trait) *SubraceUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTraitIDs(ids...)
}

// ClearAbilityBonuses clears all "ability_bonuses" edges to the AbilityBonus entity.
func (suo *SubraceUpdateOne) ClearAbilityBonuses() *SubraceUpdateOne {
	suo.mutation.ClearAbilityBonuses()
	return suo
}

// RemoveAbilityBonuseIDs removes the "ability_bonuses" edge to AbilityBonus entities by IDs.
func (suo *SubraceUpdateOne) RemoveAbilityBonuseIDs(ids ...int) *SubraceUpdateOne {
	suo.mutation.RemoveAbilityBonuseIDs(ids...)
	return suo
}

// RemoveAbilityBonuses removes "ability_bonuses" edges to AbilityBonus entities.
func (suo *SubraceUpdateOne) RemoveAbilityBonuses(a ...*AbilityBonus) *SubraceUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveAbilityBonuseIDs(ids...)
}

// Where appends a list predicates to the SubraceUpdate builder.
func (suo *SubraceUpdateOne) Where(ps ...predicate.Subrace) *SubraceUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubraceUpdateOne) Select(field string, fields ...string) *SubraceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subrace entity.
func (suo *SubraceUpdateOne) Save(ctx context.Context) (*Subrace, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubraceUpdateOne) SaveX(ctx context.Context) *Subrace {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubraceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubraceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubraceUpdateOne) check() error {
	if v, ok := suo.mutation.Indx(); ok {
		if err := subrace.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Subrace.indx": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Name(); ok {
		if err := subrace.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Subrace.name": %w`, err)}
		}
	}
	return nil
}

func (suo *SubraceUpdateOne) sqlSave(ctx context.Context) (_node *Subrace, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subrace.Table, subrace.Columns, sqlgraph.NewFieldSpec(subrace.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subrace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subrace.FieldID)
		for _, f := range fields {
			if !subrace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subrace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Indx(); ok {
		_spec.SetField(subrace.FieldIndx, field.TypeString, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(subrace.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Desc(); ok {
		_spec.SetField(subrace.FieldDesc, field.TypeString, value)
	}
	if suo.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subrace.RaceTable,
			Columns: []string{subrace.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subrace.RaceTable,
			Columns: []string{subrace.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subrace.ProficienciesTable,
			Columns: subrace.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedProficienciesIDs(); len(nodes) > 0 && !suo.mutation.ProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subrace.ProficienciesTable,
			Columns: subrace.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProficienciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subrace.ProficienciesTable,
			Columns: subrace.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TraitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subrace.TraitsTable,
			Columns: subrace.TraitsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trait.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTraitsIDs(); len(nodes) > 0 && !suo.mutation.TraitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subrace.TraitsTable,
			Columns: subrace.TraitsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trait.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TraitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subrace.TraitsTable,
			Columns: subrace.TraitsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trait.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AbilityBonusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subrace.AbilityBonusesTable,
			Columns: []string{subrace.AbilityBonusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilitybonus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAbilityBonusesIDs(); len(nodes) > 0 && !suo.mutation.AbilityBonusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subrace.AbilityBonusesTable,
			Columns: []string{subrace.AbilityBonusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilitybonus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AbilityBonusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subrace.AbilityBonusesTable,
			Columns: []string{subrace.AbilityBonusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilitybonus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subrace{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subrace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
