// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/weapon"
	"github.com/ecshreve/dndgen/ent/weapondamage"
	"github.com/ecshreve/dndgen/ent/weaponrange"
)

// WeaponUpdate is the builder for updating Weapon entities.
type WeaponUpdate struct {
	config
	hooks    []Hook
	mutation *WeaponMutation
}

// Where appends a list predicates to the WeaponUpdate builder.
func (wu *WeaponUpdate) Where(ps ...predicate.Weapon) *WeaponUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetProperties sets the "properties" field.
func (wu *WeaponUpdate) SetProperties(s string) *WeaponUpdate {
	wu.mutation.SetProperties(s)
	return wu
}

// AddRangeIDs adds the "range" edge to the WeaponRange entity by IDs.
func (wu *WeaponUpdate) AddRangeIDs(ids ...int) *WeaponUpdate {
	wu.mutation.AddRangeIDs(ids...)
	return wu
}

// AddRange adds the "range" edges to the WeaponRange entity.
func (wu *WeaponUpdate) AddRange(w ...*WeaponRange) *WeaponUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddRangeIDs(ids...)
}

// AddDamageIDs adds the "damage" edge to the WeaponDamage entity by IDs.
func (wu *WeaponUpdate) AddDamageIDs(ids ...int) *WeaponUpdate {
	wu.mutation.AddDamageIDs(ids...)
	return wu
}

// AddDamage adds the "damage" edges to the WeaponDamage entity.
func (wu *WeaponUpdate) AddDamage(w ...*WeaponDamage) *WeaponUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddDamageIDs(ids...)
}

// AddTwoHandedDamageIDs adds the "two_handed_damage" edge to the WeaponDamage entity by IDs.
func (wu *WeaponUpdate) AddTwoHandedDamageIDs(ids ...int) *WeaponUpdate {
	wu.mutation.AddTwoHandedDamageIDs(ids...)
	return wu
}

// AddTwoHandedDamage adds the "two_handed_damage" edges to the WeaponDamage entity.
func (wu *WeaponUpdate) AddTwoHandedDamage(w ...*WeaponDamage) *WeaponUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddTwoHandedDamageIDs(ids...)
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (wu *WeaponUpdate) AddEquipmentIDs(ids ...int) *WeaponUpdate {
	wu.mutation.AddEquipmentIDs(ids...)
	return wu
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (wu *WeaponUpdate) AddEquipment(e ...*Equipment) *WeaponUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wu.AddEquipmentIDs(ids...)
}

// Mutation returns the WeaponMutation object of the builder.
func (wu *WeaponUpdate) Mutation() *WeaponMutation {
	return wu.mutation
}

// ClearRange clears all "range" edges to the WeaponRange entity.
func (wu *WeaponUpdate) ClearRange() *WeaponUpdate {
	wu.mutation.ClearRange()
	return wu
}

// RemoveRangeIDs removes the "range" edge to WeaponRange entities by IDs.
func (wu *WeaponUpdate) RemoveRangeIDs(ids ...int) *WeaponUpdate {
	wu.mutation.RemoveRangeIDs(ids...)
	return wu
}

// RemoveRange removes "range" edges to WeaponRange entities.
func (wu *WeaponUpdate) RemoveRange(w ...*WeaponRange) *WeaponUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveRangeIDs(ids...)
}

// ClearDamage clears all "damage" edges to the WeaponDamage entity.
func (wu *WeaponUpdate) ClearDamage() *WeaponUpdate {
	wu.mutation.ClearDamage()
	return wu
}

// RemoveDamageIDs removes the "damage" edge to WeaponDamage entities by IDs.
func (wu *WeaponUpdate) RemoveDamageIDs(ids ...int) *WeaponUpdate {
	wu.mutation.RemoveDamageIDs(ids...)
	return wu
}

// RemoveDamage removes "damage" edges to WeaponDamage entities.
func (wu *WeaponUpdate) RemoveDamage(w ...*WeaponDamage) *WeaponUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveDamageIDs(ids...)
}

// ClearTwoHandedDamage clears all "two_handed_damage" edges to the WeaponDamage entity.
func (wu *WeaponUpdate) ClearTwoHandedDamage() *WeaponUpdate {
	wu.mutation.ClearTwoHandedDamage()
	return wu
}

// RemoveTwoHandedDamageIDs removes the "two_handed_damage" edge to WeaponDamage entities by IDs.
func (wu *WeaponUpdate) RemoveTwoHandedDamageIDs(ids ...int) *WeaponUpdate {
	wu.mutation.RemoveTwoHandedDamageIDs(ids...)
	return wu
}

// RemoveTwoHandedDamage removes "two_handed_damage" edges to WeaponDamage entities.
func (wu *WeaponUpdate) RemoveTwoHandedDamage(w ...*WeaponDamage) *WeaponUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveTwoHandedDamageIDs(ids...)
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (wu *WeaponUpdate) ClearEquipment() *WeaponUpdate {
	wu.mutation.ClearEquipment()
	return wu
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (wu *WeaponUpdate) RemoveEquipmentIDs(ids ...int) *WeaponUpdate {
	wu.mutation.RemoveEquipmentIDs(ids...)
	return wu
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (wu *WeaponUpdate) RemoveEquipment(e ...*Equipment) *WeaponUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wu.RemoveEquipmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WeaponUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WeaponMutation](ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WeaponUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WeaponUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WeaponUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WeaponUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(weapon.Table, weapon.Columns, sqlgraph.NewFieldSpec(weapon.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Properties(); ok {
		_spec.SetField(weapon.FieldProperties, field.TypeString, value)
	}
	if wu.mutation.RangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.RangeTable,
			Columns: weapon.RangePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weaponrange.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedRangeIDs(); len(nodes) > 0 && !wu.mutation.RangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.RangeTable,
			Columns: weapon.RangePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weaponrange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.RangeTable,
			Columns: weapon.RangePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weaponrange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.DamageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.DamageTable,
			Columns: weapon.DamagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapondamage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedDamageIDs(); len(nodes) > 0 && !wu.mutation.DamageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.DamageTable,
			Columns: weapon.DamagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapondamage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.DamageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.DamageTable,
			Columns: weapon.DamagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapondamage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.TwoHandedDamageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weapon.TwoHandedDamageTable,
			Columns: []string{weapon.TwoHandedDamageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapondamage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedTwoHandedDamageIDs(); len(nodes) > 0 && !wu.mutation.TwoHandedDamageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weapon.TwoHandedDamageTable,
			Columns: []string{weapon.TwoHandedDamageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapondamage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.TwoHandedDamageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weapon.TwoHandedDamageTable,
			Columns: []string{weapon.TwoHandedDamageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapondamage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weapon.EquipmentTable,
			Columns: weapon.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !wu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weapon.EquipmentTable,
			Columns: weapon.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weapon.EquipmentTable,
			Columns: weapon.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weapon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WeaponUpdateOne is the builder for updating a single Weapon entity.
type WeaponUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WeaponMutation
}

// SetProperties sets the "properties" field.
func (wuo *WeaponUpdateOne) SetProperties(s string) *WeaponUpdateOne {
	wuo.mutation.SetProperties(s)
	return wuo
}

// AddRangeIDs adds the "range" edge to the WeaponRange entity by IDs.
func (wuo *WeaponUpdateOne) AddRangeIDs(ids ...int) *WeaponUpdateOne {
	wuo.mutation.AddRangeIDs(ids...)
	return wuo
}

// AddRange adds the "range" edges to the WeaponRange entity.
func (wuo *WeaponUpdateOne) AddRange(w ...*WeaponRange) *WeaponUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddRangeIDs(ids...)
}

// AddDamageIDs adds the "damage" edge to the WeaponDamage entity by IDs.
func (wuo *WeaponUpdateOne) AddDamageIDs(ids ...int) *WeaponUpdateOne {
	wuo.mutation.AddDamageIDs(ids...)
	return wuo
}

// AddDamage adds the "damage" edges to the WeaponDamage entity.
func (wuo *WeaponUpdateOne) AddDamage(w ...*WeaponDamage) *WeaponUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddDamageIDs(ids...)
}

// AddTwoHandedDamageIDs adds the "two_handed_damage" edge to the WeaponDamage entity by IDs.
func (wuo *WeaponUpdateOne) AddTwoHandedDamageIDs(ids ...int) *WeaponUpdateOne {
	wuo.mutation.AddTwoHandedDamageIDs(ids...)
	return wuo
}

// AddTwoHandedDamage adds the "two_handed_damage" edges to the WeaponDamage entity.
func (wuo *WeaponUpdateOne) AddTwoHandedDamage(w ...*WeaponDamage) *WeaponUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddTwoHandedDamageIDs(ids...)
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (wuo *WeaponUpdateOne) AddEquipmentIDs(ids ...int) *WeaponUpdateOne {
	wuo.mutation.AddEquipmentIDs(ids...)
	return wuo
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (wuo *WeaponUpdateOne) AddEquipment(e ...*Equipment) *WeaponUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wuo.AddEquipmentIDs(ids...)
}

// Mutation returns the WeaponMutation object of the builder.
func (wuo *WeaponUpdateOne) Mutation() *WeaponMutation {
	return wuo.mutation
}

// ClearRange clears all "range" edges to the WeaponRange entity.
func (wuo *WeaponUpdateOne) ClearRange() *WeaponUpdateOne {
	wuo.mutation.ClearRange()
	return wuo
}

// RemoveRangeIDs removes the "range" edge to WeaponRange entities by IDs.
func (wuo *WeaponUpdateOne) RemoveRangeIDs(ids ...int) *WeaponUpdateOne {
	wuo.mutation.RemoveRangeIDs(ids...)
	return wuo
}

// RemoveRange removes "range" edges to WeaponRange entities.
func (wuo *WeaponUpdateOne) RemoveRange(w ...*WeaponRange) *WeaponUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveRangeIDs(ids...)
}

// ClearDamage clears all "damage" edges to the WeaponDamage entity.
func (wuo *WeaponUpdateOne) ClearDamage() *WeaponUpdateOne {
	wuo.mutation.ClearDamage()
	return wuo
}

// RemoveDamageIDs removes the "damage" edge to WeaponDamage entities by IDs.
func (wuo *WeaponUpdateOne) RemoveDamageIDs(ids ...int) *WeaponUpdateOne {
	wuo.mutation.RemoveDamageIDs(ids...)
	return wuo
}

// RemoveDamage removes "damage" edges to WeaponDamage entities.
func (wuo *WeaponUpdateOne) RemoveDamage(w ...*WeaponDamage) *WeaponUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveDamageIDs(ids...)
}

// ClearTwoHandedDamage clears all "two_handed_damage" edges to the WeaponDamage entity.
func (wuo *WeaponUpdateOne) ClearTwoHandedDamage() *WeaponUpdateOne {
	wuo.mutation.ClearTwoHandedDamage()
	return wuo
}

// RemoveTwoHandedDamageIDs removes the "two_handed_damage" edge to WeaponDamage entities by IDs.
func (wuo *WeaponUpdateOne) RemoveTwoHandedDamageIDs(ids ...int) *WeaponUpdateOne {
	wuo.mutation.RemoveTwoHandedDamageIDs(ids...)
	return wuo
}

// RemoveTwoHandedDamage removes "two_handed_damage" edges to WeaponDamage entities.
func (wuo *WeaponUpdateOne) RemoveTwoHandedDamage(w ...*WeaponDamage) *WeaponUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveTwoHandedDamageIDs(ids...)
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (wuo *WeaponUpdateOne) ClearEquipment() *WeaponUpdateOne {
	wuo.mutation.ClearEquipment()
	return wuo
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (wuo *WeaponUpdateOne) RemoveEquipmentIDs(ids ...int) *WeaponUpdateOne {
	wuo.mutation.RemoveEquipmentIDs(ids...)
	return wuo
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (wuo *WeaponUpdateOne) RemoveEquipment(e ...*Equipment) *WeaponUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wuo.RemoveEquipmentIDs(ids...)
}

// Where appends a list predicates to the WeaponUpdate builder.
func (wuo *WeaponUpdateOne) Where(ps ...predicate.Weapon) *WeaponUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WeaponUpdateOne) Select(field string, fields ...string) *WeaponUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Weapon entity.
func (wuo *WeaponUpdateOne) Save(ctx context.Context) (*Weapon, error) {
	return withHooks[*Weapon, WeaponMutation](ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WeaponUpdateOne) SaveX(ctx context.Context) *Weapon {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WeaponUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WeaponUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WeaponUpdateOne) sqlSave(ctx context.Context) (_node *Weapon, err error) {
	_spec := sqlgraph.NewUpdateSpec(weapon.Table, weapon.Columns, sqlgraph.NewFieldSpec(weapon.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Weapon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weapon.FieldID)
		for _, f := range fields {
			if !weapon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != weapon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Properties(); ok {
		_spec.SetField(weapon.FieldProperties, field.TypeString, value)
	}
	if wuo.mutation.RangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.RangeTable,
			Columns: weapon.RangePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weaponrange.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedRangeIDs(); len(nodes) > 0 && !wuo.mutation.RangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.RangeTable,
			Columns: weapon.RangePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weaponrange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.RangeTable,
			Columns: weapon.RangePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weaponrange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.DamageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.DamageTable,
			Columns: weapon.DamagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapondamage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedDamageIDs(); len(nodes) > 0 && !wuo.mutation.DamageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.DamageTable,
			Columns: weapon.DamagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapondamage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.DamageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.DamageTable,
			Columns: weapon.DamagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapondamage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.TwoHandedDamageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weapon.TwoHandedDamageTable,
			Columns: []string{weapon.TwoHandedDamageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapondamage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedTwoHandedDamageIDs(); len(nodes) > 0 && !wuo.mutation.TwoHandedDamageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weapon.TwoHandedDamageTable,
			Columns: []string{weapon.TwoHandedDamageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapondamage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.TwoHandedDamageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weapon.TwoHandedDamageTable,
			Columns: []string{weapon.TwoHandedDamageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapondamage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weapon.EquipmentTable,
			Columns: weapon.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !wuo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weapon.EquipmentTable,
			Columns: weapon.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weapon.EquipmentTable,
			Columns: weapon.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Weapon{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weapon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
