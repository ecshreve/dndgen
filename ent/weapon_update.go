// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/damage"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/property"
	"github.com/ecshreve/dndgen/ent/weapon"
)

// WeaponUpdate is the builder for updating Weapon entities.
type WeaponUpdate struct {
	config
	hooks    []Hook
	mutation *WeaponMutation
}

// Where appends a list predicates to the WeaponUpdate builder.
func (wu *WeaponUpdate) Where(ps ...predicate.Weapon) *WeaponUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetWeaponCategory sets the "weapon_category" field.
func (wu *WeaponUpdate) SetWeaponCategory(wc weapon.WeaponCategory) *WeaponUpdate {
	wu.mutation.SetWeaponCategory(wc)
	return wu
}

// SetNillableWeaponCategory sets the "weapon_category" field if the given value is not nil.
func (wu *WeaponUpdate) SetNillableWeaponCategory(wc *weapon.WeaponCategory) *WeaponUpdate {
	if wc != nil {
		wu.SetWeaponCategory(*wc)
	}
	return wu
}

// SetWeaponSubcategory sets the "weapon_subcategory" field.
func (wu *WeaponUpdate) SetWeaponSubcategory(ws weapon.WeaponSubcategory) *WeaponUpdate {
	wu.mutation.SetWeaponSubcategory(ws)
	return wu
}

// SetNillableWeaponSubcategory sets the "weapon_subcategory" field if the given value is not nil.
func (wu *WeaponUpdate) SetNillableWeaponSubcategory(ws *weapon.WeaponSubcategory) *WeaponUpdate {
	if ws != nil {
		wu.SetWeaponSubcategory(*ws)
	}
	return wu
}

// SetDamageID sets the "damage" edge to the Damage entity by ID.
func (wu *WeaponUpdate) SetDamageID(id int) *WeaponUpdate {
	wu.mutation.SetDamageID(id)
	return wu
}

// SetNillableDamageID sets the "damage" edge to the Damage entity by ID if the given value is not nil.
func (wu *WeaponUpdate) SetNillableDamageID(id *int) *WeaponUpdate {
	if id != nil {
		wu = wu.SetDamageID(*id)
	}
	return wu
}

// SetDamage sets the "damage" edge to the Damage entity.
func (wu *WeaponUpdate) SetDamage(d *Damage) *WeaponUpdate {
	return wu.SetDamageID(d.ID)
}

// AddWeaponPropertyIDs adds the "weapon_properties" edge to the Property entity by IDs.
func (wu *WeaponUpdate) AddWeaponPropertyIDs(ids ...int) *WeaponUpdate {
	wu.mutation.AddWeaponPropertyIDs(ids...)
	return wu
}

// AddWeaponProperties adds the "weapon_properties" edges to the Property entity.
func (wu *WeaponUpdate) AddWeaponProperties(p ...*Property) *WeaponUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wu.AddWeaponPropertyIDs(ids...)
}

// Mutation returns the WeaponMutation object of the builder.
func (wu *WeaponUpdate) Mutation() *WeaponMutation {
	return wu.mutation
}

// ClearDamage clears the "damage" edge to the Damage entity.
func (wu *WeaponUpdate) ClearDamage() *WeaponUpdate {
	wu.mutation.ClearDamage()
	return wu
}

// ClearWeaponProperties clears all "weapon_properties" edges to the Property entity.
func (wu *WeaponUpdate) ClearWeaponProperties() *WeaponUpdate {
	wu.mutation.ClearWeaponProperties()
	return wu
}

// RemoveWeaponPropertyIDs removes the "weapon_properties" edge to Property entities by IDs.
func (wu *WeaponUpdate) RemoveWeaponPropertyIDs(ids ...int) *WeaponUpdate {
	wu.mutation.RemoveWeaponPropertyIDs(ids...)
	return wu
}

// RemoveWeaponProperties removes "weapon_properties" edges to Property entities.
func (wu *WeaponUpdate) RemoveWeaponProperties(p ...*Property) *WeaponUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wu.RemoveWeaponPropertyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WeaponUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WeaponUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WeaponUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WeaponUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WeaponUpdate) check() error {
	if v, ok := wu.mutation.WeaponCategory(); ok {
		if err := weapon.WeaponCategoryValidator(v); err != nil {
			return &ValidationError{Name: "weapon_category", err: fmt.Errorf(`ent: validator failed for field "Weapon.weapon_category": %w`, err)}
		}
	}
	if v, ok := wu.mutation.WeaponSubcategory(); ok {
		if err := weapon.WeaponSubcategoryValidator(v); err != nil {
			return &ValidationError{Name: "weapon_subcategory", err: fmt.Errorf(`ent: validator failed for field "Weapon.weapon_subcategory": %w`, err)}
		}
	}
	return nil
}

func (wu *WeaponUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(weapon.Table, weapon.Columns, sqlgraph.NewFieldSpec(weapon.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.WeaponCategory(); ok {
		_spec.SetField(weapon.FieldWeaponCategory, field.TypeEnum, value)
	}
	if value, ok := wu.mutation.WeaponSubcategory(); ok {
		_spec.SetField(weapon.FieldWeaponSubcategory, field.TypeEnum, value)
	}
	if wu.mutation.DamageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   weapon.DamageTable,
			Columns: []string{weapon.DamageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(damage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.DamageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   weapon.DamageTable,
			Columns: []string{weapon.DamageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(damage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.WeaponPropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.WeaponPropertiesTable,
			Columns: weapon.WeaponPropertiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedWeaponPropertiesIDs(); len(nodes) > 0 && !wu.mutation.WeaponPropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.WeaponPropertiesTable,
			Columns: weapon.WeaponPropertiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WeaponPropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.WeaponPropertiesTable,
			Columns: weapon.WeaponPropertiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weapon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WeaponUpdateOne is the builder for updating a single Weapon entity.
type WeaponUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WeaponMutation
}

// SetWeaponCategory sets the "weapon_category" field.
func (wuo *WeaponUpdateOne) SetWeaponCategory(wc weapon.WeaponCategory) *WeaponUpdateOne {
	wuo.mutation.SetWeaponCategory(wc)
	return wuo
}

// SetNillableWeaponCategory sets the "weapon_category" field if the given value is not nil.
func (wuo *WeaponUpdateOne) SetNillableWeaponCategory(wc *weapon.WeaponCategory) *WeaponUpdateOne {
	if wc != nil {
		wuo.SetWeaponCategory(*wc)
	}
	return wuo
}

// SetWeaponSubcategory sets the "weapon_subcategory" field.
func (wuo *WeaponUpdateOne) SetWeaponSubcategory(ws weapon.WeaponSubcategory) *WeaponUpdateOne {
	wuo.mutation.SetWeaponSubcategory(ws)
	return wuo
}

// SetNillableWeaponSubcategory sets the "weapon_subcategory" field if the given value is not nil.
func (wuo *WeaponUpdateOne) SetNillableWeaponSubcategory(ws *weapon.WeaponSubcategory) *WeaponUpdateOne {
	if ws != nil {
		wuo.SetWeaponSubcategory(*ws)
	}
	return wuo
}

// SetDamageID sets the "damage" edge to the Damage entity by ID.
func (wuo *WeaponUpdateOne) SetDamageID(id int) *WeaponUpdateOne {
	wuo.mutation.SetDamageID(id)
	return wuo
}

// SetNillableDamageID sets the "damage" edge to the Damage entity by ID if the given value is not nil.
func (wuo *WeaponUpdateOne) SetNillableDamageID(id *int) *WeaponUpdateOne {
	if id != nil {
		wuo = wuo.SetDamageID(*id)
	}
	return wuo
}

// SetDamage sets the "damage" edge to the Damage entity.
func (wuo *WeaponUpdateOne) SetDamage(d *Damage) *WeaponUpdateOne {
	return wuo.SetDamageID(d.ID)
}

// AddWeaponPropertyIDs adds the "weapon_properties" edge to the Property entity by IDs.
func (wuo *WeaponUpdateOne) AddWeaponPropertyIDs(ids ...int) *WeaponUpdateOne {
	wuo.mutation.AddWeaponPropertyIDs(ids...)
	return wuo
}

// AddWeaponProperties adds the "weapon_properties" edges to the Property entity.
func (wuo *WeaponUpdateOne) AddWeaponProperties(p ...*Property) *WeaponUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wuo.AddWeaponPropertyIDs(ids...)
}

// Mutation returns the WeaponMutation object of the builder.
func (wuo *WeaponUpdateOne) Mutation() *WeaponMutation {
	return wuo.mutation
}

// ClearDamage clears the "damage" edge to the Damage entity.
func (wuo *WeaponUpdateOne) ClearDamage() *WeaponUpdateOne {
	wuo.mutation.ClearDamage()
	return wuo
}

// ClearWeaponProperties clears all "weapon_properties" edges to the Property entity.
func (wuo *WeaponUpdateOne) ClearWeaponProperties() *WeaponUpdateOne {
	wuo.mutation.ClearWeaponProperties()
	return wuo
}

// RemoveWeaponPropertyIDs removes the "weapon_properties" edge to Property entities by IDs.
func (wuo *WeaponUpdateOne) RemoveWeaponPropertyIDs(ids ...int) *WeaponUpdateOne {
	wuo.mutation.RemoveWeaponPropertyIDs(ids...)
	return wuo
}

// RemoveWeaponProperties removes "weapon_properties" edges to Property entities.
func (wuo *WeaponUpdateOne) RemoveWeaponProperties(p ...*Property) *WeaponUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wuo.RemoveWeaponPropertyIDs(ids...)
}

// Where appends a list predicates to the WeaponUpdate builder.
func (wuo *WeaponUpdateOne) Where(ps ...predicate.Weapon) *WeaponUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WeaponUpdateOne) Select(field string, fields ...string) *WeaponUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Weapon entity.
func (wuo *WeaponUpdateOne) Save(ctx context.Context) (*Weapon, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WeaponUpdateOne) SaveX(ctx context.Context) *Weapon {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WeaponUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WeaponUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WeaponUpdateOne) check() error {
	if v, ok := wuo.mutation.WeaponCategory(); ok {
		if err := weapon.WeaponCategoryValidator(v); err != nil {
			return &ValidationError{Name: "weapon_category", err: fmt.Errorf(`ent: validator failed for field "Weapon.weapon_category": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.WeaponSubcategory(); ok {
		if err := weapon.WeaponSubcategoryValidator(v); err != nil {
			return &ValidationError{Name: "weapon_subcategory", err: fmt.Errorf(`ent: validator failed for field "Weapon.weapon_subcategory": %w`, err)}
		}
	}
	return nil
}

func (wuo *WeaponUpdateOne) sqlSave(ctx context.Context) (_node *Weapon, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(weapon.Table, weapon.Columns, sqlgraph.NewFieldSpec(weapon.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Weapon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weapon.FieldID)
		for _, f := range fields {
			if !weapon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != weapon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.WeaponCategory(); ok {
		_spec.SetField(weapon.FieldWeaponCategory, field.TypeEnum, value)
	}
	if value, ok := wuo.mutation.WeaponSubcategory(); ok {
		_spec.SetField(weapon.FieldWeaponSubcategory, field.TypeEnum, value)
	}
	if wuo.mutation.DamageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   weapon.DamageTable,
			Columns: []string{weapon.DamageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(damage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.DamageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   weapon.DamageTable,
			Columns: []string{weapon.DamageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(damage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.WeaponPropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.WeaponPropertiesTable,
			Columns: weapon.WeaponPropertiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedWeaponPropertiesIDs(); len(nodes) > 0 && !wuo.mutation.WeaponPropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.WeaponPropertiesTable,
			Columns: weapon.WeaponPropertiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WeaponPropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   weapon.WeaponPropertiesTable,
			Columns: weapon.WeaponPropertiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Weapon{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weapon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
