// Code generated by ent, DO NOT EDIT.

package characterproficiency

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the characterproficiency type in the database.
	Label = "character_proficiency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCharacterID holds the string denoting the character_id field in the database.
	FieldCharacterID = "character_id"
	// FieldProficiencyID holds the string denoting the proficiency_id field in the database.
	FieldProficiencyID = "proficiency_id"
	// EdgeCharacter holds the string denoting the character edge name in mutations.
	EdgeCharacter = "character"
	// EdgeProficiency holds the string denoting the proficiency edge name in mutations.
	EdgeProficiency = "proficiency"
	// Table holds the table name of the characterproficiency in the database.
	Table = "character_proficiencies"
	// CharacterTable is the table that holds the character relation/edge.
	CharacterTable = "character_proficiencies"
	// CharacterInverseTable is the table name for the Character entity.
	// It exists in this package in order to avoid circular dependency with the "character" package.
	CharacterInverseTable = "characters"
	// CharacterColumn is the table column denoting the character relation/edge.
	CharacterColumn = "character_id"
	// ProficiencyTable is the table that holds the proficiency relation/edge.
	ProficiencyTable = "character_proficiencies"
	// ProficiencyInverseTable is the table name for the Proficiency entity.
	// It exists in this package in order to avoid circular dependency with the "proficiency" package.
	ProficiencyInverseTable = "proficiencies"
	// ProficiencyColumn is the table column denoting the proficiency relation/edge.
	ProficiencyColumn = "proficiency_id"
)

// Columns holds all SQL columns for characterproficiency fields.
var Columns = []string{
	FieldID,
	FieldCharacterID,
	FieldProficiencyID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CharacterProficiency queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCharacterID orders the results by the character_id field.
func ByCharacterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCharacterID, opts...).ToFunc()
}

// ByProficiencyID orders the results by the proficiency_id field.
func ByProficiencyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProficiencyID, opts...).ToFunc()
}

// ByCharacterField orders the results by character field.
func ByCharacterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCharacterStep(), sql.OrderByField(field, opts...))
	}
}

// ByProficiencyField orders the results by proficiency field.
func ByProficiencyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProficiencyStep(), sql.OrderByField(field, opts...))
	}
}
func newCharacterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CharacterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CharacterTable, CharacterColumn),
	)
}
func newProficiencyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProficiencyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProficiencyTable, ProficiencyColumn),
	)
}
