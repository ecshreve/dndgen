// Code generated by ent, DO NOT EDIT.

package characterproficiency

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldLTE(FieldID, id))
}

// ProficiencyTypeEQ applies the EQ predicate on the "proficiency_type" field.
func ProficiencyTypeEQ(v ProficiencyType) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldEQ(FieldProficiencyType, v))
}

// ProficiencyTypeNEQ applies the NEQ predicate on the "proficiency_type" field.
func ProficiencyTypeNEQ(v ProficiencyType) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldNEQ(FieldProficiencyType, v))
}

// ProficiencyTypeIn applies the In predicate on the "proficiency_type" field.
func ProficiencyTypeIn(vs ...ProficiencyType) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldIn(FieldProficiencyType, vs...))
}

// ProficiencyTypeNotIn applies the NotIn predicate on the "proficiency_type" field.
func ProficiencyTypeNotIn(vs ...ProficiencyType) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldNotIn(FieldProficiencyType, vs...))
}

// ProficiencySourceEQ applies the EQ predicate on the "proficiency_source" field.
func ProficiencySourceEQ(v ProficiencySource) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldEQ(FieldProficiencySource, v))
}

// ProficiencySourceNEQ applies the NEQ predicate on the "proficiency_source" field.
func ProficiencySourceNEQ(v ProficiencySource) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldNEQ(FieldProficiencySource, v))
}

// ProficiencySourceIn applies the In predicate on the "proficiency_source" field.
func ProficiencySourceIn(vs ...ProficiencySource) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldIn(FieldProficiencySource, vs...))
}

// ProficiencySourceNotIn applies the NotIn predicate on the "proficiency_source" field.
func ProficiencySourceNotIn(vs ...ProficiencySource) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldNotIn(FieldProficiencySource, vs...))
}

// HasCharacter applies the HasEdge predicate on the "character" edge.
func HasCharacter() predicate.CharacterProficiency {
	return predicate.CharacterProficiency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CharacterTable, CharacterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCharacterWith applies the HasEdge predicate on the "character" edge with a given conditions (other predicates).
func HasCharacterWith(preds ...predicate.Character) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(func(s *sql.Selector) {
		step := newCharacterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProficiency applies the HasEdge predicate on the "proficiency" edge.
func HasProficiency() predicate.CharacterProficiency {
	return predicate.CharacterProficiency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProficiencyTable, ProficiencyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProficiencyWith applies the HasEdge predicate on the "proficiency" edge with a given conditions (other predicates).
func HasProficiencyWith(preds ...predicate.Proficiency) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(func(s *sql.Selector) {
		step := newProficiencyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCharacterSkill applies the HasEdge predicate on the "character_skill" edge.
func HasCharacterSkill() predicate.CharacterProficiency {
	return predicate.CharacterProficiency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, CharacterSkillTable, CharacterSkillColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCharacterSkillWith applies the HasEdge predicate on the "character_skill" edge with a given conditions (other predicates).
func HasCharacterSkillWith(preds ...predicate.CharacterSkill) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(func(s *sql.Selector) {
		step := newCharacterSkillStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CharacterProficiency) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CharacterProficiency) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CharacterProficiency) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.NotPredicates(p))
}
