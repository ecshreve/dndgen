// Code generated by ent, DO NOT EDIT.

package characterproficiency

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldLTE(FieldID, id))
}

// CharacterID applies equality check predicate on the "character_id" field. It's identical to CharacterIDEQ.
func CharacterID(v int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldEQ(FieldCharacterID, v))
}

// ProficiencyID applies equality check predicate on the "proficiency_id" field. It's identical to ProficiencyIDEQ.
func ProficiencyID(v int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldEQ(FieldProficiencyID, v))
}

// CharacterIDEQ applies the EQ predicate on the "character_id" field.
func CharacterIDEQ(v int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldEQ(FieldCharacterID, v))
}

// CharacterIDNEQ applies the NEQ predicate on the "character_id" field.
func CharacterIDNEQ(v int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldNEQ(FieldCharacterID, v))
}

// CharacterIDIn applies the In predicate on the "character_id" field.
func CharacterIDIn(vs ...int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldIn(FieldCharacterID, vs...))
}

// CharacterIDNotIn applies the NotIn predicate on the "character_id" field.
func CharacterIDNotIn(vs ...int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldNotIn(FieldCharacterID, vs...))
}

// ProficiencyIDEQ applies the EQ predicate on the "proficiency_id" field.
func ProficiencyIDEQ(v int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldEQ(FieldProficiencyID, v))
}

// ProficiencyIDNEQ applies the NEQ predicate on the "proficiency_id" field.
func ProficiencyIDNEQ(v int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldNEQ(FieldProficiencyID, v))
}

// ProficiencyIDIn applies the In predicate on the "proficiency_id" field.
func ProficiencyIDIn(vs ...int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldIn(FieldProficiencyID, vs...))
}

// ProficiencyIDNotIn applies the NotIn predicate on the "proficiency_id" field.
func ProficiencyIDNotIn(vs ...int) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.FieldNotIn(FieldProficiencyID, vs...))
}

// HasCharacter applies the HasEdge predicate on the "character" edge.
func HasCharacter() predicate.CharacterProficiency {
	return predicate.CharacterProficiency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CharacterTable, CharacterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCharacterWith applies the HasEdge predicate on the "character" edge with a given conditions (other predicates).
func HasCharacterWith(preds ...predicate.Character) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(func(s *sql.Selector) {
		step := newCharacterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProficiency applies the HasEdge predicate on the "proficiency" edge.
func HasProficiency() predicate.CharacterProficiency {
	return predicate.CharacterProficiency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProficiencyTable, ProficiencyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProficiencyWith applies the HasEdge predicate on the "proficiency" edge with a given conditions (other predicates).
func HasProficiencyWith(preds ...predicate.Proficiency) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(func(s *sql.Selector) {
		step := newProficiencyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CharacterProficiency) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CharacterProficiency) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CharacterProficiency) predicate.CharacterProficiency {
	return predicate.CharacterProficiency(sql.NotPredicates(p))
}
