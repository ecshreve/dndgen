// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/feature"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/prerequisite"
)

// PrerequisiteUpdate is the builder for updating Prerequisite entities.
type PrerequisiteUpdate struct {
	config
	hooks    []Hook
	mutation *PrerequisiteMutation
}

// Where appends a list predicates to the PrerequisiteUpdate builder.
func (pu *PrerequisiteUpdate) Where(ps ...predicate.Prerequisite) *PrerequisiteUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPrerequisiteType sets the "prerequisite_type" field.
func (pu *PrerequisiteUpdate) SetPrerequisiteType(pt prerequisite.PrerequisiteType) *PrerequisiteUpdate {
	pu.mutation.SetPrerequisiteType(pt)
	return pu
}

// SetNillablePrerequisiteType sets the "prerequisite_type" field if the given value is not nil.
func (pu *PrerequisiteUpdate) SetNillablePrerequisiteType(pt *prerequisite.PrerequisiteType) *PrerequisiteUpdate {
	if pt != nil {
		pu.SetPrerequisiteType(*pt)
	}
	return pu
}

// SetLevelValue sets the "level_value" field.
func (pu *PrerequisiteUpdate) SetLevelValue(i int) *PrerequisiteUpdate {
	pu.mutation.ResetLevelValue()
	pu.mutation.SetLevelValue(i)
	return pu
}

// SetNillableLevelValue sets the "level_value" field if the given value is not nil.
func (pu *PrerequisiteUpdate) SetNillableLevelValue(i *int) *PrerequisiteUpdate {
	if i != nil {
		pu.SetLevelValue(*i)
	}
	return pu
}

// AddLevelValue adds i to the "level_value" field.
func (pu *PrerequisiteUpdate) AddLevelValue(i int) *PrerequisiteUpdate {
	pu.mutation.AddLevelValue(i)
	return pu
}

// ClearLevelValue clears the value of the "level_value" field.
func (pu *PrerequisiteUpdate) ClearLevelValue() *PrerequisiteUpdate {
	pu.mutation.ClearLevelValue()
	return pu
}

// SetFeatureValue sets the "feature_value" field.
func (pu *PrerequisiteUpdate) SetFeatureValue(s string) *PrerequisiteUpdate {
	pu.mutation.SetFeatureValue(s)
	return pu
}

// SetNillableFeatureValue sets the "feature_value" field if the given value is not nil.
func (pu *PrerequisiteUpdate) SetNillableFeatureValue(s *string) *PrerequisiteUpdate {
	if s != nil {
		pu.SetFeatureValue(*s)
	}
	return pu
}

// ClearFeatureValue clears the value of the "feature_value" field.
func (pu *PrerequisiteUpdate) ClearFeatureValue() *PrerequisiteUpdate {
	pu.mutation.ClearFeatureValue()
	return pu
}

// SetSpellValue sets the "spell_value" field.
func (pu *PrerequisiteUpdate) SetSpellValue(s string) *PrerequisiteUpdate {
	pu.mutation.SetSpellValue(s)
	return pu
}

// SetNillableSpellValue sets the "spell_value" field if the given value is not nil.
func (pu *PrerequisiteUpdate) SetNillableSpellValue(s *string) *PrerequisiteUpdate {
	if s != nil {
		pu.SetSpellValue(*s)
	}
	return pu
}

// ClearSpellValue clears the value of the "spell_value" field.
func (pu *PrerequisiteUpdate) ClearSpellValue() *PrerequisiteUpdate {
	pu.mutation.ClearSpellValue()
	return pu
}

// SetFeatureID sets the "feature" edge to the Feature entity by ID.
func (pu *PrerequisiteUpdate) SetFeatureID(id int) *PrerequisiteUpdate {
	pu.mutation.SetFeatureID(id)
	return pu
}

// SetNillableFeatureID sets the "feature" edge to the Feature entity by ID if the given value is not nil.
func (pu *PrerequisiteUpdate) SetNillableFeatureID(id *int) *PrerequisiteUpdate {
	if id != nil {
		pu = pu.SetFeatureID(*id)
	}
	return pu
}

// SetFeature sets the "feature" edge to the Feature entity.
func (pu *PrerequisiteUpdate) SetFeature(f *Feature) *PrerequisiteUpdate {
	return pu.SetFeatureID(f.ID)
}

// Mutation returns the PrerequisiteMutation object of the builder.
func (pu *PrerequisiteUpdate) Mutation() *PrerequisiteMutation {
	return pu.mutation
}

// ClearFeature clears the "feature" edge to the Feature entity.
func (pu *PrerequisiteUpdate) ClearFeature() *PrerequisiteUpdate {
	pu.mutation.ClearFeature()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PrerequisiteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PrerequisiteUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PrerequisiteUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PrerequisiteUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PrerequisiteUpdate) check() error {
	if v, ok := pu.mutation.PrerequisiteType(); ok {
		if err := prerequisite.PrerequisiteTypeValidator(v); err != nil {
			return &ValidationError{Name: "prerequisite_type", err: fmt.Errorf(`ent: validator failed for field "Prerequisite.prerequisite_type": %w`, err)}
		}
	}
	return nil
}

func (pu *PrerequisiteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(prerequisite.Table, prerequisite.Columns, sqlgraph.NewFieldSpec(prerequisite.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PrerequisiteType(); ok {
		_spec.SetField(prerequisite.FieldPrerequisiteType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.LevelValue(); ok {
		_spec.SetField(prerequisite.FieldLevelValue, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedLevelValue(); ok {
		_spec.AddField(prerequisite.FieldLevelValue, field.TypeInt, value)
	}
	if pu.mutation.LevelValueCleared() {
		_spec.ClearField(prerequisite.FieldLevelValue, field.TypeInt)
	}
	if value, ok := pu.mutation.FeatureValue(); ok {
		_spec.SetField(prerequisite.FieldFeatureValue, field.TypeString, value)
	}
	if pu.mutation.FeatureValueCleared() {
		_spec.ClearField(prerequisite.FieldFeatureValue, field.TypeString)
	}
	if value, ok := pu.mutation.SpellValue(); ok {
		_spec.SetField(prerequisite.FieldSpellValue, field.TypeString, value)
	}
	if pu.mutation.SpellValueCleared() {
		_spec.ClearField(prerequisite.FieldSpellValue, field.TypeString)
	}
	if pu.mutation.FeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prerequisite.FeatureTable,
			Columns: []string{prerequisite.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prerequisite.FeatureTable,
			Columns: []string{prerequisite.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prerequisite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PrerequisiteUpdateOne is the builder for updating a single Prerequisite entity.
type PrerequisiteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrerequisiteMutation
}

// SetPrerequisiteType sets the "prerequisite_type" field.
func (puo *PrerequisiteUpdateOne) SetPrerequisiteType(pt prerequisite.PrerequisiteType) *PrerequisiteUpdateOne {
	puo.mutation.SetPrerequisiteType(pt)
	return puo
}

// SetNillablePrerequisiteType sets the "prerequisite_type" field if the given value is not nil.
func (puo *PrerequisiteUpdateOne) SetNillablePrerequisiteType(pt *prerequisite.PrerequisiteType) *PrerequisiteUpdateOne {
	if pt != nil {
		puo.SetPrerequisiteType(*pt)
	}
	return puo
}

// SetLevelValue sets the "level_value" field.
func (puo *PrerequisiteUpdateOne) SetLevelValue(i int) *PrerequisiteUpdateOne {
	puo.mutation.ResetLevelValue()
	puo.mutation.SetLevelValue(i)
	return puo
}

// SetNillableLevelValue sets the "level_value" field if the given value is not nil.
func (puo *PrerequisiteUpdateOne) SetNillableLevelValue(i *int) *PrerequisiteUpdateOne {
	if i != nil {
		puo.SetLevelValue(*i)
	}
	return puo
}

// AddLevelValue adds i to the "level_value" field.
func (puo *PrerequisiteUpdateOne) AddLevelValue(i int) *PrerequisiteUpdateOne {
	puo.mutation.AddLevelValue(i)
	return puo
}

// ClearLevelValue clears the value of the "level_value" field.
func (puo *PrerequisiteUpdateOne) ClearLevelValue() *PrerequisiteUpdateOne {
	puo.mutation.ClearLevelValue()
	return puo
}

// SetFeatureValue sets the "feature_value" field.
func (puo *PrerequisiteUpdateOne) SetFeatureValue(s string) *PrerequisiteUpdateOne {
	puo.mutation.SetFeatureValue(s)
	return puo
}

// SetNillableFeatureValue sets the "feature_value" field if the given value is not nil.
func (puo *PrerequisiteUpdateOne) SetNillableFeatureValue(s *string) *PrerequisiteUpdateOne {
	if s != nil {
		puo.SetFeatureValue(*s)
	}
	return puo
}

// ClearFeatureValue clears the value of the "feature_value" field.
func (puo *PrerequisiteUpdateOne) ClearFeatureValue() *PrerequisiteUpdateOne {
	puo.mutation.ClearFeatureValue()
	return puo
}

// SetSpellValue sets the "spell_value" field.
func (puo *PrerequisiteUpdateOne) SetSpellValue(s string) *PrerequisiteUpdateOne {
	puo.mutation.SetSpellValue(s)
	return puo
}

// SetNillableSpellValue sets the "spell_value" field if the given value is not nil.
func (puo *PrerequisiteUpdateOne) SetNillableSpellValue(s *string) *PrerequisiteUpdateOne {
	if s != nil {
		puo.SetSpellValue(*s)
	}
	return puo
}

// ClearSpellValue clears the value of the "spell_value" field.
func (puo *PrerequisiteUpdateOne) ClearSpellValue() *PrerequisiteUpdateOne {
	puo.mutation.ClearSpellValue()
	return puo
}

// SetFeatureID sets the "feature" edge to the Feature entity by ID.
func (puo *PrerequisiteUpdateOne) SetFeatureID(id int) *PrerequisiteUpdateOne {
	puo.mutation.SetFeatureID(id)
	return puo
}

// SetNillableFeatureID sets the "feature" edge to the Feature entity by ID if the given value is not nil.
func (puo *PrerequisiteUpdateOne) SetNillableFeatureID(id *int) *PrerequisiteUpdateOne {
	if id != nil {
		puo = puo.SetFeatureID(*id)
	}
	return puo
}

// SetFeature sets the "feature" edge to the Feature entity.
func (puo *PrerequisiteUpdateOne) SetFeature(f *Feature) *PrerequisiteUpdateOne {
	return puo.SetFeatureID(f.ID)
}

// Mutation returns the PrerequisiteMutation object of the builder.
func (puo *PrerequisiteUpdateOne) Mutation() *PrerequisiteMutation {
	return puo.mutation
}

// ClearFeature clears the "feature" edge to the Feature entity.
func (puo *PrerequisiteUpdateOne) ClearFeature() *PrerequisiteUpdateOne {
	puo.mutation.ClearFeature()
	return puo
}

// Where appends a list predicates to the PrerequisiteUpdate builder.
func (puo *PrerequisiteUpdateOne) Where(ps ...predicate.Prerequisite) *PrerequisiteUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PrerequisiteUpdateOne) Select(field string, fields ...string) *PrerequisiteUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Prerequisite entity.
func (puo *PrerequisiteUpdateOne) Save(ctx context.Context) (*Prerequisite, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PrerequisiteUpdateOne) SaveX(ctx context.Context) *Prerequisite {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PrerequisiteUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PrerequisiteUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PrerequisiteUpdateOne) check() error {
	if v, ok := puo.mutation.PrerequisiteType(); ok {
		if err := prerequisite.PrerequisiteTypeValidator(v); err != nil {
			return &ValidationError{Name: "prerequisite_type", err: fmt.Errorf(`ent: validator failed for field "Prerequisite.prerequisite_type": %w`, err)}
		}
	}
	return nil
}

func (puo *PrerequisiteUpdateOne) sqlSave(ctx context.Context) (_node *Prerequisite, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(prerequisite.Table, prerequisite.Columns, sqlgraph.NewFieldSpec(prerequisite.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Prerequisite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prerequisite.FieldID)
		for _, f := range fields {
			if !prerequisite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != prerequisite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.PrerequisiteType(); ok {
		_spec.SetField(prerequisite.FieldPrerequisiteType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.LevelValue(); ok {
		_spec.SetField(prerequisite.FieldLevelValue, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedLevelValue(); ok {
		_spec.AddField(prerequisite.FieldLevelValue, field.TypeInt, value)
	}
	if puo.mutation.LevelValueCleared() {
		_spec.ClearField(prerequisite.FieldLevelValue, field.TypeInt)
	}
	if value, ok := puo.mutation.FeatureValue(); ok {
		_spec.SetField(prerequisite.FieldFeatureValue, field.TypeString, value)
	}
	if puo.mutation.FeatureValueCleared() {
		_spec.ClearField(prerequisite.FieldFeatureValue, field.TypeString)
	}
	if value, ok := puo.mutation.SpellValue(); ok {
		_spec.SetField(prerequisite.FieldSpellValue, field.TypeString, value)
	}
	if puo.mutation.SpellValueCleared() {
		_spec.ClearField(prerequisite.FieldSpellValue, field.TypeString)
	}
	if puo.mutation.FeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prerequisite.FeatureTable,
			Columns: []string{prerequisite.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prerequisite.FeatureTable,
			Columns: []string{prerequisite.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Prerequisite{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prerequisite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
