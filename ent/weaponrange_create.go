// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/weapon"
	"github.com/ecshreve/dndgen/ent/weaponrange"
)

// WeaponRangeCreate is the builder for creating a WeaponRange entity.
type WeaponRangeCreate struct {
	config
	mutation *WeaponRangeMutation
	hooks    []Hook
}

// SetDesc sets the "desc" field.
func (wrc *WeaponRangeCreate) SetDesc(s string) *WeaponRangeCreate {
	wrc.mutation.SetDesc(s)
	return wrc
}

// SetNormal sets the "normal" field.
func (wrc *WeaponRangeCreate) SetNormal(i int) *WeaponRangeCreate {
	wrc.mutation.SetNormal(i)
	return wrc
}

// SetLong sets the "long" field.
func (wrc *WeaponRangeCreate) SetLong(i int) *WeaponRangeCreate {
	wrc.mutation.SetLong(i)
	return wrc
}

// AddWeaponIDs adds the "weapon" edge to the Weapon entity by IDs.
func (wrc *WeaponRangeCreate) AddWeaponIDs(ids ...int) *WeaponRangeCreate {
	wrc.mutation.AddWeaponIDs(ids...)
	return wrc
}

// AddWeapon adds the "weapon" edges to the Weapon entity.
func (wrc *WeaponRangeCreate) AddWeapon(w ...*Weapon) *WeaponRangeCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wrc.AddWeaponIDs(ids...)
}

// Mutation returns the WeaponRangeMutation object of the builder.
func (wrc *WeaponRangeCreate) Mutation() *WeaponRangeMutation {
	return wrc.mutation
}

// Save creates the WeaponRange in the database.
func (wrc *WeaponRangeCreate) Save(ctx context.Context) (*WeaponRange, error) {
	return withHooks[*WeaponRange, WeaponRangeMutation](ctx, wrc.sqlSave, wrc.mutation, wrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wrc *WeaponRangeCreate) SaveX(ctx context.Context) *WeaponRange {
	v, err := wrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wrc *WeaponRangeCreate) Exec(ctx context.Context) error {
	_, err := wrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wrc *WeaponRangeCreate) ExecX(ctx context.Context) {
	if err := wrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wrc *WeaponRangeCreate) check() error {
	if _, ok := wrc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New(`ent: missing required field "WeaponRange.desc"`)}
	}
	if _, ok := wrc.mutation.Normal(); !ok {
		return &ValidationError{Name: "normal", err: errors.New(`ent: missing required field "WeaponRange.normal"`)}
	}
	if _, ok := wrc.mutation.Long(); !ok {
		return &ValidationError{Name: "long", err: errors.New(`ent: missing required field "WeaponRange.long"`)}
	}
	return nil
}

func (wrc *WeaponRangeCreate) sqlSave(ctx context.Context) (*WeaponRange, error) {
	if err := wrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wrc.mutation.id = &_node.ID
	wrc.mutation.done = true
	return _node, nil
}

func (wrc *WeaponRangeCreate) createSpec() (*WeaponRange, *sqlgraph.CreateSpec) {
	var (
		_node = &WeaponRange{config: wrc.config}
		_spec = sqlgraph.NewCreateSpec(weaponrange.Table, sqlgraph.NewFieldSpec(weaponrange.FieldID, field.TypeInt))
	)
	if value, ok := wrc.mutation.Desc(); ok {
		_spec.SetField(weaponrange.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if value, ok := wrc.mutation.Normal(); ok {
		_spec.SetField(weaponrange.FieldNormal, field.TypeInt, value)
		_node.Normal = value
	}
	if value, ok := wrc.mutation.Long(); ok {
		_spec.SetField(weaponrange.FieldLong, field.TypeInt, value)
		_node.Long = value
	}
	if nodes := wrc.mutation.WeaponIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weaponrange.WeaponTable,
			Columns: weaponrange.WeaponPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WeaponRangeCreateBulk is the builder for creating many WeaponRange entities in bulk.
type WeaponRangeCreateBulk struct {
	config
	builders []*WeaponRangeCreate
}

// Save creates the WeaponRange entities in the database.
func (wrcb *WeaponRangeCreateBulk) Save(ctx context.Context) ([]*WeaponRange, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wrcb.builders))
	nodes := make([]*WeaponRange, len(wrcb.builders))
	mutators := make([]Mutator, len(wrcb.builders))
	for i := range wrcb.builders {
		func(i int, root context.Context) {
			builder := wrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WeaponRangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wrcb *WeaponRangeCreateBulk) SaveX(ctx context.Context) []*WeaponRange {
	v, err := wrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wrcb *WeaponRangeCreateBulk) Exec(ctx context.Context) error {
	_, err := wrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wrcb *WeaponRangeCreateBulk) ExecX(ctx context.Context) {
	if err := wrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
