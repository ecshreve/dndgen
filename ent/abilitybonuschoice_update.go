// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/abilitybonus"
	"github.com/ecshreve/dndgen/ent/abilitybonuschoice"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/race"
)

// AbilityBonusChoiceUpdate is the builder for updating AbilityBonusChoice entities.
type AbilityBonusChoiceUpdate struct {
	config
	hooks    []Hook
	mutation *AbilityBonusChoiceMutation
}

// Where appends a list predicates to the AbilityBonusChoiceUpdate builder.
func (abcu *AbilityBonusChoiceUpdate) Where(ps ...predicate.AbilityBonusChoice) *AbilityBonusChoiceUpdate {
	abcu.mutation.Where(ps...)
	return abcu
}

// SetChoose sets the "choose" field.
func (abcu *AbilityBonusChoiceUpdate) SetChoose(i int) *AbilityBonusChoiceUpdate {
	abcu.mutation.ResetChoose()
	abcu.mutation.SetChoose(i)
	return abcu
}

// SetNillableChoose sets the "choose" field if the given value is not nil.
func (abcu *AbilityBonusChoiceUpdate) SetNillableChoose(i *int) *AbilityBonusChoiceUpdate {
	if i != nil {
		abcu.SetChoose(*i)
	}
	return abcu
}

// AddChoose adds i to the "choose" field.
func (abcu *AbilityBonusChoiceUpdate) AddChoose(i int) *AbilityBonusChoiceUpdate {
	abcu.mutation.AddChoose(i)
	return abcu
}

// AddAbilityBonuseIDs adds the "ability_bonuses" edge to the AbilityBonus entity by IDs.
func (abcu *AbilityBonusChoiceUpdate) AddAbilityBonuseIDs(ids ...int) *AbilityBonusChoiceUpdate {
	abcu.mutation.AddAbilityBonuseIDs(ids...)
	return abcu
}

// AddAbilityBonuses adds the "ability_bonuses" edges to the AbilityBonus entity.
func (abcu *AbilityBonusChoiceUpdate) AddAbilityBonuses(a ...*AbilityBonus) *AbilityBonusChoiceUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return abcu.AddAbilityBonuseIDs(ids...)
}

// AddRaceIDs adds the "race" edge to the Race entity by IDs.
func (abcu *AbilityBonusChoiceUpdate) AddRaceIDs(ids ...int) *AbilityBonusChoiceUpdate {
	abcu.mutation.AddRaceIDs(ids...)
	return abcu
}

// AddRace adds the "race" edges to the Race entity.
func (abcu *AbilityBonusChoiceUpdate) AddRace(r ...*Race) *AbilityBonusChoiceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return abcu.AddRaceIDs(ids...)
}

// Mutation returns the AbilityBonusChoiceMutation object of the builder.
func (abcu *AbilityBonusChoiceUpdate) Mutation() *AbilityBonusChoiceMutation {
	return abcu.mutation
}

// ClearAbilityBonuses clears all "ability_bonuses" edges to the AbilityBonus entity.
func (abcu *AbilityBonusChoiceUpdate) ClearAbilityBonuses() *AbilityBonusChoiceUpdate {
	abcu.mutation.ClearAbilityBonuses()
	return abcu
}

// RemoveAbilityBonuseIDs removes the "ability_bonuses" edge to AbilityBonus entities by IDs.
func (abcu *AbilityBonusChoiceUpdate) RemoveAbilityBonuseIDs(ids ...int) *AbilityBonusChoiceUpdate {
	abcu.mutation.RemoveAbilityBonuseIDs(ids...)
	return abcu
}

// RemoveAbilityBonuses removes "ability_bonuses" edges to AbilityBonus entities.
func (abcu *AbilityBonusChoiceUpdate) RemoveAbilityBonuses(a ...*AbilityBonus) *AbilityBonusChoiceUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return abcu.RemoveAbilityBonuseIDs(ids...)
}

// ClearRace clears all "race" edges to the Race entity.
func (abcu *AbilityBonusChoiceUpdate) ClearRace() *AbilityBonusChoiceUpdate {
	abcu.mutation.ClearRace()
	return abcu
}

// RemoveRaceIDs removes the "race" edge to Race entities by IDs.
func (abcu *AbilityBonusChoiceUpdate) RemoveRaceIDs(ids ...int) *AbilityBonusChoiceUpdate {
	abcu.mutation.RemoveRaceIDs(ids...)
	return abcu
}

// RemoveRace removes "race" edges to Race entities.
func (abcu *AbilityBonusChoiceUpdate) RemoveRace(r ...*Race) *AbilityBonusChoiceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return abcu.RemoveRaceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (abcu *AbilityBonusChoiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, abcu.sqlSave, abcu.mutation, abcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (abcu *AbilityBonusChoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := abcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (abcu *AbilityBonusChoiceUpdate) Exec(ctx context.Context) error {
	_, err := abcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abcu *AbilityBonusChoiceUpdate) ExecX(ctx context.Context) {
	if err := abcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (abcu *AbilityBonusChoiceUpdate) check() error {
	if v, ok := abcu.mutation.Choose(); ok {
		if err := abilitybonuschoice.ChooseValidator(v); err != nil {
			return &ValidationError{Name: "choose", err: fmt.Errorf(`ent: validator failed for field "AbilityBonusChoice.choose": %w`, err)}
		}
	}
	return nil
}

func (abcu *AbilityBonusChoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := abcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(abilitybonuschoice.Table, abilitybonuschoice.Columns, sqlgraph.NewFieldSpec(abilitybonuschoice.FieldID, field.TypeInt))
	if ps := abcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := abcu.mutation.Choose(); ok {
		_spec.SetField(abilitybonuschoice.FieldChoose, field.TypeInt, value)
	}
	if value, ok := abcu.mutation.AddedChoose(); ok {
		_spec.AddField(abilitybonuschoice.FieldChoose, field.TypeInt, value)
	}
	if abcu.mutation.AbilityBonusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   abilitybonuschoice.AbilityBonusesTable,
			Columns: abilitybonuschoice.AbilityBonusesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilitybonus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abcu.mutation.RemovedAbilityBonusesIDs(); len(nodes) > 0 && !abcu.mutation.AbilityBonusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   abilitybonuschoice.AbilityBonusesTable,
			Columns: abilitybonuschoice.AbilityBonusesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilitybonus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abcu.mutation.AbilityBonusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   abilitybonuschoice.AbilityBonusesTable,
			Columns: abilitybonuschoice.AbilityBonusesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilitybonus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if abcu.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilitybonuschoice.RaceTable,
			Columns: []string{abilitybonuschoice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abcu.mutation.RemovedRaceIDs(); len(nodes) > 0 && !abcu.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilitybonuschoice.RaceTable,
			Columns: []string{abilitybonuschoice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abcu.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilitybonuschoice.RaceTable,
			Columns: []string{abilitybonuschoice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, abcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abilitybonuschoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	abcu.mutation.done = true
	return n, nil
}

// AbilityBonusChoiceUpdateOne is the builder for updating a single AbilityBonusChoice entity.
type AbilityBonusChoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AbilityBonusChoiceMutation
}

// SetChoose sets the "choose" field.
func (abcuo *AbilityBonusChoiceUpdateOne) SetChoose(i int) *AbilityBonusChoiceUpdateOne {
	abcuo.mutation.ResetChoose()
	abcuo.mutation.SetChoose(i)
	return abcuo
}

// SetNillableChoose sets the "choose" field if the given value is not nil.
func (abcuo *AbilityBonusChoiceUpdateOne) SetNillableChoose(i *int) *AbilityBonusChoiceUpdateOne {
	if i != nil {
		abcuo.SetChoose(*i)
	}
	return abcuo
}

// AddChoose adds i to the "choose" field.
func (abcuo *AbilityBonusChoiceUpdateOne) AddChoose(i int) *AbilityBonusChoiceUpdateOne {
	abcuo.mutation.AddChoose(i)
	return abcuo
}

// AddAbilityBonuseIDs adds the "ability_bonuses" edge to the AbilityBonus entity by IDs.
func (abcuo *AbilityBonusChoiceUpdateOne) AddAbilityBonuseIDs(ids ...int) *AbilityBonusChoiceUpdateOne {
	abcuo.mutation.AddAbilityBonuseIDs(ids...)
	return abcuo
}

// AddAbilityBonuses adds the "ability_bonuses" edges to the AbilityBonus entity.
func (abcuo *AbilityBonusChoiceUpdateOne) AddAbilityBonuses(a ...*AbilityBonus) *AbilityBonusChoiceUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return abcuo.AddAbilityBonuseIDs(ids...)
}

// AddRaceIDs adds the "race" edge to the Race entity by IDs.
func (abcuo *AbilityBonusChoiceUpdateOne) AddRaceIDs(ids ...int) *AbilityBonusChoiceUpdateOne {
	abcuo.mutation.AddRaceIDs(ids...)
	return abcuo
}

// AddRace adds the "race" edges to the Race entity.
func (abcuo *AbilityBonusChoiceUpdateOne) AddRace(r ...*Race) *AbilityBonusChoiceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return abcuo.AddRaceIDs(ids...)
}

// Mutation returns the AbilityBonusChoiceMutation object of the builder.
func (abcuo *AbilityBonusChoiceUpdateOne) Mutation() *AbilityBonusChoiceMutation {
	return abcuo.mutation
}

// ClearAbilityBonuses clears all "ability_bonuses" edges to the AbilityBonus entity.
func (abcuo *AbilityBonusChoiceUpdateOne) ClearAbilityBonuses() *AbilityBonusChoiceUpdateOne {
	abcuo.mutation.ClearAbilityBonuses()
	return abcuo
}

// RemoveAbilityBonuseIDs removes the "ability_bonuses" edge to AbilityBonus entities by IDs.
func (abcuo *AbilityBonusChoiceUpdateOne) RemoveAbilityBonuseIDs(ids ...int) *AbilityBonusChoiceUpdateOne {
	abcuo.mutation.RemoveAbilityBonuseIDs(ids...)
	return abcuo
}

// RemoveAbilityBonuses removes "ability_bonuses" edges to AbilityBonus entities.
func (abcuo *AbilityBonusChoiceUpdateOne) RemoveAbilityBonuses(a ...*AbilityBonus) *AbilityBonusChoiceUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return abcuo.RemoveAbilityBonuseIDs(ids...)
}

// ClearRace clears all "race" edges to the Race entity.
func (abcuo *AbilityBonusChoiceUpdateOne) ClearRace() *AbilityBonusChoiceUpdateOne {
	abcuo.mutation.ClearRace()
	return abcuo
}

// RemoveRaceIDs removes the "race" edge to Race entities by IDs.
func (abcuo *AbilityBonusChoiceUpdateOne) RemoveRaceIDs(ids ...int) *AbilityBonusChoiceUpdateOne {
	abcuo.mutation.RemoveRaceIDs(ids...)
	return abcuo
}

// RemoveRace removes "race" edges to Race entities.
func (abcuo *AbilityBonusChoiceUpdateOne) RemoveRace(r ...*Race) *AbilityBonusChoiceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return abcuo.RemoveRaceIDs(ids...)
}

// Where appends a list predicates to the AbilityBonusChoiceUpdate builder.
func (abcuo *AbilityBonusChoiceUpdateOne) Where(ps ...predicate.AbilityBonusChoice) *AbilityBonusChoiceUpdateOne {
	abcuo.mutation.Where(ps...)
	return abcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (abcuo *AbilityBonusChoiceUpdateOne) Select(field string, fields ...string) *AbilityBonusChoiceUpdateOne {
	abcuo.fields = append([]string{field}, fields...)
	return abcuo
}

// Save executes the query and returns the updated AbilityBonusChoice entity.
func (abcuo *AbilityBonusChoiceUpdateOne) Save(ctx context.Context) (*AbilityBonusChoice, error) {
	return withHooks(ctx, abcuo.sqlSave, abcuo.mutation, abcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (abcuo *AbilityBonusChoiceUpdateOne) SaveX(ctx context.Context) *AbilityBonusChoice {
	node, err := abcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (abcuo *AbilityBonusChoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := abcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abcuo *AbilityBonusChoiceUpdateOne) ExecX(ctx context.Context) {
	if err := abcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (abcuo *AbilityBonusChoiceUpdateOne) check() error {
	if v, ok := abcuo.mutation.Choose(); ok {
		if err := abilitybonuschoice.ChooseValidator(v); err != nil {
			return &ValidationError{Name: "choose", err: fmt.Errorf(`ent: validator failed for field "AbilityBonusChoice.choose": %w`, err)}
		}
	}
	return nil
}

func (abcuo *AbilityBonusChoiceUpdateOne) sqlSave(ctx context.Context) (_node *AbilityBonusChoice, err error) {
	if err := abcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(abilitybonuschoice.Table, abilitybonuschoice.Columns, sqlgraph.NewFieldSpec(abilitybonuschoice.FieldID, field.TypeInt))
	id, ok := abcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AbilityBonusChoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := abcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, abilitybonuschoice.FieldID)
		for _, f := range fields {
			if !abilitybonuschoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != abilitybonuschoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := abcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := abcuo.mutation.Choose(); ok {
		_spec.SetField(abilitybonuschoice.FieldChoose, field.TypeInt, value)
	}
	if value, ok := abcuo.mutation.AddedChoose(); ok {
		_spec.AddField(abilitybonuschoice.FieldChoose, field.TypeInt, value)
	}
	if abcuo.mutation.AbilityBonusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   abilitybonuschoice.AbilityBonusesTable,
			Columns: abilitybonuschoice.AbilityBonusesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilitybonus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abcuo.mutation.RemovedAbilityBonusesIDs(); len(nodes) > 0 && !abcuo.mutation.AbilityBonusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   abilitybonuschoice.AbilityBonusesTable,
			Columns: abilitybonuschoice.AbilityBonusesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilitybonus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abcuo.mutation.AbilityBonusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   abilitybonuschoice.AbilityBonusesTable,
			Columns: abilitybonuschoice.AbilityBonusesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilitybonus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if abcuo.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilitybonuschoice.RaceTable,
			Columns: []string{abilitybonuschoice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abcuo.mutation.RemovedRaceIDs(); len(nodes) > 0 && !abcuo.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilitybonuschoice.RaceTable,
			Columns: []string{abilitybonuschoice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abcuo.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilitybonuschoice.RaceTable,
			Columns: []string{abilitybonuschoice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AbilityBonusChoice{config: abcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, abcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abilitybonuschoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	abcuo.mutation.done = true
	return _node, nil
}
