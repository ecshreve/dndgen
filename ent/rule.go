// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/rule"
)

// Rule is the model entity for the Rule schema.
type Rule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Indx holds the value of the "indx" field.
	Indx string `json:"index"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RuleQuery when eager-loading is set.
	Edges        RuleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RuleEdges holds the relations/edges for other nodes in the graph.
type RuleEdges struct {
	// RuleSections holds the value of the rule_sections edge.
	RuleSections []*RuleSection `json:"subsections,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedRuleSections map[string][]*RuleSection
}

// RuleSectionsOrErr returns the RuleSections value or an error if the edge
// was not loaded in eager-loading.
func (e RuleEdges) RuleSectionsOrErr() ([]*RuleSection, error) {
	if e.loadedTypes[0] {
		return e.RuleSections, nil
	}
	return nil, &NotLoadedError{edge: "rule_sections"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rule.FieldID:
			values[i] = new(sql.NullInt64)
		case rule.FieldIndx, rule.FieldName, rule.FieldDesc:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rule fields.
func (r *Rule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case rule.FieldIndx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field indx", values[i])
			} else if value.Valid {
				r.Indx = value.String
			}
		case rule.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case rule.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				r.Desc = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Rule.
// This includes values selected through modifiers, order, etc.
func (r *Rule) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryRuleSections queries the "rule_sections" edge of the Rule entity.
func (r *Rule) QueryRuleSections() *RuleSectionQuery {
	return NewRuleClient(r.config).QueryRuleSections(r)
}

// Update returns a builder for updating this Rule.
// Note that you need to call Rule.Unwrap() before calling this method if this Rule
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rule) Update() *RuleUpdateOne {
	return NewRuleClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Rule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rule) Unwrap() *Rule {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rule is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rule) String() string {
	var builder strings.Builder
	builder.WriteString("Rule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("indx=")
	builder.WriteString(r.Indx)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(r.Desc)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (r *Rule) MarshalJSON() ([]byte, error) {
	type Alias Rule
	return json.Marshal(&struct {
		*Alias
		RuleEdges
	}{
		Alias:     (*Alias)(r),
		RuleEdges: r.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (r *Rule) UnmarshalJSON(data []byte) error {
	type Alias Rule
	aux := &struct {
		*Alias
		RuleEdges
	}{
		Alias: (*Alias)(r),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	r.Edges = aux.RuleEdges
	return nil
}

func (rc *RuleCreate) SetRule(input *Rule) *RuleCreate {
	rc.SetIndx(input.Indx)
	rc.SetName(input.Name)
	rc.SetDesc(input.Desc)
	return rc
}

// NamedRuleSections returns the RuleSections named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Rule) NamedRuleSections(name string) ([]*RuleSection, error) {
	if r.Edges.namedRuleSections == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedRuleSections[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Rule) appendNamedRuleSections(name string, edges ...*RuleSection) {
	if r.Edges.namedRuleSections == nil {
		r.Edges.namedRuleSections = make(map[string][]*RuleSection)
	}
	if len(edges) == 0 {
		r.Edges.namedRuleSections[name] = []*RuleSection{}
	} else {
		r.Edges.namedRuleSections[name] = append(r.Edges.namedRuleSections[name], edges...)
	}
}

// Rules is a parsable slice of Rule.
type Rules []*Rule
