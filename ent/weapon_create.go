// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/weapon"
	"github.com/ecshreve/dndgen/ent/weaponrange"
)

// WeaponCreate is the builder for creating a Weapon entity.
type WeaponCreate struct {
	config
	mutation *WeaponMutation
	hooks    []Hook
}

// SetIndx sets the "indx" field.
func (wc *WeaponCreate) SetIndx(s string) *WeaponCreate {
	wc.mutation.SetIndx(s)
	return wc
}

// SetName sets the "name" field.
func (wc *WeaponCreate) SetName(s string) *WeaponCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetWeight sets the "weight" field.
func (wc *WeaponCreate) SetWeight(f float64) *WeaponCreate {
	wc.mutation.SetWeight(f)
	return wc
}

// SetMeleeRangeID sets the "melee_range" edge to the WeaponRange entity by ID.
func (wc *WeaponCreate) SetMeleeRangeID(id int) *WeaponCreate {
	wc.mutation.SetMeleeRangeID(id)
	return wc
}

// SetNillableMeleeRangeID sets the "melee_range" edge to the WeaponRange entity by ID if the given value is not nil.
func (wc *WeaponCreate) SetNillableMeleeRangeID(id *int) *WeaponCreate {
	if id != nil {
		wc = wc.SetMeleeRangeID(*id)
	}
	return wc
}

// SetMeleeRange sets the "melee_range" edge to the WeaponRange entity.
func (wc *WeaponCreate) SetMeleeRange(w *WeaponRange) *WeaponCreate {
	return wc.SetMeleeRangeID(w.ID)
}

// SetThrowRangeID sets the "throw_range" edge to the WeaponRange entity by ID.
func (wc *WeaponCreate) SetThrowRangeID(id int) *WeaponCreate {
	wc.mutation.SetThrowRangeID(id)
	return wc
}

// SetNillableThrowRangeID sets the "throw_range" edge to the WeaponRange entity by ID if the given value is not nil.
func (wc *WeaponCreate) SetNillableThrowRangeID(id *int) *WeaponCreate {
	if id != nil {
		wc = wc.SetThrowRangeID(*id)
	}
	return wc
}

// SetThrowRange sets the "throw_range" edge to the WeaponRange entity.
func (wc *WeaponCreate) SetThrowRange(w *WeaponRange) *WeaponCreate {
	return wc.SetThrowRangeID(w.ID)
}

// Mutation returns the WeaponMutation object of the builder.
func (wc *WeaponCreate) Mutation() *WeaponMutation {
	return wc.mutation
}

// Save creates the Weapon in the database.
func (wc *WeaponCreate) Save(ctx context.Context) (*Weapon, error) {
	return withHooks[*Weapon, WeaponMutation](ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WeaponCreate) SaveX(ctx context.Context) *Weapon {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WeaponCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WeaponCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WeaponCreate) check() error {
	if _, ok := wc.mutation.Indx(); !ok {
		return &ValidationError{Name: "indx", err: errors.New(`ent: missing required field "Weapon.indx"`)}
	}
	if v, ok := wc.mutation.Indx(); ok {
		if err := weapon.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Weapon.indx": %w`, err)}
		}
	}
	if _, ok := wc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Weapon.name"`)}
	}
	if _, ok := wc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`ent: missing required field "Weapon.weight"`)}
	}
	return nil
}

func (wc *WeaponCreate) sqlSave(ctx context.Context) (*Weapon, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WeaponCreate) createSpec() (*Weapon, *sqlgraph.CreateSpec) {
	var (
		_node = &Weapon{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(weapon.Table, sqlgraph.NewFieldSpec(weapon.FieldID, field.TypeInt))
	)
	if value, ok := wc.mutation.Indx(); ok {
		_spec.SetField(weapon.FieldIndx, field.TypeString, value)
		_node.Indx = value
	}
	if value, ok := wc.mutation.Name(); ok {
		_spec.SetField(weapon.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wc.mutation.Weight(); ok {
		_spec.SetField(weapon.FieldWeight, field.TypeFloat64, value)
		_node.Weight = value
	}
	if nodes := wc.mutation.MeleeRangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   weapon.MeleeRangeTable,
			Columns: []string{weapon.MeleeRangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weaponrange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.weapon_melee_range = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.ThrowRangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   weapon.ThrowRangeTable,
			Columns: []string{weapon.ThrowRangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weaponrange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.weapon_throw_range = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WeaponCreateBulk is the builder for creating many Weapon entities in bulk.
type WeaponCreateBulk struct {
	config
	builders []*WeaponCreate
}

// Save creates the Weapon entities in the database.
func (wcb *WeaponCreateBulk) Save(ctx context.Context) ([]*Weapon, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Weapon, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WeaponMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WeaponCreateBulk) SaveX(ctx context.Context) []*Weapon {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WeaponCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WeaponCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
