// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/proficiency"
)

// ClassUpdate is the builder for updating Class entities.
type ClassUpdate struct {
	config
	hooks    []Hook
	mutation *ClassMutation
}

// Where appends a list predicates to the ClassUpdate builder.
func (cu *ClassUpdate) Where(ps ...predicate.Class) *ClassUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetIndx sets the "indx" field.
func (cu *ClassUpdate) SetIndx(s string) *ClassUpdate {
	cu.mutation.SetIndx(s)
	return cu
}

// SetName sets the "name" field.
func (cu *ClassUpdate) SetName(s string) *ClassUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetDesc sets the "desc" field.
func (cu *ClassUpdate) SetDesc(s string) *ClassUpdate {
	cu.mutation.SetDesc(s)
	return cu
}

// SetHitDie sets the "hit_die" field.
func (cu *ClassUpdate) SetHitDie(i int) *ClassUpdate {
	cu.mutation.ResetHitDie()
	cu.mutation.SetHitDie(i)
	return cu
}

// AddHitDie adds i to the "hit_die" field.
func (cu *ClassUpdate) AddHitDie(i int) *ClassUpdate {
	cu.mutation.AddHitDie(i)
	return cu
}

// AddStartingProficiencyIDs adds the "starting_proficiencies" edge to the Proficiency entity by IDs.
func (cu *ClassUpdate) AddStartingProficiencyIDs(ids ...int) *ClassUpdate {
	cu.mutation.AddStartingProficiencyIDs(ids...)
	return cu
}

// AddStartingProficiencies adds the "starting_proficiencies" edges to the Proficiency entity.
func (cu *ClassUpdate) AddStartingProficiencies(p ...*Proficiency) *ClassUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddStartingProficiencyIDs(ids...)
}

// Mutation returns the ClassMutation object of the builder.
func (cu *ClassUpdate) Mutation() *ClassMutation {
	return cu.mutation
}

// ClearStartingProficiencies clears all "starting_proficiencies" edges to the Proficiency entity.
func (cu *ClassUpdate) ClearStartingProficiencies() *ClassUpdate {
	cu.mutation.ClearStartingProficiencies()
	return cu
}

// RemoveStartingProficiencyIDs removes the "starting_proficiencies" edge to Proficiency entities by IDs.
func (cu *ClassUpdate) RemoveStartingProficiencyIDs(ids ...int) *ClassUpdate {
	cu.mutation.RemoveStartingProficiencyIDs(ids...)
	return cu
}

// RemoveStartingProficiencies removes "starting_proficiencies" edges to Proficiency entities.
func (cu *ClassUpdate) RemoveStartingProficiencies(p ...*Proficiency) *ClassUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveStartingProficiencyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClassUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ClassMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClassUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClassUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClassUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ClassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(class.Table, class.Columns, sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Indx(); ok {
		_spec.SetField(class.FieldIndx, field.TypeString, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(class.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Desc(); ok {
		_spec.SetField(class.FieldDesc, field.TypeString, value)
	}
	if value, ok := cu.mutation.HitDie(); ok {
		_spec.SetField(class.FieldHitDie, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedHitDie(); ok {
		_spec.AddField(class.FieldHitDie, field.TypeInt, value)
	}
	if cu.mutation.StartingProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.StartingProficienciesTable,
			Columns: class.StartingProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedStartingProficienciesIDs(); len(nodes) > 0 && !cu.mutation.StartingProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.StartingProficienciesTable,
			Columns: class.StartingProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StartingProficienciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.StartingProficienciesTable,
			Columns: class.StartingProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClassUpdateOne is the builder for updating a single Class entity.
type ClassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClassMutation
}

// SetIndx sets the "indx" field.
func (cuo *ClassUpdateOne) SetIndx(s string) *ClassUpdateOne {
	cuo.mutation.SetIndx(s)
	return cuo
}

// SetName sets the "name" field.
func (cuo *ClassUpdateOne) SetName(s string) *ClassUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetDesc sets the "desc" field.
func (cuo *ClassUpdateOne) SetDesc(s string) *ClassUpdateOne {
	cuo.mutation.SetDesc(s)
	return cuo
}

// SetHitDie sets the "hit_die" field.
func (cuo *ClassUpdateOne) SetHitDie(i int) *ClassUpdateOne {
	cuo.mutation.ResetHitDie()
	cuo.mutation.SetHitDie(i)
	return cuo
}

// AddHitDie adds i to the "hit_die" field.
func (cuo *ClassUpdateOne) AddHitDie(i int) *ClassUpdateOne {
	cuo.mutation.AddHitDie(i)
	return cuo
}

// AddStartingProficiencyIDs adds the "starting_proficiencies" edge to the Proficiency entity by IDs.
func (cuo *ClassUpdateOne) AddStartingProficiencyIDs(ids ...int) *ClassUpdateOne {
	cuo.mutation.AddStartingProficiencyIDs(ids...)
	return cuo
}

// AddStartingProficiencies adds the "starting_proficiencies" edges to the Proficiency entity.
func (cuo *ClassUpdateOne) AddStartingProficiencies(p ...*Proficiency) *ClassUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddStartingProficiencyIDs(ids...)
}

// Mutation returns the ClassMutation object of the builder.
func (cuo *ClassUpdateOne) Mutation() *ClassMutation {
	return cuo.mutation
}

// ClearStartingProficiencies clears all "starting_proficiencies" edges to the Proficiency entity.
func (cuo *ClassUpdateOne) ClearStartingProficiencies() *ClassUpdateOne {
	cuo.mutation.ClearStartingProficiencies()
	return cuo
}

// RemoveStartingProficiencyIDs removes the "starting_proficiencies" edge to Proficiency entities by IDs.
func (cuo *ClassUpdateOne) RemoveStartingProficiencyIDs(ids ...int) *ClassUpdateOne {
	cuo.mutation.RemoveStartingProficiencyIDs(ids...)
	return cuo
}

// RemoveStartingProficiencies removes "starting_proficiencies" edges to Proficiency entities.
func (cuo *ClassUpdateOne) RemoveStartingProficiencies(p ...*Proficiency) *ClassUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveStartingProficiencyIDs(ids...)
}

// Where appends a list predicates to the ClassUpdate builder.
func (cuo *ClassUpdateOne) Where(ps ...predicate.Class) *ClassUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClassUpdateOne) Select(field string, fields ...string) *ClassUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Class entity.
func (cuo *ClassUpdateOne) Save(ctx context.Context) (*Class, error) {
	return withHooks[*Class, ClassMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClassUpdateOne) SaveX(ctx context.Context) *Class {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClassUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClassUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ClassUpdateOne) sqlSave(ctx context.Context) (_node *Class, err error) {
	_spec := sqlgraph.NewUpdateSpec(class.Table, class.Columns, sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Class.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, class.FieldID)
		for _, f := range fields {
			if !class.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != class.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Indx(); ok {
		_spec.SetField(class.FieldIndx, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(class.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Desc(); ok {
		_spec.SetField(class.FieldDesc, field.TypeString, value)
	}
	if value, ok := cuo.mutation.HitDie(); ok {
		_spec.SetField(class.FieldHitDie, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedHitDie(); ok {
		_spec.AddField(class.FieldHitDie, field.TypeInt, value)
	}
	if cuo.mutation.StartingProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.StartingProficienciesTable,
			Columns: class.StartingProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedStartingProficienciesIDs(); len(nodes) > 0 && !cuo.mutation.StartingProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.StartingProficienciesTable,
			Columns: class.StartingProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StartingProficienciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.StartingProficienciesTable,
			Columns: class.StartingProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Class{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
