// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/abilitybonuschoice"
	"github.com/ecshreve/dndgen/ent/languagechoice"
	"github.com/ecshreve/dndgen/ent/proficiencychoice"
	"github.com/ecshreve/dndgen/ent/race"
)

// Race is the model entity for the Race schema.
type Race struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Indx holds the value of the "indx" field.
	Indx string `json:"index"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Speed holds the value of the "speed" field.
	Speed int `json:"speed,omitempty"`
	// Size holds the value of the "size" field.
	Size race.Size `json:"size,omitempty"`
	// SizeDesc holds the value of the "size_desc" field.
	SizeDesc string `json:"size_description"`
	// AlignmentDesc holds the value of the "alignment_desc" field.
	AlignmentDesc string `json:"alignment"`
	// AgeDesc holds the value of the "age_desc" field.
	AgeDesc string `json:"age"`
	// LanguageDesc holds the value of the "language_desc" field.
	LanguageDesc string `json:"language_desc,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RaceQuery when eager-loading is set.
	Edges                      RaceEdges `json:"-"`
	race_ability_bonus_options *int
	selectValues               sql.SelectValues
}

// RaceEdges holds the relations/edges for other nodes in the graph.
type RaceEdges struct {
	// Traits holds the value of the traits edge.
	Traits []*Trait `json:"traits,omitempty"`
	// StartingProficiencies holds the value of the starting_proficiencies edge.
	StartingProficiencies []*Proficiency `json:"starting_proficiencies,omitempty"`
	// StartingProficiencyOptions holds the value of the starting_proficiency_options edge.
	StartingProficiencyOptions *ProficiencyChoice `json:"starting_proficiency_options,omitempty"`
	// AbilityBonuses holds the value of the ability_bonuses edge.
	AbilityBonuses []*AbilityBonus `json:"ability_bonuses,omitempty"`
	// AbilityBonusOptions holds the value of the ability_bonus_options edge.
	AbilityBonusOptions *AbilityBonusChoice `json:"ability_bonus_options,omitempty"`
	// Languages holds the value of the languages edge.
	Languages []*Language `json:"languages,omitempty"`
	// LanguageOptions holds the value of the language_options edge.
	LanguageOptions *LanguageChoice `json:"language_options,omitempty"`
	// Subraces holds the value of the subraces edge.
	Subraces []*Subrace `json:"subraces,omitempty"`
	// Characters holds the value of the characters edge.
	Characters []*Character `json:"characters,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
	// totalCount holds the count of the edges above.
	totalCount [9]map[string]int

	namedTraits                map[string][]*Trait
	namedStartingProficiencies map[string][]*Proficiency
	namedAbilityBonuses        map[string][]*AbilityBonus
	namedLanguages             map[string][]*Language
	namedSubraces              map[string][]*Subrace
	namedCharacters            map[string][]*Character
}

// TraitsOrErr returns the Traits value or an error if the edge
// was not loaded in eager-loading.
func (e RaceEdges) TraitsOrErr() ([]*Trait, error) {
	if e.loadedTypes[0] {
		return e.Traits, nil
	}
	return nil, &NotLoadedError{edge: "traits"}
}

// StartingProficienciesOrErr returns the StartingProficiencies value or an error if the edge
// was not loaded in eager-loading.
func (e RaceEdges) StartingProficienciesOrErr() ([]*Proficiency, error) {
	if e.loadedTypes[1] {
		return e.StartingProficiencies, nil
	}
	return nil, &NotLoadedError{edge: "starting_proficiencies"}
}

// StartingProficiencyOptionsOrErr returns the StartingProficiencyOptions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RaceEdges) StartingProficiencyOptionsOrErr() (*ProficiencyChoice, error) {
	if e.StartingProficiencyOptions != nil {
		return e.StartingProficiencyOptions, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: proficiencychoice.Label}
	}
	return nil, &NotLoadedError{edge: "starting_proficiency_options"}
}

// AbilityBonusesOrErr returns the AbilityBonuses value or an error if the edge
// was not loaded in eager-loading.
func (e RaceEdges) AbilityBonusesOrErr() ([]*AbilityBonus, error) {
	if e.loadedTypes[3] {
		return e.AbilityBonuses, nil
	}
	return nil, &NotLoadedError{edge: "ability_bonuses"}
}

// AbilityBonusOptionsOrErr returns the AbilityBonusOptions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RaceEdges) AbilityBonusOptionsOrErr() (*AbilityBonusChoice, error) {
	if e.AbilityBonusOptions != nil {
		return e.AbilityBonusOptions, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: abilitybonuschoice.Label}
	}
	return nil, &NotLoadedError{edge: "ability_bonus_options"}
}

// LanguagesOrErr returns the Languages value or an error if the edge
// was not loaded in eager-loading.
func (e RaceEdges) LanguagesOrErr() ([]*Language, error) {
	if e.loadedTypes[5] {
		return e.Languages, nil
	}
	return nil, &NotLoadedError{edge: "languages"}
}

// LanguageOptionsOrErr returns the LanguageOptions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RaceEdges) LanguageOptionsOrErr() (*LanguageChoice, error) {
	if e.LanguageOptions != nil {
		return e.LanguageOptions, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: languagechoice.Label}
	}
	return nil, &NotLoadedError{edge: "language_options"}
}

// SubracesOrErr returns the Subraces value or an error if the edge
// was not loaded in eager-loading.
func (e RaceEdges) SubracesOrErr() ([]*Subrace, error) {
	if e.loadedTypes[7] {
		return e.Subraces, nil
	}
	return nil, &NotLoadedError{edge: "subraces"}
}

// CharactersOrErr returns the Characters value or an error if the edge
// was not loaded in eager-loading.
func (e RaceEdges) CharactersOrErr() ([]*Character, error) {
	if e.loadedTypes[8] {
		return e.Characters, nil
	}
	return nil, &NotLoadedError{edge: "characters"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Race) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case race.FieldID, race.FieldSpeed:
			values[i] = new(sql.NullInt64)
		case race.FieldIndx, race.FieldName, race.FieldSize, race.FieldSizeDesc, race.FieldAlignmentDesc, race.FieldAgeDesc, race.FieldLanguageDesc:
			values[i] = new(sql.NullString)
		case race.ForeignKeys[0]: // race_ability_bonus_options
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Race fields.
func (r *Race) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case race.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case race.FieldIndx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field indx", values[i])
			} else if value.Valid {
				r.Indx = value.String
			}
		case race.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case race.FieldSpeed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field speed", values[i])
			} else if value.Valid {
				r.Speed = int(value.Int64)
			}
		case race.FieldSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				r.Size = race.Size(value.String)
			}
		case race.FieldSizeDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size_desc", values[i])
			} else if value.Valid {
				r.SizeDesc = value.String
			}
		case race.FieldAlignmentDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alignment_desc", values[i])
			} else if value.Valid {
				r.AlignmentDesc = value.String
			}
		case race.FieldAgeDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field age_desc", values[i])
			} else if value.Valid {
				r.AgeDesc = value.String
			}
		case race.FieldLanguageDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_desc", values[i])
			} else if value.Valid {
				r.LanguageDesc = value.String
			}
		case race.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field race_ability_bonus_options", value)
			} else if value.Valid {
				r.race_ability_bonus_options = new(int)
				*r.race_ability_bonus_options = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Race.
// This includes values selected through modifiers, order, etc.
func (r *Race) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryTraits queries the "traits" edge of the Race entity.
func (r *Race) QueryTraits() *TraitQuery {
	return NewRaceClient(r.config).QueryTraits(r)
}

// QueryStartingProficiencies queries the "starting_proficiencies" edge of the Race entity.
func (r *Race) QueryStartingProficiencies() *ProficiencyQuery {
	return NewRaceClient(r.config).QueryStartingProficiencies(r)
}

// QueryStartingProficiencyOptions queries the "starting_proficiency_options" edge of the Race entity.
func (r *Race) QueryStartingProficiencyOptions() *ProficiencyChoiceQuery {
	return NewRaceClient(r.config).QueryStartingProficiencyOptions(r)
}

// QueryAbilityBonuses queries the "ability_bonuses" edge of the Race entity.
func (r *Race) QueryAbilityBonuses() *AbilityBonusQuery {
	return NewRaceClient(r.config).QueryAbilityBonuses(r)
}

// QueryAbilityBonusOptions queries the "ability_bonus_options" edge of the Race entity.
func (r *Race) QueryAbilityBonusOptions() *AbilityBonusChoiceQuery {
	return NewRaceClient(r.config).QueryAbilityBonusOptions(r)
}

// QueryLanguages queries the "languages" edge of the Race entity.
func (r *Race) QueryLanguages() *LanguageQuery {
	return NewRaceClient(r.config).QueryLanguages(r)
}

// QueryLanguageOptions queries the "language_options" edge of the Race entity.
func (r *Race) QueryLanguageOptions() *LanguageChoiceQuery {
	return NewRaceClient(r.config).QueryLanguageOptions(r)
}

// QuerySubraces queries the "subraces" edge of the Race entity.
func (r *Race) QuerySubraces() *SubraceQuery {
	return NewRaceClient(r.config).QuerySubraces(r)
}

// QueryCharacters queries the "characters" edge of the Race entity.
func (r *Race) QueryCharacters() *CharacterQuery {
	return NewRaceClient(r.config).QueryCharacters(r)
}

// Update returns a builder for updating this Race.
// Note that you need to call Race.Unwrap() before calling this method if this Race
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Race) Update() *RaceUpdateOne {
	return NewRaceClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Race entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Race) Unwrap() *Race {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Race is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Race) String() string {
	var builder strings.Builder
	builder.WriteString("Race(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("indx=")
	builder.WriteString(r.Indx)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("speed=")
	builder.WriteString(fmt.Sprintf("%v", r.Speed))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", r.Size))
	builder.WriteString(", ")
	builder.WriteString("size_desc=")
	builder.WriteString(r.SizeDesc)
	builder.WriteString(", ")
	builder.WriteString("alignment_desc=")
	builder.WriteString(r.AlignmentDesc)
	builder.WriteString(", ")
	builder.WriteString("age_desc=")
	builder.WriteString(r.AgeDesc)
	builder.WriteString(", ")
	builder.WriteString("language_desc=")
	builder.WriteString(r.LanguageDesc)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (r *Race) MarshalJSON() ([]byte, error) {
	type Alias Race
	return json.Marshal(&struct {
		*Alias
		RaceEdges
	}{
		Alias:     (*Alias)(r),
		RaceEdges: r.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (r *Race) UnmarshalJSON(data []byte) error {
	type Alias Race
	aux := &struct {
		*Alias
		RaceEdges
	}{
		Alias: (*Alias)(r),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	r.Edges = aux.RaceEdges
	return nil
}

func (rc *RaceCreate) SetRace(input *Race) *RaceCreate {
	rc.SetIndx(input.Indx)
	rc.SetName(input.Name)
	rc.SetSpeed(input.Speed)
	rc.SetSize(input.Size)
	rc.SetSizeDesc(input.SizeDesc)
	rc.SetAlignmentDesc(input.AlignmentDesc)
	rc.SetAgeDesc(input.AgeDesc)
	rc.SetLanguageDesc(input.LanguageDesc)
	return rc
}

// NamedTraits returns the Traits named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Race) NamedTraits(name string) ([]*Trait, error) {
	if r.Edges.namedTraits == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedTraits[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Race) appendNamedTraits(name string, edges ...*Trait) {
	if r.Edges.namedTraits == nil {
		r.Edges.namedTraits = make(map[string][]*Trait)
	}
	if len(edges) == 0 {
		r.Edges.namedTraits[name] = []*Trait{}
	} else {
		r.Edges.namedTraits[name] = append(r.Edges.namedTraits[name], edges...)
	}
}

// NamedStartingProficiencies returns the StartingProficiencies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Race) NamedStartingProficiencies(name string) ([]*Proficiency, error) {
	if r.Edges.namedStartingProficiencies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedStartingProficiencies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Race) appendNamedStartingProficiencies(name string, edges ...*Proficiency) {
	if r.Edges.namedStartingProficiencies == nil {
		r.Edges.namedStartingProficiencies = make(map[string][]*Proficiency)
	}
	if len(edges) == 0 {
		r.Edges.namedStartingProficiencies[name] = []*Proficiency{}
	} else {
		r.Edges.namedStartingProficiencies[name] = append(r.Edges.namedStartingProficiencies[name], edges...)
	}
}

// NamedAbilityBonuses returns the AbilityBonuses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Race) NamedAbilityBonuses(name string) ([]*AbilityBonus, error) {
	if r.Edges.namedAbilityBonuses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedAbilityBonuses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Race) appendNamedAbilityBonuses(name string, edges ...*AbilityBonus) {
	if r.Edges.namedAbilityBonuses == nil {
		r.Edges.namedAbilityBonuses = make(map[string][]*AbilityBonus)
	}
	if len(edges) == 0 {
		r.Edges.namedAbilityBonuses[name] = []*AbilityBonus{}
	} else {
		r.Edges.namedAbilityBonuses[name] = append(r.Edges.namedAbilityBonuses[name], edges...)
	}
}

// NamedLanguages returns the Languages named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Race) NamedLanguages(name string) ([]*Language, error) {
	if r.Edges.namedLanguages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedLanguages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Race) appendNamedLanguages(name string, edges ...*Language) {
	if r.Edges.namedLanguages == nil {
		r.Edges.namedLanguages = make(map[string][]*Language)
	}
	if len(edges) == 0 {
		r.Edges.namedLanguages[name] = []*Language{}
	} else {
		r.Edges.namedLanguages[name] = append(r.Edges.namedLanguages[name], edges...)
	}
}

// NamedSubraces returns the Subraces named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Race) NamedSubraces(name string) ([]*Subrace, error) {
	if r.Edges.namedSubraces == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedSubraces[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Race) appendNamedSubraces(name string, edges ...*Subrace) {
	if r.Edges.namedSubraces == nil {
		r.Edges.namedSubraces = make(map[string][]*Subrace)
	}
	if len(edges) == 0 {
		r.Edges.namedSubraces[name] = []*Subrace{}
	} else {
		r.Edges.namedSubraces[name] = append(r.Edges.namedSubraces[name], edges...)
	}
}

// NamedCharacters returns the Characters named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Race) NamedCharacters(name string) ([]*Character, error) {
	if r.Edges.namedCharacters == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedCharacters[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Race) appendNamedCharacters(name string, edges ...*Character) {
	if r.Edges.namedCharacters == nil {
		r.Edges.namedCharacters = make(map[string][]*Character)
	}
	if len(edges) == 0 {
		r.Edges.namedCharacters[name] = []*Character{}
	} else {
		r.Edges.namedCharacters[name] = append(r.Edges.namedCharacters[name], edges...)
	}
}

// Races is a parsable slice of Race.
type Races []*Race
