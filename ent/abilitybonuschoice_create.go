// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/abilitybonus"
	"github.com/ecshreve/dndgen/ent/abilitybonuschoice"
	"github.com/ecshreve/dndgen/ent/race"
)

// AbilityBonusChoiceCreate is the builder for creating a AbilityBonusChoice entity.
type AbilityBonusChoiceCreate struct {
	config
	mutation *AbilityBonusChoiceMutation
	hooks    []Hook
}

// SetChoose sets the "choose" field.
func (abcc *AbilityBonusChoiceCreate) SetChoose(i int) *AbilityBonusChoiceCreate {
	abcc.mutation.SetChoose(i)
	return abcc
}

// AddAbilityBonuseIDs adds the "ability_bonuses" edge to the AbilityBonus entity by IDs.
func (abcc *AbilityBonusChoiceCreate) AddAbilityBonuseIDs(ids ...int) *AbilityBonusChoiceCreate {
	abcc.mutation.AddAbilityBonuseIDs(ids...)
	return abcc
}

// AddAbilityBonuses adds the "ability_bonuses" edges to the AbilityBonus entity.
func (abcc *AbilityBonusChoiceCreate) AddAbilityBonuses(a ...*AbilityBonus) *AbilityBonusChoiceCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return abcc.AddAbilityBonuseIDs(ids...)
}

// AddRaceIDs adds the "race" edge to the Race entity by IDs.
func (abcc *AbilityBonusChoiceCreate) AddRaceIDs(ids ...int) *AbilityBonusChoiceCreate {
	abcc.mutation.AddRaceIDs(ids...)
	return abcc
}

// AddRace adds the "race" edges to the Race entity.
func (abcc *AbilityBonusChoiceCreate) AddRace(r ...*Race) *AbilityBonusChoiceCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return abcc.AddRaceIDs(ids...)
}

// Mutation returns the AbilityBonusChoiceMutation object of the builder.
func (abcc *AbilityBonusChoiceCreate) Mutation() *AbilityBonusChoiceMutation {
	return abcc.mutation
}

// Save creates the AbilityBonusChoice in the database.
func (abcc *AbilityBonusChoiceCreate) Save(ctx context.Context) (*AbilityBonusChoice, error) {
	return withHooks(ctx, abcc.sqlSave, abcc.mutation, abcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (abcc *AbilityBonusChoiceCreate) SaveX(ctx context.Context) *AbilityBonusChoice {
	v, err := abcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (abcc *AbilityBonusChoiceCreate) Exec(ctx context.Context) error {
	_, err := abcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abcc *AbilityBonusChoiceCreate) ExecX(ctx context.Context) {
	if err := abcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (abcc *AbilityBonusChoiceCreate) check() error {
	if _, ok := abcc.mutation.Choose(); !ok {
		return &ValidationError{Name: "choose", err: errors.New(`ent: missing required field "AbilityBonusChoice.choose"`)}
	}
	if v, ok := abcc.mutation.Choose(); ok {
		if err := abilitybonuschoice.ChooseValidator(v); err != nil {
			return &ValidationError{Name: "choose", err: fmt.Errorf(`ent: validator failed for field "AbilityBonusChoice.choose": %w`, err)}
		}
	}
	return nil
}

func (abcc *AbilityBonusChoiceCreate) sqlSave(ctx context.Context) (*AbilityBonusChoice, error) {
	if err := abcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := abcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, abcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	abcc.mutation.id = &_node.ID
	abcc.mutation.done = true
	return _node, nil
}

func (abcc *AbilityBonusChoiceCreate) createSpec() (*AbilityBonusChoice, *sqlgraph.CreateSpec) {
	var (
		_node = &AbilityBonusChoice{config: abcc.config}
		_spec = sqlgraph.NewCreateSpec(abilitybonuschoice.Table, sqlgraph.NewFieldSpec(abilitybonuschoice.FieldID, field.TypeInt))
	)
	if value, ok := abcc.mutation.Choose(); ok {
		_spec.SetField(abilitybonuschoice.FieldChoose, field.TypeInt, value)
		_node.Choose = value
	}
	if nodes := abcc.mutation.AbilityBonusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   abilitybonuschoice.AbilityBonusesTable,
			Columns: abilitybonuschoice.AbilityBonusesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilitybonus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := abcc.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilitybonuschoice.RaceTable,
			Columns: []string{abilitybonuschoice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AbilityBonusChoiceCreateBulk is the builder for creating many AbilityBonusChoice entities in bulk.
type AbilityBonusChoiceCreateBulk struct {
	config
	err      error
	builders []*AbilityBonusChoiceCreate
}

// Save creates the AbilityBonusChoice entities in the database.
func (abccb *AbilityBonusChoiceCreateBulk) Save(ctx context.Context) ([]*AbilityBonusChoice, error) {
	if abccb.err != nil {
		return nil, abccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(abccb.builders))
	nodes := make([]*AbilityBonusChoice, len(abccb.builders))
	mutators := make([]Mutator, len(abccb.builders))
	for i := range abccb.builders {
		func(i int, root context.Context) {
			builder := abccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AbilityBonusChoiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, abccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, abccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, abccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (abccb *AbilityBonusChoiceCreateBulk) SaveX(ctx context.Context) []*AbilityBonusChoice {
	v, err := abccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (abccb *AbilityBonusChoiceCreateBulk) Exec(ctx context.Context) error {
	_, err := abccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abccb *AbilityBonusChoiceCreateBulk) ExecX(ctx context.Context) {
	if err := abccb.Exec(ctx); err != nil {
		panic(err)
	}
}
