// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/feature"
)

// Feature is the model entity for the Feature schema.
type Feature struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Indx holds the value of the "indx" field.
	Indx string `json:"index"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc []string `json:"desc,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeatureQuery when eager-loading is set.
	Edges        FeatureEdges `json:"-"`
	selectValues sql.SelectValues
}

// FeatureEdges holds the relations/edges for other nodes in the graph.
type FeatureEdges struct {
	// Prerequisites holds the value of the prerequisites edge.
	Prerequisites []*Prerequisite `json:"prerequisites,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedPrerequisites map[string][]*Prerequisite
}

// PrerequisitesOrErr returns the Prerequisites value or an error if the edge
// was not loaded in eager-loading.
func (e FeatureEdges) PrerequisitesOrErr() ([]*Prerequisite, error) {
	if e.loadedTypes[0] {
		return e.Prerequisites, nil
	}
	return nil, &NotLoadedError{edge: "prerequisites"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Feature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feature.FieldDesc:
			values[i] = new([]byte)
		case feature.FieldID, feature.FieldLevel:
			values[i] = new(sql.NullInt64)
		case feature.FieldIndx, feature.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Feature fields.
func (f *Feature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feature.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case feature.FieldIndx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field indx", values[i])
			} else if value.Valid {
				f.Indx = value.String
			}
		case feature.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case feature.FieldDesc:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &f.Desc); err != nil {
					return fmt.Errorf("unmarshal field desc: %w", err)
				}
			}
		case feature.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				f.Level = int(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Feature.
// This includes values selected through modifiers, order, etc.
func (f *Feature) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryPrerequisites queries the "prerequisites" edge of the Feature entity.
func (f *Feature) QueryPrerequisites() *PrerequisiteQuery {
	return NewFeatureClient(f.config).QueryPrerequisites(f)
}

// Update returns a builder for updating this Feature.
// Note that you need to call Feature.Unwrap() before calling this method if this Feature
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Feature) Update() *FeatureUpdateOne {
	return NewFeatureClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Feature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Feature) Unwrap() *Feature {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Feature is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Feature) String() string {
	var builder strings.Builder
	builder.WriteString("Feature(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("indx=")
	builder.WriteString(f.Indx)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(fmt.Sprintf("%v", f.Desc))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", f.Level))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (f *Feature) MarshalJSON() ([]byte, error) {
	type Alias Feature
	return json.Marshal(&struct {
		*Alias
		FeatureEdges
	}{
		Alias:        (*Alias)(f),
		FeatureEdges: f.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (f *Feature) UnmarshalJSON(data []byte) error {
	type Alias Feature
	aux := &struct {
		*Alias
		FeatureEdges
	}{
		Alias: (*Alias)(f),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	f.Edges = aux.FeatureEdges
	return nil
}

func (fc *FeatureCreate) SetFeature(input *Feature) *FeatureCreate {
	fc.SetIndx(input.Indx)
	fc.SetName(input.Name)
	fc.SetDesc(input.Desc)
	fc.SetLevel(input.Level)
	return fc
}

// NamedPrerequisites returns the Prerequisites named value or an error if the edge was not
// loaded in eager-loading with this name.
func (f *Feature) NamedPrerequisites(name string) ([]*Prerequisite, error) {
	if f.Edges.namedPrerequisites == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := f.Edges.namedPrerequisites[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (f *Feature) appendNamedPrerequisites(name string, edges ...*Prerequisite) {
	if f.Edges.namedPrerequisites == nil {
		f.Edges.namedPrerequisites = make(map[string][]*Prerequisite)
	}
	if len(edges) == 0 {
		f.Edges.namedPrerequisites[name] = []*Prerequisite{}
	} else {
		f.Edges.namedPrerequisites[name] = append(f.Edges.namedPrerequisites[name], edges...)
	}
}

// Features is a parsable slice of Feature.
type Features []*Feature
