// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/classequipment"
	"github.com/ecshreve/dndgen/ent/equipment"
)

// ClassEquipmentCreate is the builder for creating a ClassEquipment entity.
type ClassEquipmentCreate struct {
	config
	mutation *ClassEquipmentMutation
	hooks    []Hook
}

// SetClassID sets the "class_id" field.
func (cec *ClassEquipmentCreate) SetClassID(i int) *ClassEquipmentCreate {
	cec.mutation.SetClassID(i)
	return cec
}

// SetEquipmentID sets the "equipment_id" field.
func (cec *ClassEquipmentCreate) SetEquipmentID(i int) *ClassEquipmentCreate {
	cec.mutation.SetEquipmentID(i)
	return cec
}

// SetQuantity sets the "quantity" field.
func (cec *ClassEquipmentCreate) SetQuantity(i int) *ClassEquipmentCreate {
	cec.mutation.SetQuantity(i)
	return cec
}

// SetClass sets the "class" edge to the Class entity.
func (cec *ClassEquipmentCreate) SetClass(c *Class) *ClassEquipmentCreate {
	return cec.SetClassID(c.ID)
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (cec *ClassEquipmentCreate) SetEquipment(e *Equipment) *ClassEquipmentCreate {
	return cec.SetEquipmentID(e.ID)
}

// Mutation returns the ClassEquipmentMutation object of the builder.
func (cec *ClassEquipmentCreate) Mutation() *ClassEquipmentMutation {
	return cec.mutation
}

// Save creates the ClassEquipment in the database.
func (cec *ClassEquipmentCreate) Save(ctx context.Context) (*ClassEquipment, error) {
	return withHooks(ctx, cec.sqlSave, cec.mutation, cec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cec *ClassEquipmentCreate) SaveX(ctx context.Context) *ClassEquipment {
	v, err := cec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cec *ClassEquipmentCreate) Exec(ctx context.Context) error {
	_, err := cec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cec *ClassEquipmentCreate) ExecX(ctx context.Context) {
	if err := cec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cec *ClassEquipmentCreate) check() error {
	if _, ok := cec.mutation.ClassID(); !ok {
		return &ValidationError{Name: "class_id", err: errors.New(`ent: missing required field "ClassEquipment.class_id"`)}
	}
	if _, ok := cec.mutation.EquipmentID(); !ok {
		return &ValidationError{Name: "equipment_id", err: errors.New(`ent: missing required field "ClassEquipment.equipment_id"`)}
	}
	if _, ok := cec.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "ClassEquipment.quantity"`)}
	}
	if _, ok := cec.mutation.ClassID(); !ok {
		return &ValidationError{Name: "class", err: errors.New(`ent: missing required edge "ClassEquipment.class"`)}
	}
	if _, ok := cec.mutation.EquipmentID(); !ok {
		return &ValidationError{Name: "equipment", err: errors.New(`ent: missing required edge "ClassEquipment.equipment"`)}
	}
	return nil
}

func (cec *ClassEquipmentCreate) sqlSave(ctx context.Context) (*ClassEquipment, error) {
	if err := cec.check(); err != nil {
		return nil, err
	}
	_node, _spec := cec.createSpec()
	if err := sqlgraph.CreateNode(ctx, cec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (cec *ClassEquipmentCreate) createSpec() (*ClassEquipment, *sqlgraph.CreateSpec) {
	var (
		_node = &ClassEquipment{config: cec.config}
		_spec = sqlgraph.NewCreateSpec(classequipment.Table, nil)
	)
	if value, ok := cec.mutation.Quantity(); ok {
		_spec.SetField(classequipment.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if nodes := cec.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classequipment.ClassTable,
			Columns: []string{classequipment.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClassID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cec.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classequipment.EquipmentTable,
			Columns: []string{classequipment.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EquipmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClassEquipmentCreateBulk is the builder for creating many ClassEquipment entities in bulk.
type ClassEquipmentCreateBulk struct {
	config
	builders []*ClassEquipmentCreate
}

// Save creates the ClassEquipment entities in the database.
func (cecb *ClassEquipmentCreateBulk) Save(ctx context.Context) ([]*ClassEquipment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cecb.builders))
	nodes := make([]*ClassEquipment, len(cecb.builders))
	mutators := make([]Mutator, len(cecb.builders))
	for i := range cecb.builders {
		func(i int, root context.Context) {
			builder := cecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClassEquipmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cecb *ClassEquipmentCreateBulk) SaveX(ctx context.Context) []*ClassEquipment {
	v, err := cecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cecb *ClassEquipmentCreateBulk) Exec(ctx context.Context) error {
	_, err := cecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cecb *ClassEquipmentCreateBulk) ExecX(ctx context.Context) {
	if err := cecb.Exec(ctx); err != nil {
		panic(err)
	}
}
