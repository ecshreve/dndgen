// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/ecshreve/dndgen/ent/abilitybonus"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/alignment"
	"github.com/ecshreve/dndgen/ent/armor"
	"github.com/ecshreve/dndgen/ent/armorclass"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/coin"
	"github.com/ecshreve/dndgen/ent/condition"
	"github.com/ecshreve/dndgen/ent/damage"
	"github.com/ecshreve/dndgen/ent/damagetype"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/equipmentcost"
	"github.com/ecshreve/dndgen/ent/feat"
	"github.com/ecshreve/dndgen/ent/language"
	"github.com/ecshreve/dndgen/ent/magicschool"
	"github.com/ecshreve/dndgen/ent/property"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/rule"
	"github.com/ecshreve/dndgen/ent/rulesection"
	"github.com/ecshreve/dndgen/ent/skill"
	"github.com/ecshreve/dndgen/ent/weapon"
	"github.com/ecshreve/dndgen/ent/weaponrange"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ab *AbilityBonusQuery) CollectFields(ctx context.Context, satisfies ...string) (*AbilityBonusQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ab, nil
	}
	if err := ab.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ab, nil
}

func (ab *AbilityBonusQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(abilitybonus.Columns))
		selectedFields = []string{abilitybonus.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "abilityScore":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AbilityScoreClient{config: ab.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ab.withAbilityScore = query
		case "race":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RaceClient{config: ab.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ab.withRace = query
		case "bonus":
			if _, ok := fieldSeen[abilitybonus.FieldBonus]; !ok {
				selectedFields = append(selectedFields, abilitybonus.FieldBonus)
				fieldSeen[abilitybonus.FieldBonus] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ab.Select(selectedFields...)
	}
	return nil
}

type abilitybonusPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AbilityBonusPaginateOption
}

func newAbilityBonusPaginateArgs(rv map[string]any) *abilitybonusPaginateArgs {
	args := &abilitybonusPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*AbilityBonusWhereInput); ok {
		args.opts = append(args.opts, WithAbilityBonusFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (as *AbilityScoreQuery) CollectFields(ctx context.Context, satisfies ...string) (*AbilityScoreQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return as, nil
	}
	if err := as.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return as, nil
}

func (as *AbilityScoreQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(abilityscore.Columns))
		selectedFields = []string{abilityscore.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "skills":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&SkillClient{config: as.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			as.WithNamedSkills(alias, func(wq *SkillQuery) {
				*wq = *query
			})
		case "abilityBonuses":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AbilityBonusClient{config: as.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			as.WithNamedAbilityBonuses(alias, func(wq *AbilityBonusQuery) {
				*wq = *query
			})
		case "indx":
			if _, ok := fieldSeen[abilityscore.FieldIndx]; !ok {
				selectedFields = append(selectedFields, abilityscore.FieldIndx)
				fieldSeen[abilityscore.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[abilityscore.FieldName]; !ok {
				selectedFields = append(selectedFields, abilityscore.FieldName)
				fieldSeen[abilityscore.FieldName] = struct{}{}
			}
		case "desc":
			if _, ok := fieldSeen[abilityscore.FieldDesc]; !ok {
				selectedFields = append(selectedFields, abilityscore.FieldDesc)
				fieldSeen[abilityscore.FieldDesc] = struct{}{}
			}
		case "fullName":
			if _, ok := fieldSeen[abilityscore.FieldFullName]; !ok {
				selectedFields = append(selectedFields, abilityscore.FieldFullName)
				fieldSeen[abilityscore.FieldFullName] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		as.Select(selectedFields...)
	}
	return nil
}

type abilityscorePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AbilityScorePaginateOption
}

func newAbilityScorePaginateArgs(rv map[string]any) *abilityscorePaginateArgs {
	args := &abilityscorePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &AbilityScoreOrder{Field: &AbilityScoreOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithAbilityScoreOrder(order))
			}
		case *AbilityScoreOrder:
			if v != nil {
				args.opts = append(args.opts, WithAbilityScoreOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*AbilityScoreWhereInput); ok {
		args.opts = append(args.opts, WithAbilityScoreFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AlignmentQuery) CollectFields(ctx context.Context, satisfies ...string) (*AlignmentQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return a, nil
	}
	if err := a.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return a, nil
}

func (a *AlignmentQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(alignment.Columns))
		selectedFields = []string{alignment.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "indx":
			if _, ok := fieldSeen[alignment.FieldIndx]; !ok {
				selectedFields = append(selectedFields, alignment.FieldIndx)
				fieldSeen[alignment.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[alignment.FieldName]; !ok {
				selectedFields = append(selectedFields, alignment.FieldName)
				fieldSeen[alignment.FieldName] = struct{}{}
			}
		case "desc":
			if _, ok := fieldSeen[alignment.FieldDesc]; !ok {
				selectedFields = append(selectedFields, alignment.FieldDesc)
				fieldSeen[alignment.FieldDesc] = struct{}{}
			}
		case "abbr":
			if _, ok := fieldSeen[alignment.FieldAbbr]; !ok {
				selectedFields = append(selectedFields, alignment.FieldAbbr)
				fieldSeen[alignment.FieldAbbr] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		a.Select(selectedFields...)
	}
	return nil
}

type alignmentPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AlignmentPaginateOption
}

func newAlignmentPaginateArgs(rv map[string]any) *alignmentPaginateArgs {
	args := &alignmentPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &AlignmentOrder{Field: &AlignmentOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithAlignmentOrder(order))
			}
		case *AlignmentOrder:
			if v != nil {
				args.opts = append(args.opts, WithAlignmentOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*AlignmentWhereInput); ok {
		args.opts = append(args.opts, WithAlignmentFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *ArmorQuery) CollectFields(ctx context.Context, satisfies ...string) (*ArmorQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return a, nil
	}
	if err := a.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return a, nil
}

func (a *ArmorQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(armor.Columns))
		selectedFields = []string{armor.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "equipment":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EquipmentClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			a.withEquipment = query
		case "armorClass":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ArmorClassClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			a.withArmorClass = query
		case "armorCategory":
			if _, ok := fieldSeen[armor.FieldArmorCategory]; !ok {
				selectedFields = append(selectedFields, armor.FieldArmorCategory)
				fieldSeen[armor.FieldArmorCategory] = struct{}{}
			}
		case "strMinimum":
			if _, ok := fieldSeen[armor.FieldStrMinimum]; !ok {
				selectedFields = append(selectedFields, armor.FieldStrMinimum)
				fieldSeen[armor.FieldStrMinimum] = struct{}{}
			}
		case "stealthDisadvantage":
			if _, ok := fieldSeen[armor.FieldStealthDisadvantage]; !ok {
				selectedFields = append(selectedFields, armor.FieldStealthDisadvantage)
				fieldSeen[armor.FieldStealthDisadvantage] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		a.Select(selectedFields...)
	}
	return nil
}

type armorPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ArmorPaginateOption
}

func newArmorPaginateArgs(rv map[string]any) *armorPaginateArgs {
	args := &armorPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*ArmorWhereInput); ok {
		args.opts = append(args.opts, WithArmorFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ac *ArmorClassQuery) CollectFields(ctx context.Context, satisfies ...string) (*ArmorClassQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ac, nil
	}
	if err := ac.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ac, nil
}

func (ac *ArmorClassQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(armorclass.Columns))
		selectedFields = []string{armorclass.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "armor":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ArmorClient{config: ac.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ac.withArmor = query
		case "base":
			if _, ok := fieldSeen[armorclass.FieldBase]; !ok {
				selectedFields = append(selectedFields, armorclass.FieldBase)
				fieldSeen[armorclass.FieldBase] = struct{}{}
			}
		case "dexBonus":
			if _, ok := fieldSeen[armorclass.FieldDexBonus]; !ok {
				selectedFields = append(selectedFields, armorclass.FieldDexBonus)
				fieldSeen[armorclass.FieldDexBonus] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ac.Select(selectedFields...)
	}
	return nil
}

type armorclassPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ArmorClassPaginateOption
}

func newArmorClassPaginateArgs(rv map[string]any) *armorclassPaginateArgs {
	args := &armorclassPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*ArmorClassWhereInput); ok {
		args.opts = append(args.opts, WithArmorClassFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *ClassQuery) CollectFields(ctx context.Context, satisfies ...string) (*ClassQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *ClassQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(class.Columns))
		selectedFields = []string{class.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "indx":
			if _, ok := fieldSeen[class.FieldIndx]; !ok {
				selectedFields = append(selectedFields, class.FieldIndx)
				fieldSeen[class.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[class.FieldName]; !ok {
				selectedFields = append(selectedFields, class.FieldName)
				fieldSeen[class.FieldName] = struct{}{}
			}
		case "hitDie":
			if _, ok := fieldSeen[class.FieldHitDie]; !ok {
				selectedFields = append(selectedFields, class.FieldHitDie)
				fieldSeen[class.FieldHitDie] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type classPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ClassPaginateOption
}

func newClassPaginateArgs(rv map[string]any) *classPaginateArgs {
	args := &classPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ClassOrder{Field: &ClassOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithClassOrder(order))
			}
		case *ClassOrder:
			if v != nil {
				args.opts = append(args.opts, WithClassOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ClassWhereInput); ok {
		args.opts = append(args.opts, WithClassFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CoinQuery) CollectFields(ctx context.Context, satisfies ...string) (*CoinQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CoinQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(coin.Columns))
		selectedFields = []string{coin.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "indx":
			if _, ok := fieldSeen[coin.FieldIndx]; !ok {
				selectedFields = append(selectedFields, coin.FieldIndx)
				fieldSeen[coin.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[coin.FieldName]; !ok {
				selectedFields = append(selectedFields, coin.FieldName)
				fieldSeen[coin.FieldName] = struct{}{}
			}
		case "desc":
			if _, ok := fieldSeen[coin.FieldDesc]; !ok {
				selectedFields = append(selectedFields, coin.FieldDesc)
				fieldSeen[coin.FieldDesc] = struct{}{}
			}
		case "goldConversionRate":
			if _, ok := fieldSeen[coin.FieldGoldConversionRate]; !ok {
				selectedFields = append(selectedFields, coin.FieldGoldConversionRate)
				fieldSeen[coin.FieldGoldConversionRate] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type coinPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CoinPaginateOption
}

func newCoinPaginateArgs(rv map[string]any) *coinPaginateArgs {
	args := &coinPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &CoinOrder{Field: &CoinOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithCoinOrder(order))
			}
		case *CoinOrder:
			if v != nil {
				args.opts = append(args.opts, WithCoinOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*CoinWhereInput); ok {
		args.opts = append(args.opts, WithCoinFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *ConditionQuery) CollectFields(ctx context.Context, satisfies ...string) (*ConditionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *ConditionQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(condition.Columns))
		selectedFields = []string{condition.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "indx":
			if _, ok := fieldSeen[condition.FieldIndx]; !ok {
				selectedFields = append(selectedFields, condition.FieldIndx)
				fieldSeen[condition.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[condition.FieldName]; !ok {
				selectedFields = append(selectedFields, condition.FieldName)
				fieldSeen[condition.FieldName] = struct{}{}
			}
		case "desc":
			if _, ok := fieldSeen[condition.FieldDesc]; !ok {
				selectedFields = append(selectedFields, condition.FieldDesc)
				fieldSeen[condition.FieldDesc] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type conditionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ConditionPaginateOption
}

func newConditionPaginateArgs(rv map[string]any) *conditionPaginateArgs {
	args := &conditionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ConditionOrder{Field: &ConditionOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithConditionOrder(order))
			}
		case *ConditionOrder:
			if v != nil {
				args.opts = append(args.opts, WithConditionOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ConditionWhereInput); ok {
		args.opts = append(args.opts, WithConditionFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (d *DamageQuery) CollectFields(ctx context.Context, satisfies ...string) (*DamageQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return d, nil
	}
	if err := d.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return d, nil
}

func (d *DamageQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(damage.Columns))
		selectedFields = []string{damage.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "damageType":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DamageTypeClient{config: d.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			d.withDamageType = query
		case "damageDice":
			if _, ok := fieldSeen[damage.FieldDamageDice]; !ok {
				selectedFields = append(selectedFields, damage.FieldDamageDice)
				fieldSeen[damage.FieldDamageDice] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		d.Select(selectedFields...)
	}
	return nil
}

type damagePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []DamagePaginateOption
}

func newDamagePaginateArgs(rv map[string]any) *damagePaginateArgs {
	args := &damagePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*DamageWhereInput); ok {
		args.opts = append(args.opts, WithDamageFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (dt *DamageTypeQuery) CollectFields(ctx context.Context, satisfies ...string) (*DamageTypeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return dt, nil
	}
	if err := dt.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return dt, nil
}

func (dt *DamageTypeQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(damagetype.Columns))
		selectedFields = []string{damagetype.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "indx":
			if _, ok := fieldSeen[damagetype.FieldIndx]; !ok {
				selectedFields = append(selectedFields, damagetype.FieldIndx)
				fieldSeen[damagetype.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[damagetype.FieldName]; !ok {
				selectedFields = append(selectedFields, damagetype.FieldName)
				fieldSeen[damagetype.FieldName] = struct{}{}
			}
		case "desc":
			if _, ok := fieldSeen[damagetype.FieldDesc]; !ok {
				selectedFields = append(selectedFields, damagetype.FieldDesc)
				fieldSeen[damagetype.FieldDesc] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		dt.Select(selectedFields...)
	}
	return nil
}

type damagetypePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []DamageTypePaginateOption
}

func newDamageTypePaginateArgs(rv map[string]any) *damagetypePaginateArgs {
	args := &damagetypePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &DamageTypeOrder{Field: &DamageTypeOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithDamageTypeOrder(order))
			}
		case *DamageTypeOrder:
			if v != nil {
				args.opts = append(args.opts, WithDamageTypeOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*DamageTypeWhereInput); ok {
		args.opts = append(args.opts, WithDamageTypeFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (e *EquipmentQuery) CollectFields(ctx context.Context, satisfies ...string) (*EquipmentQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return e, nil
	}
	if err := e.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return e, nil
}

func (e *EquipmentQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(equipment.Columns))
		selectedFields = []string{equipment.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "equipmentCosts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EquipmentCostClient{config: e.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			e.withEquipmentCosts = query
		case "indx":
			if _, ok := fieldSeen[equipment.FieldIndx]; !ok {
				selectedFields = append(selectedFields, equipment.FieldIndx)
				fieldSeen[equipment.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[equipment.FieldName]; !ok {
				selectedFields = append(selectedFields, equipment.FieldName)
				fieldSeen[equipment.FieldName] = struct{}{}
			}
		case "desc":
			if _, ok := fieldSeen[equipment.FieldDesc]; !ok {
				selectedFields = append(selectedFields, equipment.FieldDesc)
				fieldSeen[equipment.FieldDesc] = struct{}{}
			}
		case "equipmentCategory":
			if _, ok := fieldSeen[equipment.FieldEquipmentCategory]; !ok {
				selectedFields = append(selectedFields, equipment.FieldEquipmentCategory)
				fieldSeen[equipment.FieldEquipmentCategory] = struct{}{}
			}
		case "weight":
			if _, ok := fieldSeen[equipment.FieldWeight]; !ok {
				selectedFields = append(selectedFields, equipment.FieldWeight)
				fieldSeen[equipment.FieldWeight] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		e.Select(selectedFields...)
	}
	return nil
}

type equipmentPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EquipmentPaginateOption
}

func newEquipmentPaginateArgs(rv map[string]any) *equipmentPaginateArgs {
	args := &equipmentPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &EquipmentOrder{Field: &EquipmentOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithEquipmentOrder(order))
			}
		case *EquipmentOrder:
			if v != nil {
				args.opts = append(args.opts, WithEquipmentOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*EquipmentWhereInput); ok {
		args.opts = append(args.opts, WithEquipmentFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ec *EquipmentCostQuery) CollectFields(ctx context.Context, satisfies ...string) (*EquipmentCostQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ec, nil
	}
	if err := ec.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ec, nil
}

func (ec *EquipmentCostQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(equipmentcost.Columns))
		selectedFields = []string{equipmentcost.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "coin":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CoinClient{config: ec.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ec.withCoin = query
		case "equipment":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EquipmentClient{config: ec.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ec.withEquipment = query
		case "quantity":
			if _, ok := fieldSeen[equipmentcost.FieldQuantity]; !ok {
				selectedFields = append(selectedFields, equipmentcost.FieldQuantity)
				fieldSeen[equipmentcost.FieldQuantity] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ec.Select(selectedFields...)
	}
	return nil
}

type equipmentcostPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EquipmentCostPaginateOption
}

func newEquipmentCostPaginateArgs(rv map[string]any) *equipmentcostPaginateArgs {
	args := &equipmentcostPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*EquipmentCostWhereInput); ok {
		args.opts = append(args.opts, WithEquipmentCostFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (f *FeatQuery) CollectFields(ctx context.Context, satisfies ...string) (*FeatQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return f, nil
	}
	if err := f.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return f, nil
}

func (f *FeatQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(feat.Columns))
		selectedFields = []string{feat.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "indx":
			if _, ok := fieldSeen[feat.FieldIndx]; !ok {
				selectedFields = append(selectedFields, feat.FieldIndx)
				fieldSeen[feat.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[feat.FieldName]; !ok {
				selectedFields = append(selectedFields, feat.FieldName)
				fieldSeen[feat.FieldName] = struct{}{}
			}
		case "desc":
			if _, ok := fieldSeen[feat.FieldDesc]; !ok {
				selectedFields = append(selectedFields, feat.FieldDesc)
				fieldSeen[feat.FieldDesc] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		f.Select(selectedFields...)
	}
	return nil
}

type featPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []FeatPaginateOption
}

func newFeatPaginateArgs(rv map[string]any) *featPaginateArgs {
	args := &featPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &FeatOrder{Field: &FeatOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithFeatOrder(order))
			}
		case *FeatOrder:
			if v != nil {
				args.opts = append(args.opts, WithFeatOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*FeatWhereInput); ok {
		args.opts = append(args.opts, WithFeatFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (l *LanguageQuery) CollectFields(ctx context.Context, satisfies ...string) (*LanguageQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return l, nil
	}
	if err := l.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return l, nil
}

func (l *LanguageQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(language.Columns))
		selectedFields = []string{language.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "races":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RaceClient{config: l.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			l.WithNamedRaces(alias, func(wq *RaceQuery) {
				*wq = *query
			})
		case "indx":
			if _, ok := fieldSeen[language.FieldIndx]; !ok {
				selectedFields = append(selectedFields, language.FieldIndx)
				fieldSeen[language.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[language.FieldName]; !ok {
				selectedFields = append(selectedFields, language.FieldName)
				fieldSeen[language.FieldName] = struct{}{}
			}
		case "desc":
			if _, ok := fieldSeen[language.FieldDesc]; !ok {
				selectedFields = append(selectedFields, language.FieldDesc)
				fieldSeen[language.FieldDesc] = struct{}{}
			}
		case "languageType":
			if _, ok := fieldSeen[language.FieldLanguageType]; !ok {
				selectedFields = append(selectedFields, language.FieldLanguageType)
				fieldSeen[language.FieldLanguageType] = struct{}{}
			}
		case "script":
			if _, ok := fieldSeen[language.FieldScript]; !ok {
				selectedFields = append(selectedFields, language.FieldScript)
				fieldSeen[language.FieldScript] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		l.Select(selectedFields...)
	}
	return nil
}

type languagePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []LanguagePaginateOption
}

func newLanguagePaginateArgs(rv map[string]any) *languagePaginateArgs {
	args := &languagePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &LanguageOrder{Field: &LanguageOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithLanguageOrder(order))
			}
		case *LanguageOrder:
			if v != nil {
				args.opts = append(args.opts, WithLanguageOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*LanguageWhereInput); ok {
		args.opts = append(args.opts, WithLanguageFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ms *MagicSchoolQuery) CollectFields(ctx context.Context, satisfies ...string) (*MagicSchoolQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ms, nil
	}
	if err := ms.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ms, nil
}

func (ms *MagicSchoolQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(magicschool.Columns))
		selectedFields = []string{magicschool.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "indx":
			if _, ok := fieldSeen[magicschool.FieldIndx]; !ok {
				selectedFields = append(selectedFields, magicschool.FieldIndx)
				fieldSeen[magicschool.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[magicschool.FieldName]; !ok {
				selectedFields = append(selectedFields, magicschool.FieldName)
				fieldSeen[magicschool.FieldName] = struct{}{}
			}
		case "desc":
			if _, ok := fieldSeen[magicschool.FieldDesc]; !ok {
				selectedFields = append(selectedFields, magicschool.FieldDesc)
				fieldSeen[magicschool.FieldDesc] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ms.Select(selectedFields...)
	}
	return nil
}

type magicschoolPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []MagicSchoolPaginateOption
}

func newMagicSchoolPaginateArgs(rv map[string]any) *magicschoolPaginateArgs {
	args := &magicschoolPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &MagicSchoolOrder{Field: &MagicSchoolOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithMagicSchoolOrder(order))
			}
		case *MagicSchoolOrder:
			if v != nil {
				args.opts = append(args.opts, WithMagicSchoolOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*MagicSchoolWhereInput); ok {
		args.opts = append(args.opts, WithMagicSchoolFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *PropertyQuery) CollectFields(ctx context.Context, satisfies ...string) (*PropertyQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pr, nil
	}
	if err := pr.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pr, nil
}

func (pr *PropertyQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(property.Columns))
		selectedFields = []string{property.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "weapons":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WeaponClient{config: pr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pr.WithNamedWeapons(alias, func(wq *WeaponQuery) {
				*wq = *query
			})
		case "indx":
			if _, ok := fieldSeen[property.FieldIndx]; !ok {
				selectedFields = append(selectedFields, property.FieldIndx)
				fieldSeen[property.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[property.FieldName]; !ok {
				selectedFields = append(selectedFields, property.FieldName)
				fieldSeen[property.FieldName] = struct{}{}
			}
		case "desc":
			if _, ok := fieldSeen[property.FieldDesc]; !ok {
				selectedFields = append(selectedFields, property.FieldDesc)
				fieldSeen[property.FieldDesc] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pr.Select(selectedFields...)
	}
	return nil
}

type propertyPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PropertyPaginateOption
}

func newPropertyPaginateArgs(rv map[string]any) *propertyPaginateArgs {
	args := &propertyPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &PropertyOrder{Field: &PropertyOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithPropertyOrder(order))
			}
		case *PropertyOrder:
			if v != nil {
				args.opts = append(args.opts, WithPropertyOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*PropertyWhereInput); ok {
		args.opts = append(args.opts, WithPropertyFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *RaceQuery) CollectFields(ctx context.Context, satisfies ...string) (*RaceQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return r, nil
	}
	if err := r.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return r, nil
}

func (r *RaceQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(race.Columns))
		selectedFields = []string{race.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "abilityBonuses":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AbilityBonusClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			r.WithNamedAbilityBonuses(alias, func(wq *AbilityBonusQuery) {
				*wq = *query
			})
		case "languages":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&LanguageClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			r.WithNamedLanguages(alias, func(wq *LanguageQuery) {
				*wq = *query
			})
		case "indx":
			if _, ok := fieldSeen[race.FieldIndx]; !ok {
				selectedFields = append(selectedFields, race.FieldIndx)
				fieldSeen[race.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[race.FieldName]; !ok {
				selectedFields = append(selectedFields, race.FieldName)
				fieldSeen[race.FieldName] = struct{}{}
			}
		case "speed":
			if _, ok := fieldSeen[race.FieldSpeed]; !ok {
				selectedFields = append(selectedFields, race.FieldSpeed)
				fieldSeen[race.FieldSpeed] = struct{}{}
			}
		case "size":
			if _, ok := fieldSeen[race.FieldSize]; !ok {
				selectedFields = append(selectedFields, race.FieldSize)
				fieldSeen[race.FieldSize] = struct{}{}
			}
		case "sizeDesc":
			if _, ok := fieldSeen[race.FieldSizeDesc]; !ok {
				selectedFields = append(selectedFields, race.FieldSizeDesc)
				fieldSeen[race.FieldSizeDesc] = struct{}{}
			}
		case "alignmentDesc":
			if _, ok := fieldSeen[race.FieldAlignmentDesc]; !ok {
				selectedFields = append(selectedFields, race.FieldAlignmentDesc)
				fieldSeen[race.FieldAlignmentDesc] = struct{}{}
			}
		case "ageDesc":
			if _, ok := fieldSeen[race.FieldAgeDesc]; !ok {
				selectedFields = append(selectedFields, race.FieldAgeDesc)
				fieldSeen[race.FieldAgeDesc] = struct{}{}
			}
		case "languageDesc":
			if _, ok := fieldSeen[race.FieldLanguageDesc]; !ok {
				selectedFields = append(selectedFields, race.FieldLanguageDesc)
				fieldSeen[race.FieldLanguageDesc] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		r.Select(selectedFields...)
	}
	return nil
}

type racePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []RacePaginateOption
}

func newRacePaginateArgs(rv map[string]any) *racePaginateArgs {
	args := &racePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &RaceOrder{Field: &RaceOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithRaceOrder(order))
			}
		case *RaceOrder:
			if v != nil {
				args.opts = append(args.opts, WithRaceOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*RaceWhereInput); ok {
		args.opts = append(args.opts, WithRaceFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *RuleQuery) CollectFields(ctx context.Context, satisfies ...string) (*RuleQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return r, nil
	}
	if err := r.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return r, nil
}

func (r *RuleQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(rule.Columns))
		selectedFields = []string{rule.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "sections":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RuleSectionClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			r.WithNamedSections(alias, func(wq *RuleSectionQuery) {
				*wq = *query
			})
		case "indx":
			if _, ok := fieldSeen[rule.FieldIndx]; !ok {
				selectedFields = append(selectedFields, rule.FieldIndx)
				fieldSeen[rule.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[rule.FieldName]; !ok {
				selectedFields = append(selectedFields, rule.FieldName)
				fieldSeen[rule.FieldName] = struct{}{}
			}
		case "desc":
			if _, ok := fieldSeen[rule.FieldDesc]; !ok {
				selectedFields = append(selectedFields, rule.FieldDesc)
				fieldSeen[rule.FieldDesc] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		r.Select(selectedFields...)
	}
	return nil
}

type rulePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []RulePaginateOption
}

func newRulePaginateArgs(rv map[string]any) *rulePaginateArgs {
	args := &rulePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &RuleOrder{Field: &RuleOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithRuleOrder(order))
			}
		case *RuleOrder:
			if v != nil {
				args.opts = append(args.opts, WithRuleOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*RuleWhereInput); ok {
		args.opts = append(args.opts, WithRuleFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (rs *RuleSectionQuery) CollectFields(ctx context.Context, satisfies ...string) (*RuleSectionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return rs, nil
	}
	if err := rs.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return rs, nil
}

func (rs *RuleSectionQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(rulesection.Columns))
		selectedFields = []string{rulesection.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "rule":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RuleClient{config: rs.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			rs.withRule = query
		case "indx":
			if _, ok := fieldSeen[rulesection.FieldIndx]; !ok {
				selectedFields = append(selectedFields, rulesection.FieldIndx)
				fieldSeen[rulesection.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[rulesection.FieldName]; !ok {
				selectedFields = append(selectedFields, rulesection.FieldName)
				fieldSeen[rulesection.FieldName] = struct{}{}
			}
		case "desc":
			if _, ok := fieldSeen[rulesection.FieldDesc]; !ok {
				selectedFields = append(selectedFields, rulesection.FieldDesc)
				fieldSeen[rulesection.FieldDesc] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		rs.Select(selectedFields...)
	}
	return nil
}

type rulesectionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []RuleSectionPaginateOption
}

func newRuleSectionPaginateArgs(rv map[string]any) *rulesectionPaginateArgs {
	args := &rulesectionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &RuleSectionOrder{Field: &RuleSectionOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithRuleSectionOrder(order))
			}
		case *RuleSectionOrder:
			if v != nil {
				args.opts = append(args.opts, WithRuleSectionOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*RuleSectionWhereInput); ok {
		args.opts = append(args.opts, WithRuleSectionFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *SkillQuery) CollectFields(ctx context.Context, satisfies ...string) (*SkillQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return s, nil
	}
	if err := s.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return s, nil
}

func (s *SkillQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(skill.Columns))
		selectedFields = []string{skill.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "abilityScore":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AbilityScoreClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			s.withAbilityScore = query
		case "indx":
			if _, ok := fieldSeen[skill.FieldIndx]; !ok {
				selectedFields = append(selectedFields, skill.FieldIndx)
				fieldSeen[skill.FieldIndx] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[skill.FieldName]; !ok {
				selectedFields = append(selectedFields, skill.FieldName)
				fieldSeen[skill.FieldName] = struct{}{}
			}
		case "desc":
			if _, ok := fieldSeen[skill.FieldDesc]; !ok {
				selectedFields = append(selectedFields, skill.FieldDesc)
				fieldSeen[skill.FieldDesc] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		s.Select(selectedFields...)
	}
	return nil
}

type skillPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []SkillPaginateOption
}

func newSkillPaginateArgs(rv map[string]any) *skillPaginateArgs {
	args := &skillPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &SkillOrder{Field: &SkillOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithSkillOrder(order))
			}
		case *SkillOrder:
			if v != nil {
				args.opts = append(args.opts, WithSkillOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*SkillWhereInput); ok {
		args.opts = append(args.opts, WithSkillFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (w *WeaponQuery) CollectFields(ctx context.Context, satisfies ...string) (*WeaponQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return w, nil
	}
	if err := w.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return w, nil
}

func (w *WeaponQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(weapon.Columns))
		selectedFields = []string{weapon.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "damage":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DamageClient{config: w.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			w.withDamage = query
		case "properties":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PropertyClient{config: w.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			w.WithNamedProperties(alias, func(wq *PropertyQuery) {
				*wq = *query
			})
		case "equipment":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EquipmentClient{config: w.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			w.withEquipment = query
		case "weaponRange":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WeaponRangeClient{config: w.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			w.withWeaponRange = query
		case "weaponCategory":
			if _, ok := fieldSeen[weapon.FieldWeaponCategory]; !ok {
				selectedFields = append(selectedFields, weapon.FieldWeaponCategory)
				fieldSeen[weapon.FieldWeaponCategory] = struct{}{}
			}
		case "weaponSubcategory":
			if _, ok := fieldSeen[weapon.FieldWeaponSubcategory]; !ok {
				selectedFields = append(selectedFields, weapon.FieldWeaponSubcategory)
				fieldSeen[weapon.FieldWeaponSubcategory] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		w.Select(selectedFields...)
	}
	return nil
}

type weaponPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []WeaponPaginateOption
}

func newWeaponPaginateArgs(rv map[string]any) *weaponPaginateArgs {
	args := &weaponPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*WeaponWhereInput); ok {
		args.opts = append(args.opts, WithWeaponFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (wr *WeaponRangeQuery) CollectFields(ctx context.Context, satisfies ...string) (*WeaponRangeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return wr, nil
	}
	if err := wr.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return wr, nil
}

func (wr *WeaponRangeQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(weaponrange.Columns))
		selectedFields = []string{weaponrange.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "rangeNormal":
			if _, ok := fieldSeen[weaponrange.FieldRangeNormal]; !ok {
				selectedFields = append(selectedFields, weaponrange.FieldRangeNormal)
				fieldSeen[weaponrange.FieldRangeNormal] = struct{}{}
			}
		case "rangeLong":
			if _, ok := fieldSeen[weaponrange.FieldRangeLong]; !ok {
				selectedFields = append(selectedFields, weaponrange.FieldRangeLong)
				fieldSeen[weaponrange.FieldRangeLong] = struct{}{}
			}
		case "throwRangeNormal":
			if _, ok := fieldSeen[weaponrange.FieldThrowRangeNormal]; !ok {
				selectedFields = append(selectedFields, weaponrange.FieldThrowRangeNormal)
				fieldSeen[weaponrange.FieldThrowRangeNormal] = struct{}{}
			}
		case "throwRangeLong":
			if _, ok := fieldSeen[weaponrange.FieldThrowRangeLong]; !ok {
				selectedFields = append(selectedFields, weaponrange.FieldThrowRangeLong)
				fieldSeen[weaponrange.FieldThrowRangeLong] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		wr.Select(selectedFields...)
	}
	return nil
}

type weaponrangePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []WeaponRangePaginateOption
}

func newWeaponRangePaginateArgs(rv map[string]any) *weaponrangePaginateArgs {
	args := &weaponrangePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*WeaponRangeWhereInput); ok {
		args.opts = append(args.opts, WithWeaponRangeFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
