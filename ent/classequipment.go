// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/classequipment"
	"github.com/ecshreve/dndgen/ent/equipment"
)

// ClassEquipment is the model entity for the ClassEquipment schema.
type ClassEquipment struct {
	config `json:"-"`
	// ClassID holds the value of the "class_id" field.
	ClassID int `json:"class_id,omitempty"`
	// EquipmentID holds the value of the "equipment_id" field.
	EquipmentID int `json:"equipment_id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClassEquipmentQuery when eager-loading is set.
	Edges        ClassEquipmentEdges `json:"-"`
	selectValues sql.SelectValues
}

// ClassEquipmentEdges holds the relations/edges for other nodes in the graph.
type ClassEquipmentEdges struct {
	// Class holds the value of the class edge.
	Class *Class `json:"class,omitempty"`
	// Equipment holds the value of the equipment edge.
	Equipment *Equipment `json:"equipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassEquipmentEdges) ClassOrErr() (*Class, error) {
	if e.loadedTypes[0] {
		if e.Class == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: class.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassEquipmentEdges) EquipmentOrErr() (*Equipment, error) {
	if e.loadedTypes[1] {
		if e.Equipment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: equipment.Label}
		}
		return e.Equipment, nil
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClassEquipment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case classequipment.FieldClassID, classequipment.FieldEquipmentID, classequipment.FieldQuantity:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClassEquipment fields.
func (ce *ClassEquipment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case classequipment.FieldClassID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field class_id", values[i])
			} else if value.Valid {
				ce.ClassID = int(value.Int64)
			}
		case classequipment.FieldEquipmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field equipment_id", values[i])
			} else if value.Valid {
				ce.EquipmentID = int(value.Int64)
			}
		case classequipment.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				ce.Quantity = int(value.Int64)
			}
		default:
			ce.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ClassEquipment.
// This includes values selected through modifiers, order, etc.
func (ce *ClassEquipment) Value(name string) (ent.Value, error) {
	return ce.selectValues.Get(name)
}

// QueryClass queries the "class" edge of the ClassEquipment entity.
func (ce *ClassEquipment) QueryClass() *ClassQuery {
	return NewClassEquipmentClient(ce.config).QueryClass(ce)
}

// QueryEquipment queries the "equipment" edge of the ClassEquipment entity.
func (ce *ClassEquipment) QueryEquipment() *EquipmentQuery {
	return NewClassEquipmentClient(ce.config).QueryEquipment(ce)
}

// Update returns a builder for updating this ClassEquipment.
// Note that you need to call ClassEquipment.Unwrap() before calling this method if this ClassEquipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ce *ClassEquipment) Update() *ClassEquipmentUpdateOne {
	return NewClassEquipmentClient(ce.config).UpdateOne(ce)
}

// Unwrap unwraps the ClassEquipment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ce *ClassEquipment) Unwrap() *ClassEquipment {
	_tx, ok := ce.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClassEquipment is not a transactional entity")
	}
	ce.config.driver = _tx.drv
	return ce
}

// String implements the fmt.Stringer.
func (ce *ClassEquipment) String() string {
	var builder strings.Builder
	builder.WriteString("ClassEquipment(")
	builder.WriteString("class_id=")
	builder.WriteString(fmt.Sprintf("%v", ce.ClassID))
	builder.WriteString(", ")
	builder.WriteString("equipment_id=")
	builder.WriteString(fmt.Sprintf("%v", ce.EquipmentID))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", ce.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (ce *ClassEquipment) MarshalJSON() ([]byte, error) {
	type Alias ClassEquipment
	return json.Marshal(&struct {
		*Alias
		ClassEquipmentEdges
	}{
		Alias:               (*Alias)(ce),
		ClassEquipmentEdges: ce.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (ce *ClassEquipment) UnmarshalJSON(data []byte) error {
	type Alias ClassEquipment
	aux := &struct {
		*Alias
		ClassEquipmentEdges
	}{
		Alias: (*Alias)(ce),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	ce.Edges = aux.ClassEquipmentEdges
	return nil
}

func (cec *ClassEquipmentCreate) SetClassEquipment(input *ClassEquipment) *ClassEquipmentCreate {
	cec.SetClassID(input.ClassID)
	cec.SetEquipmentID(input.EquipmentID)
	cec.SetQuantity(input.Quantity)
	return cec
}

// ClassEquipments is a parsable slice of ClassEquipment.
type ClassEquipments []*ClassEquipment
