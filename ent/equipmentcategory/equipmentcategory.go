// Code generated by ent, DO NOT EDIT.

package equipmentcategory

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the equipmentcategory type in the database.
	Label = "equipment_category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// EdgeEquipment holds the string denoting the equipment edge name in mutations.
	EdgeEquipment = "equipment"
	// Table holds the table name of the equipmentcategory in the database.
	Table = "equipment_categories"
	// EquipmentTable is the table that holds the equipment relation/edge.
	EquipmentTable = "equipment"
	// EquipmentInverseTable is the table name for the Equipment entity.
	// It exists in this package in order to avoid circular dependency with the "equipment" package.
	EquipmentInverseTable = "equipment"
	// EquipmentColumn is the table column denoting the equipment relation/edge.
	EquipmentColumn = "equipment_category_equipment"
)

// Columns holds all SQL columns for equipmentcategory fields.
var Columns = []string{
	FieldID,
	FieldIndx,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Indx defines the type for the "indx" enum field.
type Indx string

// IndxOther is the default value of the Indx enum.
const DefaultIndx = IndxOther

// Indx values.
const (
	IndxWeapon            Indx = "weapon"
	IndxArmor             Indx = "armor"
	IndxAdventuringGear   Indx = "adventuring-gear"
	IndxTools             Indx = "tools"
	IndxMountsAndVehicles Indx = "mounts-and-vehicles"
	IndxOther             Indx = "other"
)

func (i Indx) String() string {
	return string(i)
}

// IndxValidator is a validator for the "indx" field enum values. It is called by the builders before save.
func IndxValidator(i Indx) error {
	switch i {
	case IndxWeapon, IndxArmor, IndxAdventuringGear, IndxTools, IndxMountsAndVehicles, IndxOther:
		return nil
	default:
		return fmt.Errorf("equipmentcategory: invalid enum value for indx field: %q", i)
	}
}

// OrderOption defines the ordering options for the EquipmentCategory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByEquipmentCount orders the results by equipment count.
func ByEquipmentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEquipmentStep(), opts...)
	}
}

// ByEquipment orders the results by equipment terms.
func ByEquipment(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEquipmentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEquipmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EquipmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EquipmentTable, EquipmentColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Indx) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Indx) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Indx(str)
	if err := IndxValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Indx", str)
	}
	return nil
}
