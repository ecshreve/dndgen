// Code generated by ent, DO NOT EDIT.

package race

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the race type in the database.
	Label = "race"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldSpeed holds the string denoting the speed field in the database.
	FieldSpeed = "speed"
	// EdgeLanguages holds the string denoting the languages edge name in mutations.
	EdgeLanguages = "languages"
	// EdgeAbilityBonuses holds the string denoting the ability_bonuses edge name in mutations.
	EdgeAbilityBonuses = "ability_bonuses"
	// EdgeStartingProficiencies holds the string denoting the starting_proficiencies edge name in mutations.
	EdgeStartingProficiencies = "starting_proficiencies"
	// Table holds the table name of the race in the database.
	Table = "races"
	// LanguagesTable is the table that holds the languages relation/edge. The primary key declared below.
	LanguagesTable = "race_languages"
	// LanguagesInverseTable is the table name for the Language entity.
	// It exists in this package in order to avoid circular dependency with the "language" package.
	LanguagesInverseTable = "languages"
	// AbilityBonusesTable is the table that holds the ability_bonuses relation/edge. The primary key declared below.
	AbilityBonusesTable = "race_ability_bonuses"
	// AbilityBonusesInverseTable is the table name for the AbilityBonus entity.
	// It exists in this package in order to avoid circular dependency with the "abilitybonus" package.
	AbilityBonusesInverseTable = "ability_bonus"
	// StartingProficienciesTable is the table that holds the starting_proficiencies relation/edge. The primary key declared below.
	StartingProficienciesTable = "race_starting_proficiencies"
	// StartingProficienciesInverseTable is the table name for the Proficiency entity.
	// It exists in this package in order to avoid circular dependency with the "proficiency" package.
	StartingProficienciesInverseTable = "proficiencies"
)

// Columns holds all SQL columns for race fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldDesc,
	FieldSpeed,
}

var (
	// LanguagesPrimaryKey and LanguagesColumn2 are the table columns denoting the
	// primary key for the languages relation (M2M).
	LanguagesPrimaryKey = []string{"race_id", "language_id"}
	// AbilityBonusesPrimaryKey and AbilityBonusesColumn2 are the table columns denoting the
	// primary key for the ability_bonuses relation (M2M).
	AbilityBonusesPrimaryKey = []string{"race_id", "ability_bonus_id"}
	// StartingProficienciesPrimaryKey and StartingProficienciesColumn2 are the table columns denoting the
	// primary key for the starting_proficiencies relation (M2M).
	StartingProficienciesPrimaryKey = []string{"race_id", "proficiency_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Race queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDesc orders the results by the desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// BySpeed orders the results by the speed field.
func BySpeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpeed, opts...).ToFunc()
}

// ByLanguagesCount orders the results by languages count.
func ByLanguagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLanguagesStep(), opts...)
	}
}

// ByLanguages orders the results by languages terms.
func ByLanguages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLanguagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAbilityBonusesCount orders the results by ability_bonuses count.
func ByAbilityBonusesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAbilityBonusesStep(), opts...)
	}
}

// ByAbilityBonuses orders the results by ability_bonuses terms.
func ByAbilityBonuses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAbilityBonusesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStartingProficienciesCount orders the results by starting_proficiencies count.
func ByStartingProficienciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStartingProficienciesStep(), opts...)
	}
}

// ByStartingProficiencies orders the results by starting_proficiencies terms.
func ByStartingProficiencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStartingProficienciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLanguagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LanguagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, LanguagesTable, LanguagesPrimaryKey...),
	)
}
func newAbilityBonusesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AbilityBonusesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AbilityBonusesTable, AbilityBonusesPrimaryKey...),
	)
}
func newStartingProficienciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StartingProficienciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, StartingProficienciesTable, StartingProficienciesPrimaryKey...),
	)
}
