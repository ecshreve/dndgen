// Code generated by ent, DO NOT EDIT.

package race

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Race {
	return predicate.Race(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Race {
	return predicate.Race(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Race {
	return predicate.Race(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Race {
	return predicate.Race(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Race {
	return predicate.Race(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Race {
	return predicate.Race(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Race {
	return predicate.Race(sql.FieldLTE(FieldID, id))
}

// Indx applies equality check predicate on the "indx" field. It's identical to IndxEQ.
func Indx(v string) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldIndx, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldName, v))
}

// Speed applies equality check predicate on the "speed" field. It's identical to SpeedEQ.
func Speed(v int) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldSpeed, v))
}

// SizeDesc applies equality check predicate on the "size_desc" field. It's identical to SizeDescEQ.
func SizeDesc(v string) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldSizeDesc, v))
}

// AlignmentDesc applies equality check predicate on the "alignment_desc" field. It's identical to AlignmentDescEQ.
func AlignmentDesc(v string) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldAlignmentDesc, v))
}

// AgeDesc applies equality check predicate on the "age_desc" field. It's identical to AgeDescEQ.
func AgeDesc(v string) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldAgeDesc, v))
}

// LanguageDesc applies equality check predicate on the "language_desc" field. It's identical to LanguageDescEQ.
func LanguageDesc(v string) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldLanguageDesc, v))
}

// IndxEQ applies the EQ predicate on the "indx" field.
func IndxEQ(v string) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldIndx, v))
}

// IndxNEQ applies the NEQ predicate on the "indx" field.
func IndxNEQ(v string) predicate.Race {
	return predicate.Race(sql.FieldNEQ(FieldIndx, v))
}

// IndxIn applies the In predicate on the "indx" field.
func IndxIn(vs ...string) predicate.Race {
	return predicate.Race(sql.FieldIn(FieldIndx, vs...))
}

// IndxNotIn applies the NotIn predicate on the "indx" field.
func IndxNotIn(vs ...string) predicate.Race {
	return predicate.Race(sql.FieldNotIn(FieldIndx, vs...))
}

// IndxGT applies the GT predicate on the "indx" field.
func IndxGT(v string) predicate.Race {
	return predicate.Race(sql.FieldGT(FieldIndx, v))
}

// IndxGTE applies the GTE predicate on the "indx" field.
func IndxGTE(v string) predicate.Race {
	return predicate.Race(sql.FieldGTE(FieldIndx, v))
}

// IndxLT applies the LT predicate on the "indx" field.
func IndxLT(v string) predicate.Race {
	return predicate.Race(sql.FieldLT(FieldIndx, v))
}

// IndxLTE applies the LTE predicate on the "indx" field.
func IndxLTE(v string) predicate.Race {
	return predicate.Race(sql.FieldLTE(FieldIndx, v))
}

// IndxContains applies the Contains predicate on the "indx" field.
func IndxContains(v string) predicate.Race {
	return predicate.Race(sql.FieldContains(FieldIndx, v))
}

// IndxHasPrefix applies the HasPrefix predicate on the "indx" field.
func IndxHasPrefix(v string) predicate.Race {
	return predicate.Race(sql.FieldHasPrefix(FieldIndx, v))
}

// IndxHasSuffix applies the HasSuffix predicate on the "indx" field.
func IndxHasSuffix(v string) predicate.Race {
	return predicate.Race(sql.FieldHasSuffix(FieldIndx, v))
}

// IndxEqualFold applies the EqualFold predicate on the "indx" field.
func IndxEqualFold(v string) predicate.Race {
	return predicate.Race(sql.FieldEqualFold(FieldIndx, v))
}

// IndxContainsFold applies the ContainsFold predicate on the "indx" field.
func IndxContainsFold(v string) predicate.Race {
	return predicate.Race(sql.FieldContainsFold(FieldIndx, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Race {
	return predicate.Race(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Race {
	return predicate.Race(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Race {
	return predicate.Race(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Race {
	return predicate.Race(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Race {
	return predicate.Race(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Race {
	return predicate.Race(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Race {
	return predicate.Race(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Race {
	return predicate.Race(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Race {
	return predicate.Race(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Race {
	return predicate.Race(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Race {
	return predicate.Race(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Race {
	return predicate.Race(sql.FieldContainsFold(FieldName, v))
}

// SpeedEQ applies the EQ predicate on the "speed" field.
func SpeedEQ(v int) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldSpeed, v))
}

// SpeedNEQ applies the NEQ predicate on the "speed" field.
func SpeedNEQ(v int) predicate.Race {
	return predicate.Race(sql.FieldNEQ(FieldSpeed, v))
}

// SpeedIn applies the In predicate on the "speed" field.
func SpeedIn(vs ...int) predicate.Race {
	return predicate.Race(sql.FieldIn(FieldSpeed, vs...))
}

// SpeedNotIn applies the NotIn predicate on the "speed" field.
func SpeedNotIn(vs ...int) predicate.Race {
	return predicate.Race(sql.FieldNotIn(FieldSpeed, vs...))
}

// SpeedGT applies the GT predicate on the "speed" field.
func SpeedGT(v int) predicate.Race {
	return predicate.Race(sql.FieldGT(FieldSpeed, v))
}

// SpeedGTE applies the GTE predicate on the "speed" field.
func SpeedGTE(v int) predicate.Race {
	return predicate.Race(sql.FieldGTE(FieldSpeed, v))
}

// SpeedLT applies the LT predicate on the "speed" field.
func SpeedLT(v int) predicate.Race {
	return predicate.Race(sql.FieldLT(FieldSpeed, v))
}

// SpeedLTE applies the LTE predicate on the "speed" field.
func SpeedLTE(v int) predicate.Race {
	return predicate.Race(sql.FieldLTE(FieldSpeed, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v Size) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v Size) predicate.Race {
	return predicate.Race(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...Size) predicate.Race {
	return predicate.Race(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...Size) predicate.Race {
	return predicate.Race(sql.FieldNotIn(FieldSize, vs...))
}

// SizeDescEQ applies the EQ predicate on the "size_desc" field.
func SizeDescEQ(v string) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldSizeDesc, v))
}

// SizeDescNEQ applies the NEQ predicate on the "size_desc" field.
func SizeDescNEQ(v string) predicate.Race {
	return predicate.Race(sql.FieldNEQ(FieldSizeDesc, v))
}

// SizeDescIn applies the In predicate on the "size_desc" field.
func SizeDescIn(vs ...string) predicate.Race {
	return predicate.Race(sql.FieldIn(FieldSizeDesc, vs...))
}

// SizeDescNotIn applies the NotIn predicate on the "size_desc" field.
func SizeDescNotIn(vs ...string) predicate.Race {
	return predicate.Race(sql.FieldNotIn(FieldSizeDesc, vs...))
}

// SizeDescGT applies the GT predicate on the "size_desc" field.
func SizeDescGT(v string) predicate.Race {
	return predicate.Race(sql.FieldGT(FieldSizeDesc, v))
}

// SizeDescGTE applies the GTE predicate on the "size_desc" field.
func SizeDescGTE(v string) predicate.Race {
	return predicate.Race(sql.FieldGTE(FieldSizeDesc, v))
}

// SizeDescLT applies the LT predicate on the "size_desc" field.
func SizeDescLT(v string) predicate.Race {
	return predicate.Race(sql.FieldLT(FieldSizeDesc, v))
}

// SizeDescLTE applies the LTE predicate on the "size_desc" field.
func SizeDescLTE(v string) predicate.Race {
	return predicate.Race(sql.FieldLTE(FieldSizeDesc, v))
}

// SizeDescContains applies the Contains predicate on the "size_desc" field.
func SizeDescContains(v string) predicate.Race {
	return predicate.Race(sql.FieldContains(FieldSizeDesc, v))
}

// SizeDescHasPrefix applies the HasPrefix predicate on the "size_desc" field.
func SizeDescHasPrefix(v string) predicate.Race {
	return predicate.Race(sql.FieldHasPrefix(FieldSizeDesc, v))
}

// SizeDescHasSuffix applies the HasSuffix predicate on the "size_desc" field.
func SizeDescHasSuffix(v string) predicate.Race {
	return predicate.Race(sql.FieldHasSuffix(FieldSizeDesc, v))
}

// SizeDescEqualFold applies the EqualFold predicate on the "size_desc" field.
func SizeDescEqualFold(v string) predicate.Race {
	return predicate.Race(sql.FieldEqualFold(FieldSizeDesc, v))
}

// SizeDescContainsFold applies the ContainsFold predicate on the "size_desc" field.
func SizeDescContainsFold(v string) predicate.Race {
	return predicate.Race(sql.FieldContainsFold(FieldSizeDesc, v))
}

// AlignmentDescEQ applies the EQ predicate on the "alignment_desc" field.
func AlignmentDescEQ(v string) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldAlignmentDesc, v))
}

// AlignmentDescNEQ applies the NEQ predicate on the "alignment_desc" field.
func AlignmentDescNEQ(v string) predicate.Race {
	return predicate.Race(sql.FieldNEQ(FieldAlignmentDesc, v))
}

// AlignmentDescIn applies the In predicate on the "alignment_desc" field.
func AlignmentDescIn(vs ...string) predicate.Race {
	return predicate.Race(sql.FieldIn(FieldAlignmentDesc, vs...))
}

// AlignmentDescNotIn applies the NotIn predicate on the "alignment_desc" field.
func AlignmentDescNotIn(vs ...string) predicate.Race {
	return predicate.Race(sql.FieldNotIn(FieldAlignmentDesc, vs...))
}

// AlignmentDescGT applies the GT predicate on the "alignment_desc" field.
func AlignmentDescGT(v string) predicate.Race {
	return predicate.Race(sql.FieldGT(FieldAlignmentDesc, v))
}

// AlignmentDescGTE applies the GTE predicate on the "alignment_desc" field.
func AlignmentDescGTE(v string) predicate.Race {
	return predicate.Race(sql.FieldGTE(FieldAlignmentDesc, v))
}

// AlignmentDescLT applies the LT predicate on the "alignment_desc" field.
func AlignmentDescLT(v string) predicate.Race {
	return predicate.Race(sql.FieldLT(FieldAlignmentDesc, v))
}

// AlignmentDescLTE applies the LTE predicate on the "alignment_desc" field.
func AlignmentDescLTE(v string) predicate.Race {
	return predicate.Race(sql.FieldLTE(FieldAlignmentDesc, v))
}

// AlignmentDescContains applies the Contains predicate on the "alignment_desc" field.
func AlignmentDescContains(v string) predicate.Race {
	return predicate.Race(sql.FieldContains(FieldAlignmentDesc, v))
}

// AlignmentDescHasPrefix applies the HasPrefix predicate on the "alignment_desc" field.
func AlignmentDescHasPrefix(v string) predicate.Race {
	return predicate.Race(sql.FieldHasPrefix(FieldAlignmentDesc, v))
}

// AlignmentDescHasSuffix applies the HasSuffix predicate on the "alignment_desc" field.
func AlignmentDescHasSuffix(v string) predicate.Race {
	return predicate.Race(sql.FieldHasSuffix(FieldAlignmentDesc, v))
}

// AlignmentDescEqualFold applies the EqualFold predicate on the "alignment_desc" field.
func AlignmentDescEqualFold(v string) predicate.Race {
	return predicate.Race(sql.FieldEqualFold(FieldAlignmentDesc, v))
}

// AlignmentDescContainsFold applies the ContainsFold predicate on the "alignment_desc" field.
func AlignmentDescContainsFold(v string) predicate.Race {
	return predicate.Race(sql.FieldContainsFold(FieldAlignmentDesc, v))
}

// AgeDescEQ applies the EQ predicate on the "age_desc" field.
func AgeDescEQ(v string) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldAgeDesc, v))
}

// AgeDescNEQ applies the NEQ predicate on the "age_desc" field.
func AgeDescNEQ(v string) predicate.Race {
	return predicate.Race(sql.FieldNEQ(FieldAgeDesc, v))
}

// AgeDescIn applies the In predicate on the "age_desc" field.
func AgeDescIn(vs ...string) predicate.Race {
	return predicate.Race(sql.FieldIn(FieldAgeDesc, vs...))
}

// AgeDescNotIn applies the NotIn predicate on the "age_desc" field.
func AgeDescNotIn(vs ...string) predicate.Race {
	return predicate.Race(sql.FieldNotIn(FieldAgeDesc, vs...))
}

// AgeDescGT applies the GT predicate on the "age_desc" field.
func AgeDescGT(v string) predicate.Race {
	return predicate.Race(sql.FieldGT(FieldAgeDesc, v))
}

// AgeDescGTE applies the GTE predicate on the "age_desc" field.
func AgeDescGTE(v string) predicate.Race {
	return predicate.Race(sql.FieldGTE(FieldAgeDesc, v))
}

// AgeDescLT applies the LT predicate on the "age_desc" field.
func AgeDescLT(v string) predicate.Race {
	return predicate.Race(sql.FieldLT(FieldAgeDesc, v))
}

// AgeDescLTE applies the LTE predicate on the "age_desc" field.
func AgeDescLTE(v string) predicate.Race {
	return predicate.Race(sql.FieldLTE(FieldAgeDesc, v))
}

// AgeDescContains applies the Contains predicate on the "age_desc" field.
func AgeDescContains(v string) predicate.Race {
	return predicate.Race(sql.FieldContains(FieldAgeDesc, v))
}

// AgeDescHasPrefix applies the HasPrefix predicate on the "age_desc" field.
func AgeDescHasPrefix(v string) predicate.Race {
	return predicate.Race(sql.FieldHasPrefix(FieldAgeDesc, v))
}

// AgeDescHasSuffix applies the HasSuffix predicate on the "age_desc" field.
func AgeDescHasSuffix(v string) predicate.Race {
	return predicate.Race(sql.FieldHasSuffix(FieldAgeDesc, v))
}

// AgeDescEqualFold applies the EqualFold predicate on the "age_desc" field.
func AgeDescEqualFold(v string) predicate.Race {
	return predicate.Race(sql.FieldEqualFold(FieldAgeDesc, v))
}

// AgeDescContainsFold applies the ContainsFold predicate on the "age_desc" field.
func AgeDescContainsFold(v string) predicate.Race {
	return predicate.Race(sql.FieldContainsFold(FieldAgeDesc, v))
}

// LanguageDescEQ applies the EQ predicate on the "language_desc" field.
func LanguageDescEQ(v string) predicate.Race {
	return predicate.Race(sql.FieldEQ(FieldLanguageDesc, v))
}

// LanguageDescNEQ applies the NEQ predicate on the "language_desc" field.
func LanguageDescNEQ(v string) predicate.Race {
	return predicate.Race(sql.FieldNEQ(FieldLanguageDesc, v))
}

// LanguageDescIn applies the In predicate on the "language_desc" field.
func LanguageDescIn(vs ...string) predicate.Race {
	return predicate.Race(sql.FieldIn(FieldLanguageDesc, vs...))
}

// LanguageDescNotIn applies the NotIn predicate on the "language_desc" field.
func LanguageDescNotIn(vs ...string) predicate.Race {
	return predicate.Race(sql.FieldNotIn(FieldLanguageDesc, vs...))
}

// LanguageDescGT applies the GT predicate on the "language_desc" field.
func LanguageDescGT(v string) predicate.Race {
	return predicate.Race(sql.FieldGT(FieldLanguageDesc, v))
}

// LanguageDescGTE applies the GTE predicate on the "language_desc" field.
func LanguageDescGTE(v string) predicate.Race {
	return predicate.Race(sql.FieldGTE(FieldLanguageDesc, v))
}

// LanguageDescLT applies the LT predicate on the "language_desc" field.
func LanguageDescLT(v string) predicate.Race {
	return predicate.Race(sql.FieldLT(FieldLanguageDesc, v))
}

// LanguageDescLTE applies the LTE predicate on the "language_desc" field.
func LanguageDescLTE(v string) predicate.Race {
	return predicate.Race(sql.FieldLTE(FieldLanguageDesc, v))
}

// LanguageDescContains applies the Contains predicate on the "language_desc" field.
func LanguageDescContains(v string) predicate.Race {
	return predicate.Race(sql.FieldContains(FieldLanguageDesc, v))
}

// LanguageDescHasPrefix applies the HasPrefix predicate on the "language_desc" field.
func LanguageDescHasPrefix(v string) predicate.Race {
	return predicate.Race(sql.FieldHasPrefix(FieldLanguageDesc, v))
}

// LanguageDescHasSuffix applies the HasSuffix predicate on the "language_desc" field.
func LanguageDescHasSuffix(v string) predicate.Race {
	return predicate.Race(sql.FieldHasSuffix(FieldLanguageDesc, v))
}

// LanguageDescEqualFold applies the EqualFold predicate on the "language_desc" field.
func LanguageDescEqualFold(v string) predicate.Race {
	return predicate.Race(sql.FieldEqualFold(FieldLanguageDesc, v))
}

// LanguageDescContainsFold applies the ContainsFold predicate on the "language_desc" field.
func LanguageDescContainsFold(v string) predicate.Race {
	return predicate.Race(sql.FieldContainsFold(FieldLanguageDesc, v))
}

// HasAbilityBonuses applies the HasEdge predicate on the "ability_bonuses" edge.
func HasAbilityBonuses() predicate.Race {
	return predicate.Race(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, AbilityBonusesTable, AbilityBonusesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAbilityBonusesWith applies the HasEdge predicate on the "ability_bonuses" edge with a given conditions (other predicates).
func HasAbilityBonusesWith(preds ...predicate.AbilityBonus) predicate.Race {
	return predicate.Race(func(s *sql.Selector) {
		step := newAbilityBonusesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguages applies the HasEdge predicate on the "languages" edge.
func HasLanguages() predicate.Race {
	return predicate.Race(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, LanguagesTable, LanguagesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguagesWith applies the HasEdge predicate on the "languages" edge with a given conditions (other predicates).
func HasLanguagesWith(preds ...predicate.Language) predicate.Race {
	return predicate.Race(func(s *sql.Selector) {
		step := newLanguagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProficiencies applies the HasEdge predicate on the "proficiencies" edge.
func HasProficiencies() predicate.Race {
	return predicate.Race(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ProficienciesTable, ProficienciesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProficienciesWith applies the HasEdge predicate on the "proficiencies" edge with a given conditions (other predicates).
func HasProficienciesWith(preds ...predicate.Proficiency) predicate.Race {
	return predicate.Race(func(s *sql.Selector) {
		step := newProficienciesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Race) predicate.Race {
	return predicate.Race(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Race) predicate.Race {
	return predicate.Race(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Race) predicate.Race {
	return predicate.Race(sql.NotPredicates(p))
}
