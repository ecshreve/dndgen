// Code generated by ent, DO NOT EDIT.

package coin

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the coin type in the database.
	Label = "coin"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldGoldConversionRate holds the string denoting the gold_conversion_rate field in the database.
	FieldGoldConversionRate = "gold_conversion_rate"
	// EdgeCosts holds the string denoting the costs edge name in mutations.
	EdgeCosts = "costs"
	// Table holds the table name of the coin in the database.
	Table = "coins"
	// CostsTable is the table that holds the costs relation/edge.
	CostsTable = "costs"
	// CostsInverseTable is the table name for the Cost entity.
	// It exists in this package in order to avoid circular dependency with the "cost" package.
	CostsInverseTable = "costs"
	// CostsColumn is the table column denoting the costs relation/edge.
	CostsColumn = "cost_coin"
)

// Columns holds all SQL columns for coin fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldDesc,
	FieldGoldConversionRate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Coin queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByGoldConversionRate orders the results by the gold_conversion_rate field.
func ByGoldConversionRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoldConversionRate, opts...).ToFunc()
}

// ByCostsCount orders the results by costs count.
func ByCostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCostsStep(), opts...)
	}
}

// ByCosts orders the results by costs terms.
func ByCosts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CostsTable, CostsColumn),
	)
}
