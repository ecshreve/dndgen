// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/equipmententry"
)

// EquipmentEntry is the model entity for the EquipmentEntry schema.
type EquipmentEntry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmentEntryQuery when eager-loading is set.
	Edges                     EquipmentEntryEdges `json:"-"`
	equipment_entry_equipment *int
	selectValues              sql.SelectValues
}

// EquipmentEntryEdges holds the relations/edges for other nodes in the graph.
type EquipmentEntryEdges struct {
	// Class holds the value of the class edge.
	Class []*Class `json:"class,omitempty"`
	// Equipment holds the value of the equipment edge.
	Equipment *Equipment `json:"equipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedClass map[string][]*Class
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading.
func (e EquipmentEntryEdges) ClassOrErr() ([]*Class, error) {
	if e.loadedTypes[0] {
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEntryEdges) EquipmentOrErr() (*Equipment, error) {
	if e.Equipment != nil {
		return e.Equipment, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: equipment.Label}
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EquipmentEntry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case equipmententry.FieldID, equipmententry.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case equipmententry.ForeignKeys[0]: // equipment_entry_equipment
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EquipmentEntry fields.
func (ee *EquipmentEntry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case equipmententry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ee.ID = int(value.Int64)
		case equipmententry.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				ee.Quantity = int(value.Int64)
			}
		case equipmententry.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field equipment_entry_equipment", value)
			} else if value.Valid {
				ee.equipment_entry_equipment = new(int)
				*ee.equipment_entry_equipment = int(value.Int64)
			}
		default:
			ee.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EquipmentEntry.
// This includes values selected through modifiers, order, etc.
func (ee *EquipmentEntry) Value(name string) (ent.Value, error) {
	return ee.selectValues.Get(name)
}

// QueryClass queries the "class" edge of the EquipmentEntry entity.
func (ee *EquipmentEntry) QueryClass() *ClassQuery {
	return NewEquipmentEntryClient(ee.config).QueryClass(ee)
}

// QueryEquipment queries the "equipment" edge of the EquipmentEntry entity.
func (ee *EquipmentEntry) QueryEquipment() *EquipmentQuery {
	return NewEquipmentEntryClient(ee.config).QueryEquipment(ee)
}

// Update returns a builder for updating this EquipmentEntry.
// Note that you need to call EquipmentEntry.Unwrap() before calling this method if this EquipmentEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (ee *EquipmentEntry) Update() *EquipmentEntryUpdateOne {
	return NewEquipmentEntryClient(ee.config).UpdateOne(ee)
}

// Unwrap unwraps the EquipmentEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ee *EquipmentEntry) Unwrap() *EquipmentEntry {
	_tx, ok := ee.config.driver.(*txDriver)
	if !ok {
		panic("ent: EquipmentEntry is not a transactional entity")
	}
	ee.config.driver = _tx.drv
	return ee
}

// String implements the fmt.Stringer.
func (ee *EquipmentEntry) String() string {
	var builder strings.Builder
	builder.WriteString("EquipmentEntry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ee.ID))
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", ee.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (ee *EquipmentEntry) MarshalJSON() ([]byte, error) {
	type Alias EquipmentEntry
	return json.Marshal(&struct {
		*Alias
		EquipmentEntryEdges
	}{
		Alias:               (*Alias)(ee),
		EquipmentEntryEdges: ee.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (ee *EquipmentEntry) UnmarshalJSON(data []byte) error {
	type Alias EquipmentEntry
	aux := &struct {
		*Alias
		EquipmentEntryEdges
	}{
		Alias: (*Alias)(ee),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	ee.Edges = aux.EquipmentEntryEdges
	return nil
}

func (eec *EquipmentEntryCreate) SetEquipmentEntry(input *EquipmentEntry) *EquipmentEntryCreate {
	eec.SetQuantity(input.Quantity)
	return eec
}

// NamedClass returns the Class named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ee *EquipmentEntry) NamedClass(name string) ([]*Class, error) {
	if ee.Edges.namedClass == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ee.Edges.namedClass[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ee *EquipmentEntry) appendNamedClass(name string, edges ...*Class) {
	if ee.Edges.namedClass == nil {
		ee.Edges.namedClass = make(map[string][]*Class)
	}
	if len(edges) == 0 {
		ee.Edges.namedClass[name] = []*Class{}
	} else {
		ee.Edges.namedClass[name] = append(ee.Edges.namedClass[name], edges...)
	}
}

// EquipmentEntries is a parsable slice of EquipmentEntry.
type EquipmentEntries []*EquipmentEntry
