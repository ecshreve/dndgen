// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/coin"
	"github.com/ecshreve/dndgen/ent/cost"
	"github.com/ecshreve/dndgen/ent/equipment"
)

// CostCreate is the builder for creating a Cost entity.
type CostCreate struct {
	config
	mutation *CostMutation
	hooks    []Hook
}

// SetQuantity sets the "quantity" field.
func (cc *CostCreate) SetQuantity(i int) *CostCreate {
	cc.mutation.SetQuantity(i)
	return cc
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (cc *CostCreate) SetNillableQuantity(i *int) *CostCreate {
	if i != nil {
		cc.SetQuantity(*i)
	}
	return cc
}

// SetCoinID sets the "coin" edge to the Coin entity by ID.
func (cc *CostCreate) SetCoinID(id int) *CostCreate {
	cc.mutation.SetCoinID(id)
	return cc
}

// SetCoin sets the "coin" edge to the Coin entity.
func (cc *CostCreate) SetCoin(c *Coin) *CostCreate {
	return cc.SetCoinID(c.ID)
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by ID.
func (cc *CostCreate) SetEquipmentID(id int) *CostCreate {
	cc.mutation.SetEquipmentID(id)
	return cc
}

// SetNillableEquipmentID sets the "equipment" edge to the Equipment entity by ID if the given value is not nil.
func (cc *CostCreate) SetNillableEquipmentID(id *int) *CostCreate {
	if id != nil {
		cc = cc.SetEquipmentID(*id)
	}
	return cc
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (cc *CostCreate) SetEquipment(e *Equipment) *CostCreate {
	return cc.SetEquipmentID(e.ID)
}

// Mutation returns the CostMutation object of the builder.
func (cc *CostCreate) Mutation() *CostMutation {
	return cc.mutation
}

// Save creates the Cost in the database.
func (cc *CostCreate) Save(ctx context.Context) (*Cost, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CostCreate) SaveX(ctx context.Context) *Cost {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CostCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CostCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CostCreate) defaults() {
	if _, ok := cc.mutation.Quantity(); !ok {
		v := cost.DefaultQuantity
		cc.mutation.SetQuantity(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CostCreate) check() error {
	if _, ok := cc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "Cost.quantity"`)}
	}
	if len(cc.mutation.CoinIDs()) == 0 {
		return &ValidationError{Name: "coin", err: errors.New(`ent: missing required edge "Cost.coin"`)}
	}
	return nil
}

func (cc *CostCreate) sqlSave(ctx context.Context) (*Cost, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CostCreate) createSpec() (*Cost, *sqlgraph.CreateSpec) {
	var (
		_node = &Cost{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(cost.Table, sqlgraph.NewFieldSpec(cost.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Quantity(); ok {
		_spec.SetField(cost.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if nodes := cc.mutation.CoinIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cost.CoinTable,
			Columns: []string{cost.CoinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.cost_coin = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.EquipmentTable,
			Columns: []string{cost.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.equipment_cost = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CostCreateBulk is the builder for creating many Cost entities in bulk.
type CostCreateBulk struct {
	config
	err      error
	builders []*CostCreate
}

// Save creates the Cost entities in the database.
func (ccb *CostCreateBulk) Save(ctx context.Context) ([]*Cost, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cost, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CostCreateBulk) SaveX(ctx context.Context) []*Cost {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CostCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CostCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
