// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/magicitem"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// MagicItemUpdate is the builder for updating MagicItem entities.
type MagicItemUpdate struct {
	config
	hooks    []Hook
	mutation *MagicItemMutation
}

// Where appends a list predicates to the MagicItemUpdate builder.
func (miu *MagicItemUpdate) Where(ps ...predicate.MagicItem) *MagicItemUpdate {
	miu.mutation.Where(ps...)
	return miu
}

// SetRarity sets the "rarity" field.
func (miu *MagicItemUpdate) SetRarity(s string) *MagicItemUpdate {
	miu.mutation.SetRarity(s)
	return miu
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (miu *MagicItemUpdate) AddEquipmentIDs(ids ...int) *MagicItemUpdate {
	miu.mutation.AddEquipmentIDs(ids...)
	return miu
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (miu *MagicItemUpdate) AddEquipment(e ...*Equipment) *MagicItemUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return miu.AddEquipmentIDs(ids...)
}

// Mutation returns the MagicItemMutation object of the builder.
func (miu *MagicItemUpdate) Mutation() *MagicItemMutation {
	return miu.mutation
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (miu *MagicItemUpdate) ClearEquipment() *MagicItemUpdate {
	miu.mutation.ClearEquipment()
	return miu
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (miu *MagicItemUpdate) RemoveEquipmentIDs(ids ...int) *MagicItemUpdate {
	miu.mutation.RemoveEquipmentIDs(ids...)
	return miu
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (miu *MagicItemUpdate) RemoveEquipment(e ...*Equipment) *MagicItemUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return miu.RemoveEquipmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (miu *MagicItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MagicItemMutation](ctx, miu.sqlSave, miu.mutation, miu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miu *MagicItemUpdate) SaveX(ctx context.Context) int {
	affected, err := miu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (miu *MagicItemUpdate) Exec(ctx context.Context) error {
	_, err := miu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miu *MagicItemUpdate) ExecX(ctx context.Context) {
	if err := miu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (miu *MagicItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(magicitem.Table, magicitem.Columns, sqlgraph.NewFieldSpec(magicitem.FieldID, field.TypeInt))
	if ps := miu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miu.mutation.Rarity(); ok {
		_spec.SetField(magicitem.FieldRarity, field.TypeString, value)
	}
	if miu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   magicitem.EquipmentTable,
			Columns: magicitem.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !miu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   magicitem.EquipmentTable,
			Columns: magicitem.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   magicitem.EquipmentTable,
			Columns: magicitem.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, miu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{magicitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	miu.mutation.done = true
	return n, nil
}

// MagicItemUpdateOne is the builder for updating a single MagicItem entity.
type MagicItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MagicItemMutation
}

// SetRarity sets the "rarity" field.
func (miuo *MagicItemUpdateOne) SetRarity(s string) *MagicItemUpdateOne {
	miuo.mutation.SetRarity(s)
	return miuo
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (miuo *MagicItemUpdateOne) AddEquipmentIDs(ids ...int) *MagicItemUpdateOne {
	miuo.mutation.AddEquipmentIDs(ids...)
	return miuo
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (miuo *MagicItemUpdateOne) AddEquipment(e ...*Equipment) *MagicItemUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return miuo.AddEquipmentIDs(ids...)
}

// Mutation returns the MagicItemMutation object of the builder.
func (miuo *MagicItemUpdateOne) Mutation() *MagicItemMutation {
	return miuo.mutation
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (miuo *MagicItemUpdateOne) ClearEquipment() *MagicItemUpdateOne {
	miuo.mutation.ClearEquipment()
	return miuo
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (miuo *MagicItemUpdateOne) RemoveEquipmentIDs(ids ...int) *MagicItemUpdateOne {
	miuo.mutation.RemoveEquipmentIDs(ids...)
	return miuo
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (miuo *MagicItemUpdateOne) RemoveEquipment(e ...*Equipment) *MagicItemUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return miuo.RemoveEquipmentIDs(ids...)
}

// Where appends a list predicates to the MagicItemUpdate builder.
func (miuo *MagicItemUpdateOne) Where(ps ...predicate.MagicItem) *MagicItemUpdateOne {
	miuo.mutation.Where(ps...)
	return miuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (miuo *MagicItemUpdateOne) Select(field string, fields ...string) *MagicItemUpdateOne {
	miuo.fields = append([]string{field}, fields...)
	return miuo
}

// Save executes the query and returns the updated MagicItem entity.
func (miuo *MagicItemUpdateOne) Save(ctx context.Context) (*MagicItem, error) {
	return withHooks[*MagicItem, MagicItemMutation](ctx, miuo.sqlSave, miuo.mutation, miuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miuo *MagicItemUpdateOne) SaveX(ctx context.Context) *MagicItem {
	node, err := miuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (miuo *MagicItemUpdateOne) Exec(ctx context.Context) error {
	_, err := miuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miuo *MagicItemUpdateOne) ExecX(ctx context.Context) {
	if err := miuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (miuo *MagicItemUpdateOne) sqlSave(ctx context.Context) (_node *MagicItem, err error) {
	_spec := sqlgraph.NewUpdateSpec(magicitem.Table, magicitem.Columns, sqlgraph.NewFieldSpec(magicitem.FieldID, field.TypeInt))
	id, ok := miuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MagicItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := miuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, magicitem.FieldID)
		for _, f := range fields {
			if !magicitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != magicitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := miuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miuo.mutation.Rarity(); ok {
		_spec.SetField(magicitem.FieldRarity, field.TypeString, value)
	}
	if miuo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   magicitem.EquipmentTable,
			Columns: magicitem.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !miuo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   magicitem.EquipmentTable,
			Columns: magicitem.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   magicitem.EquipmentTable,
			Columns: magicitem.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MagicItem{config: miuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, miuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{magicitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	miuo.mutation.done = true
	return _node, nil
}
