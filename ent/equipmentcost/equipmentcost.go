// Code generated by ent, DO NOT EDIT.

package equipmentcost

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the equipmentcost type in the database.
	Label = "equipment_cost"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEquipmentID holds the string denoting the equipment_id field in the database.
	FieldEquipmentID = "equipment_id"
	// FieldCoinID holds the string denoting the coin_id field in the database.
	FieldCoinID = "coin_id"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldGpValue holds the string denoting the gp_value field in the database.
	FieldGpValue = "gp_value"
	// EdgeEquipment holds the string denoting the equipment edge name in mutations.
	EdgeEquipment = "equipment"
	// EdgeCoin holds the string denoting the coin edge name in mutations.
	EdgeCoin = "coin"
	// Table holds the table name of the equipmentcost in the database.
	Table = "equipment_costs"
	// EquipmentTable is the table that holds the equipment relation/edge.
	EquipmentTable = "equipment_costs"
	// EquipmentInverseTable is the table name for the Equipment entity.
	// It exists in this package in order to avoid circular dependency with the "equipment" package.
	EquipmentInverseTable = "equipment"
	// EquipmentColumn is the table column denoting the equipment relation/edge.
	EquipmentColumn = "equipment_id"
	// CoinTable is the table that holds the coin relation/edge.
	CoinTable = "equipment_costs"
	// CoinInverseTable is the table name for the Coin entity.
	// It exists in this package in order to avoid circular dependency with the "coin" package.
	CoinInverseTable = "coins"
	// CoinColumn is the table column denoting the coin relation/edge.
	CoinColumn = "coin_id"
)

// Columns holds all SQL columns for equipmentcost fields.
var Columns = []string{
	FieldID,
	FieldEquipmentID,
	FieldCoinID,
	FieldQuantity,
	FieldGpValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the EquipmentCost queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEquipmentID orders the results by the equipment_id field.
func ByEquipmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEquipmentID, opts...).ToFunc()
}

// ByCoinID orders the results by the coin_id field.
func ByCoinID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinID, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByGpValue orders the results by the gp_value field.
func ByGpValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGpValue, opts...).ToFunc()
}

// ByEquipmentField orders the results by equipment field.
func ByEquipmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEquipmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByCoinField orders the results by coin field.
func ByCoinField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCoinStep(), sql.OrderByField(field, opts...))
	}
}
func newEquipmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EquipmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, EquipmentTable, EquipmentColumn),
	)
}
func newCoinStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CoinInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CoinTable, CoinColumn),
	)
}
