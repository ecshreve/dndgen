// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/startingequipment"
)

// StartingEquipmentUpdate is the builder for updating StartingEquipment entities.
type StartingEquipmentUpdate struct {
	config
	hooks    []Hook
	mutation *StartingEquipmentMutation
}

// Where appends a list predicates to the StartingEquipmentUpdate builder.
func (seu *StartingEquipmentUpdate) Where(ps ...predicate.StartingEquipment) *StartingEquipmentUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetClassID sets the "class_id" field.
func (seu *StartingEquipmentUpdate) SetClassID(i int) *StartingEquipmentUpdate {
	seu.mutation.SetClassID(i)
	return seu
}

// SetEquipmentID sets the "equipment_id" field.
func (seu *StartingEquipmentUpdate) SetEquipmentID(i int) *StartingEquipmentUpdate {
	seu.mutation.SetEquipmentID(i)
	return seu
}

// SetQuantity sets the "quantity" field.
func (seu *StartingEquipmentUpdate) SetQuantity(i int) *StartingEquipmentUpdate {
	seu.mutation.ResetQuantity()
	seu.mutation.SetQuantity(i)
	return seu
}

// AddQuantity adds i to the "quantity" field.
func (seu *StartingEquipmentUpdate) AddQuantity(i int) *StartingEquipmentUpdate {
	seu.mutation.AddQuantity(i)
	return seu
}

// SetClass sets the "class" edge to the Class entity.
func (seu *StartingEquipmentUpdate) SetClass(c *Class) *StartingEquipmentUpdate {
	return seu.SetClassID(c.ID)
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (seu *StartingEquipmentUpdate) SetEquipment(e *Equipment) *StartingEquipmentUpdate {
	return seu.SetEquipmentID(e.ID)
}

// Mutation returns the StartingEquipmentMutation object of the builder.
func (seu *StartingEquipmentUpdate) Mutation() *StartingEquipmentMutation {
	return seu.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (seu *StartingEquipmentUpdate) ClearClass() *StartingEquipmentUpdate {
	seu.mutation.ClearClass()
	return seu
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (seu *StartingEquipmentUpdate) ClearEquipment() *StartingEquipmentUpdate {
	seu.mutation.ClearEquipment()
	return seu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *StartingEquipmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, seu.sqlSave, seu.mutation, seu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seu *StartingEquipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *StartingEquipmentUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *StartingEquipmentUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seu *StartingEquipmentUpdate) check() error {
	if _, ok := seu.mutation.ClassID(); seu.mutation.ClassCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StartingEquipment.class"`)
	}
	if _, ok := seu.mutation.EquipmentID(); seu.mutation.EquipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StartingEquipment.equipment"`)
	}
	return nil
}

func (seu *StartingEquipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := seu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(startingequipment.Table, startingequipment.Columns, sqlgraph.NewFieldSpec(startingequipment.FieldClassID, field.TypeInt), sqlgraph.NewFieldSpec(startingequipment.FieldEquipmentID, field.TypeInt))
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.Quantity(); ok {
		_spec.SetField(startingequipment.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := seu.mutation.AddedQuantity(); ok {
		_spec.AddField(startingequipment.FieldQuantity, field.TypeInt, value)
	}
	if seu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   startingequipment.ClassTable,
			Columns: []string{startingequipment.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   startingequipment.ClassTable,
			Columns: []string{startingequipment.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   startingequipment.EquipmentTable,
			Columns: []string{startingequipment.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   startingequipment.EquipmentTable,
			Columns: []string{startingequipment.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{startingequipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seu.mutation.done = true
	return n, nil
}

// StartingEquipmentUpdateOne is the builder for updating a single StartingEquipment entity.
type StartingEquipmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StartingEquipmentMutation
}

// SetClassID sets the "class_id" field.
func (seuo *StartingEquipmentUpdateOne) SetClassID(i int) *StartingEquipmentUpdateOne {
	seuo.mutation.SetClassID(i)
	return seuo
}

// SetEquipmentID sets the "equipment_id" field.
func (seuo *StartingEquipmentUpdateOne) SetEquipmentID(i int) *StartingEquipmentUpdateOne {
	seuo.mutation.SetEquipmentID(i)
	return seuo
}

// SetQuantity sets the "quantity" field.
func (seuo *StartingEquipmentUpdateOne) SetQuantity(i int) *StartingEquipmentUpdateOne {
	seuo.mutation.ResetQuantity()
	seuo.mutation.SetQuantity(i)
	return seuo
}

// AddQuantity adds i to the "quantity" field.
func (seuo *StartingEquipmentUpdateOne) AddQuantity(i int) *StartingEquipmentUpdateOne {
	seuo.mutation.AddQuantity(i)
	return seuo
}

// SetClass sets the "class" edge to the Class entity.
func (seuo *StartingEquipmentUpdateOne) SetClass(c *Class) *StartingEquipmentUpdateOne {
	return seuo.SetClassID(c.ID)
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (seuo *StartingEquipmentUpdateOne) SetEquipment(e *Equipment) *StartingEquipmentUpdateOne {
	return seuo.SetEquipmentID(e.ID)
}

// Mutation returns the StartingEquipmentMutation object of the builder.
func (seuo *StartingEquipmentUpdateOne) Mutation() *StartingEquipmentMutation {
	return seuo.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (seuo *StartingEquipmentUpdateOne) ClearClass() *StartingEquipmentUpdateOne {
	seuo.mutation.ClearClass()
	return seuo
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (seuo *StartingEquipmentUpdateOne) ClearEquipment() *StartingEquipmentUpdateOne {
	seuo.mutation.ClearEquipment()
	return seuo
}

// Where appends a list predicates to the StartingEquipmentUpdate builder.
func (seuo *StartingEquipmentUpdateOne) Where(ps ...predicate.StartingEquipment) *StartingEquipmentUpdateOne {
	seuo.mutation.Where(ps...)
	return seuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *StartingEquipmentUpdateOne) Select(field string, fields ...string) *StartingEquipmentUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated StartingEquipment entity.
func (seuo *StartingEquipmentUpdateOne) Save(ctx context.Context) (*StartingEquipment, error) {
	return withHooks(ctx, seuo.sqlSave, seuo.mutation, seuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *StartingEquipmentUpdateOne) SaveX(ctx context.Context) *StartingEquipment {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *StartingEquipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *StartingEquipmentUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seuo *StartingEquipmentUpdateOne) check() error {
	if _, ok := seuo.mutation.ClassID(); seuo.mutation.ClassCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StartingEquipment.class"`)
	}
	if _, ok := seuo.mutation.EquipmentID(); seuo.mutation.EquipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StartingEquipment.equipment"`)
	}
	return nil
}

func (seuo *StartingEquipmentUpdateOne) sqlSave(ctx context.Context) (_node *StartingEquipment, err error) {
	if err := seuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(startingequipment.Table, startingequipment.Columns, sqlgraph.NewFieldSpec(startingequipment.FieldClassID, field.TypeInt), sqlgraph.NewFieldSpec(startingequipment.FieldEquipmentID, field.TypeInt))
	if id, ok := seuo.mutation.ClassID(); !ok {
		return nil, &ValidationError{Name: "class_id", err: errors.New(`ent: missing "StartingEquipment.class_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := seuo.mutation.EquipmentID(); !ok {
		return nil, &ValidationError{Name: "equipment_id", err: errors.New(`ent: missing "StartingEquipment.equipment_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !startingequipment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.Quantity(); ok {
		_spec.SetField(startingequipment.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := seuo.mutation.AddedQuantity(); ok {
		_spec.AddField(startingequipment.FieldQuantity, field.TypeInt, value)
	}
	if seuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   startingequipment.ClassTable,
			Columns: []string{startingequipment.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   startingequipment.ClassTable,
			Columns: []string{startingequipment.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seuo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   startingequipment.EquipmentTable,
			Columns: []string{startingequipment.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   startingequipment.EquipmentTable,
			Columns: []string{startingequipment.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StartingEquipment{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{startingequipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seuo.mutation.done = true
	return _node, nil
}
