// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/coin"
	"github.com/ecshreve/dndgen/ent/cost"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// CoinUpdate is the builder for updating Coin entities.
type CoinUpdate struct {
	config
	hooks    []Hook
	mutation *CoinMutation
}

// Where appends a list predicates to the CoinUpdate builder.
func (cu *CoinUpdate) Where(ps ...predicate.Coin) *CoinUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetIndx sets the "indx" field.
func (cu *CoinUpdate) SetIndx(s string) *CoinUpdate {
	cu.mutation.SetIndx(s)
	return cu
}

// SetNillableIndx sets the "indx" field if the given value is not nil.
func (cu *CoinUpdate) SetNillableIndx(s *string) *CoinUpdate {
	if s != nil {
		cu.SetIndx(*s)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *CoinUpdate) SetName(s string) *CoinUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CoinUpdate) SetNillableName(s *string) *CoinUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetDesc sets the "desc" field.
func (cu *CoinUpdate) SetDesc(s []string) *CoinUpdate {
	cu.mutation.SetDesc(s)
	return cu
}

// AppendDesc appends s to the "desc" field.
func (cu *CoinUpdate) AppendDesc(s []string) *CoinUpdate {
	cu.mutation.AppendDesc(s)
	return cu
}

// ClearDesc clears the value of the "desc" field.
func (cu *CoinUpdate) ClearDesc() *CoinUpdate {
	cu.mutation.ClearDesc()
	return cu
}

// SetGoldConversionRate sets the "gold_conversion_rate" field.
func (cu *CoinUpdate) SetGoldConversionRate(f float64) *CoinUpdate {
	cu.mutation.ResetGoldConversionRate()
	cu.mutation.SetGoldConversionRate(f)
	return cu
}

// SetNillableGoldConversionRate sets the "gold_conversion_rate" field if the given value is not nil.
func (cu *CoinUpdate) SetNillableGoldConversionRate(f *float64) *CoinUpdate {
	if f != nil {
		cu.SetGoldConversionRate(*f)
	}
	return cu
}

// AddGoldConversionRate adds f to the "gold_conversion_rate" field.
func (cu *CoinUpdate) AddGoldConversionRate(f float64) *CoinUpdate {
	cu.mutation.AddGoldConversionRate(f)
	return cu
}

// AddCostIDs adds the "costs" edge to the Cost entity by IDs.
func (cu *CoinUpdate) AddCostIDs(ids ...int) *CoinUpdate {
	cu.mutation.AddCostIDs(ids...)
	return cu
}

// AddCosts adds the "costs" edges to the Cost entity.
func (cu *CoinUpdate) AddCosts(c ...*Cost) *CoinUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCostIDs(ids...)
}

// Mutation returns the CoinMutation object of the builder.
func (cu *CoinUpdate) Mutation() *CoinMutation {
	return cu.mutation
}

// ClearCosts clears all "costs" edges to the Cost entity.
func (cu *CoinUpdate) ClearCosts() *CoinUpdate {
	cu.mutation.ClearCosts()
	return cu
}

// RemoveCostIDs removes the "costs" edge to Cost entities by IDs.
func (cu *CoinUpdate) RemoveCostIDs(ids ...int) *CoinUpdate {
	cu.mutation.RemoveCostIDs(ids...)
	return cu
}

// RemoveCosts removes "costs" edges to Cost entities.
func (cu *CoinUpdate) RemoveCosts(c ...*Cost) *CoinUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CoinUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CoinUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CoinUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CoinUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CoinUpdate) check() error {
	if v, ok := cu.mutation.Indx(); ok {
		if err := coin.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Coin.indx": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Name(); ok {
		if err := coin.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Coin.name": %w`, err)}
		}
	}
	return nil
}

func (cu *CoinUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(coin.Table, coin.Columns, sqlgraph.NewFieldSpec(coin.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Indx(); ok {
		_spec.SetField(coin.FieldIndx, field.TypeString, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(coin.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Desc(); ok {
		_spec.SetField(coin.FieldDesc, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedDesc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, coin.FieldDesc, value)
		})
	}
	if cu.mutation.DescCleared() {
		_spec.ClearField(coin.FieldDesc, field.TypeJSON)
	}
	if value, ok := cu.mutation.GoldConversionRate(); ok {
		_spec.SetField(coin.FieldGoldConversionRate, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedGoldConversionRate(); ok {
		_spec.AddField(coin.FieldGoldConversionRate, field.TypeFloat64, value)
	}
	if cu.mutation.CostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   coin.CostsTable,
			Columns: []string{coin.CostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCostsIDs(); len(nodes) > 0 && !cu.mutation.CostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   coin.CostsTable,
			Columns: []string{coin.CostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   coin.CostsTable,
			Columns: []string{coin.CostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CoinUpdateOne is the builder for updating a single Coin entity.
type CoinUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CoinMutation
}

// SetIndx sets the "indx" field.
func (cuo *CoinUpdateOne) SetIndx(s string) *CoinUpdateOne {
	cuo.mutation.SetIndx(s)
	return cuo
}

// SetNillableIndx sets the "indx" field if the given value is not nil.
func (cuo *CoinUpdateOne) SetNillableIndx(s *string) *CoinUpdateOne {
	if s != nil {
		cuo.SetIndx(*s)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *CoinUpdateOne) SetName(s string) *CoinUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CoinUpdateOne) SetNillableName(s *string) *CoinUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetDesc sets the "desc" field.
func (cuo *CoinUpdateOne) SetDesc(s []string) *CoinUpdateOne {
	cuo.mutation.SetDesc(s)
	return cuo
}

// AppendDesc appends s to the "desc" field.
func (cuo *CoinUpdateOne) AppendDesc(s []string) *CoinUpdateOne {
	cuo.mutation.AppendDesc(s)
	return cuo
}

// ClearDesc clears the value of the "desc" field.
func (cuo *CoinUpdateOne) ClearDesc() *CoinUpdateOne {
	cuo.mutation.ClearDesc()
	return cuo
}

// SetGoldConversionRate sets the "gold_conversion_rate" field.
func (cuo *CoinUpdateOne) SetGoldConversionRate(f float64) *CoinUpdateOne {
	cuo.mutation.ResetGoldConversionRate()
	cuo.mutation.SetGoldConversionRate(f)
	return cuo
}

// SetNillableGoldConversionRate sets the "gold_conversion_rate" field if the given value is not nil.
func (cuo *CoinUpdateOne) SetNillableGoldConversionRate(f *float64) *CoinUpdateOne {
	if f != nil {
		cuo.SetGoldConversionRate(*f)
	}
	return cuo
}

// AddGoldConversionRate adds f to the "gold_conversion_rate" field.
func (cuo *CoinUpdateOne) AddGoldConversionRate(f float64) *CoinUpdateOne {
	cuo.mutation.AddGoldConversionRate(f)
	return cuo
}

// AddCostIDs adds the "costs" edge to the Cost entity by IDs.
func (cuo *CoinUpdateOne) AddCostIDs(ids ...int) *CoinUpdateOne {
	cuo.mutation.AddCostIDs(ids...)
	return cuo
}

// AddCosts adds the "costs" edges to the Cost entity.
func (cuo *CoinUpdateOne) AddCosts(c ...*Cost) *CoinUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCostIDs(ids...)
}

// Mutation returns the CoinMutation object of the builder.
func (cuo *CoinUpdateOne) Mutation() *CoinMutation {
	return cuo.mutation
}

// ClearCosts clears all "costs" edges to the Cost entity.
func (cuo *CoinUpdateOne) ClearCosts() *CoinUpdateOne {
	cuo.mutation.ClearCosts()
	return cuo
}

// RemoveCostIDs removes the "costs" edge to Cost entities by IDs.
func (cuo *CoinUpdateOne) RemoveCostIDs(ids ...int) *CoinUpdateOne {
	cuo.mutation.RemoveCostIDs(ids...)
	return cuo
}

// RemoveCosts removes "costs" edges to Cost entities.
func (cuo *CoinUpdateOne) RemoveCosts(c ...*Cost) *CoinUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCostIDs(ids...)
}

// Where appends a list predicates to the CoinUpdate builder.
func (cuo *CoinUpdateOne) Where(ps ...predicate.Coin) *CoinUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CoinUpdateOne) Select(field string, fields ...string) *CoinUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Coin entity.
func (cuo *CoinUpdateOne) Save(ctx context.Context) (*Coin, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CoinUpdateOne) SaveX(ctx context.Context) *Coin {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CoinUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CoinUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CoinUpdateOne) check() error {
	if v, ok := cuo.mutation.Indx(); ok {
		if err := coin.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Coin.indx": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Name(); ok {
		if err := coin.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Coin.name": %w`, err)}
		}
	}
	return nil
}

func (cuo *CoinUpdateOne) sqlSave(ctx context.Context) (_node *Coin, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(coin.Table, coin.Columns, sqlgraph.NewFieldSpec(coin.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Coin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coin.FieldID)
		for _, f := range fields {
			if !coin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Indx(); ok {
		_spec.SetField(coin.FieldIndx, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(coin.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Desc(); ok {
		_spec.SetField(coin.FieldDesc, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedDesc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, coin.FieldDesc, value)
		})
	}
	if cuo.mutation.DescCleared() {
		_spec.ClearField(coin.FieldDesc, field.TypeJSON)
	}
	if value, ok := cuo.mutation.GoldConversionRate(); ok {
		_spec.SetField(coin.FieldGoldConversionRate, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedGoldConversionRate(); ok {
		_spec.AddField(coin.FieldGoldConversionRate, field.TypeFloat64, value)
	}
	if cuo.mutation.CostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   coin.CostsTable,
			Columns: []string{coin.CostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCostsIDs(); len(nodes) > 0 && !cuo.mutation.CostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   coin.CostsTable,
			Columns: []string{coin.CostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   coin.CostsTable,
			Columns: []string{coin.CostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Coin{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
