// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/feat"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// FeatUpdate is the builder for updating Feat entities.
type FeatUpdate struct {
	config
	hooks    []Hook
	mutation *FeatMutation
}

// Where appends a list predicates to the FeatUpdate builder.
func (fu *FeatUpdate) Where(ps ...predicate.Feat) *FeatUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetIndx sets the "indx" field.
func (fu *FeatUpdate) SetIndx(s string) *FeatUpdate {
	fu.mutation.SetIndx(s)
	return fu
}

// SetNillableIndx sets the "indx" field if the given value is not nil.
func (fu *FeatUpdate) SetNillableIndx(s *string) *FeatUpdate {
	if s != nil {
		fu.SetIndx(*s)
	}
	return fu
}

// SetName sets the "name" field.
func (fu *FeatUpdate) SetName(s string) *FeatUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FeatUpdate) SetNillableName(s *string) *FeatUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// SetDesc sets the "desc" field.
func (fu *FeatUpdate) SetDesc(s []string) *FeatUpdate {
	fu.mutation.SetDesc(s)
	return fu
}

// AppendDesc appends s to the "desc" field.
func (fu *FeatUpdate) AppendDesc(s []string) *FeatUpdate {
	fu.mutation.AppendDesc(s)
	return fu
}

// ClearDesc clears the value of the "desc" field.
func (fu *FeatUpdate) ClearDesc() *FeatUpdate {
	fu.mutation.ClearDesc()
	return fu
}

// Mutation returns the FeatMutation object of the builder.
func (fu *FeatUpdate) Mutation() *FeatMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeatUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeatUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeatUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeatUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FeatUpdate) check() error {
	if v, ok := fu.mutation.Indx(); ok {
		if err := feat.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Feat.indx": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Name(); ok {
		if err := feat.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Feat.name": %w`, err)}
		}
	}
	return nil
}

func (fu *FeatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(feat.Table, feat.Columns, sqlgraph.NewFieldSpec(feat.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Indx(); ok {
		_spec.SetField(feat.FieldIndx, field.TypeString, value)
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(feat.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.Desc(); ok {
		_spec.SetField(feat.FieldDesc, field.TypeJSON, value)
	}
	if value, ok := fu.mutation.AppendedDesc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feat.FieldDesc, value)
		})
	}
	if fu.mutation.DescCleared() {
		_spec.ClearField(feat.FieldDesc, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FeatUpdateOne is the builder for updating a single Feat entity.
type FeatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeatMutation
}

// SetIndx sets the "indx" field.
func (fuo *FeatUpdateOne) SetIndx(s string) *FeatUpdateOne {
	fuo.mutation.SetIndx(s)
	return fuo
}

// SetNillableIndx sets the "indx" field if the given value is not nil.
func (fuo *FeatUpdateOne) SetNillableIndx(s *string) *FeatUpdateOne {
	if s != nil {
		fuo.SetIndx(*s)
	}
	return fuo
}

// SetName sets the "name" field.
func (fuo *FeatUpdateOne) SetName(s string) *FeatUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FeatUpdateOne) SetNillableName(s *string) *FeatUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// SetDesc sets the "desc" field.
func (fuo *FeatUpdateOne) SetDesc(s []string) *FeatUpdateOne {
	fuo.mutation.SetDesc(s)
	return fuo
}

// AppendDesc appends s to the "desc" field.
func (fuo *FeatUpdateOne) AppendDesc(s []string) *FeatUpdateOne {
	fuo.mutation.AppendDesc(s)
	return fuo
}

// ClearDesc clears the value of the "desc" field.
func (fuo *FeatUpdateOne) ClearDesc() *FeatUpdateOne {
	fuo.mutation.ClearDesc()
	return fuo
}

// Mutation returns the FeatMutation object of the builder.
func (fuo *FeatUpdateOne) Mutation() *FeatMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FeatUpdate builder.
func (fuo *FeatUpdateOne) Where(ps ...predicate.Feat) *FeatUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeatUpdateOne) Select(field string, fields ...string) *FeatUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Feat entity.
func (fuo *FeatUpdateOne) Save(ctx context.Context) (*Feat, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeatUpdateOne) SaveX(ctx context.Context) *Feat {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeatUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeatUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FeatUpdateOne) check() error {
	if v, ok := fuo.mutation.Indx(); ok {
		if err := feat.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "Feat.indx": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Name(); ok {
		if err := feat.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Feat.name": %w`, err)}
		}
	}
	return nil
}

func (fuo *FeatUpdateOne) sqlSave(ctx context.Context) (_node *Feat, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(feat.Table, feat.Columns, sqlgraph.NewFieldSpec(feat.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Feat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feat.FieldID)
		for _, f := range fields {
			if !feat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Indx(); ok {
		_spec.SetField(feat.FieldIndx, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(feat.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Desc(); ok {
		_spec.SetField(feat.FieldDesc, field.TypeJSON, value)
	}
	if value, ok := fuo.mutation.AppendedDesc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feat.FieldDesc, value)
		})
	}
	if fuo.mutation.DescCleared() {
		_spec.ClearField(feat.FieldDesc, field.TypeJSON)
	}
	_node = &Feat{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
