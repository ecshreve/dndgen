// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/ecshreve/dndgen/ent/abilitybonus"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/alignment"
	"github.com/ecshreve/dndgen/ent/ammunition"
	"github.com/ecshreve/dndgen/ent/armor"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/condition"
	"github.com/ecshreve/dndgen/ent/damagetype"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/equipmentcategory"
	"github.com/ecshreve/dndgen/ent/gear"
	"github.com/ecshreve/dndgen/ent/language"
	"github.com/ecshreve/dndgen/ent/magicitem"
	"github.com/ecshreve/dndgen/ent/magicschool"
	"github.com/ecshreve/dndgen/ent/pack"
	"github.com/ecshreve/dndgen/ent/prerequisite"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/skill"
	"github.com/ecshreve/dndgen/ent/vehicle"
	"github.com/ecshreve/dndgen/ent/weapon"
	"github.com/ecshreve/dndgen/ent/weapondamage"
	"github.com/ecshreve/dndgen/ent/weaponrange"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AbilityBonusEdge is the edge representation of AbilityBonus.
type AbilityBonusEdge struct {
	Node   *AbilityBonus `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// AbilityBonusConnection is the connection containing edges to AbilityBonus.
type AbilityBonusConnection struct {
	Edges      []*AbilityBonusEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *AbilityBonusConnection) build(nodes []*AbilityBonus, pager *abilitybonusPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AbilityBonus
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AbilityBonus {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AbilityBonus {
			return nodes[i]
		}
	}
	c.Edges = make([]*AbilityBonusEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AbilityBonusEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AbilityBonusPaginateOption enables pagination customization.
type AbilityBonusPaginateOption func(*abilitybonusPager) error

// WithAbilityBonusOrder configures pagination ordering.
func WithAbilityBonusOrder(order *AbilityBonusOrder) AbilityBonusPaginateOption {
	if order == nil {
		order = DefaultAbilityBonusOrder
	}
	o := *order
	return func(pager *abilitybonusPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAbilityBonusOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAbilityBonusFilter configures pagination filter.
func WithAbilityBonusFilter(filter func(*AbilityBonusQuery) (*AbilityBonusQuery, error)) AbilityBonusPaginateOption {
	return func(pager *abilitybonusPager) error {
		if filter == nil {
			return errors.New("AbilityBonusQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type abilitybonusPager struct {
	reverse bool
	order   *AbilityBonusOrder
	filter  func(*AbilityBonusQuery) (*AbilityBonusQuery, error)
}

func newAbilityBonusPager(opts []AbilityBonusPaginateOption, reverse bool) (*abilitybonusPager, error) {
	pager := &abilitybonusPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAbilityBonusOrder
	}
	return pager, nil
}

func (p *abilitybonusPager) applyFilter(query *AbilityBonusQuery) (*AbilityBonusQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *abilitybonusPager) toCursor(ab *AbilityBonus) Cursor {
	return p.order.Field.toCursor(ab)
}

func (p *abilitybonusPager) applyCursors(query *AbilityBonusQuery, after, before *Cursor) (*AbilityBonusQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAbilityBonusOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *abilitybonusPager) applyOrder(query *AbilityBonusQuery) *AbilityBonusQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAbilityBonusOrder.Field {
		query = query.Order(DefaultAbilityBonusOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *abilitybonusPager) orderExpr(query *AbilityBonusQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAbilityBonusOrder.Field {
			b.Comma().Ident(DefaultAbilityBonusOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AbilityBonus.
func (ab *AbilityBonusQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AbilityBonusPaginateOption,
) (*AbilityBonusConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAbilityBonusPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ab, err = pager.applyFilter(ab); err != nil {
		return nil, err
	}
	conn := &AbilityBonusConnection{Edges: []*AbilityBonusEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ab.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ab, err = pager.applyCursors(ab, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ab.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ab.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ab = pager.applyOrder(ab)
	nodes, err := ab.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AbilityBonusOrderFieldBonus orders AbilityBonus by bonus.
	AbilityBonusOrderFieldBonus = &AbilityBonusOrderField{
		Value: func(ab *AbilityBonus) (ent.Value, error) {
			return ab.Bonus, nil
		},
		column: abilitybonus.FieldBonus,
		toTerm: abilitybonus.ByBonus,
		toCursor: func(ab *AbilityBonus) Cursor {
			return Cursor{
				ID:    ab.ID,
				Value: ab.Bonus,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AbilityBonusOrderField) String() string {
	var str string
	switch f.column {
	case AbilityBonusOrderFieldBonus.column:
		str = "BONUS"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AbilityBonusOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AbilityBonusOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AbilityBonusOrderField %T must be a string", v)
	}
	switch str {
	case "BONUS":
		*f = *AbilityBonusOrderFieldBonus
	default:
		return fmt.Errorf("%s is not a valid AbilityBonusOrderField", str)
	}
	return nil
}

// AbilityBonusOrderField defines the ordering field of AbilityBonus.
type AbilityBonusOrderField struct {
	// Value extracts the ordering value from the given AbilityBonus.
	Value    func(*AbilityBonus) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) abilitybonus.OrderOption
	toCursor func(*AbilityBonus) Cursor
}

// AbilityBonusOrder defines the ordering of AbilityBonus.
type AbilityBonusOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *AbilityBonusOrderField `json:"field"`
}

// DefaultAbilityBonusOrder is the default ordering of AbilityBonus.
var DefaultAbilityBonusOrder = &AbilityBonusOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AbilityBonusOrderField{
		Value: func(ab *AbilityBonus) (ent.Value, error) {
			return ab.ID, nil
		},
		column: abilitybonus.FieldID,
		toTerm: abilitybonus.ByID,
		toCursor: func(ab *AbilityBonus) Cursor {
			return Cursor{ID: ab.ID}
		},
	},
}

// ToEdge converts AbilityBonus into AbilityBonusEdge.
func (ab *AbilityBonus) ToEdge(order *AbilityBonusOrder) *AbilityBonusEdge {
	if order == nil {
		order = DefaultAbilityBonusOrder
	}
	return &AbilityBonusEdge{
		Node:   ab,
		Cursor: order.Field.toCursor(ab),
	}
}

// AbilityScoreEdge is the edge representation of AbilityScore.
type AbilityScoreEdge struct {
	Node   *AbilityScore `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// AbilityScoreConnection is the connection containing edges to AbilityScore.
type AbilityScoreConnection struct {
	Edges      []*AbilityScoreEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *AbilityScoreConnection) build(nodes []*AbilityScore, pager *abilityscorePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AbilityScore
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AbilityScore {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AbilityScore {
			return nodes[i]
		}
	}
	c.Edges = make([]*AbilityScoreEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AbilityScoreEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AbilityScorePaginateOption enables pagination customization.
type AbilityScorePaginateOption func(*abilityscorePager) error

// WithAbilityScoreOrder configures pagination ordering.
func WithAbilityScoreOrder(order *AbilityScoreOrder) AbilityScorePaginateOption {
	if order == nil {
		order = DefaultAbilityScoreOrder
	}
	o := *order
	return func(pager *abilityscorePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAbilityScoreOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAbilityScoreFilter configures pagination filter.
func WithAbilityScoreFilter(filter func(*AbilityScoreQuery) (*AbilityScoreQuery, error)) AbilityScorePaginateOption {
	return func(pager *abilityscorePager) error {
		if filter == nil {
			return errors.New("AbilityScoreQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type abilityscorePager struct {
	reverse bool
	order   *AbilityScoreOrder
	filter  func(*AbilityScoreQuery) (*AbilityScoreQuery, error)
}

func newAbilityScorePager(opts []AbilityScorePaginateOption, reverse bool) (*abilityscorePager, error) {
	pager := &abilityscorePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAbilityScoreOrder
	}
	return pager, nil
}

func (p *abilityscorePager) applyFilter(query *AbilityScoreQuery) (*AbilityScoreQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *abilityscorePager) toCursor(as *AbilityScore) Cursor {
	return p.order.Field.toCursor(as)
}

func (p *abilityscorePager) applyCursors(query *AbilityScoreQuery, after, before *Cursor) (*AbilityScoreQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAbilityScoreOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *abilityscorePager) applyOrder(query *AbilityScoreQuery) *AbilityScoreQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAbilityScoreOrder.Field {
		query = query.Order(DefaultAbilityScoreOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *abilityscorePager) orderExpr(query *AbilityScoreQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAbilityScoreOrder.Field {
			b.Comma().Ident(DefaultAbilityScoreOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AbilityScore.
func (as *AbilityScoreQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AbilityScorePaginateOption,
) (*AbilityScoreConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAbilityScorePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if as, err = pager.applyFilter(as); err != nil {
		return nil, err
	}
	conn := &AbilityScoreConnection{Edges: []*AbilityScoreEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = as.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if as, err = pager.applyCursors(as, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		as.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := as.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	as = pager.applyOrder(as)
	nodes, err := as.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AbilityScoreOrderField defines the ordering field of AbilityScore.
type AbilityScoreOrderField struct {
	// Value extracts the ordering value from the given AbilityScore.
	Value    func(*AbilityScore) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) abilityscore.OrderOption
	toCursor func(*AbilityScore) Cursor
}

// AbilityScoreOrder defines the ordering of AbilityScore.
type AbilityScoreOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *AbilityScoreOrderField `json:"field"`
}

// DefaultAbilityScoreOrder is the default ordering of AbilityScore.
var DefaultAbilityScoreOrder = &AbilityScoreOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AbilityScoreOrderField{
		Value: func(as *AbilityScore) (ent.Value, error) {
			return as.ID, nil
		},
		column: abilityscore.FieldID,
		toTerm: abilityscore.ByID,
		toCursor: func(as *AbilityScore) Cursor {
			return Cursor{ID: as.ID}
		},
	},
}

// ToEdge converts AbilityScore into AbilityScoreEdge.
func (as *AbilityScore) ToEdge(order *AbilityScoreOrder) *AbilityScoreEdge {
	if order == nil {
		order = DefaultAbilityScoreOrder
	}
	return &AbilityScoreEdge{
		Node:   as,
		Cursor: order.Field.toCursor(as),
	}
}

// AlignmentEdge is the edge representation of Alignment.
type AlignmentEdge struct {
	Node   *Alignment `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// AlignmentConnection is the connection containing edges to Alignment.
type AlignmentConnection struct {
	Edges      []*AlignmentEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *AlignmentConnection) build(nodes []*Alignment, pager *alignmentPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Alignment
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Alignment {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Alignment {
			return nodes[i]
		}
	}
	c.Edges = make([]*AlignmentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AlignmentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AlignmentPaginateOption enables pagination customization.
type AlignmentPaginateOption func(*alignmentPager) error

// WithAlignmentOrder configures pagination ordering.
func WithAlignmentOrder(order *AlignmentOrder) AlignmentPaginateOption {
	if order == nil {
		order = DefaultAlignmentOrder
	}
	o := *order
	return func(pager *alignmentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAlignmentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAlignmentFilter configures pagination filter.
func WithAlignmentFilter(filter func(*AlignmentQuery) (*AlignmentQuery, error)) AlignmentPaginateOption {
	return func(pager *alignmentPager) error {
		if filter == nil {
			return errors.New("AlignmentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type alignmentPager struct {
	reverse bool
	order   *AlignmentOrder
	filter  func(*AlignmentQuery) (*AlignmentQuery, error)
}

func newAlignmentPager(opts []AlignmentPaginateOption, reverse bool) (*alignmentPager, error) {
	pager := &alignmentPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAlignmentOrder
	}
	return pager, nil
}

func (p *alignmentPager) applyFilter(query *AlignmentQuery) (*AlignmentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *alignmentPager) toCursor(a *Alignment) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *alignmentPager) applyCursors(query *AlignmentQuery, after, before *Cursor) (*AlignmentQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAlignmentOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *alignmentPager) applyOrder(query *AlignmentQuery) *AlignmentQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAlignmentOrder.Field {
		query = query.Order(DefaultAlignmentOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *alignmentPager) orderExpr(query *AlignmentQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAlignmentOrder.Field {
			b.Comma().Ident(DefaultAlignmentOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Alignment.
func (a *AlignmentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AlignmentPaginateOption,
) (*AlignmentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAlignmentPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AlignmentConnection{Edges: []*AlignmentEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AlignmentOrderField defines the ordering field of Alignment.
type AlignmentOrderField struct {
	// Value extracts the ordering value from the given Alignment.
	Value    func(*Alignment) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) alignment.OrderOption
	toCursor func(*Alignment) Cursor
}

// AlignmentOrder defines the ordering of Alignment.
type AlignmentOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *AlignmentOrderField `json:"field"`
}

// DefaultAlignmentOrder is the default ordering of Alignment.
var DefaultAlignmentOrder = &AlignmentOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AlignmentOrderField{
		Value: func(a *Alignment) (ent.Value, error) {
			return a.ID, nil
		},
		column: alignment.FieldID,
		toTerm: alignment.ByID,
		toCursor: func(a *Alignment) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Alignment into AlignmentEdge.
func (a *Alignment) ToEdge(order *AlignmentOrder) *AlignmentEdge {
	if order == nil {
		order = DefaultAlignmentOrder
	}
	return &AlignmentEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// AmmunitionEdge is the edge representation of Ammunition.
type AmmunitionEdge struct {
	Node   *Ammunition `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// AmmunitionConnection is the connection containing edges to Ammunition.
type AmmunitionConnection struct {
	Edges      []*AmmunitionEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *AmmunitionConnection) build(nodes []*Ammunition, pager *ammunitionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Ammunition
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Ammunition {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Ammunition {
			return nodes[i]
		}
	}
	c.Edges = make([]*AmmunitionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AmmunitionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AmmunitionPaginateOption enables pagination customization.
type AmmunitionPaginateOption func(*ammunitionPager) error

// WithAmmunitionOrder configures pagination ordering.
func WithAmmunitionOrder(order *AmmunitionOrder) AmmunitionPaginateOption {
	if order == nil {
		order = DefaultAmmunitionOrder
	}
	o := *order
	return func(pager *ammunitionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAmmunitionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAmmunitionFilter configures pagination filter.
func WithAmmunitionFilter(filter func(*AmmunitionQuery) (*AmmunitionQuery, error)) AmmunitionPaginateOption {
	return func(pager *ammunitionPager) error {
		if filter == nil {
			return errors.New("AmmunitionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type ammunitionPager struct {
	reverse bool
	order   *AmmunitionOrder
	filter  func(*AmmunitionQuery) (*AmmunitionQuery, error)
}

func newAmmunitionPager(opts []AmmunitionPaginateOption, reverse bool) (*ammunitionPager, error) {
	pager := &ammunitionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAmmunitionOrder
	}
	return pager, nil
}

func (p *ammunitionPager) applyFilter(query *AmmunitionQuery) (*AmmunitionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *ammunitionPager) toCursor(a *Ammunition) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *ammunitionPager) applyCursors(query *AmmunitionQuery, after, before *Cursor) (*AmmunitionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAmmunitionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *ammunitionPager) applyOrder(query *AmmunitionQuery) *AmmunitionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAmmunitionOrder.Field {
		query = query.Order(DefaultAmmunitionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *ammunitionPager) orderExpr(query *AmmunitionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAmmunitionOrder.Field {
			b.Comma().Ident(DefaultAmmunitionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Ammunition.
func (a *AmmunitionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AmmunitionPaginateOption,
) (*AmmunitionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAmmunitionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AmmunitionConnection{Edges: []*AmmunitionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AmmunitionOrderField defines the ordering field of Ammunition.
type AmmunitionOrderField struct {
	// Value extracts the ordering value from the given Ammunition.
	Value    func(*Ammunition) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) ammunition.OrderOption
	toCursor func(*Ammunition) Cursor
}

// AmmunitionOrder defines the ordering of Ammunition.
type AmmunitionOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *AmmunitionOrderField `json:"field"`
}

// DefaultAmmunitionOrder is the default ordering of Ammunition.
var DefaultAmmunitionOrder = &AmmunitionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AmmunitionOrderField{
		Value: func(a *Ammunition) (ent.Value, error) {
			return a.ID, nil
		},
		column: ammunition.FieldID,
		toTerm: ammunition.ByID,
		toCursor: func(a *Ammunition) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Ammunition into AmmunitionEdge.
func (a *Ammunition) ToEdge(order *AmmunitionOrder) *AmmunitionEdge {
	if order == nil {
		order = DefaultAmmunitionOrder
	}
	return &AmmunitionEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// ArmorEdge is the edge representation of Armor.
type ArmorEdge struct {
	Node   *Armor `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// ArmorConnection is the connection containing edges to Armor.
type ArmorConnection struct {
	Edges      []*ArmorEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *ArmorConnection) build(nodes []*Armor, pager *armorPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Armor
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Armor {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Armor {
			return nodes[i]
		}
	}
	c.Edges = make([]*ArmorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ArmorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ArmorPaginateOption enables pagination customization.
type ArmorPaginateOption func(*armorPager) error

// WithArmorOrder configures pagination ordering.
func WithArmorOrder(order *ArmorOrder) ArmorPaginateOption {
	if order == nil {
		order = DefaultArmorOrder
	}
	o := *order
	return func(pager *armorPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultArmorOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithArmorFilter configures pagination filter.
func WithArmorFilter(filter func(*ArmorQuery) (*ArmorQuery, error)) ArmorPaginateOption {
	return func(pager *armorPager) error {
		if filter == nil {
			return errors.New("ArmorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type armorPager struct {
	reverse bool
	order   *ArmorOrder
	filter  func(*ArmorQuery) (*ArmorQuery, error)
}

func newArmorPager(opts []ArmorPaginateOption, reverse bool) (*armorPager, error) {
	pager := &armorPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultArmorOrder
	}
	return pager, nil
}

func (p *armorPager) applyFilter(query *ArmorQuery) (*ArmorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *armorPager) toCursor(a *Armor) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *armorPager) applyCursors(query *ArmorQuery, after, before *Cursor) (*ArmorQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultArmorOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *armorPager) applyOrder(query *ArmorQuery) *ArmorQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultArmorOrder.Field {
		query = query.Order(DefaultArmorOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *armorPager) orderExpr(query *ArmorQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultArmorOrder.Field {
			b.Comma().Ident(DefaultArmorOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Armor.
func (a *ArmorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ArmorPaginateOption,
) (*ArmorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newArmorPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &ArmorConnection{Edges: []*ArmorEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ArmorOrderField defines the ordering field of Armor.
type ArmorOrderField struct {
	// Value extracts the ordering value from the given Armor.
	Value    func(*Armor) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) armor.OrderOption
	toCursor func(*Armor) Cursor
}

// ArmorOrder defines the ordering of Armor.
type ArmorOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *ArmorOrderField `json:"field"`
}

// DefaultArmorOrder is the default ordering of Armor.
var DefaultArmorOrder = &ArmorOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ArmorOrderField{
		Value: func(a *Armor) (ent.Value, error) {
			return a.ID, nil
		},
		column: armor.FieldID,
		toTerm: armor.ByID,
		toCursor: func(a *Armor) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Armor into ArmorEdge.
func (a *Armor) ToEdge(order *ArmorOrder) *ArmorEdge {
	if order == nil {
		order = DefaultArmorOrder
	}
	return &ArmorEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// ClassEdge is the edge representation of Class.
type ClassEdge struct {
	Node   *Class `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// ClassConnection is the connection containing edges to Class.
type ClassConnection struct {
	Edges      []*ClassEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *ClassConnection) build(nodes []*Class, pager *classPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Class
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Class {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Class {
			return nodes[i]
		}
	}
	c.Edges = make([]*ClassEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ClassEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ClassPaginateOption enables pagination customization.
type ClassPaginateOption func(*classPager) error

// WithClassOrder configures pagination ordering.
func WithClassOrder(order *ClassOrder) ClassPaginateOption {
	if order == nil {
		order = DefaultClassOrder
	}
	o := *order
	return func(pager *classPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultClassOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithClassFilter configures pagination filter.
func WithClassFilter(filter func(*ClassQuery) (*ClassQuery, error)) ClassPaginateOption {
	return func(pager *classPager) error {
		if filter == nil {
			return errors.New("ClassQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type classPager struct {
	reverse bool
	order   *ClassOrder
	filter  func(*ClassQuery) (*ClassQuery, error)
}

func newClassPager(opts []ClassPaginateOption, reverse bool) (*classPager, error) {
	pager := &classPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultClassOrder
	}
	return pager, nil
}

func (p *classPager) applyFilter(query *ClassQuery) (*ClassQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *classPager) toCursor(c *Class) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *classPager) applyCursors(query *ClassQuery, after, before *Cursor) (*ClassQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultClassOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *classPager) applyOrder(query *ClassQuery) *ClassQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultClassOrder.Field {
		query = query.Order(DefaultClassOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *classPager) orderExpr(query *ClassQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultClassOrder.Field {
			b.Comma().Ident(DefaultClassOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Class.
func (c *ClassQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ClassPaginateOption,
) (*ClassConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newClassPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &ClassConnection{Edges: []*ClassEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ClassOrderField defines the ordering field of Class.
type ClassOrderField struct {
	// Value extracts the ordering value from the given Class.
	Value    func(*Class) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) class.OrderOption
	toCursor func(*Class) Cursor
}

// ClassOrder defines the ordering of Class.
type ClassOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *ClassOrderField `json:"field"`
}

// DefaultClassOrder is the default ordering of Class.
var DefaultClassOrder = &ClassOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ClassOrderField{
		Value: func(c *Class) (ent.Value, error) {
			return c.ID, nil
		},
		column: class.FieldID,
		toTerm: class.ByID,
		toCursor: func(c *Class) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Class into ClassEdge.
func (c *Class) ToEdge(order *ClassOrder) *ClassEdge {
	if order == nil {
		order = DefaultClassOrder
	}
	return &ClassEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// ConditionEdge is the edge representation of Condition.
type ConditionEdge struct {
	Node   *Condition `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// ConditionConnection is the connection containing edges to Condition.
type ConditionConnection struct {
	Edges      []*ConditionEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *ConditionConnection) build(nodes []*Condition, pager *conditionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Condition
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Condition {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Condition {
			return nodes[i]
		}
	}
	c.Edges = make([]*ConditionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ConditionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ConditionPaginateOption enables pagination customization.
type ConditionPaginateOption func(*conditionPager) error

// WithConditionOrder configures pagination ordering.
func WithConditionOrder(order *ConditionOrder) ConditionPaginateOption {
	if order == nil {
		order = DefaultConditionOrder
	}
	o := *order
	return func(pager *conditionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultConditionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithConditionFilter configures pagination filter.
func WithConditionFilter(filter func(*ConditionQuery) (*ConditionQuery, error)) ConditionPaginateOption {
	return func(pager *conditionPager) error {
		if filter == nil {
			return errors.New("ConditionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type conditionPager struct {
	reverse bool
	order   *ConditionOrder
	filter  func(*ConditionQuery) (*ConditionQuery, error)
}

func newConditionPager(opts []ConditionPaginateOption, reverse bool) (*conditionPager, error) {
	pager := &conditionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultConditionOrder
	}
	return pager, nil
}

func (p *conditionPager) applyFilter(query *ConditionQuery) (*ConditionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *conditionPager) toCursor(c *Condition) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *conditionPager) applyCursors(query *ConditionQuery, after, before *Cursor) (*ConditionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultConditionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *conditionPager) applyOrder(query *ConditionQuery) *ConditionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultConditionOrder.Field {
		query = query.Order(DefaultConditionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *conditionPager) orderExpr(query *ConditionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultConditionOrder.Field {
			b.Comma().Ident(DefaultConditionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Condition.
func (c *ConditionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ConditionPaginateOption,
) (*ConditionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newConditionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &ConditionConnection{Edges: []*ConditionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ConditionOrderField defines the ordering field of Condition.
type ConditionOrderField struct {
	// Value extracts the ordering value from the given Condition.
	Value    func(*Condition) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) condition.OrderOption
	toCursor func(*Condition) Cursor
}

// ConditionOrder defines the ordering of Condition.
type ConditionOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *ConditionOrderField `json:"field"`
}

// DefaultConditionOrder is the default ordering of Condition.
var DefaultConditionOrder = &ConditionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ConditionOrderField{
		Value: func(c *Condition) (ent.Value, error) {
			return c.ID, nil
		},
		column: condition.FieldID,
		toTerm: condition.ByID,
		toCursor: func(c *Condition) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Condition into ConditionEdge.
func (c *Condition) ToEdge(order *ConditionOrder) *ConditionEdge {
	if order == nil {
		order = DefaultConditionOrder
	}
	return &ConditionEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// DamageTypeEdge is the edge representation of DamageType.
type DamageTypeEdge struct {
	Node   *DamageType `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// DamageTypeConnection is the connection containing edges to DamageType.
type DamageTypeConnection struct {
	Edges      []*DamageTypeEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *DamageTypeConnection) build(nodes []*DamageType, pager *damagetypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *DamageType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *DamageType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *DamageType {
			return nodes[i]
		}
	}
	c.Edges = make([]*DamageTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DamageTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DamageTypePaginateOption enables pagination customization.
type DamageTypePaginateOption func(*damagetypePager) error

// WithDamageTypeOrder configures pagination ordering.
func WithDamageTypeOrder(order *DamageTypeOrder) DamageTypePaginateOption {
	if order == nil {
		order = DefaultDamageTypeOrder
	}
	o := *order
	return func(pager *damagetypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDamageTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDamageTypeFilter configures pagination filter.
func WithDamageTypeFilter(filter func(*DamageTypeQuery) (*DamageTypeQuery, error)) DamageTypePaginateOption {
	return func(pager *damagetypePager) error {
		if filter == nil {
			return errors.New("DamageTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type damagetypePager struct {
	reverse bool
	order   *DamageTypeOrder
	filter  func(*DamageTypeQuery) (*DamageTypeQuery, error)
}

func newDamageTypePager(opts []DamageTypePaginateOption, reverse bool) (*damagetypePager, error) {
	pager := &damagetypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDamageTypeOrder
	}
	return pager, nil
}

func (p *damagetypePager) applyFilter(query *DamageTypeQuery) (*DamageTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *damagetypePager) toCursor(dt *DamageType) Cursor {
	return p.order.Field.toCursor(dt)
}

func (p *damagetypePager) applyCursors(query *DamageTypeQuery, after, before *Cursor) (*DamageTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultDamageTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *damagetypePager) applyOrder(query *DamageTypeQuery) *DamageTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultDamageTypeOrder.Field {
		query = query.Order(DefaultDamageTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *damagetypePager) orderExpr(query *DamageTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDamageTypeOrder.Field {
			b.Comma().Ident(DefaultDamageTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to DamageType.
func (dt *DamageTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DamageTypePaginateOption,
) (*DamageTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDamageTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if dt, err = pager.applyFilter(dt); err != nil {
		return nil, err
	}
	conn := &DamageTypeConnection{Edges: []*DamageTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = dt.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if dt, err = pager.applyCursors(dt, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		dt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := dt.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	dt = pager.applyOrder(dt)
	nodes, err := dt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// DamageTypeOrderField defines the ordering field of DamageType.
type DamageTypeOrderField struct {
	// Value extracts the ordering value from the given DamageType.
	Value    func(*DamageType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) damagetype.OrderOption
	toCursor func(*DamageType) Cursor
}

// DamageTypeOrder defines the ordering of DamageType.
type DamageTypeOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *DamageTypeOrderField `json:"field"`
}

// DefaultDamageTypeOrder is the default ordering of DamageType.
var DefaultDamageTypeOrder = &DamageTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DamageTypeOrderField{
		Value: func(dt *DamageType) (ent.Value, error) {
			return dt.ID, nil
		},
		column: damagetype.FieldID,
		toTerm: damagetype.ByID,
		toCursor: func(dt *DamageType) Cursor {
			return Cursor{ID: dt.ID}
		},
	},
}

// ToEdge converts DamageType into DamageTypeEdge.
func (dt *DamageType) ToEdge(order *DamageTypeOrder) *DamageTypeEdge {
	if order == nil {
		order = DefaultDamageTypeOrder
	}
	return &DamageTypeEdge{
		Node:   dt,
		Cursor: order.Field.toCursor(dt),
	}
}

// EquipmentEdge is the edge representation of Equipment.
type EquipmentEdge struct {
	Node   *Equipment `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// EquipmentConnection is the connection containing edges to Equipment.
type EquipmentConnection struct {
	Edges      []*EquipmentEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *EquipmentConnection) build(nodes []*Equipment, pager *equipmentPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Equipment
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Equipment {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Equipment {
			return nodes[i]
		}
	}
	c.Edges = make([]*EquipmentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &EquipmentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// EquipmentPaginateOption enables pagination customization.
type EquipmentPaginateOption func(*equipmentPager) error

// WithEquipmentOrder configures pagination ordering.
func WithEquipmentOrder(order *EquipmentOrder) EquipmentPaginateOption {
	if order == nil {
		order = DefaultEquipmentOrder
	}
	o := *order
	return func(pager *equipmentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultEquipmentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithEquipmentFilter configures pagination filter.
func WithEquipmentFilter(filter func(*EquipmentQuery) (*EquipmentQuery, error)) EquipmentPaginateOption {
	return func(pager *equipmentPager) error {
		if filter == nil {
			return errors.New("EquipmentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type equipmentPager struct {
	reverse bool
	order   *EquipmentOrder
	filter  func(*EquipmentQuery) (*EquipmentQuery, error)
}

func newEquipmentPager(opts []EquipmentPaginateOption, reverse bool) (*equipmentPager, error) {
	pager := &equipmentPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultEquipmentOrder
	}
	return pager, nil
}

func (p *equipmentPager) applyFilter(query *EquipmentQuery) (*EquipmentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *equipmentPager) toCursor(e *Equipment) Cursor {
	return p.order.Field.toCursor(e)
}

func (p *equipmentPager) applyCursors(query *EquipmentQuery, after, before *Cursor) (*EquipmentQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultEquipmentOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *equipmentPager) applyOrder(query *EquipmentQuery) *EquipmentQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultEquipmentOrder.Field {
		query = query.Order(DefaultEquipmentOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *equipmentPager) orderExpr(query *EquipmentQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultEquipmentOrder.Field {
			b.Comma().Ident(DefaultEquipmentOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Equipment.
func (e *EquipmentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...EquipmentPaginateOption,
) (*EquipmentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newEquipmentPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if e, err = pager.applyFilter(e); err != nil {
		return nil, err
	}
	conn := &EquipmentConnection{Edges: []*EquipmentEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = e.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if e, err = pager.applyCursors(e, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		e.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := e.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	e = pager.applyOrder(e)
	nodes, err := e.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// EquipmentOrderField defines the ordering field of Equipment.
type EquipmentOrderField struct {
	// Value extracts the ordering value from the given Equipment.
	Value    func(*Equipment) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) equipment.OrderOption
	toCursor func(*Equipment) Cursor
}

// EquipmentOrder defines the ordering of Equipment.
type EquipmentOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *EquipmentOrderField `json:"field"`
}

// DefaultEquipmentOrder is the default ordering of Equipment.
var DefaultEquipmentOrder = &EquipmentOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &EquipmentOrderField{
		Value: func(e *Equipment) (ent.Value, error) {
			return e.ID, nil
		},
		column: equipment.FieldID,
		toTerm: equipment.ByID,
		toCursor: func(e *Equipment) Cursor {
			return Cursor{ID: e.ID}
		},
	},
}

// ToEdge converts Equipment into EquipmentEdge.
func (e *Equipment) ToEdge(order *EquipmentOrder) *EquipmentEdge {
	if order == nil {
		order = DefaultEquipmentOrder
	}
	return &EquipmentEdge{
		Node:   e,
		Cursor: order.Field.toCursor(e),
	}
}

// EquipmentCategoryEdge is the edge representation of EquipmentCategory.
type EquipmentCategoryEdge struct {
	Node   *EquipmentCategory `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// EquipmentCategoryConnection is the connection containing edges to EquipmentCategory.
type EquipmentCategoryConnection struct {
	Edges      []*EquipmentCategoryEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

func (c *EquipmentCategoryConnection) build(nodes []*EquipmentCategory, pager *equipmentcategoryPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *EquipmentCategory
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *EquipmentCategory {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *EquipmentCategory {
			return nodes[i]
		}
	}
	c.Edges = make([]*EquipmentCategoryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &EquipmentCategoryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// EquipmentCategoryPaginateOption enables pagination customization.
type EquipmentCategoryPaginateOption func(*equipmentcategoryPager) error

// WithEquipmentCategoryOrder configures pagination ordering.
func WithEquipmentCategoryOrder(order *EquipmentCategoryOrder) EquipmentCategoryPaginateOption {
	if order == nil {
		order = DefaultEquipmentCategoryOrder
	}
	o := *order
	return func(pager *equipmentcategoryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultEquipmentCategoryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithEquipmentCategoryFilter configures pagination filter.
func WithEquipmentCategoryFilter(filter func(*EquipmentCategoryQuery) (*EquipmentCategoryQuery, error)) EquipmentCategoryPaginateOption {
	return func(pager *equipmentcategoryPager) error {
		if filter == nil {
			return errors.New("EquipmentCategoryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type equipmentcategoryPager struct {
	reverse bool
	order   *EquipmentCategoryOrder
	filter  func(*EquipmentCategoryQuery) (*EquipmentCategoryQuery, error)
}

func newEquipmentCategoryPager(opts []EquipmentCategoryPaginateOption, reverse bool) (*equipmentcategoryPager, error) {
	pager := &equipmentcategoryPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultEquipmentCategoryOrder
	}
	return pager, nil
}

func (p *equipmentcategoryPager) applyFilter(query *EquipmentCategoryQuery) (*EquipmentCategoryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *equipmentcategoryPager) toCursor(ec *EquipmentCategory) Cursor {
	return p.order.Field.toCursor(ec)
}

func (p *equipmentcategoryPager) applyCursors(query *EquipmentCategoryQuery, after, before *Cursor) (*EquipmentCategoryQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultEquipmentCategoryOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *equipmentcategoryPager) applyOrder(query *EquipmentCategoryQuery) *EquipmentCategoryQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultEquipmentCategoryOrder.Field {
		query = query.Order(DefaultEquipmentCategoryOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *equipmentcategoryPager) orderExpr(query *EquipmentCategoryQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultEquipmentCategoryOrder.Field {
			b.Comma().Ident(DefaultEquipmentCategoryOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to EquipmentCategory.
func (ec *EquipmentCategoryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...EquipmentCategoryPaginateOption,
) (*EquipmentCategoryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newEquipmentCategoryPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ec, err = pager.applyFilter(ec); err != nil {
		return nil, err
	}
	conn := &EquipmentCategoryConnection{Edges: []*EquipmentCategoryEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ec.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ec, err = pager.applyCursors(ec, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ec.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ec.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ec = pager.applyOrder(ec)
	nodes, err := ec.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// EquipmentCategoryOrderField defines the ordering field of EquipmentCategory.
type EquipmentCategoryOrderField struct {
	// Value extracts the ordering value from the given EquipmentCategory.
	Value    func(*EquipmentCategory) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) equipmentcategory.OrderOption
	toCursor func(*EquipmentCategory) Cursor
}

// EquipmentCategoryOrder defines the ordering of EquipmentCategory.
type EquipmentCategoryOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *EquipmentCategoryOrderField `json:"field"`
}

// DefaultEquipmentCategoryOrder is the default ordering of EquipmentCategory.
var DefaultEquipmentCategoryOrder = &EquipmentCategoryOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &EquipmentCategoryOrderField{
		Value: func(ec *EquipmentCategory) (ent.Value, error) {
			return ec.ID, nil
		},
		column: equipmentcategory.FieldID,
		toTerm: equipmentcategory.ByID,
		toCursor: func(ec *EquipmentCategory) Cursor {
			return Cursor{ID: ec.ID}
		},
	},
}

// ToEdge converts EquipmentCategory into EquipmentCategoryEdge.
func (ec *EquipmentCategory) ToEdge(order *EquipmentCategoryOrder) *EquipmentCategoryEdge {
	if order == nil {
		order = DefaultEquipmentCategoryOrder
	}
	return &EquipmentCategoryEdge{
		Node:   ec,
		Cursor: order.Field.toCursor(ec),
	}
}

// GearEdge is the edge representation of Gear.
type GearEdge struct {
	Node   *Gear  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// GearConnection is the connection containing edges to Gear.
type GearConnection struct {
	Edges      []*GearEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *GearConnection) build(nodes []*Gear, pager *gearPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Gear
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Gear {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Gear {
			return nodes[i]
		}
	}
	c.Edges = make([]*GearEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &GearEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// GearPaginateOption enables pagination customization.
type GearPaginateOption func(*gearPager) error

// WithGearOrder configures pagination ordering.
func WithGearOrder(order *GearOrder) GearPaginateOption {
	if order == nil {
		order = DefaultGearOrder
	}
	o := *order
	return func(pager *gearPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGearOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGearFilter configures pagination filter.
func WithGearFilter(filter func(*GearQuery) (*GearQuery, error)) GearPaginateOption {
	return func(pager *gearPager) error {
		if filter == nil {
			return errors.New("GearQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type gearPager struct {
	reverse bool
	order   *GearOrder
	filter  func(*GearQuery) (*GearQuery, error)
}

func newGearPager(opts []GearPaginateOption, reverse bool) (*gearPager, error) {
	pager := &gearPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGearOrder
	}
	return pager, nil
}

func (p *gearPager) applyFilter(query *GearQuery) (*GearQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *gearPager) toCursor(ge *Gear) Cursor {
	return p.order.Field.toCursor(ge)
}

func (p *gearPager) applyCursors(query *GearQuery, after, before *Cursor) (*GearQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultGearOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *gearPager) applyOrder(query *GearQuery) *GearQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultGearOrder.Field {
		query = query.Order(DefaultGearOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *gearPager) orderExpr(query *GearQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultGearOrder.Field {
			b.Comma().Ident(DefaultGearOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Gear.
func (ge *GearQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GearPaginateOption,
) (*GearConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGearPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ge, err = pager.applyFilter(ge); err != nil {
		return nil, err
	}
	conn := &GearConnection{Edges: []*GearEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ge.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ge, err = pager.applyCursors(ge, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ge.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ge.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ge = pager.applyOrder(ge)
	nodes, err := ge.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// GearOrderField defines the ordering field of Gear.
type GearOrderField struct {
	// Value extracts the ordering value from the given Gear.
	Value    func(*Gear) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) gear.OrderOption
	toCursor func(*Gear) Cursor
}

// GearOrder defines the ordering of Gear.
type GearOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *GearOrderField `json:"field"`
}

// DefaultGearOrder is the default ordering of Gear.
var DefaultGearOrder = &GearOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &GearOrderField{
		Value: func(ge *Gear) (ent.Value, error) {
			return ge.ID, nil
		},
		column: gear.FieldID,
		toTerm: gear.ByID,
		toCursor: func(ge *Gear) Cursor {
			return Cursor{ID: ge.ID}
		},
	},
}

// ToEdge converts Gear into GearEdge.
func (ge *Gear) ToEdge(order *GearOrder) *GearEdge {
	if order == nil {
		order = DefaultGearOrder
	}
	return &GearEdge{
		Node:   ge,
		Cursor: order.Field.toCursor(ge),
	}
}

// LanguageEdge is the edge representation of Language.
type LanguageEdge struct {
	Node   *Language `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// LanguageConnection is the connection containing edges to Language.
type LanguageConnection struct {
	Edges      []*LanguageEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *LanguageConnection) build(nodes []*Language, pager *languagePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Language
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Language {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Language {
			return nodes[i]
		}
	}
	c.Edges = make([]*LanguageEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &LanguageEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// LanguagePaginateOption enables pagination customization.
type LanguagePaginateOption func(*languagePager) error

// WithLanguageOrder configures pagination ordering.
func WithLanguageOrder(order *LanguageOrder) LanguagePaginateOption {
	if order == nil {
		order = DefaultLanguageOrder
	}
	o := *order
	return func(pager *languagePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultLanguageOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithLanguageFilter configures pagination filter.
func WithLanguageFilter(filter func(*LanguageQuery) (*LanguageQuery, error)) LanguagePaginateOption {
	return func(pager *languagePager) error {
		if filter == nil {
			return errors.New("LanguageQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type languagePager struct {
	reverse bool
	order   *LanguageOrder
	filter  func(*LanguageQuery) (*LanguageQuery, error)
}

func newLanguagePager(opts []LanguagePaginateOption, reverse bool) (*languagePager, error) {
	pager := &languagePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultLanguageOrder
	}
	return pager, nil
}

func (p *languagePager) applyFilter(query *LanguageQuery) (*LanguageQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *languagePager) toCursor(l *Language) Cursor {
	return p.order.Field.toCursor(l)
}

func (p *languagePager) applyCursors(query *LanguageQuery, after, before *Cursor) (*LanguageQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultLanguageOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *languagePager) applyOrder(query *LanguageQuery) *LanguageQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultLanguageOrder.Field {
		query = query.Order(DefaultLanguageOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *languagePager) orderExpr(query *LanguageQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultLanguageOrder.Field {
			b.Comma().Ident(DefaultLanguageOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Language.
func (l *LanguageQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...LanguagePaginateOption,
) (*LanguageConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newLanguagePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if l, err = pager.applyFilter(l); err != nil {
		return nil, err
	}
	conn := &LanguageConnection{Edges: []*LanguageEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = l.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if l, err = pager.applyCursors(l, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		l.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := l.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	l = pager.applyOrder(l)
	nodes, err := l.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// LanguageOrderField defines the ordering field of Language.
type LanguageOrderField struct {
	// Value extracts the ordering value from the given Language.
	Value    func(*Language) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) language.OrderOption
	toCursor func(*Language) Cursor
}

// LanguageOrder defines the ordering of Language.
type LanguageOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *LanguageOrderField `json:"field"`
}

// DefaultLanguageOrder is the default ordering of Language.
var DefaultLanguageOrder = &LanguageOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &LanguageOrderField{
		Value: func(l *Language) (ent.Value, error) {
			return l.ID, nil
		},
		column: language.FieldID,
		toTerm: language.ByID,
		toCursor: func(l *Language) Cursor {
			return Cursor{ID: l.ID}
		},
	},
}

// ToEdge converts Language into LanguageEdge.
func (l *Language) ToEdge(order *LanguageOrder) *LanguageEdge {
	if order == nil {
		order = DefaultLanguageOrder
	}
	return &LanguageEdge{
		Node:   l,
		Cursor: order.Field.toCursor(l),
	}
}

// MagicItemEdge is the edge representation of MagicItem.
type MagicItemEdge struct {
	Node   *MagicItem `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// MagicItemConnection is the connection containing edges to MagicItem.
type MagicItemConnection struct {
	Edges      []*MagicItemEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *MagicItemConnection) build(nodes []*MagicItem, pager *magicitemPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *MagicItem
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *MagicItem {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *MagicItem {
			return nodes[i]
		}
	}
	c.Edges = make([]*MagicItemEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MagicItemEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MagicItemPaginateOption enables pagination customization.
type MagicItemPaginateOption func(*magicitemPager) error

// WithMagicItemOrder configures pagination ordering.
func WithMagicItemOrder(order *MagicItemOrder) MagicItemPaginateOption {
	if order == nil {
		order = DefaultMagicItemOrder
	}
	o := *order
	return func(pager *magicitemPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMagicItemOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMagicItemFilter configures pagination filter.
func WithMagicItemFilter(filter func(*MagicItemQuery) (*MagicItemQuery, error)) MagicItemPaginateOption {
	return func(pager *magicitemPager) error {
		if filter == nil {
			return errors.New("MagicItemQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type magicitemPager struct {
	reverse bool
	order   *MagicItemOrder
	filter  func(*MagicItemQuery) (*MagicItemQuery, error)
}

func newMagicItemPager(opts []MagicItemPaginateOption, reverse bool) (*magicitemPager, error) {
	pager := &magicitemPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMagicItemOrder
	}
	return pager, nil
}

func (p *magicitemPager) applyFilter(query *MagicItemQuery) (*MagicItemQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *magicitemPager) toCursor(mi *MagicItem) Cursor {
	return p.order.Field.toCursor(mi)
}

func (p *magicitemPager) applyCursors(query *MagicItemQuery, after, before *Cursor) (*MagicItemQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultMagicItemOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *magicitemPager) applyOrder(query *MagicItemQuery) *MagicItemQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultMagicItemOrder.Field {
		query = query.Order(DefaultMagicItemOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *magicitemPager) orderExpr(query *MagicItemQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultMagicItemOrder.Field {
			b.Comma().Ident(DefaultMagicItemOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to MagicItem.
func (mi *MagicItemQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MagicItemPaginateOption,
) (*MagicItemConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMagicItemPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if mi, err = pager.applyFilter(mi); err != nil {
		return nil, err
	}
	conn := &MagicItemConnection{Edges: []*MagicItemEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = mi.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if mi, err = pager.applyCursors(mi, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		mi.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := mi.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	mi = pager.applyOrder(mi)
	nodes, err := mi.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// MagicItemOrderField defines the ordering field of MagicItem.
type MagicItemOrderField struct {
	// Value extracts the ordering value from the given MagicItem.
	Value    func(*MagicItem) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) magicitem.OrderOption
	toCursor func(*MagicItem) Cursor
}

// MagicItemOrder defines the ordering of MagicItem.
type MagicItemOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *MagicItemOrderField `json:"field"`
}

// DefaultMagicItemOrder is the default ordering of MagicItem.
var DefaultMagicItemOrder = &MagicItemOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MagicItemOrderField{
		Value: func(mi *MagicItem) (ent.Value, error) {
			return mi.ID, nil
		},
		column: magicitem.FieldID,
		toTerm: magicitem.ByID,
		toCursor: func(mi *MagicItem) Cursor {
			return Cursor{ID: mi.ID}
		},
	},
}

// ToEdge converts MagicItem into MagicItemEdge.
func (mi *MagicItem) ToEdge(order *MagicItemOrder) *MagicItemEdge {
	if order == nil {
		order = DefaultMagicItemOrder
	}
	return &MagicItemEdge{
		Node:   mi,
		Cursor: order.Field.toCursor(mi),
	}
}

// MagicSchoolEdge is the edge representation of MagicSchool.
type MagicSchoolEdge struct {
	Node   *MagicSchool `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// MagicSchoolConnection is the connection containing edges to MagicSchool.
type MagicSchoolConnection struct {
	Edges      []*MagicSchoolEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *MagicSchoolConnection) build(nodes []*MagicSchool, pager *magicschoolPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *MagicSchool
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *MagicSchool {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *MagicSchool {
			return nodes[i]
		}
	}
	c.Edges = make([]*MagicSchoolEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MagicSchoolEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MagicSchoolPaginateOption enables pagination customization.
type MagicSchoolPaginateOption func(*magicschoolPager) error

// WithMagicSchoolOrder configures pagination ordering.
func WithMagicSchoolOrder(order *MagicSchoolOrder) MagicSchoolPaginateOption {
	if order == nil {
		order = DefaultMagicSchoolOrder
	}
	o := *order
	return func(pager *magicschoolPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMagicSchoolOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMagicSchoolFilter configures pagination filter.
func WithMagicSchoolFilter(filter func(*MagicSchoolQuery) (*MagicSchoolQuery, error)) MagicSchoolPaginateOption {
	return func(pager *magicschoolPager) error {
		if filter == nil {
			return errors.New("MagicSchoolQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type magicschoolPager struct {
	reverse bool
	order   *MagicSchoolOrder
	filter  func(*MagicSchoolQuery) (*MagicSchoolQuery, error)
}

func newMagicSchoolPager(opts []MagicSchoolPaginateOption, reverse bool) (*magicschoolPager, error) {
	pager := &magicschoolPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMagicSchoolOrder
	}
	return pager, nil
}

func (p *magicschoolPager) applyFilter(query *MagicSchoolQuery) (*MagicSchoolQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *magicschoolPager) toCursor(ms *MagicSchool) Cursor {
	return p.order.Field.toCursor(ms)
}

func (p *magicschoolPager) applyCursors(query *MagicSchoolQuery, after, before *Cursor) (*MagicSchoolQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultMagicSchoolOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *magicschoolPager) applyOrder(query *MagicSchoolQuery) *MagicSchoolQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultMagicSchoolOrder.Field {
		query = query.Order(DefaultMagicSchoolOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *magicschoolPager) orderExpr(query *MagicSchoolQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultMagicSchoolOrder.Field {
			b.Comma().Ident(DefaultMagicSchoolOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to MagicSchool.
func (ms *MagicSchoolQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MagicSchoolPaginateOption,
) (*MagicSchoolConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMagicSchoolPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ms, err = pager.applyFilter(ms); err != nil {
		return nil, err
	}
	conn := &MagicSchoolConnection{Edges: []*MagicSchoolEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ms.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ms, err = pager.applyCursors(ms, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ms.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ms.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ms = pager.applyOrder(ms)
	nodes, err := ms.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// MagicSchoolOrderField defines the ordering field of MagicSchool.
type MagicSchoolOrderField struct {
	// Value extracts the ordering value from the given MagicSchool.
	Value    func(*MagicSchool) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) magicschool.OrderOption
	toCursor func(*MagicSchool) Cursor
}

// MagicSchoolOrder defines the ordering of MagicSchool.
type MagicSchoolOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *MagicSchoolOrderField `json:"field"`
}

// DefaultMagicSchoolOrder is the default ordering of MagicSchool.
var DefaultMagicSchoolOrder = &MagicSchoolOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MagicSchoolOrderField{
		Value: func(ms *MagicSchool) (ent.Value, error) {
			return ms.ID, nil
		},
		column: magicschool.FieldID,
		toTerm: magicschool.ByID,
		toCursor: func(ms *MagicSchool) Cursor {
			return Cursor{ID: ms.ID}
		},
	},
}

// ToEdge converts MagicSchool into MagicSchoolEdge.
func (ms *MagicSchool) ToEdge(order *MagicSchoolOrder) *MagicSchoolEdge {
	if order == nil {
		order = DefaultMagicSchoolOrder
	}
	return &MagicSchoolEdge{
		Node:   ms,
		Cursor: order.Field.toCursor(ms),
	}
}

// PackEdge is the edge representation of Pack.
type PackEdge struct {
	Node   *Pack  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// PackConnection is the connection containing edges to Pack.
type PackConnection struct {
	Edges      []*PackEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *PackConnection) build(nodes []*Pack, pager *packPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Pack
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Pack {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Pack {
			return nodes[i]
		}
	}
	c.Edges = make([]*PackEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PackEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PackPaginateOption enables pagination customization.
type PackPaginateOption func(*packPager) error

// WithPackOrder configures pagination ordering.
func WithPackOrder(order *PackOrder) PackPaginateOption {
	if order == nil {
		order = DefaultPackOrder
	}
	o := *order
	return func(pager *packPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPackOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPackFilter configures pagination filter.
func WithPackFilter(filter func(*PackQuery) (*PackQuery, error)) PackPaginateOption {
	return func(pager *packPager) error {
		if filter == nil {
			return errors.New("PackQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type packPager struct {
	reverse bool
	order   *PackOrder
	filter  func(*PackQuery) (*PackQuery, error)
}

func newPackPager(opts []PackPaginateOption, reverse bool) (*packPager, error) {
	pager := &packPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPackOrder
	}
	return pager, nil
}

func (p *packPager) applyFilter(query *PackQuery) (*PackQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *packPager) toCursor(pa *Pack) Cursor {
	return p.order.Field.toCursor(pa)
}

func (p *packPager) applyCursors(query *PackQuery, after, before *Cursor) (*PackQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPackOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *packPager) applyOrder(query *PackQuery) *PackQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPackOrder.Field {
		query = query.Order(DefaultPackOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *packPager) orderExpr(query *PackQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPackOrder.Field {
			b.Comma().Ident(DefaultPackOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Pack.
func (pa *PackQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PackPaginateOption,
) (*PackConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPackPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pa, err = pager.applyFilter(pa); err != nil {
		return nil, err
	}
	conn := &PackConnection{Edges: []*PackEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pa.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pa, err = pager.applyCursors(pa, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		pa.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pa.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pa = pager.applyOrder(pa)
	nodes, err := pa.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PackOrderField defines the ordering field of Pack.
type PackOrderField struct {
	// Value extracts the ordering value from the given Pack.
	Value    func(*Pack) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) pack.OrderOption
	toCursor func(*Pack) Cursor
}

// PackOrder defines the ordering of Pack.
type PackOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *PackOrderField `json:"field"`
}

// DefaultPackOrder is the default ordering of Pack.
var DefaultPackOrder = &PackOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PackOrderField{
		Value: func(pa *Pack) (ent.Value, error) {
			return pa.ID, nil
		},
		column: pack.FieldID,
		toTerm: pack.ByID,
		toCursor: func(pa *Pack) Cursor {
			return Cursor{ID: pa.ID}
		},
	},
}

// ToEdge converts Pack into PackEdge.
func (pa *Pack) ToEdge(order *PackOrder) *PackEdge {
	if order == nil {
		order = DefaultPackOrder
	}
	return &PackEdge{
		Node:   pa,
		Cursor: order.Field.toCursor(pa),
	}
}

// PrerequisiteEdge is the edge representation of Prerequisite.
type PrerequisiteEdge struct {
	Node   *Prerequisite `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// PrerequisiteConnection is the connection containing edges to Prerequisite.
type PrerequisiteConnection struct {
	Edges      []*PrerequisiteEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *PrerequisiteConnection) build(nodes []*Prerequisite, pager *prerequisitePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Prerequisite
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Prerequisite {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Prerequisite {
			return nodes[i]
		}
	}
	c.Edges = make([]*PrerequisiteEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PrerequisiteEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PrerequisitePaginateOption enables pagination customization.
type PrerequisitePaginateOption func(*prerequisitePager) error

// WithPrerequisiteOrder configures pagination ordering.
func WithPrerequisiteOrder(order *PrerequisiteOrder) PrerequisitePaginateOption {
	if order == nil {
		order = DefaultPrerequisiteOrder
	}
	o := *order
	return func(pager *prerequisitePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPrerequisiteOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPrerequisiteFilter configures pagination filter.
func WithPrerequisiteFilter(filter func(*PrerequisiteQuery) (*PrerequisiteQuery, error)) PrerequisitePaginateOption {
	return func(pager *prerequisitePager) error {
		if filter == nil {
			return errors.New("PrerequisiteQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type prerequisitePager struct {
	reverse bool
	order   *PrerequisiteOrder
	filter  func(*PrerequisiteQuery) (*PrerequisiteQuery, error)
}

func newPrerequisitePager(opts []PrerequisitePaginateOption, reverse bool) (*prerequisitePager, error) {
	pager := &prerequisitePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPrerequisiteOrder
	}
	return pager, nil
}

func (p *prerequisitePager) applyFilter(query *PrerequisiteQuery) (*PrerequisiteQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *prerequisitePager) toCursor(pr *Prerequisite) Cursor {
	return p.order.Field.toCursor(pr)
}

func (p *prerequisitePager) applyCursors(query *PrerequisiteQuery, after, before *Cursor) (*PrerequisiteQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPrerequisiteOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *prerequisitePager) applyOrder(query *PrerequisiteQuery) *PrerequisiteQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPrerequisiteOrder.Field {
		query = query.Order(DefaultPrerequisiteOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *prerequisitePager) orderExpr(query *PrerequisiteQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPrerequisiteOrder.Field {
			b.Comma().Ident(DefaultPrerequisiteOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Prerequisite.
func (pr *PrerequisiteQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PrerequisitePaginateOption,
) (*PrerequisiteConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPrerequisitePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}
	conn := &PrerequisiteConnection{Edges: []*PrerequisiteEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pr.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pr, err = pager.applyCursors(pr, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		pr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pr = pager.applyOrder(pr)
	nodes, err := pr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PrerequisiteOrderField defines the ordering field of Prerequisite.
type PrerequisiteOrderField struct {
	// Value extracts the ordering value from the given Prerequisite.
	Value    func(*Prerequisite) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) prerequisite.OrderOption
	toCursor func(*Prerequisite) Cursor
}

// PrerequisiteOrder defines the ordering of Prerequisite.
type PrerequisiteOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *PrerequisiteOrderField `json:"field"`
}

// DefaultPrerequisiteOrder is the default ordering of Prerequisite.
var DefaultPrerequisiteOrder = &PrerequisiteOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PrerequisiteOrderField{
		Value: func(pr *Prerequisite) (ent.Value, error) {
			return pr.ID, nil
		},
		column: prerequisite.FieldID,
		toTerm: prerequisite.ByID,
		toCursor: func(pr *Prerequisite) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ToEdge converts Prerequisite into PrerequisiteEdge.
func (pr *Prerequisite) ToEdge(order *PrerequisiteOrder) *PrerequisiteEdge {
	if order == nil {
		order = DefaultPrerequisiteOrder
	}
	return &PrerequisiteEdge{
		Node:   pr,
		Cursor: order.Field.toCursor(pr),
	}
}

// ProficiencyEdge is the edge representation of Proficiency.
type ProficiencyEdge struct {
	Node   *Proficiency `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// ProficiencyConnection is the connection containing edges to Proficiency.
type ProficiencyConnection struct {
	Edges      []*ProficiencyEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *ProficiencyConnection) build(nodes []*Proficiency, pager *proficiencyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Proficiency
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Proficiency {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Proficiency {
			return nodes[i]
		}
	}
	c.Edges = make([]*ProficiencyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ProficiencyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ProficiencyPaginateOption enables pagination customization.
type ProficiencyPaginateOption func(*proficiencyPager) error

// WithProficiencyOrder configures pagination ordering.
func WithProficiencyOrder(order *ProficiencyOrder) ProficiencyPaginateOption {
	if order == nil {
		order = DefaultProficiencyOrder
	}
	o := *order
	return func(pager *proficiencyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProficiencyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProficiencyFilter configures pagination filter.
func WithProficiencyFilter(filter func(*ProficiencyQuery) (*ProficiencyQuery, error)) ProficiencyPaginateOption {
	return func(pager *proficiencyPager) error {
		if filter == nil {
			return errors.New("ProficiencyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type proficiencyPager struct {
	reverse bool
	order   *ProficiencyOrder
	filter  func(*ProficiencyQuery) (*ProficiencyQuery, error)
}

func newProficiencyPager(opts []ProficiencyPaginateOption, reverse bool) (*proficiencyPager, error) {
	pager := &proficiencyPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProficiencyOrder
	}
	return pager, nil
}

func (p *proficiencyPager) applyFilter(query *ProficiencyQuery) (*ProficiencyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *proficiencyPager) toCursor(pr *Proficiency) Cursor {
	return p.order.Field.toCursor(pr)
}

func (p *proficiencyPager) applyCursors(query *ProficiencyQuery, after, before *Cursor) (*ProficiencyQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultProficiencyOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *proficiencyPager) applyOrder(query *ProficiencyQuery) *ProficiencyQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultProficiencyOrder.Field {
		query = query.Order(DefaultProficiencyOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *proficiencyPager) orderExpr(query *ProficiencyQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultProficiencyOrder.Field {
			b.Comma().Ident(DefaultProficiencyOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Proficiency.
func (pr *ProficiencyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProficiencyPaginateOption,
) (*ProficiencyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProficiencyPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}
	conn := &ProficiencyConnection{Edges: []*ProficiencyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pr.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pr, err = pager.applyCursors(pr, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		pr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pr = pager.applyOrder(pr)
	nodes, err := pr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ProficiencyOrderField defines the ordering field of Proficiency.
type ProficiencyOrderField struct {
	// Value extracts the ordering value from the given Proficiency.
	Value    func(*Proficiency) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) proficiency.OrderOption
	toCursor func(*Proficiency) Cursor
}

// ProficiencyOrder defines the ordering of Proficiency.
type ProficiencyOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *ProficiencyOrderField `json:"field"`
}

// DefaultProficiencyOrder is the default ordering of Proficiency.
var DefaultProficiencyOrder = &ProficiencyOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ProficiencyOrderField{
		Value: func(pr *Proficiency) (ent.Value, error) {
			return pr.ID, nil
		},
		column: proficiency.FieldID,
		toTerm: proficiency.ByID,
		toCursor: func(pr *Proficiency) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ToEdge converts Proficiency into ProficiencyEdge.
func (pr *Proficiency) ToEdge(order *ProficiencyOrder) *ProficiencyEdge {
	if order == nil {
		order = DefaultProficiencyOrder
	}
	return &ProficiencyEdge{
		Node:   pr,
		Cursor: order.Field.toCursor(pr),
	}
}

// RaceEdge is the edge representation of Race.
type RaceEdge struct {
	Node   *Race  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// RaceConnection is the connection containing edges to Race.
type RaceConnection struct {
	Edges      []*RaceEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *RaceConnection) build(nodes []*Race, pager *racePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Race
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Race {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Race {
			return nodes[i]
		}
	}
	c.Edges = make([]*RaceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RaceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RacePaginateOption enables pagination customization.
type RacePaginateOption func(*racePager) error

// WithRaceOrder configures pagination ordering.
func WithRaceOrder(order *RaceOrder) RacePaginateOption {
	if order == nil {
		order = DefaultRaceOrder
	}
	o := *order
	return func(pager *racePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRaceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRaceFilter configures pagination filter.
func WithRaceFilter(filter func(*RaceQuery) (*RaceQuery, error)) RacePaginateOption {
	return func(pager *racePager) error {
		if filter == nil {
			return errors.New("RaceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type racePager struct {
	reverse bool
	order   *RaceOrder
	filter  func(*RaceQuery) (*RaceQuery, error)
}

func newRacePager(opts []RacePaginateOption, reverse bool) (*racePager, error) {
	pager := &racePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRaceOrder
	}
	return pager, nil
}

func (p *racePager) applyFilter(query *RaceQuery) (*RaceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *racePager) toCursor(r *Race) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *racePager) applyCursors(query *RaceQuery, after, before *Cursor) (*RaceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRaceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *racePager) applyOrder(query *RaceQuery) *RaceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRaceOrder.Field {
		query = query.Order(DefaultRaceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *racePager) orderExpr(query *RaceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRaceOrder.Field {
			b.Comma().Ident(DefaultRaceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Race.
func (r *RaceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RacePaginateOption,
) (*RaceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRacePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}
	conn := &RaceConnection{Edges: []*RaceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = r.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if r, err = pager.applyCursors(r, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		r.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := r.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	r = pager.applyOrder(r)
	nodes, err := r.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// RaceOrderField defines the ordering field of Race.
type RaceOrderField struct {
	// Value extracts the ordering value from the given Race.
	Value    func(*Race) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) race.OrderOption
	toCursor func(*Race) Cursor
}

// RaceOrder defines the ordering of Race.
type RaceOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *RaceOrderField `json:"field"`
}

// DefaultRaceOrder is the default ordering of Race.
var DefaultRaceOrder = &RaceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RaceOrderField{
		Value: func(r *Race) (ent.Value, error) {
			return r.ID, nil
		},
		column: race.FieldID,
		toTerm: race.ByID,
		toCursor: func(r *Race) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Race into RaceEdge.
func (r *Race) ToEdge(order *RaceOrder) *RaceEdge {
	if order == nil {
		order = DefaultRaceOrder
	}
	return &RaceEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}

// SkillEdge is the edge representation of Skill.
type SkillEdge struct {
	Node   *Skill `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// SkillConnection is the connection containing edges to Skill.
type SkillConnection struct {
	Edges      []*SkillEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *SkillConnection) build(nodes []*Skill, pager *skillPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Skill
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Skill {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Skill {
			return nodes[i]
		}
	}
	c.Edges = make([]*SkillEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SkillEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SkillPaginateOption enables pagination customization.
type SkillPaginateOption func(*skillPager) error

// WithSkillOrder configures pagination ordering.
func WithSkillOrder(order *SkillOrder) SkillPaginateOption {
	if order == nil {
		order = DefaultSkillOrder
	}
	o := *order
	return func(pager *skillPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSkillOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSkillFilter configures pagination filter.
func WithSkillFilter(filter func(*SkillQuery) (*SkillQuery, error)) SkillPaginateOption {
	return func(pager *skillPager) error {
		if filter == nil {
			return errors.New("SkillQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type skillPager struct {
	reverse bool
	order   *SkillOrder
	filter  func(*SkillQuery) (*SkillQuery, error)
}

func newSkillPager(opts []SkillPaginateOption, reverse bool) (*skillPager, error) {
	pager := &skillPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSkillOrder
	}
	return pager, nil
}

func (p *skillPager) applyFilter(query *SkillQuery) (*SkillQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *skillPager) toCursor(s *Skill) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *skillPager) applyCursors(query *SkillQuery, after, before *Cursor) (*SkillQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSkillOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *skillPager) applyOrder(query *SkillQuery) *SkillQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSkillOrder.Field {
		query = query.Order(DefaultSkillOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *skillPager) orderExpr(query *SkillQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSkillOrder.Field {
			b.Comma().Ident(DefaultSkillOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Skill.
func (s *SkillQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SkillPaginateOption,
) (*SkillConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSkillPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}
	conn := &SkillConnection{Edges: []*SkillEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = s.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if s, err = pager.applyCursors(s, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		s.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := s.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	s = pager.applyOrder(s)
	nodes, err := s.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SkillOrderField defines the ordering field of Skill.
type SkillOrderField struct {
	// Value extracts the ordering value from the given Skill.
	Value    func(*Skill) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) skill.OrderOption
	toCursor func(*Skill) Cursor
}

// SkillOrder defines the ordering of Skill.
type SkillOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *SkillOrderField `json:"field"`
}

// DefaultSkillOrder is the default ordering of Skill.
var DefaultSkillOrder = &SkillOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SkillOrderField{
		Value: func(s *Skill) (ent.Value, error) {
			return s.ID, nil
		},
		column: skill.FieldID,
		toTerm: skill.ByID,
		toCursor: func(s *Skill) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Skill into SkillEdge.
func (s *Skill) ToEdge(order *SkillOrder) *SkillEdge {
	if order == nil {
		order = DefaultSkillOrder
	}
	return &SkillEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// VehicleEdge is the edge representation of Vehicle.
type VehicleEdge struct {
	Node   *Vehicle `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// VehicleConnection is the connection containing edges to Vehicle.
type VehicleConnection struct {
	Edges      []*VehicleEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *VehicleConnection) build(nodes []*Vehicle, pager *vehiclePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Vehicle
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Vehicle {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Vehicle {
			return nodes[i]
		}
	}
	c.Edges = make([]*VehicleEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &VehicleEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// VehiclePaginateOption enables pagination customization.
type VehiclePaginateOption func(*vehiclePager) error

// WithVehicleOrder configures pagination ordering.
func WithVehicleOrder(order *VehicleOrder) VehiclePaginateOption {
	if order == nil {
		order = DefaultVehicleOrder
	}
	o := *order
	return func(pager *vehiclePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultVehicleOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithVehicleFilter configures pagination filter.
func WithVehicleFilter(filter func(*VehicleQuery) (*VehicleQuery, error)) VehiclePaginateOption {
	return func(pager *vehiclePager) error {
		if filter == nil {
			return errors.New("VehicleQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type vehiclePager struct {
	reverse bool
	order   *VehicleOrder
	filter  func(*VehicleQuery) (*VehicleQuery, error)
}

func newVehiclePager(opts []VehiclePaginateOption, reverse bool) (*vehiclePager, error) {
	pager := &vehiclePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultVehicleOrder
	}
	return pager, nil
}

func (p *vehiclePager) applyFilter(query *VehicleQuery) (*VehicleQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *vehiclePager) toCursor(v *Vehicle) Cursor {
	return p.order.Field.toCursor(v)
}

func (p *vehiclePager) applyCursors(query *VehicleQuery, after, before *Cursor) (*VehicleQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultVehicleOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *vehiclePager) applyOrder(query *VehicleQuery) *VehicleQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultVehicleOrder.Field {
		query = query.Order(DefaultVehicleOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *vehiclePager) orderExpr(query *VehicleQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultVehicleOrder.Field {
			b.Comma().Ident(DefaultVehicleOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Vehicle.
func (v *VehicleQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...VehiclePaginateOption,
) (*VehicleConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newVehiclePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if v, err = pager.applyFilter(v); err != nil {
		return nil, err
	}
	conn := &VehicleConnection{Edges: []*VehicleEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = v.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if v, err = pager.applyCursors(v, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		v.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := v.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	v = pager.applyOrder(v)
	nodes, err := v.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// VehicleOrderField defines the ordering field of Vehicle.
type VehicleOrderField struct {
	// Value extracts the ordering value from the given Vehicle.
	Value    func(*Vehicle) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) vehicle.OrderOption
	toCursor func(*Vehicle) Cursor
}

// VehicleOrder defines the ordering of Vehicle.
type VehicleOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *VehicleOrderField `json:"field"`
}

// DefaultVehicleOrder is the default ordering of Vehicle.
var DefaultVehicleOrder = &VehicleOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &VehicleOrderField{
		Value: func(v *Vehicle) (ent.Value, error) {
			return v.ID, nil
		},
		column: vehicle.FieldID,
		toTerm: vehicle.ByID,
		toCursor: func(v *Vehicle) Cursor {
			return Cursor{ID: v.ID}
		},
	},
}

// ToEdge converts Vehicle into VehicleEdge.
func (v *Vehicle) ToEdge(order *VehicleOrder) *VehicleEdge {
	if order == nil {
		order = DefaultVehicleOrder
	}
	return &VehicleEdge{
		Node:   v,
		Cursor: order.Field.toCursor(v),
	}
}

// WeaponEdge is the edge representation of Weapon.
type WeaponEdge struct {
	Node   *Weapon `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// WeaponConnection is the connection containing edges to Weapon.
type WeaponConnection struct {
	Edges      []*WeaponEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *WeaponConnection) build(nodes []*Weapon, pager *weaponPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Weapon
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Weapon {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Weapon {
			return nodes[i]
		}
	}
	c.Edges = make([]*WeaponEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &WeaponEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// WeaponPaginateOption enables pagination customization.
type WeaponPaginateOption func(*weaponPager) error

// WithWeaponOrder configures pagination ordering.
func WithWeaponOrder(order *WeaponOrder) WeaponPaginateOption {
	if order == nil {
		order = DefaultWeaponOrder
	}
	o := *order
	return func(pager *weaponPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWeaponOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWeaponFilter configures pagination filter.
func WithWeaponFilter(filter func(*WeaponQuery) (*WeaponQuery, error)) WeaponPaginateOption {
	return func(pager *weaponPager) error {
		if filter == nil {
			return errors.New("WeaponQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type weaponPager struct {
	reverse bool
	order   *WeaponOrder
	filter  func(*WeaponQuery) (*WeaponQuery, error)
}

func newWeaponPager(opts []WeaponPaginateOption, reverse bool) (*weaponPager, error) {
	pager := &weaponPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWeaponOrder
	}
	return pager, nil
}

func (p *weaponPager) applyFilter(query *WeaponQuery) (*WeaponQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *weaponPager) toCursor(w *Weapon) Cursor {
	return p.order.Field.toCursor(w)
}

func (p *weaponPager) applyCursors(query *WeaponQuery, after, before *Cursor) (*WeaponQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultWeaponOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *weaponPager) applyOrder(query *WeaponQuery) *WeaponQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultWeaponOrder.Field {
		query = query.Order(DefaultWeaponOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *weaponPager) orderExpr(query *WeaponQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultWeaponOrder.Field {
			b.Comma().Ident(DefaultWeaponOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Weapon.
func (w *WeaponQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WeaponPaginateOption,
) (*WeaponConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWeaponPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if w, err = pager.applyFilter(w); err != nil {
		return nil, err
	}
	conn := &WeaponConnection{Edges: []*WeaponEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = w.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if w, err = pager.applyCursors(w, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		w.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := w.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	w = pager.applyOrder(w)
	nodes, err := w.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// WeaponOrderField defines the ordering field of Weapon.
type WeaponOrderField struct {
	// Value extracts the ordering value from the given Weapon.
	Value    func(*Weapon) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) weapon.OrderOption
	toCursor func(*Weapon) Cursor
}

// WeaponOrder defines the ordering of Weapon.
type WeaponOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *WeaponOrderField `json:"field"`
}

// DefaultWeaponOrder is the default ordering of Weapon.
var DefaultWeaponOrder = &WeaponOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &WeaponOrderField{
		Value: func(w *Weapon) (ent.Value, error) {
			return w.ID, nil
		},
		column: weapon.FieldID,
		toTerm: weapon.ByID,
		toCursor: func(w *Weapon) Cursor {
			return Cursor{ID: w.ID}
		},
	},
}

// ToEdge converts Weapon into WeaponEdge.
func (w *Weapon) ToEdge(order *WeaponOrder) *WeaponEdge {
	if order == nil {
		order = DefaultWeaponOrder
	}
	return &WeaponEdge{
		Node:   w,
		Cursor: order.Field.toCursor(w),
	}
}

// WeaponDamageEdge is the edge representation of WeaponDamage.
type WeaponDamageEdge struct {
	Node   *WeaponDamage `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// WeaponDamageConnection is the connection containing edges to WeaponDamage.
type WeaponDamageConnection struct {
	Edges      []*WeaponDamageEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *WeaponDamageConnection) build(nodes []*WeaponDamage, pager *weapondamagePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *WeaponDamage
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *WeaponDamage {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *WeaponDamage {
			return nodes[i]
		}
	}
	c.Edges = make([]*WeaponDamageEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &WeaponDamageEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// WeaponDamagePaginateOption enables pagination customization.
type WeaponDamagePaginateOption func(*weapondamagePager) error

// WithWeaponDamageOrder configures pagination ordering.
func WithWeaponDamageOrder(order *WeaponDamageOrder) WeaponDamagePaginateOption {
	if order == nil {
		order = DefaultWeaponDamageOrder
	}
	o := *order
	return func(pager *weapondamagePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWeaponDamageOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWeaponDamageFilter configures pagination filter.
func WithWeaponDamageFilter(filter func(*WeaponDamageQuery) (*WeaponDamageQuery, error)) WeaponDamagePaginateOption {
	return func(pager *weapondamagePager) error {
		if filter == nil {
			return errors.New("WeaponDamageQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type weapondamagePager struct {
	reverse bool
	order   *WeaponDamageOrder
	filter  func(*WeaponDamageQuery) (*WeaponDamageQuery, error)
}

func newWeaponDamagePager(opts []WeaponDamagePaginateOption, reverse bool) (*weapondamagePager, error) {
	pager := &weapondamagePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWeaponDamageOrder
	}
	return pager, nil
}

func (p *weapondamagePager) applyFilter(query *WeaponDamageQuery) (*WeaponDamageQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *weapondamagePager) toCursor(wd *WeaponDamage) Cursor {
	return p.order.Field.toCursor(wd)
}

func (p *weapondamagePager) applyCursors(query *WeaponDamageQuery, after, before *Cursor) (*WeaponDamageQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultWeaponDamageOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *weapondamagePager) applyOrder(query *WeaponDamageQuery) *WeaponDamageQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultWeaponDamageOrder.Field {
		query = query.Order(DefaultWeaponDamageOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *weapondamagePager) orderExpr(query *WeaponDamageQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultWeaponDamageOrder.Field {
			b.Comma().Ident(DefaultWeaponDamageOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to WeaponDamage.
func (wd *WeaponDamageQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WeaponDamagePaginateOption,
) (*WeaponDamageConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWeaponDamagePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if wd, err = pager.applyFilter(wd); err != nil {
		return nil, err
	}
	conn := &WeaponDamageConnection{Edges: []*WeaponDamageEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = wd.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if wd, err = pager.applyCursors(wd, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		wd.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := wd.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	wd = pager.applyOrder(wd)
	nodes, err := wd.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// WeaponDamageOrderField defines the ordering field of WeaponDamage.
type WeaponDamageOrderField struct {
	// Value extracts the ordering value from the given WeaponDamage.
	Value    func(*WeaponDamage) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) weapondamage.OrderOption
	toCursor func(*WeaponDamage) Cursor
}

// WeaponDamageOrder defines the ordering of WeaponDamage.
type WeaponDamageOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *WeaponDamageOrderField `json:"field"`
}

// DefaultWeaponDamageOrder is the default ordering of WeaponDamage.
var DefaultWeaponDamageOrder = &WeaponDamageOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &WeaponDamageOrderField{
		Value: func(wd *WeaponDamage) (ent.Value, error) {
			return wd.ID, nil
		},
		column: weapondamage.FieldID,
		toTerm: weapondamage.ByID,
		toCursor: func(wd *WeaponDamage) Cursor {
			return Cursor{ID: wd.ID}
		},
	},
}

// ToEdge converts WeaponDamage into WeaponDamageEdge.
func (wd *WeaponDamage) ToEdge(order *WeaponDamageOrder) *WeaponDamageEdge {
	if order == nil {
		order = DefaultWeaponDamageOrder
	}
	return &WeaponDamageEdge{
		Node:   wd,
		Cursor: order.Field.toCursor(wd),
	}
}

// WeaponRangeEdge is the edge representation of WeaponRange.
type WeaponRangeEdge struct {
	Node   *WeaponRange `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// WeaponRangeConnection is the connection containing edges to WeaponRange.
type WeaponRangeConnection struct {
	Edges      []*WeaponRangeEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *WeaponRangeConnection) build(nodes []*WeaponRange, pager *weaponrangePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *WeaponRange
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *WeaponRange {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *WeaponRange {
			return nodes[i]
		}
	}
	c.Edges = make([]*WeaponRangeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &WeaponRangeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// WeaponRangePaginateOption enables pagination customization.
type WeaponRangePaginateOption func(*weaponrangePager) error

// WithWeaponRangeOrder configures pagination ordering.
func WithWeaponRangeOrder(order *WeaponRangeOrder) WeaponRangePaginateOption {
	if order == nil {
		order = DefaultWeaponRangeOrder
	}
	o := *order
	return func(pager *weaponrangePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWeaponRangeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWeaponRangeFilter configures pagination filter.
func WithWeaponRangeFilter(filter func(*WeaponRangeQuery) (*WeaponRangeQuery, error)) WeaponRangePaginateOption {
	return func(pager *weaponrangePager) error {
		if filter == nil {
			return errors.New("WeaponRangeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type weaponrangePager struct {
	reverse bool
	order   *WeaponRangeOrder
	filter  func(*WeaponRangeQuery) (*WeaponRangeQuery, error)
}

func newWeaponRangePager(opts []WeaponRangePaginateOption, reverse bool) (*weaponrangePager, error) {
	pager := &weaponrangePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWeaponRangeOrder
	}
	return pager, nil
}

func (p *weaponrangePager) applyFilter(query *WeaponRangeQuery) (*WeaponRangeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *weaponrangePager) toCursor(wr *WeaponRange) Cursor {
	return p.order.Field.toCursor(wr)
}

func (p *weaponrangePager) applyCursors(query *WeaponRangeQuery, after, before *Cursor) (*WeaponRangeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultWeaponRangeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *weaponrangePager) applyOrder(query *WeaponRangeQuery) *WeaponRangeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultWeaponRangeOrder.Field {
		query = query.Order(DefaultWeaponRangeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *weaponrangePager) orderExpr(query *WeaponRangeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultWeaponRangeOrder.Field {
			b.Comma().Ident(DefaultWeaponRangeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to WeaponRange.
func (wr *WeaponRangeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WeaponRangePaginateOption,
) (*WeaponRangeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWeaponRangePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if wr, err = pager.applyFilter(wr); err != nil {
		return nil, err
	}
	conn := &WeaponRangeConnection{Edges: []*WeaponRangeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = wr.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if wr, err = pager.applyCursors(wr, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		wr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := wr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	wr = pager.applyOrder(wr)
	nodes, err := wr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// WeaponRangeOrderField defines the ordering field of WeaponRange.
type WeaponRangeOrderField struct {
	// Value extracts the ordering value from the given WeaponRange.
	Value    func(*WeaponRange) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) weaponrange.OrderOption
	toCursor func(*WeaponRange) Cursor
}

// WeaponRangeOrder defines the ordering of WeaponRange.
type WeaponRangeOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *WeaponRangeOrderField `json:"field"`
}

// DefaultWeaponRangeOrder is the default ordering of WeaponRange.
var DefaultWeaponRangeOrder = &WeaponRangeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &WeaponRangeOrderField{
		Value: func(wr *WeaponRange) (ent.Value, error) {
			return wr.ID, nil
		},
		column: weaponrange.FieldID,
		toTerm: weaponrange.ByID,
		toCursor: func(wr *WeaponRange) Cursor {
			return Cursor{ID: wr.ID}
		},
	},
}

// ToEdge converts WeaponRange into WeaponRangeEdge.
func (wr *WeaponRange) ToEdge(order *WeaponRangeOrder) *WeaponRangeEdge {
	if order == nil {
		order = DefaultWeaponRangeOrder
	}
	return &WeaponRangeEdge{
		Node:   wr,
		Cursor: order.Field.toCursor(wr),
	}
}
