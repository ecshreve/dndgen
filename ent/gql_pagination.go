// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/ecshreve/dndgen/ent/abilitybonus"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/alignment"
	"github.com/ecshreve/dndgen/ent/coin"
	"github.com/ecshreve/dndgen/ent/condition"
	"github.com/ecshreve/dndgen/ent/damage"
	"github.com/ecshreve/dndgen/ent/damagetype"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/equipmentcost"
	"github.com/ecshreve/dndgen/ent/feat"
	"github.com/ecshreve/dndgen/ent/language"
	"github.com/ecshreve/dndgen/ent/magicschool"
	"github.com/ecshreve/dndgen/ent/property"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/rule"
	"github.com/ecshreve/dndgen/ent/rulesection"
	"github.com/ecshreve/dndgen/ent/skill"
	"github.com/ecshreve/dndgen/ent/weapon"
	"github.com/ecshreve/dndgen/ent/weaponrange"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AbilityBonusEdge is the edge representation of AbilityBonus.
type AbilityBonusEdge struct {
	Node   *AbilityBonus `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// AbilityBonusConnection is the connection containing edges to AbilityBonus.
type AbilityBonusConnection struct {
	Edges      []*AbilityBonusEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *AbilityBonusConnection) build(nodes []*AbilityBonus, pager *abilitybonusPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AbilityBonus
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AbilityBonus {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AbilityBonus {
			return nodes[i]
		}
	}
	c.Edges = make([]*AbilityBonusEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AbilityBonusEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AbilityBonusPaginateOption enables pagination customization.
type AbilityBonusPaginateOption func(*abilitybonusPager) error

// WithAbilityBonusOrder configures pagination ordering.
func WithAbilityBonusOrder(order *AbilityBonusOrder) AbilityBonusPaginateOption {
	if order == nil {
		order = DefaultAbilityBonusOrder
	}
	o := *order
	return func(pager *abilitybonusPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAbilityBonusOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAbilityBonusFilter configures pagination filter.
func WithAbilityBonusFilter(filter func(*AbilityBonusQuery) (*AbilityBonusQuery, error)) AbilityBonusPaginateOption {
	return func(pager *abilitybonusPager) error {
		if filter == nil {
			return errors.New("AbilityBonusQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type abilitybonusPager struct {
	reverse bool
	order   *AbilityBonusOrder
	filter  func(*AbilityBonusQuery) (*AbilityBonusQuery, error)
}

func newAbilityBonusPager(opts []AbilityBonusPaginateOption, reverse bool) (*abilitybonusPager, error) {
	pager := &abilitybonusPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAbilityBonusOrder
	}
	return pager, nil
}

func (p *abilitybonusPager) applyFilter(query *AbilityBonusQuery) (*AbilityBonusQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *abilitybonusPager) toCursor(ab *AbilityBonus) Cursor {
	return p.order.Field.toCursor(ab)
}

func (p *abilitybonusPager) applyCursors(query *AbilityBonusQuery, after, before *Cursor) (*AbilityBonusQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAbilityBonusOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *abilitybonusPager) applyOrder(query *AbilityBonusQuery) *AbilityBonusQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAbilityBonusOrder.Field {
		query = query.Order(DefaultAbilityBonusOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *abilitybonusPager) orderExpr(query *AbilityBonusQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAbilityBonusOrder.Field {
			b.Comma().Ident(DefaultAbilityBonusOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AbilityBonus.
func (ab *AbilityBonusQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AbilityBonusPaginateOption,
) (*AbilityBonusConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAbilityBonusPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ab, err = pager.applyFilter(ab); err != nil {
		return nil, err
	}
	conn := &AbilityBonusConnection{Edges: []*AbilityBonusEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ab.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ab, err = pager.applyCursors(ab, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ab.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ab.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ab = pager.applyOrder(ab)
	nodes, err := ab.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AbilityBonusOrderField defines the ordering field of AbilityBonus.
type AbilityBonusOrderField struct {
	// Value extracts the ordering value from the given AbilityBonus.
	Value    func(*AbilityBonus) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) abilitybonus.OrderOption
	toCursor func(*AbilityBonus) Cursor
}

// AbilityBonusOrder defines the ordering of AbilityBonus.
type AbilityBonusOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *AbilityBonusOrderField `json:"field"`
}

// DefaultAbilityBonusOrder is the default ordering of AbilityBonus.
var DefaultAbilityBonusOrder = &AbilityBonusOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AbilityBonusOrderField{
		Value: func(ab *AbilityBonus) (ent.Value, error) {
			return ab.ID, nil
		},
		column: abilitybonus.FieldID,
		toTerm: abilitybonus.ByID,
		toCursor: func(ab *AbilityBonus) Cursor {
			return Cursor{ID: ab.ID}
		},
	},
}

// ToEdge converts AbilityBonus into AbilityBonusEdge.
func (ab *AbilityBonus) ToEdge(order *AbilityBonusOrder) *AbilityBonusEdge {
	if order == nil {
		order = DefaultAbilityBonusOrder
	}
	return &AbilityBonusEdge{
		Node:   ab,
		Cursor: order.Field.toCursor(ab),
	}
}

// AbilityScoreEdge is the edge representation of AbilityScore.
type AbilityScoreEdge struct {
	Node   *AbilityScore `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// AbilityScoreConnection is the connection containing edges to AbilityScore.
type AbilityScoreConnection struct {
	Edges      []*AbilityScoreEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *AbilityScoreConnection) build(nodes []*AbilityScore, pager *abilityscorePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AbilityScore
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AbilityScore {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AbilityScore {
			return nodes[i]
		}
	}
	c.Edges = make([]*AbilityScoreEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AbilityScoreEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AbilityScorePaginateOption enables pagination customization.
type AbilityScorePaginateOption func(*abilityscorePager) error

// WithAbilityScoreOrder configures pagination ordering.
func WithAbilityScoreOrder(order *AbilityScoreOrder) AbilityScorePaginateOption {
	if order == nil {
		order = DefaultAbilityScoreOrder
	}
	o := *order
	return func(pager *abilityscorePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAbilityScoreOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAbilityScoreFilter configures pagination filter.
func WithAbilityScoreFilter(filter func(*AbilityScoreQuery) (*AbilityScoreQuery, error)) AbilityScorePaginateOption {
	return func(pager *abilityscorePager) error {
		if filter == nil {
			return errors.New("AbilityScoreQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type abilityscorePager struct {
	reverse bool
	order   *AbilityScoreOrder
	filter  func(*AbilityScoreQuery) (*AbilityScoreQuery, error)
}

func newAbilityScorePager(opts []AbilityScorePaginateOption, reverse bool) (*abilityscorePager, error) {
	pager := &abilityscorePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAbilityScoreOrder
	}
	return pager, nil
}

func (p *abilityscorePager) applyFilter(query *AbilityScoreQuery) (*AbilityScoreQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *abilityscorePager) toCursor(as *AbilityScore) Cursor {
	return p.order.Field.toCursor(as)
}

func (p *abilityscorePager) applyCursors(query *AbilityScoreQuery, after, before *Cursor) (*AbilityScoreQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAbilityScoreOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *abilityscorePager) applyOrder(query *AbilityScoreQuery) *AbilityScoreQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAbilityScoreOrder.Field {
		query = query.Order(DefaultAbilityScoreOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *abilityscorePager) orderExpr(query *AbilityScoreQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAbilityScoreOrder.Field {
			b.Comma().Ident(DefaultAbilityScoreOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AbilityScore.
func (as *AbilityScoreQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AbilityScorePaginateOption,
) (*AbilityScoreConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAbilityScorePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if as, err = pager.applyFilter(as); err != nil {
		return nil, err
	}
	conn := &AbilityScoreConnection{Edges: []*AbilityScoreEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = as.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if as, err = pager.applyCursors(as, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		as.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := as.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	as = pager.applyOrder(as)
	nodes, err := as.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AbilityScoreOrderFieldIndx orders AbilityScore by indx.
	AbilityScoreOrderFieldIndx = &AbilityScoreOrderField{
		Value: func(as *AbilityScore) (ent.Value, error) {
			return as.Indx, nil
		},
		column: abilityscore.FieldIndx,
		toTerm: abilityscore.ByIndx,
		toCursor: func(as *AbilityScore) Cursor {
			return Cursor{
				ID:    as.ID,
				Value: as.Indx,
			}
		},
	}
	// AbilityScoreOrderFieldName orders AbilityScore by name.
	AbilityScoreOrderFieldName = &AbilityScoreOrderField{
		Value: func(as *AbilityScore) (ent.Value, error) {
			return as.Name, nil
		},
		column: abilityscore.FieldName,
		toTerm: abilityscore.ByName,
		toCursor: func(as *AbilityScore) Cursor {
			return Cursor{
				ID:    as.ID,
				Value: as.Name,
			}
		},
	}
	// AbilityScoreOrderFieldFullName orders AbilityScore by full_name.
	AbilityScoreOrderFieldFullName = &AbilityScoreOrderField{
		Value: func(as *AbilityScore) (ent.Value, error) {
			return as.FullName, nil
		},
		column: abilityscore.FieldFullName,
		toTerm: abilityscore.ByFullName,
		toCursor: func(as *AbilityScore) Cursor {
			return Cursor{
				ID:    as.ID,
				Value: as.FullName,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AbilityScoreOrderField) String() string {
	var str string
	switch f.column {
	case AbilityScoreOrderFieldIndx.column:
		str = "INDX"
	case AbilityScoreOrderFieldName.column:
		str = "NAME"
	case AbilityScoreOrderFieldFullName.column:
		str = "FULL_NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AbilityScoreOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AbilityScoreOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AbilityScoreOrderField %T must be a string", v)
	}
	switch str {
	case "INDX":
		*f = *AbilityScoreOrderFieldIndx
	case "NAME":
		*f = *AbilityScoreOrderFieldName
	case "FULL_NAME":
		*f = *AbilityScoreOrderFieldFullName
	default:
		return fmt.Errorf("%s is not a valid AbilityScoreOrderField", str)
	}
	return nil
}

// AbilityScoreOrderField defines the ordering field of AbilityScore.
type AbilityScoreOrderField struct {
	// Value extracts the ordering value from the given AbilityScore.
	Value    func(*AbilityScore) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) abilityscore.OrderOption
	toCursor func(*AbilityScore) Cursor
}

// AbilityScoreOrder defines the ordering of AbilityScore.
type AbilityScoreOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *AbilityScoreOrderField `json:"field"`
}

// DefaultAbilityScoreOrder is the default ordering of AbilityScore.
var DefaultAbilityScoreOrder = &AbilityScoreOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AbilityScoreOrderField{
		Value: func(as *AbilityScore) (ent.Value, error) {
			return as.ID, nil
		},
		column: abilityscore.FieldID,
		toTerm: abilityscore.ByID,
		toCursor: func(as *AbilityScore) Cursor {
			return Cursor{ID: as.ID}
		},
	},
}

// ToEdge converts AbilityScore into AbilityScoreEdge.
func (as *AbilityScore) ToEdge(order *AbilityScoreOrder) *AbilityScoreEdge {
	if order == nil {
		order = DefaultAbilityScoreOrder
	}
	return &AbilityScoreEdge{
		Node:   as,
		Cursor: order.Field.toCursor(as),
	}
}

// AlignmentEdge is the edge representation of Alignment.
type AlignmentEdge struct {
	Node   *Alignment `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// AlignmentConnection is the connection containing edges to Alignment.
type AlignmentConnection struct {
	Edges      []*AlignmentEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *AlignmentConnection) build(nodes []*Alignment, pager *alignmentPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Alignment
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Alignment {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Alignment {
			return nodes[i]
		}
	}
	c.Edges = make([]*AlignmentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AlignmentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AlignmentPaginateOption enables pagination customization.
type AlignmentPaginateOption func(*alignmentPager) error

// WithAlignmentOrder configures pagination ordering.
func WithAlignmentOrder(order *AlignmentOrder) AlignmentPaginateOption {
	if order == nil {
		order = DefaultAlignmentOrder
	}
	o := *order
	return func(pager *alignmentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAlignmentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAlignmentFilter configures pagination filter.
func WithAlignmentFilter(filter func(*AlignmentQuery) (*AlignmentQuery, error)) AlignmentPaginateOption {
	return func(pager *alignmentPager) error {
		if filter == nil {
			return errors.New("AlignmentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type alignmentPager struct {
	reverse bool
	order   *AlignmentOrder
	filter  func(*AlignmentQuery) (*AlignmentQuery, error)
}

func newAlignmentPager(opts []AlignmentPaginateOption, reverse bool) (*alignmentPager, error) {
	pager := &alignmentPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAlignmentOrder
	}
	return pager, nil
}

func (p *alignmentPager) applyFilter(query *AlignmentQuery) (*AlignmentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *alignmentPager) toCursor(a *Alignment) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *alignmentPager) applyCursors(query *AlignmentQuery, after, before *Cursor) (*AlignmentQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAlignmentOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *alignmentPager) applyOrder(query *AlignmentQuery) *AlignmentQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAlignmentOrder.Field {
		query = query.Order(DefaultAlignmentOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *alignmentPager) orderExpr(query *AlignmentQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAlignmentOrder.Field {
			b.Comma().Ident(DefaultAlignmentOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Alignment.
func (a *AlignmentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AlignmentPaginateOption,
) (*AlignmentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAlignmentPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AlignmentConnection{Edges: []*AlignmentEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AlignmentOrderFieldIndx orders Alignment by indx.
	AlignmentOrderFieldIndx = &AlignmentOrderField{
		Value: func(a *Alignment) (ent.Value, error) {
			return a.Indx, nil
		},
		column: alignment.FieldIndx,
		toTerm: alignment.ByIndx,
		toCursor: func(a *Alignment) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.Indx,
			}
		},
	}
	// AlignmentOrderFieldName orders Alignment by name.
	AlignmentOrderFieldName = &AlignmentOrderField{
		Value: func(a *Alignment) (ent.Value, error) {
			return a.Name, nil
		},
		column: alignment.FieldName,
		toTerm: alignment.ByName,
		toCursor: func(a *Alignment) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AlignmentOrderField) String() string {
	var str string
	switch f.column {
	case AlignmentOrderFieldIndx.column:
		str = "INDX"
	case AlignmentOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AlignmentOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AlignmentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AlignmentOrderField %T must be a string", v)
	}
	switch str {
	case "INDX":
		*f = *AlignmentOrderFieldIndx
	case "NAME":
		*f = *AlignmentOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid AlignmentOrderField", str)
	}
	return nil
}

// AlignmentOrderField defines the ordering field of Alignment.
type AlignmentOrderField struct {
	// Value extracts the ordering value from the given Alignment.
	Value    func(*Alignment) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) alignment.OrderOption
	toCursor func(*Alignment) Cursor
}

// AlignmentOrder defines the ordering of Alignment.
type AlignmentOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *AlignmentOrderField `json:"field"`
}

// DefaultAlignmentOrder is the default ordering of Alignment.
var DefaultAlignmentOrder = &AlignmentOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AlignmentOrderField{
		Value: func(a *Alignment) (ent.Value, error) {
			return a.ID, nil
		},
		column: alignment.FieldID,
		toTerm: alignment.ByID,
		toCursor: func(a *Alignment) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Alignment into AlignmentEdge.
func (a *Alignment) ToEdge(order *AlignmentOrder) *AlignmentEdge {
	if order == nil {
		order = DefaultAlignmentOrder
	}
	return &AlignmentEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// CoinEdge is the edge representation of Coin.
type CoinEdge struct {
	Node   *Coin  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// CoinConnection is the connection containing edges to Coin.
type CoinConnection struct {
	Edges      []*CoinEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *CoinConnection) build(nodes []*Coin, pager *coinPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Coin
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Coin {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Coin {
			return nodes[i]
		}
	}
	c.Edges = make([]*CoinEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CoinEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CoinPaginateOption enables pagination customization.
type CoinPaginateOption func(*coinPager) error

// WithCoinOrder configures pagination ordering.
func WithCoinOrder(order *CoinOrder) CoinPaginateOption {
	if order == nil {
		order = DefaultCoinOrder
	}
	o := *order
	return func(pager *coinPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCoinOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCoinFilter configures pagination filter.
func WithCoinFilter(filter func(*CoinQuery) (*CoinQuery, error)) CoinPaginateOption {
	return func(pager *coinPager) error {
		if filter == nil {
			return errors.New("CoinQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type coinPager struct {
	reverse bool
	order   *CoinOrder
	filter  func(*CoinQuery) (*CoinQuery, error)
}

func newCoinPager(opts []CoinPaginateOption, reverse bool) (*coinPager, error) {
	pager := &coinPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCoinOrder
	}
	return pager, nil
}

func (p *coinPager) applyFilter(query *CoinQuery) (*CoinQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *coinPager) toCursor(c *Coin) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *coinPager) applyCursors(query *CoinQuery, after, before *Cursor) (*CoinQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCoinOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *coinPager) applyOrder(query *CoinQuery) *CoinQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCoinOrder.Field {
		query = query.Order(DefaultCoinOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *coinPager) orderExpr(query *CoinQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCoinOrder.Field {
			b.Comma().Ident(DefaultCoinOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Coin.
func (c *CoinQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CoinPaginateOption,
) (*CoinConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCoinPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CoinConnection{Edges: []*CoinEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CoinOrderFieldIndx orders Coin by indx.
	CoinOrderFieldIndx = &CoinOrderField{
		Value: func(c *Coin) (ent.Value, error) {
			return c.Indx, nil
		},
		column: coin.FieldIndx,
		toTerm: coin.ByIndx,
		toCursor: func(c *Coin) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Indx,
			}
		},
	}
	// CoinOrderFieldName orders Coin by name.
	CoinOrderFieldName = &CoinOrderField{
		Value: func(c *Coin) (ent.Value, error) {
			return c.Name, nil
		},
		column: coin.FieldName,
		toTerm: coin.ByName,
		toCursor: func(c *Coin) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CoinOrderField) String() string {
	var str string
	switch f.column {
	case CoinOrderFieldIndx.column:
		str = "INDX"
	case CoinOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CoinOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CoinOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CoinOrderField %T must be a string", v)
	}
	switch str {
	case "INDX":
		*f = *CoinOrderFieldIndx
	case "NAME":
		*f = *CoinOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid CoinOrderField", str)
	}
	return nil
}

// CoinOrderField defines the ordering field of Coin.
type CoinOrderField struct {
	// Value extracts the ordering value from the given Coin.
	Value    func(*Coin) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) coin.OrderOption
	toCursor func(*Coin) Cursor
}

// CoinOrder defines the ordering of Coin.
type CoinOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *CoinOrderField `json:"field"`
}

// DefaultCoinOrder is the default ordering of Coin.
var DefaultCoinOrder = &CoinOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CoinOrderField{
		Value: func(c *Coin) (ent.Value, error) {
			return c.ID, nil
		},
		column: coin.FieldID,
		toTerm: coin.ByID,
		toCursor: func(c *Coin) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Coin into CoinEdge.
func (c *Coin) ToEdge(order *CoinOrder) *CoinEdge {
	if order == nil {
		order = DefaultCoinOrder
	}
	return &CoinEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// ConditionEdge is the edge representation of Condition.
type ConditionEdge struct {
	Node   *Condition `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// ConditionConnection is the connection containing edges to Condition.
type ConditionConnection struct {
	Edges      []*ConditionEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *ConditionConnection) build(nodes []*Condition, pager *conditionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Condition
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Condition {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Condition {
			return nodes[i]
		}
	}
	c.Edges = make([]*ConditionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ConditionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ConditionPaginateOption enables pagination customization.
type ConditionPaginateOption func(*conditionPager) error

// WithConditionOrder configures pagination ordering.
func WithConditionOrder(order *ConditionOrder) ConditionPaginateOption {
	if order == nil {
		order = DefaultConditionOrder
	}
	o := *order
	return func(pager *conditionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultConditionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithConditionFilter configures pagination filter.
func WithConditionFilter(filter func(*ConditionQuery) (*ConditionQuery, error)) ConditionPaginateOption {
	return func(pager *conditionPager) error {
		if filter == nil {
			return errors.New("ConditionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type conditionPager struct {
	reverse bool
	order   *ConditionOrder
	filter  func(*ConditionQuery) (*ConditionQuery, error)
}

func newConditionPager(opts []ConditionPaginateOption, reverse bool) (*conditionPager, error) {
	pager := &conditionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultConditionOrder
	}
	return pager, nil
}

func (p *conditionPager) applyFilter(query *ConditionQuery) (*ConditionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *conditionPager) toCursor(c *Condition) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *conditionPager) applyCursors(query *ConditionQuery, after, before *Cursor) (*ConditionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultConditionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *conditionPager) applyOrder(query *ConditionQuery) *ConditionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultConditionOrder.Field {
		query = query.Order(DefaultConditionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *conditionPager) orderExpr(query *ConditionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultConditionOrder.Field {
			b.Comma().Ident(DefaultConditionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Condition.
func (c *ConditionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ConditionPaginateOption,
) (*ConditionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newConditionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &ConditionConnection{Edges: []*ConditionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ConditionOrderFieldIndx orders Condition by indx.
	ConditionOrderFieldIndx = &ConditionOrderField{
		Value: func(c *Condition) (ent.Value, error) {
			return c.Indx, nil
		},
		column: condition.FieldIndx,
		toTerm: condition.ByIndx,
		toCursor: func(c *Condition) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Indx,
			}
		},
	}
	// ConditionOrderFieldName orders Condition by name.
	ConditionOrderFieldName = &ConditionOrderField{
		Value: func(c *Condition) (ent.Value, error) {
			return c.Name, nil
		},
		column: condition.FieldName,
		toTerm: condition.ByName,
		toCursor: func(c *Condition) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ConditionOrderField) String() string {
	var str string
	switch f.column {
	case ConditionOrderFieldIndx.column:
		str = "INDX"
	case ConditionOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ConditionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ConditionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ConditionOrderField %T must be a string", v)
	}
	switch str {
	case "INDX":
		*f = *ConditionOrderFieldIndx
	case "NAME":
		*f = *ConditionOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid ConditionOrderField", str)
	}
	return nil
}

// ConditionOrderField defines the ordering field of Condition.
type ConditionOrderField struct {
	// Value extracts the ordering value from the given Condition.
	Value    func(*Condition) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) condition.OrderOption
	toCursor func(*Condition) Cursor
}

// ConditionOrder defines the ordering of Condition.
type ConditionOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *ConditionOrderField `json:"field"`
}

// DefaultConditionOrder is the default ordering of Condition.
var DefaultConditionOrder = &ConditionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ConditionOrderField{
		Value: func(c *Condition) (ent.Value, error) {
			return c.ID, nil
		},
		column: condition.FieldID,
		toTerm: condition.ByID,
		toCursor: func(c *Condition) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Condition into ConditionEdge.
func (c *Condition) ToEdge(order *ConditionOrder) *ConditionEdge {
	if order == nil {
		order = DefaultConditionOrder
	}
	return &ConditionEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// DamageEdge is the edge representation of Damage.
type DamageEdge struct {
	Node   *Damage `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// DamageConnection is the connection containing edges to Damage.
type DamageConnection struct {
	Edges      []*DamageEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *DamageConnection) build(nodes []*Damage, pager *damagePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Damage
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Damage {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Damage {
			return nodes[i]
		}
	}
	c.Edges = make([]*DamageEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DamageEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DamagePaginateOption enables pagination customization.
type DamagePaginateOption func(*damagePager) error

// WithDamageOrder configures pagination ordering.
func WithDamageOrder(order *DamageOrder) DamagePaginateOption {
	if order == nil {
		order = DefaultDamageOrder
	}
	o := *order
	return func(pager *damagePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDamageOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDamageFilter configures pagination filter.
func WithDamageFilter(filter func(*DamageQuery) (*DamageQuery, error)) DamagePaginateOption {
	return func(pager *damagePager) error {
		if filter == nil {
			return errors.New("DamageQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type damagePager struct {
	reverse bool
	order   *DamageOrder
	filter  func(*DamageQuery) (*DamageQuery, error)
}

func newDamagePager(opts []DamagePaginateOption, reverse bool) (*damagePager, error) {
	pager := &damagePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDamageOrder
	}
	return pager, nil
}

func (p *damagePager) applyFilter(query *DamageQuery) (*DamageQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *damagePager) toCursor(d *Damage) Cursor {
	return p.order.Field.toCursor(d)
}

func (p *damagePager) applyCursors(query *DamageQuery, after, before *Cursor) (*DamageQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultDamageOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *damagePager) applyOrder(query *DamageQuery) *DamageQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultDamageOrder.Field {
		query = query.Order(DefaultDamageOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *damagePager) orderExpr(query *DamageQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDamageOrder.Field {
			b.Comma().Ident(DefaultDamageOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Damage.
func (d *DamageQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DamagePaginateOption,
) (*DamageConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDamagePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if d, err = pager.applyFilter(d); err != nil {
		return nil, err
	}
	conn := &DamageConnection{Edges: []*DamageEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = d.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if d, err = pager.applyCursors(d, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		d.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := d.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	d = pager.applyOrder(d)
	nodes, err := d.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// DamageOrderField defines the ordering field of Damage.
type DamageOrderField struct {
	// Value extracts the ordering value from the given Damage.
	Value    func(*Damage) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) damage.OrderOption
	toCursor func(*Damage) Cursor
}

// DamageOrder defines the ordering of Damage.
type DamageOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *DamageOrderField `json:"field"`
}

// DefaultDamageOrder is the default ordering of Damage.
var DefaultDamageOrder = &DamageOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DamageOrderField{
		Value: func(d *Damage) (ent.Value, error) {
			return d.ID, nil
		},
		column: damage.FieldID,
		toTerm: damage.ByID,
		toCursor: func(d *Damage) Cursor {
			return Cursor{ID: d.ID}
		},
	},
}

// ToEdge converts Damage into DamageEdge.
func (d *Damage) ToEdge(order *DamageOrder) *DamageEdge {
	if order == nil {
		order = DefaultDamageOrder
	}
	return &DamageEdge{
		Node:   d,
		Cursor: order.Field.toCursor(d),
	}
}

// DamageTypeEdge is the edge representation of DamageType.
type DamageTypeEdge struct {
	Node   *DamageType `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// DamageTypeConnection is the connection containing edges to DamageType.
type DamageTypeConnection struct {
	Edges      []*DamageTypeEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *DamageTypeConnection) build(nodes []*DamageType, pager *damagetypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *DamageType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *DamageType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *DamageType {
			return nodes[i]
		}
	}
	c.Edges = make([]*DamageTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DamageTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DamageTypePaginateOption enables pagination customization.
type DamageTypePaginateOption func(*damagetypePager) error

// WithDamageTypeOrder configures pagination ordering.
func WithDamageTypeOrder(order *DamageTypeOrder) DamageTypePaginateOption {
	if order == nil {
		order = DefaultDamageTypeOrder
	}
	o := *order
	return func(pager *damagetypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDamageTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDamageTypeFilter configures pagination filter.
func WithDamageTypeFilter(filter func(*DamageTypeQuery) (*DamageTypeQuery, error)) DamageTypePaginateOption {
	return func(pager *damagetypePager) error {
		if filter == nil {
			return errors.New("DamageTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type damagetypePager struct {
	reverse bool
	order   *DamageTypeOrder
	filter  func(*DamageTypeQuery) (*DamageTypeQuery, error)
}

func newDamageTypePager(opts []DamageTypePaginateOption, reverse bool) (*damagetypePager, error) {
	pager := &damagetypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDamageTypeOrder
	}
	return pager, nil
}

func (p *damagetypePager) applyFilter(query *DamageTypeQuery) (*DamageTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *damagetypePager) toCursor(dt *DamageType) Cursor {
	return p.order.Field.toCursor(dt)
}

func (p *damagetypePager) applyCursors(query *DamageTypeQuery, after, before *Cursor) (*DamageTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultDamageTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *damagetypePager) applyOrder(query *DamageTypeQuery) *DamageTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultDamageTypeOrder.Field {
		query = query.Order(DefaultDamageTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *damagetypePager) orderExpr(query *DamageTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDamageTypeOrder.Field {
			b.Comma().Ident(DefaultDamageTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to DamageType.
func (dt *DamageTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DamageTypePaginateOption,
) (*DamageTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDamageTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if dt, err = pager.applyFilter(dt); err != nil {
		return nil, err
	}
	conn := &DamageTypeConnection{Edges: []*DamageTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = dt.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if dt, err = pager.applyCursors(dt, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		dt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := dt.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	dt = pager.applyOrder(dt)
	nodes, err := dt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// DamageTypeOrderFieldIndx orders DamageType by indx.
	DamageTypeOrderFieldIndx = &DamageTypeOrderField{
		Value: func(dt *DamageType) (ent.Value, error) {
			return dt.Indx, nil
		},
		column: damagetype.FieldIndx,
		toTerm: damagetype.ByIndx,
		toCursor: func(dt *DamageType) Cursor {
			return Cursor{
				ID:    dt.ID,
				Value: dt.Indx,
			}
		},
	}
	// DamageTypeOrderFieldName orders DamageType by name.
	DamageTypeOrderFieldName = &DamageTypeOrderField{
		Value: func(dt *DamageType) (ent.Value, error) {
			return dt.Name, nil
		},
		column: damagetype.FieldName,
		toTerm: damagetype.ByName,
		toCursor: func(dt *DamageType) Cursor {
			return Cursor{
				ID:    dt.ID,
				Value: dt.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f DamageTypeOrderField) String() string {
	var str string
	switch f.column {
	case DamageTypeOrderFieldIndx.column:
		str = "INDX"
	case DamageTypeOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f DamageTypeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *DamageTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("DamageTypeOrderField %T must be a string", v)
	}
	switch str {
	case "INDX":
		*f = *DamageTypeOrderFieldIndx
	case "NAME":
		*f = *DamageTypeOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid DamageTypeOrderField", str)
	}
	return nil
}

// DamageTypeOrderField defines the ordering field of DamageType.
type DamageTypeOrderField struct {
	// Value extracts the ordering value from the given DamageType.
	Value    func(*DamageType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) damagetype.OrderOption
	toCursor func(*DamageType) Cursor
}

// DamageTypeOrder defines the ordering of DamageType.
type DamageTypeOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *DamageTypeOrderField `json:"field"`
}

// DefaultDamageTypeOrder is the default ordering of DamageType.
var DefaultDamageTypeOrder = &DamageTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DamageTypeOrderField{
		Value: func(dt *DamageType) (ent.Value, error) {
			return dt.ID, nil
		},
		column: damagetype.FieldID,
		toTerm: damagetype.ByID,
		toCursor: func(dt *DamageType) Cursor {
			return Cursor{ID: dt.ID}
		},
	},
}

// ToEdge converts DamageType into DamageTypeEdge.
func (dt *DamageType) ToEdge(order *DamageTypeOrder) *DamageTypeEdge {
	if order == nil {
		order = DefaultDamageTypeOrder
	}
	return &DamageTypeEdge{
		Node:   dt,
		Cursor: order.Field.toCursor(dt),
	}
}

// EquipmentEdge is the edge representation of Equipment.
type EquipmentEdge struct {
	Node   *Equipment `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// EquipmentConnection is the connection containing edges to Equipment.
type EquipmentConnection struct {
	Edges      []*EquipmentEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *EquipmentConnection) build(nodes []*Equipment, pager *equipmentPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Equipment
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Equipment {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Equipment {
			return nodes[i]
		}
	}
	c.Edges = make([]*EquipmentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &EquipmentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// EquipmentPaginateOption enables pagination customization.
type EquipmentPaginateOption func(*equipmentPager) error

// WithEquipmentOrder configures pagination ordering.
func WithEquipmentOrder(order *EquipmentOrder) EquipmentPaginateOption {
	if order == nil {
		order = DefaultEquipmentOrder
	}
	o := *order
	return func(pager *equipmentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultEquipmentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithEquipmentFilter configures pagination filter.
func WithEquipmentFilter(filter func(*EquipmentQuery) (*EquipmentQuery, error)) EquipmentPaginateOption {
	return func(pager *equipmentPager) error {
		if filter == nil {
			return errors.New("EquipmentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type equipmentPager struct {
	reverse bool
	order   *EquipmentOrder
	filter  func(*EquipmentQuery) (*EquipmentQuery, error)
}

func newEquipmentPager(opts []EquipmentPaginateOption, reverse bool) (*equipmentPager, error) {
	pager := &equipmentPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultEquipmentOrder
	}
	return pager, nil
}

func (p *equipmentPager) applyFilter(query *EquipmentQuery) (*EquipmentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *equipmentPager) toCursor(e *Equipment) Cursor {
	return p.order.Field.toCursor(e)
}

func (p *equipmentPager) applyCursors(query *EquipmentQuery, after, before *Cursor) (*EquipmentQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultEquipmentOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *equipmentPager) applyOrder(query *EquipmentQuery) *EquipmentQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultEquipmentOrder.Field {
		query = query.Order(DefaultEquipmentOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *equipmentPager) orderExpr(query *EquipmentQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultEquipmentOrder.Field {
			b.Comma().Ident(DefaultEquipmentOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Equipment.
func (e *EquipmentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...EquipmentPaginateOption,
) (*EquipmentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newEquipmentPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if e, err = pager.applyFilter(e); err != nil {
		return nil, err
	}
	conn := &EquipmentConnection{Edges: []*EquipmentEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = e.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if e, err = pager.applyCursors(e, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		e.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := e.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	e = pager.applyOrder(e)
	nodes, err := e.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// EquipmentOrderFieldIndx orders Equipment by indx.
	EquipmentOrderFieldIndx = &EquipmentOrderField{
		Value: func(e *Equipment) (ent.Value, error) {
			return e.Indx, nil
		},
		column: equipment.FieldIndx,
		toTerm: equipment.ByIndx,
		toCursor: func(e *Equipment) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.Indx,
			}
		},
	}
	// EquipmentOrderFieldName orders Equipment by name.
	EquipmentOrderFieldName = &EquipmentOrderField{
		Value: func(e *Equipment) (ent.Value, error) {
			return e.Name, nil
		},
		column: equipment.FieldName,
		toTerm: equipment.ByName,
		toCursor: func(e *Equipment) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f EquipmentOrderField) String() string {
	var str string
	switch f.column {
	case EquipmentOrderFieldIndx.column:
		str = "INDX"
	case EquipmentOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f EquipmentOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *EquipmentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("EquipmentOrderField %T must be a string", v)
	}
	switch str {
	case "INDX":
		*f = *EquipmentOrderFieldIndx
	case "NAME":
		*f = *EquipmentOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid EquipmentOrderField", str)
	}
	return nil
}

// EquipmentOrderField defines the ordering field of Equipment.
type EquipmentOrderField struct {
	// Value extracts the ordering value from the given Equipment.
	Value    func(*Equipment) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) equipment.OrderOption
	toCursor func(*Equipment) Cursor
}

// EquipmentOrder defines the ordering of Equipment.
type EquipmentOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *EquipmentOrderField `json:"field"`
}

// DefaultEquipmentOrder is the default ordering of Equipment.
var DefaultEquipmentOrder = &EquipmentOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &EquipmentOrderField{
		Value: func(e *Equipment) (ent.Value, error) {
			return e.ID, nil
		},
		column: equipment.FieldID,
		toTerm: equipment.ByID,
		toCursor: func(e *Equipment) Cursor {
			return Cursor{ID: e.ID}
		},
	},
}

// ToEdge converts Equipment into EquipmentEdge.
func (e *Equipment) ToEdge(order *EquipmentOrder) *EquipmentEdge {
	if order == nil {
		order = DefaultEquipmentOrder
	}
	return &EquipmentEdge{
		Node:   e,
		Cursor: order.Field.toCursor(e),
	}
}

// EquipmentCostEdge is the edge representation of EquipmentCost.
type EquipmentCostEdge struct {
	Node   *EquipmentCost `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// EquipmentCostConnection is the connection containing edges to EquipmentCost.
type EquipmentCostConnection struct {
	Edges      []*EquipmentCostEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *EquipmentCostConnection) build(nodes []*EquipmentCost, pager *equipmentcostPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *EquipmentCost
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *EquipmentCost {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *EquipmentCost {
			return nodes[i]
		}
	}
	c.Edges = make([]*EquipmentCostEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &EquipmentCostEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// EquipmentCostPaginateOption enables pagination customization.
type EquipmentCostPaginateOption func(*equipmentcostPager) error

// WithEquipmentCostOrder configures pagination ordering.
func WithEquipmentCostOrder(order *EquipmentCostOrder) EquipmentCostPaginateOption {
	if order == nil {
		order = DefaultEquipmentCostOrder
	}
	o := *order
	return func(pager *equipmentcostPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultEquipmentCostOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithEquipmentCostFilter configures pagination filter.
func WithEquipmentCostFilter(filter func(*EquipmentCostQuery) (*EquipmentCostQuery, error)) EquipmentCostPaginateOption {
	return func(pager *equipmentcostPager) error {
		if filter == nil {
			return errors.New("EquipmentCostQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type equipmentcostPager struct {
	reverse bool
	order   *EquipmentCostOrder
	filter  func(*EquipmentCostQuery) (*EquipmentCostQuery, error)
}

func newEquipmentCostPager(opts []EquipmentCostPaginateOption, reverse bool) (*equipmentcostPager, error) {
	pager := &equipmentcostPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultEquipmentCostOrder
	}
	return pager, nil
}

func (p *equipmentcostPager) applyFilter(query *EquipmentCostQuery) (*EquipmentCostQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *equipmentcostPager) toCursor(ec *EquipmentCost) Cursor {
	return p.order.Field.toCursor(ec)
}

func (p *equipmentcostPager) applyCursors(query *EquipmentCostQuery, after, before *Cursor) (*EquipmentCostQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultEquipmentCostOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *equipmentcostPager) applyOrder(query *EquipmentCostQuery) *EquipmentCostQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultEquipmentCostOrder.Field {
		query = query.Order(DefaultEquipmentCostOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *equipmentcostPager) orderExpr(query *EquipmentCostQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultEquipmentCostOrder.Field {
			b.Comma().Ident(DefaultEquipmentCostOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to EquipmentCost.
func (ec *EquipmentCostQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...EquipmentCostPaginateOption,
) (*EquipmentCostConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newEquipmentCostPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ec, err = pager.applyFilter(ec); err != nil {
		return nil, err
	}
	conn := &EquipmentCostConnection{Edges: []*EquipmentCostEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ec.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ec, err = pager.applyCursors(ec, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ec.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ec.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ec = pager.applyOrder(ec)
	nodes, err := ec.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// EquipmentCostOrderField defines the ordering field of EquipmentCost.
type EquipmentCostOrderField struct {
	// Value extracts the ordering value from the given EquipmentCost.
	Value    func(*EquipmentCost) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) equipmentcost.OrderOption
	toCursor func(*EquipmentCost) Cursor
}

// EquipmentCostOrder defines the ordering of EquipmentCost.
type EquipmentCostOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *EquipmentCostOrderField `json:"field"`
}

// DefaultEquipmentCostOrder is the default ordering of EquipmentCost.
var DefaultEquipmentCostOrder = &EquipmentCostOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &EquipmentCostOrderField{
		Value: func(ec *EquipmentCost) (ent.Value, error) {
			return ec.ID, nil
		},
		column: equipmentcost.FieldID,
		toTerm: equipmentcost.ByID,
		toCursor: func(ec *EquipmentCost) Cursor {
			return Cursor{ID: ec.ID}
		},
	},
}

// ToEdge converts EquipmentCost into EquipmentCostEdge.
func (ec *EquipmentCost) ToEdge(order *EquipmentCostOrder) *EquipmentCostEdge {
	if order == nil {
		order = DefaultEquipmentCostOrder
	}
	return &EquipmentCostEdge{
		Node:   ec,
		Cursor: order.Field.toCursor(ec),
	}
}

// FeatEdge is the edge representation of Feat.
type FeatEdge struct {
	Node   *Feat  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// FeatConnection is the connection containing edges to Feat.
type FeatConnection struct {
	Edges      []*FeatEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *FeatConnection) build(nodes []*Feat, pager *featPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Feat
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Feat {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Feat {
			return nodes[i]
		}
	}
	c.Edges = make([]*FeatEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FeatEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FeatPaginateOption enables pagination customization.
type FeatPaginateOption func(*featPager) error

// WithFeatOrder configures pagination ordering.
func WithFeatOrder(order *FeatOrder) FeatPaginateOption {
	if order == nil {
		order = DefaultFeatOrder
	}
	o := *order
	return func(pager *featPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFeatOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFeatFilter configures pagination filter.
func WithFeatFilter(filter func(*FeatQuery) (*FeatQuery, error)) FeatPaginateOption {
	return func(pager *featPager) error {
		if filter == nil {
			return errors.New("FeatQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type featPager struct {
	reverse bool
	order   *FeatOrder
	filter  func(*FeatQuery) (*FeatQuery, error)
}

func newFeatPager(opts []FeatPaginateOption, reverse bool) (*featPager, error) {
	pager := &featPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFeatOrder
	}
	return pager, nil
}

func (p *featPager) applyFilter(query *FeatQuery) (*FeatQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *featPager) toCursor(f *Feat) Cursor {
	return p.order.Field.toCursor(f)
}

func (p *featPager) applyCursors(query *FeatQuery, after, before *Cursor) (*FeatQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultFeatOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *featPager) applyOrder(query *FeatQuery) *FeatQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultFeatOrder.Field {
		query = query.Order(DefaultFeatOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *featPager) orderExpr(query *FeatQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFeatOrder.Field {
			b.Comma().Ident(DefaultFeatOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Feat.
func (f *FeatQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FeatPaginateOption,
) (*FeatConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFeatPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if f, err = pager.applyFilter(f); err != nil {
		return nil, err
	}
	conn := &FeatConnection{Edges: []*FeatEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = f.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if f, err = pager.applyCursors(f, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		f.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := f.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	f = pager.applyOrder(f)
	nodes, err := f.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// FeatOrderFieldIndx orders Feat by indx.
	FeatOrderFieldIndx = &FeatOrderField{
		Value: func(f *Feat) (ent.Value, error) {
			return f.Indx, nil
		},
		column: feat.FieldIndx,
		toTerm: feat.ByIndx,
		toCursor: func(f *Feat) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.Indx,
			}
		},
	}
	// FeatOrderFieldName orders Feat by name.
	FeatOrderFieldName = &FeatOrderField{
		Value: func(f *Feat) (ent.Value, error) {
			return f.Name, nil
		},
		column: feat.FieldName,
		toTerm: feat.ByName,
		toCursor: func(f *Feat) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f FeatOrderField) String() string {
	var str string
	switch f.column {
	case FeatOrderFieldIndx.column:
		str = "INDX"
	case FeatOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f FeatOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *FeatOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("FeatOrderField %T must be a string", v)
	}
	switch str {
	case "INDX":
		*f = *FeatOrderFieldIndx
	case "NAME":
		*f = *FeatOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid FeatOrderField", str)
	}
	return nil
}

// FeatOrderField defines the ordering field of Feat.
type FeatOrderField struct {
	// Value extracts the ordering value from the given Feat.
	Value    func(*Feat) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) feat.OrderOption
	toCursor func(*Feat) Cursor
}

// FeatOrder defines the ordering of Feat.
type FeatOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *FeatOrderField `json:"field"`
}

// DefaultFeatOrder is the default ordering of Feat.
var DefaultFeatOrder = &FeatOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &FeatOrderField{
		Value: func(f *Feat) (ent.Value, error) {
			return f.ID, nil
		},
		column: feat.FieldID,
		toTerm: feat.ByID,
		toCursor: func(f *Feat) Cursor {
			return Cursor{ID: f.ID}
		},
	},
}

// ToEdge converts Feat into FeatEdge.
func (f *Feat) ToEdge(order *FeatOrder) *FeatEdge {
	if order == nil {
		order = DefaultFeatOrder
	}
	return &FeatEdge{
		Node:   f,
		Cursor: order.Field.toCursor(f),
	}
}

// LanguageEdge is the edge representation of Language.
type LanguageEdge struct {
	Node   *Language `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// LanguageConnection is the connection containing edges to Language.
type LanguageConnection struct {
	Edges      []*LanguageEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *LanguageConnection) build(nodes []*Language, pager *languagePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Language
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Language {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Language {
			return nodes[i]
		}
	}
	c.Edges = make([]*LanguageEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &LanguageEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// LanguagePaginateOption enables pagination customization.
type LanguagePaginateOption func(*languagePager) error

// WithLanguageOrder configures pagination ordering.
func WithLanguageOrder(order *LanguageOrder) LanguagePaginateOption {
	if order == nil {
		order = DefaultLanguageOrder
	}
	o := *order
	return func(pager *languagePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultLanguageOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithLanguageFilter configures pagination filter.
func WithLanguageFilter(filter func(*LanguageQuery) (*LanguageQuery, error)) LanguagePaginateOption {
	return func(pager *languagePager) error {
		if filter == nil {
			return errors.New("LanguageQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type languagePager struct {
	reverse bool
	order   *LanguageOrder
	filter  func(*LanguageQuery) (*LanguageQuery, error)
}

func newLanguagePager(opts []LanguagePaginateOption, reverse bool) (*languagePager, error) {
	pager := &languagePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultLanguageOrder
	}
	return pager, nil
}

func (p *languagePager) applyFilter(query *LanguageQuery) (*LanguageQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *languagePager) toCursor(l *Language) Cursor {
	return p.order.Field.toCursor(l)
}

func (p *languagePager) applyCursors(query *LanguageQuery, after, before *Cursor) (*LanguageQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultLanguageOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *languagePager) applyOrder(query *LanguageQuery) *LanguageQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultLanguageOrder.Field {
		query = query.Order(DefaultLanguageOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *languagePager) orderExpr(query *LanguageQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultLanguageOrder.Field {
			b.Comma().Ident(DefaultLanguageOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Language.
func (l *LanguageQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...LanguagePaginateOption,
) (*LanguageConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newLanguagePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if l, err = pager.applyFilter(l); err != nil {
		return nil, err
	}
	conn := &LanguageConnection{Edges: []*LanguageEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = l.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if l, err = pager.applyCursors(l, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		l.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := l.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	l = pager.applyOrder(l)
	nodes, err := l.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// LanguageOrderFieldIndx orders Language by indx.
	LanguageOrderFieldIndx = &LanguageOrderField{
		Value: func(l *Language) (ent.Value, error) {
			return l.Indx, nil
		},
		column: language.FieldIndx,
		toTerm: language.ByIndx,
		toCursor: func(l *Language) Cursor {
			return Cursor{
				ID:    l.ID,
				Value: l.Indx,
			}
		},
	}
	// LanguageOrderFieldName orders Language by name.
	LanguageOrderFieldName = &LanguageOrderField{
		Value: func(l *Language) (ent.Value, error) {
			return l.Name, nil
		},
		column: language.FieldName,
		toTerm: language.ByName,
		toCursor: func(l *Language) Cursor {
			return Cursor{
				ID:    l.ID,
				Value: l.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f LanguageOrderField) String() string {
	var str string
	switch f.column {
	case LanguageOrderFieldIndx.column:
		str = "INDX"
	case LanguageOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f LanguageOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *LanguageOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("LanguageOrderField %T must be a string", v)
	}
	switch str {
	case "INDX":
		*f = *LanguageOrderFieldIndx
	case "NAME":
		*f = *LanguageOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid LanguageOrderField", str)
	}
	return nil
}

// LanguageOrderField defines the ordering field of Language.
type LanguageOrderField struct {
	// Value extracts the ordering value from the given Language.
	Value    func(*Language) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) language.OrderOption
	toCursor func(*Language) Cursor
}

// LanguageOrder defines the ordering of Language.
type LanguageOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *LanguageOrderField `json:"field"`
}

// DefaultLanguageOrder is the default ordering of Language.
var DefaultLanguageOrder = &LanguageOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &LanguageOrderField{
		Value: func(l *Language) (ent.Value, error) {
			return l.ID, nil
		},
		column: language.FieldID,
		toTerm: language.ByID,
		toCursor: func(l *Language) Cursor {
			return Cursor{ID: l.ID}
		},
	},
}

// ToEdge converts Language into LanguageEdge.
func (l *Language) ToEdge(order *LanguageOrder) *LanguageEdge {
	if order == nil {
		order = DefaultLanguageOrder
	}
	return &LanguageEdge{
		Node:   l,
		Cursor: order.Field.toCursor(l),
	}
}

// MagicSchoolEdge is the edge representation of MagicSchool.
type MagicSchoolEdge struct {
	Node   *MagicSchool `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// MagicSchoolConnection is the connection containing edges to MagicSchool.
type MagicSchoolConnection struct {
	Edges      []*MagicSchoolEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *MagicSchoolConnection) build(nodes []*MagicSchool, pager *magicschoolPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *MagicSchool
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *MagicSchool {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *MagicSchool {
			return nodes[i]
		}
	}
	c.Edges = make([]*MagicSchoolEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MagicSchoolEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MagicSchoolPaginateOption enables pagination customization.
type MagicSchoolPaginateOption func(*magicschoolPager) error

// WithMagicSchoolOrder configures pagination ordering.
func WithMagicSchoolOrder(order *MagicSchoolOrder) MagicSchoolPaginateOption {
	if order == nil {
		order = DefaultMagicSchoolOrder
	}
	o := *order
	return func(pager *magicschoolPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMagicSchoolOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMagicSchoolFilter configures pagination filter.
func WithMagicSchoolFilter(filter func(*MagicSchoolQuery) (*MagicSchoolQuery, error)) MagicSchoolPaginateOption {
	return func(pager *magicschoolPager) error {
		if filter == nil {
			return errors.New("MagicSchoolQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type magicschoolPager struct {
	reverse bool
	order   *MagicSchoolOrder
	filter  func(*MagicSchoolQuery) (*MagicSchoolQuery, error)
}

func newMagicSchoolPager(opts []MagicSchoolPaginateOption, reverse bool) (*magicschoolPager, error) {
	pager := &magicschoolPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMagicSchoolOrder
	}
	return pager, nil
}

func (p *magicschoolPager) applyFilter(query *MagicSchoolQuery) (*MagicSchoolQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *magicschoolPager) toCursor(ms *MagicSchool) Cursor {
	return p.order.Field.toCursor(ms)
}

func (p *magicschoolPager) applyCursors(query *MagicSchoolQuery, after, before *Cursor) (*MagicSchoolQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultMagicSchoolOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *magicschoolPager) applyOrder(query *MagicSchoolQuery) *MagicSchoolQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultMagicSchoolOrder.Field {
		query = query.Order(DefaultMagicSchoolOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *magicschoolPager) orderExpr(query *MagicSchoolQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultMagicSchoolOrder.Field {
			b.Comma().Ident(DefaultMagicSchoolOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to MagicSchool.
func (ms *MagicSchoolQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MagicSchoolPaginateOption,
) (*MagicSchoolConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMagicSchoolPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ms, err = pager.applyFilter(ms); err != nil {
		return nil, err
	}
	conn := &MagicSchoolConnection{Edges: []*MagicSchoolEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ms.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ms, err = pager.applyCursors(ms, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ms.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ms.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ms = pager.applyOrder(ms)
	nodes, err := ms.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MagicSchoolOrderFieldIndx orders MagicSchool by indx.
	MagicSchoolOrderFieldIndx = &MagicSchoolOrderField{
		Value: func(ms *MagicSchool) (ent.Value, error) {
			return ms.Indx, nil
		},
		column: magicschool.FieldIndx,
		toTerm: magicschool.ByIndx,
		toCursor: func(ms *MagicSchool) Cursor {
			return Cursor{
				ID:    ms.ID,
				Value: ms.Indx,
			}
		},
	}
	// MagicSchoolOrderFieldName orders MagicSchool by name.
	MagicSchoolOrderFieldName = &MagicSchoolOrderField{
		Value: func(ms *MagicSchool) (ent.Value, error) {
			return ms.Name, nil
		},
		column: magicschool.FieldName,
		toTerm: magicschool.ByName,
		toCursor: func(ms *MagicSchool) Cursor {
			return Cursor{
				ID:    ms.ID,
				Value: ms.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MagicSchoolOrderField) String() string {
	var str string
	switch f.column {
	case MagicSchoolOrderFieldIndx.column:
		str = "INDX"
	case MagicSchoolOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MagicSchoolOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MagicSchoolOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MagicSchoolOrderField %T must be a string", v)
	}
	switch str {
	case "INDX":
		*f = *MagicSchoolOrderFieldIndx
	case "NAME":
		*f = *MagicSchoolOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid MagicSchoolOrderField", str)
	}
	return nil
}

// MagicSchoolOrderField defines the ordering field of MagicSchool.
type MagicSchoolOrderField struct {
	// Value extracts the ordering value from the given MagicSchool.
	Value    func(*MagicSchool) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) magicschool.OrderOption
	toCursor func(*MagicSchool) Cursor
}

// MagicSchoolOrder defines the ordering of MagicSchool.
type MagicSchoolOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *MagicSchoolOrderField `json:"field"`
}

// DefaultMagicSchoolOrder is the default ordering of MagicSchool.
var DefaultMagicSchoolOrder = &MagicSchoolOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MagicSchoolOrderField{
		Value: func(ms *MagicSchool) (ent.Value, error) {
			return ms.ID, nil
		},
		column: magicschool.FieldID,
		toTerm: magicschool.ByID,
		toCursor: func(ms *MagicSchool) Cursor {
			return Cursor{ID: ms.ID}
		},
	},
}

// ToEdge converts MagicSchool into MagicSchoolEdge.
func (ms *MagicSchool) ToEdge(order *MagicSchoolOrder) *MagicSchoolEdge {
	if order == nil {
		order = DefaultMagicSchoolOrder
	}
	return &MagicSchoolEdge{
		Node:   ms,
		Cursor: order.Field.toCursor(ms),
	}
}

// PropertyEdge is the edge representation of Property.
type PropertyEdge struct {
	Node   *Property `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// PropertyConnection is the connection containing edges to Property.
type PropertyConnection struct {
	Edges      []*PropertyEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *PropertyConnection) build(nodes []*Property, pager *propertyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Property
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Property {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Property {
			return nodes[i]
		}
	}
	c.Edges = make([]*PropertyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PropertyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PropertyPaginateOption enables pagination customization.
type PropertyPaginateOption func(*propertyPager) error

// WithPropertyOrder configures pagination ordering.
func WithPropertyOrder(order *PropertyOrder) PropertyPaginateOption {
	if order == nil {
		order = DefaultPropertyOrder
	}
	o := *order
	return func(pager *propertyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPropertyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPropertyFilter configures pagination filter.
func WithPropertyFilter(filter func(*PropertyQuery) (*PropertyQuery, error)) PropertyPaginateOption {
	return func(pager *propertyPager) error {
		if filter == nil {
			return errors.New("PropertyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type propertyPager struct {
	reverse bool
	order   *PropertyOrder
	filter  func(*PropertyQuery) (*PropertyQuery, error)
}

func newPropertyPager(opts []PropertyPaginateOption, reverse bool) (*propertyPager, error) {
	pager := &propertyPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPropertyOrder
	}
	return pager, nil
}

func (p *propertyPager) applyFilter(query *PropertyQuery) (*PropertyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *propertyPager) toCursor(pr *Property) Cursor {
	return p.order.Field.toCursor(pr)
}

func (p *propertyPager) applyCursors(query *PropertyQuery, after, before *Cursor) (*PropertyQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPropertyOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *propertyPager) applyOrder(query *PropertyQuery) *PropertyQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPropertyOrder.Field {
		query = query.Order(DefaultPropertyOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *propertyPager) orderExpr(query *PropertyQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPropertyOrder.Field {
			b.Comma().Ident(DefaultPropertyOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Property.
func (pr *PropertyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PropertyPaginateOption,
) (*PropertyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPropertyPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}
	conn := &PropertyConnection{Edges: []*PropertyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pr.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pr, err = pager.applyCursors(pr, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		pr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pr = pager.applyOrder(pr)
	nodes, err := pr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PropertyOrderFieldIndx orders Property by indx.
	PropertyOrderFieldIndx = &PropertyOrderField{
		Value: func(pr *Property) (ent.Value, error) {
			return pr.Indx, nil
		},
		column: property.FieldIndx,
		toTerm: property.ByIndx,
		toCursor: func(pr *Property) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.Indx,
			}
		},
	}
	// PropertyOrderFieldName orders Property by name.
	PropertyOrderFieldName = &PropertyOrderField{
		Value: func(pr *Property) (ent.Value, error) {
			return pr.Name, nil
		},
		column: property.FieldName,
		toTerm: property.ByName,
		toCursor: func(pr *Property) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PropertyOrderField) String() string {
	var str string
	switch f.column {
	case PropertyOrderFieldIndx.column:
		str = "INDX"
	case PropertyOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PropertyOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PropertyOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PropertyOrderField %T must be a string", v)
	}
	switch str {
	case "INDX":
		*f = *PropertyOrderFieldIndx
	case "NAME":
		*f = *PropertyOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid PropertyOrderField", str)
	}
	return nil
}

// PropertyOrderField defines the ordering field of Property.
type PropertyOrderField struct {
	// Value extracts the ordering value from the given Property.
	Value    func(*Property) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) property.OrderOption
	toCursor func(*Property) Cursor
}

// PropertyOrder defines the ordering of Property.
type PropertyOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *PropertyOrderField `json:"field"`
}

// DefaultPropertyOrder is the default ordering of Property.
var DefaultPropertyOrder = &PropertyOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PropertyOrderField{
		Value: func(pr *Property) (ent.Value, error) {
			return pr.ID, nil
		},
		column: property.FieldID,
		toTerm: property.ByID,
		toCursor: func(pr *Property) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ToEdge converts Property into PropertyEdge.
func (pr *Property) ToEdge(order *PropertyOrder) *PropertyEdge {
	if order == nil {
		order = DefaultPropertyOrder
	}
	return &PropertyEdge{
		Node:   pr,
		Cursor: order.Field.toCursor(pr),
	}
}

// RaceEdge is the edge representation of Race.
type RaceEdge struct {
	Node   *Race  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// RaceConnection is the connection containing edges to Race.
type RaceConnection struct {
	Edges      []*RaceEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *RaceConnection) build(nodes []*Race, pager *racePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Race
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Race {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Race {
			return nodes[i]
		}
	}
	c.Edges = make([]*RaceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RaceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RacePaginateOption enables pagination customization.
type RacePaginateOption func(*racePager) error

// WithRaceOrder configures pagination ordering.
func WithRaceOrder(order *RaceOrder) RacePaginateOption {
	if order == nil {
		order = DefaultRaceOrder
	}
	o := *order
	return func(pager *racePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRaceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRaceFilter configures pagination filter.
func WithRaceFilter(filter func(*RaceQuery) (*RaceQuery, error)) RacePaginateOption {
	return func(pager *racePager) error {
		if filter == nil {
			return errors.New("RaceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type racePager struct {
	reverse bool
	order   *RaceOrder
	filter  func(*RaceQuery) (*RaceQuery, error)
}

func newRacePager(opts []RacePaginateOption, reverse bool) (*racePager, error) {
	pager := &racePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRaceOrder
	}
	return pager, nil
}

func (p *racePager) applyFilter(query *RaceQuery) (*RaceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *racePager) toCursor(r *Race) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *racePager) applyCursors(query *RaceQuery, after, before *Cursor) (*RaceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRaceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *racePager) applyOrder(query *RaceQuery) *RaceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRaceOrder.Field {
		query = query.Order(DefaultRaceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *racePager) orderExpr(query *RaceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRaceOrder.Field {
			b.Comma().Ident(DefaultRaceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Race.
func (r *RaceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RacePaginateOption,
) (*RaceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRacePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}
	conn := &RaceConnection{Edges: []*RaceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = r.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if r, err = pager.applyCursors(r, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		r.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := r.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	r = pager.applyOrder(r)
	nodes, err := r.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RaceOrderFieldIndx orders Race by indx.
	RaceOrderFieldIndx = &RaceOrderField{
		Value: func(r *Race) (ent.Value, error) {
			return r.Indx, nil
		},
		column: race.FieldIndx,
		toTerm: race.ByIndx,
		toCursor: func(r *Race) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.Indx,
			}
		},
	}
	// RaceOrderFieldName orders Race by name.
	RaceOrderFieldName = &RaceOrderField{
		Value: func(r *Race) (ent.Value, error) {
			return r.Name, nil
		},
		column: race.FieldName,
		toTerm: race.ByName,
		toCursor: func(r *Race) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RaceOrderField) String() string {
	var str string
	switch f.column {
	case RaceOrderFieldIndx.column:
		str = "INDX"
	case RaceOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RaceOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RaceOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RaceOrderField %T must be a string", v)
	}
	switch str {
	case "INDX":
		*f = *RaceOrderFieldIndx
	case "NAME":
		*f = *RaceOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid RaceOrderField", str)
	}
	return nil
}

// RaceOrderField defines the ordering field of Race.
type RaceOrderField struct {
	// Value extracts the ordering value from the given Race.
	Value    func(*Race) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) race.OrderOption
	toCursor func(*Race) Cursor
}

// RaceOrder defines the ordering of Race.
type RaceOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *RaceOrderField `json:"field"`
}

// DefaultRaceOrder is the default ordering of Race.
var DefaultRaceOrder = &RaceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RaceOrderField{
		Value: func(r *Race) (ent.Value, error) {
			return r.ID, nil
		},
		column: race.FieldID,
		toTerm: race.ByID,
		toCursor: func(r *Race) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Race into RaceEdge.
func (r *Race) ToEdge(order *RaceOrder) *RaceEdge {
	if order == nil {
		order = DefaultRaceOrder
	}
	return &RaceEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}

// RuleEdge is the edge representation of Rule.
type RuleEdge struct {
	Node   *Rule  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// RuleConnection is the connection containing edges to Rule.
type RuleConnection struct {
	Edges      []*RuleEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *RuleConnection) build(nodes []*Rule, pager *rulePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Rule
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Rule {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Rule {
			return nodes[i]
		}
	}
	c.Edges = make([]*RuleEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RuleEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RulePaginateOption enables pagination customization.
type RulePaginateOption func(*rulePager) error

// WithRuleOrder configures pagination ordering.
func WithRuleOrder(order *RuleOrder) RulePaginateOption {
	if order == nil {
		order = DefaultRuleOrder
	}
	o := *order
	return func(pager *rulePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRuleOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRuleFilter configures pagination filter.
func WithRuleFilter(filter func(*RuleQuery) (*RuleQuery, error)) RulePaginateOption {
	return func(pager *rulePager) error {
		if filter == nil {
			return errors.New("RuleQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type rulePager struct {
	reverse bool
	order   *RuleOrder
	filter  func(*RuleQuery) (*RuleQuery, error)
}

func newRulePager(opts []RulePaginateOption, reverse bool) (*rulePager, error) {
	pager := &rulePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRuleOrder
	}
	return pager, nil
}

func (p *rulePager) applyFilter(query *RuleQuery) (*RuleQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *rulePager) toCursor(r *Rule) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *rulePager) applyCursors(query *RuleQuery, after, before *Cursor) (*RuleQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRuleOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *rulePager) applyOrder(query *RuleQuery) *RuleQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRuleOrder.Field {
		query = query.Order(DefaultRuleOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *rulePager) orderExpr(query *RuleQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRuleOrder.Field {
			b.Comma().Ident(DefaultRuleOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Rule.
func (r *RuleQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RulePaginateOption,
) (*RuleConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRulePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}
	conn := &RuleConnection{Edges: []*RuleEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = r.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if r, err = pager.applyCursors(r, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		r.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := r.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	r = pager.applyOrder(r)
	nodes, err := r.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RuleOrderFieldIndx orders Rule by indx.
	RuleOrderFieldIndx = &RuleOrderField{
		Value: func(r *Rule) (ent.Value, error) {
			return r.Indx, nil
		},
		column: rule.FieldIndx,
		toTerm: rule.ByIndx,
		toCursor: func(r *Rule) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.Indx,
			}
		},
	}
	// RuleOrderFieldName orders Rule by name.
	RuleOrderFieldName = &RuleOrderField{
		Value: func(r *Rule) (ent.Value, error) {
			return r.Name, nil
		},
		column: rule.FieldName,
		toTerm: rule.ByName,
		toCursor: func(r *Rule) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RuleOrderField) String() string {
	var str string
	switch f.column {
	case RuleOrderFieldIndx.column:
		str = "INDX"
	case RuleOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RuleOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RuleOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RuleOrderField %T must be a string", v)
	}
	switch str {
	case "INDX":
		*f = *RuleOrderFieldIndx
	case "NAME":
		*f = *RuleOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid RuleOrderField", str)
	}
	return nil
}

// RuleOrderField defines the ordering field of Rule.
type RuleOrderField struct {
	// Value extracts the ordering value from the given Rule.
	Value    func(*Rule) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) rule.OrderOption
	toCursor func(*Rule) Cursor
}

// RuleOrder defines the ordering of Rule.
type RuleOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *RuleOrderField `json:"field"`
}

// DefaultRuleOrder is the default ordering of Rule.
var DefaultRuleOrder = &RuleOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RuleOrderField{
		Value: func(r *Rule) (ent.Value, error) {
			return r.ID, nil
		},
		column: rule.FieldID,
		toTerm: rule.ByID,
		toCursor: func(r *Rule) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Rule into RuleEdge.
func (r *Rule) ToEdge(order *RuleOrder) *RuleEdge {
	if order == nil {
		order = DefaultRuleOrder
	}
	return &RuleEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}

// RuleSectionEdge is the edge representation of RuleSection.
type RuleSectionEdge struct {
	Node   *RuleSection `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// RuleSectionConnection is the connection containing edges to RuleSection.
type RuleSectionConnection struct {
	Edges      []*RuleSectionEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *RuleSectionConnection) build(nodes []*RuleSection, pager *rulesectionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *RuleSection
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *RuleSection {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *RuleSection {
			return nodes[i]
		}
	}
	c.Edges = make([]*RuleSectionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RuleSectionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RuleSectionPaginateOption enables pagination customization.
type RuleSectionPaginateOption func(*rulesectionPager) error

// WithRuleSectionOrder configures pagination ordering.
func WithRuleSectionOrder(order *RuleSectionOrder) RuleSectionPaginateOption {
	if order == nil {
		order = DefaultRuleSectionOrder
	}
	o := *order
	return func(pager *rulesectionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRuleSectionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRuleSectionFilter configures pagination filter.
func WithRuleSectionFilter(filter func(*RuleSectionQuery) (*RuleSectionQuery, error)) RuleSectionPaginateOption {
	return func(pager *rulesectionPager) error {
		if filter == nil {
			return errors.New("RuleSectionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type rulesectionPager struct {
	reverse bool
	order   *RuleSectionOrder
	filter  func(*RuleSectionQuery) (*RuleSectionQuery, error)
}

func newRuleSectionPager(opts []RuleSectionPaginateOption, reverse bool) (*rulesectionPager, error) {
	pager := &rulesectionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRuleSectionOrder
	}
	return pager, nil
}

func (p *rulesectionPager) applyFilter(query *RuleSectionQuery) (*RuleSectionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *rulesectionPager) toCursor(rs *RuleSection) Cursor {
	return p.order.Field.toCursor(rs)
}

func (p *rulesectionPager) applyCursors(query *RuleSectionQuery, after, before *Cursor) (*RuleSectionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRuleSectionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *rulesectionPager) applyOrder(query *RuleSectionQuery) *RuleSectionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRuleSectionOrder.Field {
		query = query.Order(DefaultRuleSectionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *rulesectionPager) orderExpr(query *RuleSectionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRuleSectionOrder.Field {
			b.Comma().Ident(DefaultRuleSectionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to RuleSection.
func (rs *RuleSectionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RuleSectionPaginateOption,
) (*RuleSectionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRuleSectionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if rs, err = pager.applyFilter(rs); err != nil {
		return nil, err
	}
	conn := &RuleSectionConnection{Edges: []*RuleSectionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = rs.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if rs, err = pager.applyCursors(rs, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		rs.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := rs.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	rs = pager.applyOrder(rs)
	nodes, err := rs.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RuleSectionOrderFieldIndx orders RuleSection by indx.
	RuleSectionOrderFieldIndx = &RuleSectionOrderField{
		Value: func(rs *RuleSection) (ent.Value, error) {
			return rs.Indx, nil
		},
		column: rulesection.FieldIndx,
		toTerm: rulesection.ByIndx,
		toCursor: func(rs *RuleSection) Cursor {
			return Cursor{
				ID:    rs.ID,
				Value: rs.Indx,
			}
		},
	}
	// RuleSectionOrderFieldName orders RuleSection by name.
	RuleSectionOrderFieldName = &RuleSectionOrderField{
		Value: func(rs *RuleSection) (ent.Value, error) {
			return rs.Name, nil
		},
		column: rulesection.FieldName,
		toTerm: rulesection.ByName,
		toCursor: func(rs *RuleSection) Cursor {
			return Cursor{
				ID:    rs.ID,
				Value: rs.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RuleSectionOrderField) String() string {
	var str string
	switch f.column {
	case RuleSectionOrderFieldIndx.column:
		str = "INDX"
	case RuleSectionOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RuleSectionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RuleSectionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RuleSectionOrderField %T must be a string", v)
	}
	switch str {
	case "INDX":
		*f = *RuleSectionOrderFieldIndx
	case "NAME":
		*f = *RuleSectionOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid RuleSectionOrderField", str)
	}
	return nil
}

// RuleSectionOrderField defines the ordering field of RuleSection.
type RuleSectionOrderField struct {
	// Value extracts the ordering value from the given RuleSection.
	Value    func(*RuleSection) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) rulesection.OrderOption
	toCursor func(*RuleSection) Cursor
}

// RuleSectionOrder defines the ordering of RuleSection.
type RuleSectionOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *RuleSectionOrderField `json:"field"`
}

// DefaultRuleSectionOrder is the default ordering of RuleSection.
var DefaultRuleSectionOrder = &RuleSectionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RuleSectionOrderField{
		Value: func(rs *RuleSection) (ent.Value, error) {
			return rs.ID, nil
		},
		column: rulesection.FieldID,
		toTerm: rulesection.ByID,
		toCursor: func(rs *RuleSection) Cursor {
			return Cursor{ID: rs.ID}
		},
	},
}

// ToEdge converts RuleSection into RuleSectionEdge.
func (rs *RuleSection) ToEdge(order *RuleSectionOrder) *RuleSectionEdge {
	if order == nil {
		order = DefaultRuleSectionOrder
	}
	return &RuleSectionEdge{
		Node:   rs,
		Cursor: order.Field.toCursor(rs),
	}
}

// SkillEdge is the edge representation of Skill.
type SkillEdge struct {
	Node   *Skill `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// SkillConnection is the connection containing edges to Skill.
type SkillConnection struct {
	Edges      []*SkillEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *SkillConnection) build(nodes []*Skill, pager *skillPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Skill
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Skill {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Skill {
			return nodes[i]
		}
	}
	c.Edges = make([]*SkillEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SkillEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SkillPaginateOption enables pagination customization.
type SkillPaginateOption func(*skillPager) error

// WithSkillOrder configures pagination ordering.
func WithSkillOrder(order *SkillOrder) SkillPaginateOption {
	if order == nil {
		order = DefaultSkillOrder
	}
	o := *order
	return func(pager *skillPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSkillOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSkillFilter configures pagination filter.
func WithSkillFilter(filter func(*SkillQuery) (*SkillQuery, error)) SkillPaginateOption {
	return func(pager *skillPager) error {
		if filter == nil {
			return errors.New("SkillQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type skillPager struct {
	reverse bool
	order   *SkillOrder
	filter  func(*SkillQuery) (*SkillQuery, error)
}

func newSkillPager(opts []SkillPaginateOption, reverse bool) (*skillPager, error) {
	pager := &skillPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSkillOrder
	}
	return pager, nil
}

func (p *skillPager) applyFilter(query *SkillQuery) (*SkillQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *skillPager) toCursor(s *Skill) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *skillPager) applyCursors(query *SkillQuery, after, before *Cursor) (*SkillQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSkillOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *skillPager) applyOrder(query *SkillQuery) *SkillQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSkillOrder.Field {
		query = query.Order(DefaultSkillOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *skillPager) orderExpr(query *SkillQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSkillOrder.Field {
			b.Comma().Ident(DefaultSkillOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Skill.
func (s *SkillQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SkillPaginateOption,
) (*SkillConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSkillPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}
	conn := &SkillConnection{Edges: []*SkillEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = s.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if s, err = pager.applyCursors(s, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		s.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := s.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	s = pager.applyOrder(s)
	nodes, err := s.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// SkillOrderFieldIndx orders Skill by indx.
	SkillOrderFieldIndx = &SkillOrderField{
		Value: func(s *Skill) (ent.Value, error) {
			return s.Indx, nil
		},
		column: skill.FieldIndx,
		toTerm: skill.ByIndx,
		toCursor: func(s *Skill) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Indx,
			}
		},
	}
	// SkillOrderFieldName orders Skill by name.
	SkillOrderFieldName = &SkillOrderField{
		Value: func(s *Skill) (ent.Value, error) {
			return s.Name, nil
		},
		column: skill.FieldName,
		toTerm: skill.ByName,
		toCursor: func(s *Skill) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f SkillOrderField) String() string {
	var str string
	switch f.column {
	case SkillOrderFieldIndx.column:
		str = "INDX"
	case SkillOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f SkillOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *SkillOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("SkillOrderField %T must be a string", v)
	}
	switch str {
	case "INDX":
		*f = *SkillOrderFieldIndx
	case "NAME":
		*f = *SkillOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid SkillOrderField", str)
	}
	return nil
}

// SkillOrderField defines the ordering field of Skill.
type SkillOrderField struct {
	// Value extracts the ordering value from the given Skill.
	Value    func(*Skill) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) skill.OrderOption
	toCursor func(*Skill) Cursor
}

// SkillOrder defines the ordering of Skill.
type SkillOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *SkillOrderField `json:"field"`
}

// DefaultSkillOrder is the default ordering of Skill.
var DefaultSkillOrder = &SkillOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SkillOrderField{
		Value: func(s *Skill) (ent.Value, error) {
			return s.ID, nil
		},
		column: skill.FieldID,
		toTerm: skill.ByID,
		toCursor: func(s *Skill) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Skill into SkillEdge.
func (s *Skill) ToEdge(order *SkillOrder) *SkillEdge {
	if order == nil {
		order = DefaultSkillOrder
	}
	return &SkillEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// WeaponEdge is the edge representation of Weapon.
type WeaponEdge struct {
	Node   *Weapon `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// WeaponConnection is the connection containing edges to Weapon.
type WeaponConnection struct {
	Edges      []*WeaponEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *WeaponConnection) build(nodes []*Weapon, pager *weaponPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Weapon
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Weapon {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Weapon {
			return nodes[i]
		}
	}
	c.Edges = make([]*WeaponEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &WeaponEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// WeaponPaginateOption enables pagination customization.
type WeaponPaginateOption func(*weaponPager) error

// WithWeaponOrder configures pagination ordering.
func WithWeaponOrder(order *WeaponOrder) WeaponPaginateOption {
	if order == nil {
		order = DefaultWeaponOrder
	}
	o := *order
	return func(pager *weaponPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWeaponOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWeaponFilter configures pagination filter.
func WithWeaponFilter(filter func(*WeaponQuery) (*WeaponQuery, error)) WeaponPaginateOption {
	return func(pager *weaponPager) error {
		if filter == nil {
			return errors.New("WeaponQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type weaponPager struct {
	reverse bool
	order   *WeaponOrder
	filter  func(*WeaponQuery) (*WeaponQuery, error)
}

func newWeaponPager(opts []WeaponPaginateOption, reverse bool) (*weaponPager, error) {
	pager := &weaponPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWeaponOrder
	}
	return pager, nil
}

func (p *weaponPager) applyFilter(query *WeaponQuery) (*WeaponQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *weaponPager) toCursor(w *Weapon) Cursor {
	return p.order.Field.toCursor(w)
}

func (p *weaponPager) applyCursors(query *WeaponQuery, after, before *Cursor) (*WeaponQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultWeaponOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *weaponPager) applyOrder(query *WeaponQuery) *WeaponQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultWeaponOrder.Field {
		query = query.Order(DefaultWeaponOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *weaponPager) orderExpr(query *WeaponQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultWeaponOrder.Field {
			b.Comma().Ident(DefaultWeaponOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Weapon.
func (w *WeaponQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WeaponPaginateOption,
) (*WeaponConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWeaponPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if w, err = pager.applyFilter(w); err != nil {
		return nil, err
	}
	conn := &WeaponConnection{Edges: []*WeaponEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = w.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if w, err = pager.applyCursors(w, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		w.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := w.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	w = pager.applyOrder(w)
	nodes, err := w.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// WeaponOrderField defines the ordering field of Weapon.
type WeaponOrderField struct {
	// Value extracts the ordering value from the given Weapon.
	Value    func(*Weapon) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) weapon.OrderOption
	toCursor func(*Weapon) Cursor
}

// WeaponOrder defines the ordering of Weapon.
type WeaponOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *WeaponOrderField `json:"field"`
}

// DefaultWeaponOrder is the default ordering of Weapon.
var DefaultWeaponOrder = &WeaponOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &WeaponOrderField{
		Value: func(w *Weapon) (ent.Value, error) {
			return w.ID, nil
		},
		column: weapon.FieldID,
		toTerm: weapon.ByID,
		toCursor: func(w *Weapon) Cursor {
			return Cursor{ID: w.ID}
		},
	},
}

// ToEdge converts Weapon into WeaponEdge.
func (w *Weapon) ToEdge(order *WeaponOrder) *WeaponEdge {
	if order == nil {
		order = DefaultWeaponOrder
	}
	return &WeaponEdge{
		Node:   w,
		Cursor: order.Field.toCursor(w),
	}
}

// WeaponRangeEdge is the edge representation of WeaponRange.
type WeaponRangeEdge struct {
	Node   *WeaponRange `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// WeaponRangeConnection is the connection containing edges to WeaponRange.
type WeaponRangeConnection struct {
	Edges      []*WeaponRangeEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *WeaponRangeConnection) build(nodes []*WeaponRange, pager *weaponrangePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *WeaponRange
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *WeaponRange {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *WeaponRange {
			return nodes[i]
		}
	}
	c.Edges = make([]*WeaponRangeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &WeaponRangeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// WeaponRangePaginateOption enables pagination customization.
type WeaponRangePaginateOption func(*weaponrangePager) error

// WithWeaponRangeOrder configures pagination ordering.
func WithWeaponRangeOrder(order *WeaponRangeOrder) WeaponRangePaginateOption {
	if order == nil {
		order = DefaultWeaponRangeOrder
	}
	o := *order
	return func(pager *weaponrangePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWeaponRangeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWeaponRangeFilter configures pagination filter.
func WithWeaponRangeFilter(filter func(*WeaponRangeQuery) (*WeaponRangeQuery, error)) WeaponRangePaginateOption {
	return func(pager *weaponrangePager) error {
		if filter == nil {
			return errors.New("WeaponRangeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type weaponrangePager struct {
	reverse bool
	order   *WeaponRangeOrder
	filter  func(*WeaponRangeQuery) (*WeaponRangeQuery, error)
}

func newWeaponRangePager(opts []WeaponRangePaginateOption, reverse bool) (*weaponrangePager, error) {
	pager := &weaponrangePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWeaponRangeOrder
	}
	return pager, nil
}

func (p *weaponrangePager) applyFilter(query *WeaponRangeQuery) (*WeaponRangeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *weaponrangePager) toCursor(wr *WeaponRange) Cursor {
	return p.order.Field.toCursor(wr)
}

func (p *weaponrangePager) applyCursors(query *WeaponRangeQuery, after, before *Cursor) (*WeaponRangeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultWeaponRangeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *weaponrangePager) applyOrder(query *WeaponRangeQuery) *WeaponRangeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultWeaponRangeOrder.Field {
		query = query.Order(DefaultWeaponRangeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *weaponrangePager) orderExpr(query *WeaponRangeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultWeaponRangeOrder.Field {
			b.Comma().Ident(DefaultWeaponRangeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to WeaponRange.
func (wr *WeaponRangeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WeaponRangePaginateOption,
) (*WeaponRangeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWeaponRangePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if wr, err = pager.applyFilter(wr); err != nil {
		return nil, err
	}
	conn := &WeaponRangeConnection{Edges: []*WeaponRangeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = wr.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if wr, err = pager.applyCursors(wr, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		wr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := wr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	wr = pager.applyOrder(wr)
	nodes, err := wr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// WeaponRangeOrderField defines the ordering field of WeaponRange.
type WeaponRangeOrderField struct {
	// Value extracts the ordering value from the given WeaponRange.
	Value    func(*WeaponRange) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) weaponrange.OrderOption
	toCursor func(*WeaponRange) Cursor
}

// WeaponRangeOrder defines the ordering of WeaponRange.
type WeaponRangeOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *WeaponRangeOrderField `json:"field"`
}

// DefaultWeaponRangeOrder is the default ordering of WeaponRange.
var DefaultWeaponRangeOrder = &WeaponRangeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &WeaponRangeOrderField{
		Value: func(wr *WeaponRange) (ent.Value, error) {
			return wr.ID, nil
		},
		column: weaponrange.FieldID,
		toTerm: weaponrange.ByID,
		toCursor: func(wr *WeaponRange) Cursor {
			return Cursor{ID: wr.ID}
		},
	},
}

// ToEdge converts WeaponRange into WeaponRangeEdge.
func (wr *WeaponRange) ToEdge(order *WeaponRangeOrder) *WeaponRangeEdge {
	if order == nil {
		order = DefaultWeaponRangeOrder
	}
	return &WeaponRangeEdge{
		Node:   wr,
		Cursor: order.Field.toCursor(wr),
	}
}
