// Code generated by ent, DO NOT EDIT.

package characterabilityscore

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldLTE(FieldID, id))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldEQ(FieldScore, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.FieldLTE(FieldScore, v))
}

// HasCharacter applies the HasEdge predicate on the "character" edge.
func HasCharacter() predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CharacterTable, CharacterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCharacterWith applies the HasEdge predicate on the "character" edge with a given conditions (other predicates).
func HasCharacterWith(preds ...predicate.Character) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(func(s *sql.Selector) {
		step := newCharacterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAbilityScore applies the HasEdge predicate on the "ability_score" edge.
func HasAbilityScore() predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AbilityScoreTable, AbilityScoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAbilityScoreWith applies the HasEdge predicate on the "ability_score" edge with a given conditions (other predicates).
func HasAbilityScoreWith(preds ...predicate.AbilityScore) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(func(s *sql.Selector) {
		step := newAbilityScoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CharacterAbilityScore) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CharacterAbilityScore) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CharacterAbilityScore) predicate.CharacterAbilityScore {
	return predicate.CharacterAbilityScore(sql.NotPredicates(p))
}
