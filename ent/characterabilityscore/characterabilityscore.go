// Code generated by ent, DO NOT EDIT.

package characterabilityscore

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the characterabilityscore type in the database.
	Label = "character_ability_score"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldModifier holds the string denoting the modifier field in the database.
	FieldModifier = "modifier"
	// FieldCharacterID holds the string denoting the character_id field in the database.
	FieldCharacterID = "character_id"
	// FieldAbilityScoreID holds the string denoting the ability_score_id field in the database.
	FieldAbilityScoreID = "ability_score_id"
	// EdgeCharacter holds the string denoting the character edge name in mutations.
	EdgeCharacter = "character"
	// EdgeAbilityScore holds the string denoting the ability_score edge name in mutations.
	EdgeAbilityScore = "ability_score"
	// CharacterFieldID holds the string denoting the ID field of the Character.
	CharacterFieldID = "id"
	// AbilityScoreFieldID holds the string denoting the ID field of the AbilityScore.
	AbilityScoreFieldID = "id"
	// Table holds the table name of the characterabilityscore in the database.
	Table = "character_ability_scores"
	// CharacterTable is the table that holds the character relation/edge.
	CharacterTable = "character_ability_scores"
	// CharacterInverseTable is the table name for the Character entity.
	// It exists in this package in order to avoid circular dependency with the "character" package.
	CharacterInverseTable = "characters"
	// CharacterColumn is the table column denoting the character relation/edge.
	CharacterColumn = "character_id"
	// AbilityScoreTable is the table that holds the ability_score relation/edge.
	AbilityScoreTable = "character_ability_scores"
	// AbilityScoreInverseTable is the table name for the AbilityScore entity.
	// It exists in this package in order to avoid circular dependency with the "abilityscore" package.
	AbilityScoreInverseTable = "ability_scores"
	// AbilityScoreColumn is the table column denoting the ability_score relation/edge.
	AbilityScoreColumn = "ability_score_id"
)

// Columns holds all SQL columns for characterabilityscore fields.
var Columns = []string{
	FieldScore,
	FieldModifier,
	FieldCharacterID,
	FieldAbilityScoreID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/ecshreve/dndgen/ent/runtime"
var (
	Hooks [1]ent.Hook
	// ScoreValidator is a validator for the "score" field. It is called by the builders before save.
	ScoreValidator func(int) error
	// ModifierValidator is a validator for the "modifier" field. It is called by the builders before save.
	ModifierValidator func(int) error
)

// OrderOption defines the ordering options for the CharacterAbilityScore queries.
type OrderOption func(*sql.Selector)

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByModifier orders the results by the modifier field.
func ByModifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifier, opts...).ToFunc()
}

// ByCharacterID orders the results by the character_id field.
func ByCharacterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCharacterID, opts...).ToFunc()
}

// ByAbilityScoreID orders the results by the ability_score_id field.
func ByAbilityScoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbilityScoreID, opts...).ToFunc()
}

// ByCharacterField orders the results by character field.
func ByCharacterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCharacterStep(), sql.OrderByField(field, opts...))
	}
}

// ByAbilityScoreField orders the results by ability_score field.
func ByAbilityScoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAbilityScoreStep(), sql.OrderByField(field, opts...))
	}
}
func newCharacterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, CharacterColumn),
		sqlgraph.To(CharacterInverseTable, CharacterFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CharacterTable, CharacterColumn),
	)
}
func newAbilityScoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, AbilityScoreColumn),
		sqlgraph.To(AbilityScoreInverseTable, AbilityScoreFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AbilityScoreTable, AbilityScoreColumn),
	)
}
