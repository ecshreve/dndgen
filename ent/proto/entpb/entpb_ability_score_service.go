// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/ecshreve/dndgen/ent"
	abilityscore "github.com/ecshreve/dndgen/ent/abilityscore"
	skill "github.com/ecshreve/dndgen/ent/skill"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	strconv "strconv"
)

// AbilityScoreService implements AbilityScoreServiceServer
type AbilityScoreService struct {
	client *ent.Client
	UnimplementedAbilityScoreServiceServer
}

// NewAbilityScoreService returns a new AbilityScoreService
func NewAbilityScoreService(client *ent.Client) *AbilityScoreService {
	return &AbilityScoreService{
		client: client,
	}
}

// toProtoAbilityScore transforms the ent type to the pb type
func toProtoAbilityScore(e *ent.AbilityScore) (*AbilityScore, error) {
	v := &AbilityScore{}
	desc := e.Desc
	v.Desc = desc
	full_name := e.FullName
	v.FullName = full_name
	id := int64(e.ID)
	v.Id = id
	indx := e.Indx
	v.Indx = indx
	name := e.Name
	v.Name = name
	for _, edg := range e.Edges.Skills {
		id := int64(edg.ID)
		v.Skills = append(v.Skills, &Skill{
			Id: id,
		})
	}
	return v, nil
}

// toProtoAbilityScoreList transforms a list of ent type to a list of pb type
func toProtoAbilityScoreList(e []*ent.AbilityScore) ([]*AbilityScore, error) {
	var pbList []*AbilityScore
	for _, entEntity := range e {
		pbEntity, err := toProtoAbilityScore(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements AbilityScoreServiceServer.Create
func (svc *AbilityScoreService) Create(ctx context.Context, req *CreateAbilityScoreRequest) (*AbilityScore, error) {
	abilityscore := req.GetAbilityScore()
	m, err := svc.createBuilder(abilityscore)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoAbilityScore(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements AbilityScoreServiceServer.Get
func (svc *AbilityScoreService) Get(ctx context.Context, req *GetAbilityScoreRequest) (*AbilityScore, error) {
	var (
		err error
		get *ent.AbilityScore
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetAbilityScoreRequest_VIEW_UNSPECIFIED, GetAbilityScoreRequest_BASIC:
		get, err = svc.client.AbilityScore.Get(ctx, id)
	case GetAbilityScoreRequest_WITH_EDGE_IDS:
		get, err = svc.client.AbilityScore.Query().
			Where(abilityscore.ID(id)).
			WithSkills(func(query *ent.SkillQuery) {
				query.Select(skill.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoAbilityScore(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements AbilityScoreServiceServer.Update
func (svc *AbilityScoreService) Update(ctx context.Context, req *UpdateAbilityScoreRequest) (*AbilityScore, error) {
	abilityscore := req.GetAbilityScore()
	abilityscoreID := int(abilityscore.GetId())
	m := svc.client.AbilityScore.UpdateOneID(abilityscoreID)
	abilityscoreDesc := abilityscore.GetDesc()
	m.SetDesc(abilityscoreDesc)
	abilityscoreFullName := abilityscore.GetFullName()
	m.SetFullName(abilityscoreFullName)
	abilityscoreIndx := abilityscore.GetIndx()
	m.SetIndx(abilityscoreIndx)
	abilityscoreName := abilityscore.GetName()
	m.SetName(abilityscoreName)
	for _, item := range abilityscore.GetSkills() {
		skills := int(item.GetId())
		m.AddSkillIDs(skills)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoAbilityScore(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements AbilityScoreServiceServer.Delete
func (svc *AbilityScoreService) Delete(ctx context.Context, req *DeleteAbilityScoreRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.AbilityScore.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements AbilityScoreServiceServer.List
func (svc *AbilityScoreService) List(ctx context.Context, req *ListAbilityScoreRequest) (*ListAbilityScoreResponse, error) {
	var (
		err      error
		entList  []*ent.AbilityScore
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.AbilityScore.Query().
		Order(ent.Desc(abilityscore.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(abilityscore.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListAbilityScoreRequest_VIEW_UNSPECIFIED, ListAbilityScoreRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListAbilityScoreRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithSkills(func(query *ent.SkillQuery) {
				query.Select(skill.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoAbilityScoreList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListAbilityScoreResponse{
			AbilityScoreList: protoList,
			NextPageToken:    nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements AbilityScoreServiceServer.BatchCreate
func (svc *AbilityScoreService) BatchCreate(ctx context.Context, req *BatchCreateAbilityScoresRequest) (*BatchCreateAbilityScoresResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.AbilityScoreCreate, len(requests))
	for i, req := range requests {
		abilityscore := req.GetAbilityScore()
		var err error
		bulk[i], err = svc.createBuilder(abilityscore)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.AbilityScore.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoAbilityScoreList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateAbilityScoresResponse{
			AbilityScores: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *AbilityScoreService) createBuilder(abilityscore *AbilityScore) (*ent.AbilityScoreCreate, error) {
	m := svc.client.AbilityScore.Create()
	abilityscoreDesc := abilityscore.GetDesc()
	m.SetDesc(abilityscoreDesc)
	abilityscoreFullName := abilityscore.GetFullName()
	m.SetFullName(abilityscoreFullName)
	abilityscoreIndx := abilityscore.GetIndx()
	m.SetIndx(abilityscoreIndx)
	abilityscoreName := abilityscore.GetName()
	m.SetName(abilityscoreName)
	for _, item := range abilityscore.GetSkills() {
		skills := int(item.GetId())
		m.AddSkillIDs(skills)
	}
	return m, nil
}
