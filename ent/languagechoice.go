// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/languagechoice"
	"github.com/ecshreve/dndgen/ent/race"
)

// LanguageChoice is the model entity for the LanguageChoice schema.
type LanguageChoice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Choose holds the value of the "choose" field.
	Choose int `json:"choose,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LanguageChoiceQuery when eager-loading is set.
	Edges                 LanguageChoiceEdges `json:"-"`
	race_language_options *int
	selectValues          sql.SelectValues
}

// LanguageChoiceEdges holds the relations/edges for other nodes in the graph.
type LanguageChoiceEdges struct {
	// Languages holds the value of the languages edge.
	Languages []*Language `json:"languages,omitempty"`
	// Race holds the value of the race edge.
	Race *Race `json:"race,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedLanguages map[string][]*Language
}

// LanguagesOrErr returns the Languages value or an error if the edge
// was not loaded in eager-loading.
func (e LanguageChoiceEdges) LanguagesOrErr() ([]*Language, error) {
	if e.loadedTypes[0] {
		return e.Languages, nil
	}
	return nil, &NotLoadedError{edge: "languages"}
}

// RaceOrErr returns the Race value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LanguageChoiceEdges) RaceOrErr() (*Race, error) {
	if e.Race != nil {
		return e.Race, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: race.Label}
	}
	return nil, &NotLoadedError{edge: "race"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LanguageChoice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case languagechoice.FieldID, languagechoice.FieldChoose:
			values[i] = new(sql.NullInt64)
		case languagechoice.ForeignKeys[0]: // race_language_options
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LanguageChoice fields.
func (lc *LanguageChoice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case languagechoice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lc.ID = int(value.Int64)
		case languagechoice.FieldChoose:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field choose", values[i])
			} else if value.Valid {
				lc.Choose = int(value.Int64)
			}
		case languagechoice.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field race_language_options", value)
			} else if value.Valid {
				lc.race_language_options = new(int)
				*lc.race_language_options = int(value.Int64)
			}
		default:
			lc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LanguageChoice.
// This includes values selected through modifiers, order, etc.
func (lc *LanguageChoice) Value(name string) (ent.Value, error) {
	return lc.selectValues.Get(name)
}

// QueryLanguages queries the "languages" edge of the LanguageChoice entity.
func (lc *LanguageChoice) QueryLanguages() *LanguageQuery {
	return NewLanguageChoiceClient(lc.config).QueryLanguages(lc)
}

// QueryRace queries the "race" edge of the LanguageChoice entity.
func (lc *LanguageChoice) QueryRace() *RaceQuery {
	return NewLanguageChoiceClient(lc.config).QueryRace(lc)
}

// Update returns a builder for updating this LanguageChoice.
// Note that you need to call LanguageChoice.Unwrap() before calling this method if this LanguageChoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (lc *LanguageChoice) Update() *LanguageChoiceUpdateOne {
	return NewLanguageChoiceClient(lc.config).UpdateOne(lc)
}

// Unwrap unwraps the LanguageChoice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lc *LanguageChoice) Unwrap() *LanguageChoice {
	_tx, ok := lc.config.driver.(*txDriver)
	if !ok {
		panic("ent: LanguageChoice is not a transactional entity")
	}
	lc.config.driver = _tx.drv
	return lc
}

// String implements the fmt.Stringer.
func (lc *LanguageChoice) String() string {
	var builder strings.Builder
	builder.WriteString("LanguageChoice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lc.ID))
	builder.WriteString("choose=")
	builder.WriteString(fmt.Sprintf("%v", lc.Choose))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (lc *LanguageChoice) MarshalJSON() ([]byte, error) {
	type Alias LanguageChoice
	return json.Marshal(&struct {
		*Alias
		LanguageChoiceEdges
	}{
		Alias:               (*Alias)(lc),
		LanguageChoiceEdges: lc.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (lc *LanguageChoice) UnmarshalJSON(data []byte) error {
	type Alias LanguageChoice
	aux := &struct {
		*Alias
		LanguageChoiceEdges
	}{
		Alias: (*Alias)(lc),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	lc.Edges = aux.LanguageChoiceEdges
	return nil
}

func (lcc *LanguageChoiceCreate) SetLanguageChoice(input *LanguageChoice) *LanguageChoiceCreate {
	lcc.SetChoose(input.Choose)
	return lcc
}

// NamedLanguages returns the Languages named value or an error if the edge was not
// loaded in eager-loading with this name.
func (lc *LanguageChoice) NamedLanguages(name string) ([]*Language, error) {
	if lc.Edges.namedLanguages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := lc.Edges.namedLanguages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (lc *LanguageChoice) appendNamedLanguages(name string, edges ...*Language) {
	if lc.Edges.namedLanguages == nil {
		lc.Edges.namedLanguages = make(map[string][]*Language)
	}
	if len(edges) == 0 {
		lc.Edges.namedLanguages[name] = []*Language{}
	} else {
		lc.Edges.namedLanguages[name] = append(lc.Edges.namedLanguages[name], edges...)
	}
}

// LanguageChoices is a parsable slice of LanguageChoice.
type LanguageChoices []*LanguageChoice
