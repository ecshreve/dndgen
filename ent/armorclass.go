// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/armor"
	"github.com/ecshreve/dndgen/ent/armorclass"
)

// ArmorClass is the model entity for the ArmorClass schema.
type ArmorClass struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Base holds the value of the "base" field.
	Base int `json:"base,omitempty"`
	// DexBonus holds the value of the "dex_bonus" field.
	DexBonus bool `json:"dex_bonus,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArmorClassQuery when eager-loading is set.
	Edges             ArmorClassEdges `json:"-"`
	armor_armor_class *int
	selectValues      sql.SelectValues
}

// ArmorClassEdges holds the relations/edges for other nodes in the graph.
type ArmorClassEdges struct {
	// Armor holds the value of the armor edge.
	Armor *Armor `json:"armor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ArmorOrErr returns the Armor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArmorClassEdges) ArmorOrErr() (*Armor, error) {
	if e.Armor != nil {
		return e.Armor, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: armor.Label}
	}
	return nil, &NotLoadedError{edge: "armor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ArmorClass) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case armorclass.FieldDexBonus:
			values[i] = new(sql.NullBool)
		case armorclass.FieldID, armorclass.FieldBase:
			values[i] = new(sql.NullInt64)
		case armorclass.ForeignKeys[0]: // armor_armor_class
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ArmorClass fields.
func (ac *ArmorClass) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case armorclass.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ac.ID = int(value.Int64)
		case armorclass.FieldBase:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field base", values[i])
			} else if value.Valid {
				ac.Base = int(value.Int64)
			}
		case armorclass.FieldDexBonus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field dex_bonus", values[i])
			} else if value.Valid {
				ac.DexBonus = value.Bool
			}
		case armorclass.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field armor_armor_class", value)
			} else if value.Valid {
				ac.armor_armor_class = new(int)
				*ac.armor_armor_class = int(value.Int64)
			}
		default:
			ac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ArmorClass.
// This includes values selected through modifiers, order, etc.
func (ac *ArmorClass) Value(name string) (ent.Value, error) {
	return ac.selectValues.Get(name)
}

// QueryArmor queries the "armor" edge of the ArmorClass entity.
func (ac *ArmorClass) QueryArmor() *ArmorQuery {
	return NewArmorClassClient(ac.config).QueryArmor(ac)
}

// Update returns a builder for updating this ArmorClass.
// Note that you need to call ArmorClass.Unwrap() before calling this method if this ArmorClass
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *ArmorClass) Update() *ArmorClassUpdateOne {
	return NewArmorClassClient(ac.config).UpdateOne(ac)
}

// Unwrap unwraps the ArmorClass entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *ArmorClass) Unwrap() *ArmorClass {
	_tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: ArmorClass is not a transactional entity")
	}
	ac.config.driver = _tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *ArmorClass) String() string {
	var builder strings.Builder
	builder.WriteString("ArmorClass(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ac.ID))
	builder.WriteString("base=")
	builder.WriteString(fmt.Sprintf("%v", ac.Base))
	builder.WriteString(", ")
	builder.WriteString("dex_bonus=")
	builder.WriteString(fmt.Sprintf("%v", ac.DexBonus))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (ac *ArmorClass) MarshalJSON() ([]byte, error) {
	type Alias ArmorClass
	return json.Marshal(&struct {
		*Alias
		ArmorClassEdges
	}{
		Alias:           (*Alias)(ac),
		ArmorClassEdges: ac.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (ac *ArmorClass) UnmarshalJSON(data []byte) error {
	type Alias ArmorClass
	aux := &struct {
		*Alias
		ArmorClassEdges
	}{
		Alias: (*Alias)(ac),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	ac.Edges = aux.ArmorClassEdges
	return nil
}

func (acc *ArmorClassCreate) SetArmorClass(input *ArmorClass) *ArmorClassCreate {
	acc.SetBase(input.Base)
	acc.SetDexBonus(input.DexBonus)
	return acc
}

// ArmorClasses is a parsable slice of ArmorClass.
type ArmorClasses []*ArmorClass
