// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/feature"
	"github.com/ecshreve/dndgen/ent/prerequisite"
)

// Prerequisite is the model entity for the Prerequisite schema.
type Prerequisite struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PrerequisiteType holds the value of the "prerequisite_type" field.
	PrerequisiteType prerequisite.PrerequisiteType `json:"type,omitempty"`
	// LevelValue holds the value of the "level_value" field.
	LevelValue int `json:"level,omitempty"`
	// FeatureValue holds the value of the "feature_value" field.
	FeatureValue string `json:"feature,omitempty"`
	// SpellValue holds the value of the "spell_value" field.
	SpellValue string `json:"spell,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrerequisiteQuery when eager-loading is set.
	Edges                 PrerequisiteEdges `json:"-"`
	feature_prerequisites *int
	selectValues          sql.SelectValues
}

// PrerequisiteEdges holds the relations/edges for other nodes in the graph.
type PrerequisiteEdges struct {
	// Feature holds the value of the feature edge.
	Feature *Feature `json:"feature,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// FeatureOrErr returns the Feature value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrerequisiteEdges) FeatureOrErr() (*Feature, error) {
	if e.Feature != nil {
		return e.Feature, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: feature.Label}
	}
	return nil, &NotLoadedError{edge: "feature"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Prerequisite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case prerequisite.FieldID, prerequisite.FieldLevelValue:
			values[i] = new(sql.NullInt64)
		case prerequisite.FieldPrerequisiteType, prerequisite.FieldFeatureValue, prerequisite.FieldSpellValue:
			values[i] = new(sql.NullString)
		case prerequisite.ForeignKeys[0]: // feature_prerequisites
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Prerequisite fields.
func (pr *Prerequisite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case prerequisite.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case prerequisite.FieldPrerequisiteType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prerequisite_type", values[i])
			} else if value.Valid {
				pr.PrerequisiteType = prerequisite.PrerequisiteType(value.String)
			}
		case prerequisite.FieldLevelValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level_value", values[i])
			} else if value.Valid {
				pr.LevelValue = int(value.Int64)
			}
		case prerequisite.FieldFeatureValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feature_value", values[i])
			} else if value.Valid {
				pr.FeatureValue = value.String
			}
		case prerequisite.FieldSpellValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spell_value", values[i])
			} else if value.Valid {
				pr.SpellValue = value.String
			}
		case prerequisite.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field feature_prerequisites", value)
			} else if value.Valid {
				pr.feature_prerequisites = new(int)
				*pr.feature_prerequisites = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Prerequisite.
// This includes values selected through modifiers, order, etc.
func (pr *Prerequisite) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryFeature queries the "feature" edge of the Prerequisite entity.
func (pr *Prerequisite) QueryFeature() *FeatureQuery {
	return NewPrerequisiteClient(pr.config).QueryFeature(pr)
}

// Update returns a builder for updating this Prerequisite.
// Note that you need to call Prerequisite.Unwrap() before calling this method if this Prerequisite
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Prerequisite) Update() *PrerequisiteUpdateOne {
	return NewPrerequisiteClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Prerequisite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Prerequisite) Unwrap() *Prerequisite {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Prerequisite is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Prerequisite) String() string {
	var builder strings.Builder
	builder.WriteString("Prerequisite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("prerequisite_type=")
	builder.WriteString(fmt.Sprintf("%v", pr.PrerequisiteType))
	builder.WriteString(", ")
	builder.WriteString("level_value=")
	builder.WriteString(fmt.Sprintf("%v", pr.LevelValue))
	builder.WriteString(", ")
	builder.WriteString("feature_value=")
	builder.WriteString(pr.FeatureValue)
	builder.WriteString(", ")
	builder.WriteString("spell_value=")
	builder.WriteString(pr.SpellValue)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (pr *Prerequisite) MarshalJSON() ([]byte, error) {
	type Alias Prerequisite
	return json.Marshal(&struct {
		*Alias
		PrerequisiteEdges
	}{
		Alias:             (*Alias)(pr),
		PrerequisiteEdges: pr.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (pr *Prerequisite) UnmarshalJSON(data []byte) error {
	type Alias Prerequisite
	aux := &struct {
		*Alias
		PrerequisiteEdges
	}{
		Alias: (*Alias)(pr),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	pr.Edges = aux.PrerequisiteEdges
	return nil
}

func (pc *PrerequisiteCreate) SetPrerequisite(input *Prerequisite) *PrerequisiteCreate {
	pc.SetPrerequisiteType(input.PrerequisiteType)
	pc.SetLevelValue(input.LevelValue)
	pc.SetFeatureValue(input.FeatureValue)
	pc.SetSpellValue(input.SpellValue)
	return pc
}

// Prerequisites is a parsable slice of Prerequisite.
type Prerequisites []*Prerequisite
