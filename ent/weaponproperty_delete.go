// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/weaponproperty"
)

// WeaponPropertyDelete is the builder for deleting a WeaponProperty entity.
type WeaponPropertyDelete struct {
	config
	hooks    []Hook
	mutation *WeaponPropertyMutation
}

// Where appends a list predicates to the WeaponPropertyDelete builder.
func (wpd *WeaponPropertyDelete) Where(ps ...predicate.WeaponProperty) *WeaponPropertyDelete {
	wpd.mutation.Where(ps...)
	return wpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wpd *WeaponPropertyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, WeaponPropertyMutation](ctx, wpd.sqlExec, wpd.mutation, wpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wpd *WeaponPropertyDelete) ExecX(ctx context.Context) int {
	n, err := wpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wpd *WeaponPropertyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(weaponproperty.Table, sqlgraph.NewFieldSpec(weaponproperty.FieldID, field.TypeInt))
	if ps := wpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wpd.mutation.done = true
	return affected, err
}

// WeaponPropertyDeleteOne is the builder for deleting a single WeaponProperty entity.
type WeaponPropertyDeleteOne struct {
	wpd *WeaponPropertyDelete
}

// Where appends a list predicates to the WeaponPropertyDelete builder.
func (wpdo *WeaponPropertyDeleteOne) Where(ps ...predicate.WeaponProperty) *WeaponPropertyDeleteOne {
	wpdo.wpd.mutation.Where(ps...)
	return wpdo
}

// Exec executes the deletion query.
func (wpdo *WeaponPropertyDeleteOne) Exec(ctx context.Context) error {
	n, err := wpdo.wpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{weaponproperty.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wpdo *WeaponPropertyDeleteOne) ExecX(ctx context.Context) {
	if err := wpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
