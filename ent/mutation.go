// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/armor"
	"github.com/ecshreve/dndgen/ent/armorclass"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/damagetype"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/skill"
	"github.com/ecshreve/dndgen/ent/weapon"
	"github.com/ecshreve/dndgen/ent/weapondamage"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAbilityScore = "AbilityScore"
	TypeArmor        = "Armor"
	TypeArmorClass   = "ArmorClass"
	TypeClass        = "Class"
	TypeDamageType   = "DamageType"
	TypeEquipment    = "Equipment"
	TypeRace         = "Race"
	TypeSkill        = "Skill"
	TypeWeapon       = "Weapon"
	TypeWeaponDamage = "WeaponDamage"
)

// AbilityScoreMutation represents an operation that mutates the AbilityScore nodes in the graph.
type AbilityScoreMutation struct {
	config
	op             Op
	typ            string
	id             *int
	indx           *string
	name           *string
	full_name      *string
	desc           *[]string
	appenddesc     []string
	clearedFields  map[string]struct{}
	classes        map[int]struct{}
	removedclasses map[int]struct{}
	clearedclasses bool
	skills         map[int]struct{}
	removedskills  map[int]struct{}
	clearedskills  bool
	done           bool
	oldValue       func(context.Context) (*AbilityScore, error)
	predicates     []predicate.AbilityScore
}

var _ ent.Mutation = (*AbilityScoreMutation)(nil)

// abilityscoreOption allows management of the mutation configuration using functional options.
type abilityscoreOption func(*AbilityScoreMutation)

// newAbilityScoreMutation creates new mutation for the AbilityScore entity.
func newAbilityScoreMutation(c config, op Op, opts ...abilityscoreOption) *AbilityScoreMutation {
	m := &AbilityScoreMutation{
		config:        c,
		op:            op,
		typ:           TypeAbilityScore,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAbilityScoreID sets the ID field of the mutation.
func withAbilityScoreID(id int) abilityscoreOption {
	return func(m *AbilityScoreMutation) {
		var (
			err   error
			once  sync.Once
			value *AbilityScore
		)
		m.oldValue = func(ctx context.Context) (*AbilityScore, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AbilityScore.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAbilityScore sets the old AbilityScore of the mutation.
func withAbilityScore(node *AbilityScore) abilityscoreOption {
	return func(m *AbilityScoreMutation) {
		m.oldValue = func(context.Context) (*AbilityScore, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AbilityScoreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AbilityScoreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AbilityScoreMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AbilityScoreMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AbilityScore.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *AbilityScoreMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *AbilityScoreMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the AbilityScore entity.
// If the AbilityScore object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AbilityScoreMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *AbilityScoreMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *AbilityScoreMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AbilityScoreMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AbilityScore entity.
// If the AbilityScore object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AbilityScoreMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AbilityScoreMutation) ResetName() {
	m.name = nil
}

// SetFullName sets the "full_name" field.
func (m *AbilityScoreMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *AbilityScoreMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the AbilityScore entity.
// If the AbilityScore object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AbilityScoreMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *AbilityScoreMutation) ResetFullName() {
	m.full_name = nil
}

// SetDesc sets the "desc" field.
func (m *AbilityScoreMutation) SetDesc(s []string) {
	m.desc = &s
	m.appenddesc = nil
}

// Desc returns the value of the "desc" field in the mutation.
func (m *AbilityScoreMutation) Desc() (r []string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the AbilityScore entity.
// If the AbilityScore object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AbilityScoreMutation) OldDesc(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// AppendDesc adds s to the "desc" field.
func (m *AbilityScoreMutation) AppendDesc(s []string) {
	m.appenddesc = append(m.appenddesc, s...)
}

// AppendedDesc returns the list of values that were appended to the "desc" field in this mutation.
func (m *AbilityScoreMutation) AppendedDesc() ([]string, bool) {
	if len(m.appenddesc) == 0 {
		return nil, false
	}
	return m.appenddesc, true
}

// ResetDesc resets all changes to the "desc" field.
func (m *AbilityScoreMutation) ResetDesc() {
	m.desc = nil
	m.appenddesc = nil
}

// AddClassIDs adds the "classes" edge to the Class entity by ids.
func (m *AbilityScoreMutation) AddClassIDs(ids ...int) {
	if m.classes == nil {
		m.classes = make(map[int]struct{})
	}
	for i := range ids {
		m.classes[ids[i]] = struct{}{}
	}
}

// ClearClasses clears the "classes" edge to the Class entity.
func (m *AbilityScoreMutation) ClearClasses() {
	m.clearedclasses = true
}

// ClassesCleared reports if the "classes" edge to the Class entity was cleared.
func (m *AbilityScoreMutation) ClassesCleared() bool {
	return m.clearedclasses
}

// RemoveClassIDs removes the "classes" edge to the Class entity by IDs.
func (m *AbilityScoreMutation) RemoveClassIDs(ids ...int) {
	if m.removedclasses == nil {
		m.removedclasses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.classes, ids[i])
		m.removedclasses[ids[i]] = struct{}{}
	}
}

// RemovedClasses returns the removed IDs of the "classes" edge to the Class entity.
func (m *AbilityScoreMutation) RemovedClassesIDs() (ids []int) {
	for id := range m.removedclasses {
		ids = append(ids, id)
	}
	return
}

// ClassesIDs returns the "classes" edge IDs in the mutation.
func (m *AbilityScoreMutation) ClassesIDs() (ids []int) {
	for id := range m.classes {
		ids = append(ids, id)
	}
	return
}

// ResetClasses resets all changes to the "classes" edge.
func (m *AbilityScoreMutation) ResetClasses() {
	m.classes = nil
	m.clearedclasses = false
	m.removedclasses = nil
}

// AddSkillIDs adds the "skills" edge to the Skill entity by ids.
func (m *AbilityScoreMutation) AddSkillIDs(ids ...int) {
	if m.skills == nil {
		m.skills = make(map[int]struct{})
	}
	for i := range ids {
		m.skills[ids[i]] = struct{}{}
	}
}

// ClearSkills clears the "skills" edge to the Skill entity.
func (m *AbilityScoreMutation) ClearSkills() {
	m.clearedskills = true
}

// SkillsCleared reports if the "skills" edge to the Skill entity was cleared.
func (m *AbilityScoreMutation) SkillsCleared() bool {
	return m.clearedskills
}

// RemoveSkillIDs removes the "skills" edge to the Skill entity by IDs.
func (m *AbilityScoreMutation) RemoveSkillIDs(ids ...int) {
	if m.removedskills == nil {
		m.removedskills = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.skills, ids[i])
		m.removedskills[ids[i]] = struct{}{}
	}
}

// RemovedSkills returns the removed IDs of the "skills" edge to the Skill entity.
func (m *AbilityScoreMutation) RemovedSkillsIDs() (ids []int) {
	for id := range m.removedskills {
		ids = append(ids, id)
	}
	return
}

// SkillsIDs returns the "skills" edge IDs in the mutation.
func (m *AbilityScoreMutation) SkillsIDs() (ids []int) {
	for id := range m.skills {
		ids = append(ids, id)
	}
	return
}

// ResetSkills resets all changes to the "skills" edge.
func (m *AbilityScoreMutation) ResetSkills() {
	m.skills = nil
	m.clearedskills = false
	m.removedskills = nil
}

// Where appends a list predicates to the AbilityScoreMutation builder.
func (m *AbilityScoreMutation) Where(ps ...predicate.AbilityScore) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AbilityScoreMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AbilityScoreMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AbilityScore, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AbilityScoreMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AbilityScoreMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AbilityScore).
func (m *AbilityScoreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AbilityScoreMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.indx != nil {
		fields = append(fields, abilityscore.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, abilityscore.FieldName)
	}
	if m.full_name != nil {
		fields = append(fields, abilityscore.FieldFullName)
	}
	if m.desc != nil {
		fields = append(fields, abilityscore.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AbilityScoreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case abilityscore.FieldIndx:
		return m.Indx()
	case abilityscore.FieldName:
		return m.Name()
	case abilityscore.FieldFullName:
		return m.FullName()
	case abilityscore.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AbilityScoreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case abilityscore.FieldIndx:
		return m.OldIndx(ctx)
	case abilityscore.FieldName:
		return m.OldName(ctx)
	case abilityscore.FieldFullName:
		return m.OldFullName(ctx)
	case abilityscore.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown AbilityScore field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AbilityScoreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case abilityscore.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case abilityscore.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case abilityscore.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case abilityscore.FieldDesc:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown AbilityScore field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AbilityScoreMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AbilityScoreMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AbilityScoreMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AbilityScore numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AbilityScoreMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AbilityScoreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AbilityScoreMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AbilityScore nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AbilityScoreMutation) ResetField(name string) error {
	switch name {
	case abilityscore.FieldIndx:
		m.ResetIndx()
		return nil
	case abilityscore.FieldName:
		m.ResetName()
		return nil
	case abilityscore.FieldFullName:
		m.ResetFullName()
		return nil
	case abilityscore.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown AbilityScore field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AbilityScoreMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.classes != nil {
		edges = append(edges, abilityscore.EdgeClasses)
	}
	if m.skills != nil {
		edges = append(edges, abilityscore.EdgeSkills)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AbilityScoreMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case abilityscore.EdgeClasses:
		ids := make([]ent.Value, 0, len(m.classes))
		for id := range m.classes {
			ids = append(ids, id)
		}
		return ids
	case abilityscore.EdgeSkills:
		ids := make([]ent.Value, 0, len(m.skills))
		for id := range m.skills {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AbilityScoreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedclasses != nil {
		edges = append(edges, abilityscore.EdgeClasses)
	}
	if m.removedskills != nil {
		edges = append(edges, abilityscore.EdgeSkills)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AbilityScoreMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case abilityscore.EdgeClasses:
		ids := make([]ent.Value, 0, len(m.removedclasses))
		for id := range m.removedclasses {
			ids = append(ids, id)
		}
		return ids
	case abilityscore.EdgeSkills:
		ids := make([]ent.Value, 0, len(m.removedskills))
		for id := range m.removedskills {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AbilityScoreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedclasses {
		edges = append(edges, abilityscore.EdgeClasses)
	}
	if m.clearedskills {
		edges = append(edges, abilityscore.EdgeSkills)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AbilityScoreMutation) EdgeCleared(name string) bool {
	switch name {
	case abilityscore.EdgeClasses:
		return m.clearedclasses
	case abilityscore.EdgeSkills:
		return m.clearedskills
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AbilityScoreMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AbilityScore unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AbilityScoreMutation) ResetEdge(name string) error {
	switch name {
	case abilityscore.EdgeClasses:
		m.ResetClasses()
		return nil
	case abilityscore.EdgeSkills:
		m.ResetSkills()
		return nil
	}
	return fmt.Errorf("unknown AbilityScore edge %s", name)
}

// ArmorMutation represents an operation that mutates the Armor nodes in the graph.
type ArmorMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	indx                 *string
	name                 *string
	stealth_disadvantage *bool
	min_strength         *int
	addmin_strength      *int
	clearedFields        map[string]struct{}
	equipment            map[int]struct{}
	removedequipment     map[int]struct{}
	clearedequipment     bool
	armor_class          map[int]struct{}
	removedarmor_class   map[int]struct{}
	clearedarmor_class   bool
	done                 bool
	oldValue             func(context.Context) (*Armor, error)
	predicates           []predicate.Armor
}

var _ ent.Mutation = (*ArmorMutation)(nil)

// armorOption allows management of the mutation configuration using functional options.
type armorOption func(*ArmorMutation)

// newArmorMutation creates new mutation for the Armor entity.
func newArmorMutation(c config, op Op, opts ...armorOption) *ArmorMutation {
	m := &ArmorMutation{
		config:        c,
		op:            op,
		typ:           TypeArmor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArmorID sets the ID field of the mutation.
func withArmorID(id int) armorOption {
	return func(m *ArmorMutation) {
		var (
			err   error
			once  sync.Once
			value *Armor
		)
		m.oldValue = func(ctx context.Context) (*Armor, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Armor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArmor sets the old Armor of the mutation.
func withArmor(node *Armor) armorOption {
	return func(m *ArmorMutation) {
		m.oldValue = func(context.Context) (*Armor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArmorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArmorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArmorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArmorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Armor.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *ArmorMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *ArmorMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Armor entity.
// If the Armor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *ArmorMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *ArmorMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ArmorMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Armor entity.
// If the Armor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ArmorMutation) ResetName() {
	m.name = nil
}

// SetStealthDisadvantage sets the "stealth_disadvantage" field.
func (m *ArmorMutation) SetStealthDisadvantage(b bool) {
	m.stealth_disadvantage = &b
}

// StealthDisadvantage returns the value of the "stealth_disadvantage" field in the mutation.
func (m *ArmorMutation) StealthDisadvantage() (r bool, exists bool) {
	v := m.stealth_disadvantage
	if v == nil {
		return
	}
	return *v, true
}

// OldStealthDisadvantage returns the old "stealth_disadvantage" field's value of the Armor entity.
// If the Armor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorMutation) OldStealthDisadvantage(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStealthDisadvantage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStealthDisadvantage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStealthDisadvantage: %w", err)
	}
	return oldValue.StealthDisadvantage, nil
}

// ResetStealthDisadvantage resets all changes to the "stealth_disadvantage" field.
func (m *ArmorMutation) ResetStealthDisadvantage() {
	m.stealth_disadvantage = nil
}

// SetMinStrength sets the "min_strength" field.
func (m *ArmorMutation) SetMinStrength(i int) {
	m.min_strength = &i
	m.addmin_strength = nil
}

// MinStrength returns the value of the "min_strength" field in the mutation.
func (m *ArmorMutation) MinStrength() (r int, exists bool) {
	v := m.min_strength
	if v == nil {
		return
	}
	return *v, true
}

// OldMinStrength returns the old "min_strength" field's value of the Armor entity.
// If the Armor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorMutation) OldMinStrength(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinStrength is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinStrength requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinStrength: %w", err)
	}
	return oldValue.MinStrength, nil
}

// AddMinStrength adds i to the "min_strength" field.
func (m *ArmorMutation) AddMinStrength(i int) {
	if m.addmin_strength != nil {
		*m.addmin_strength += i
	} else {
		m.addmin_strength = &i
	}
}

// AddedMinStrength returns the value that was added to the "min_strength" field in this mutation.
func (m *ArmorMutation) AddedMinStrength() (r int, exists bool) {
	v := m.addmin_strength
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinStrength resets all changes to the "min_strength" field.
func (m *ArmorMutation) ResetMinStrength() {
	m.min_strength = nil
	m.addmin_strength = nil
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by ids.
func (m *ArmorMutation) AddEquipmentIDs(ids ...int) {
	if m.equipment == nil {
		m.equipment = make(map[int]struct{})
	}
	for i := range ids {
		m.equipment[ids[i]] = struct{}{}
	}
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *ArmorMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *ArmorMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// RemoveEquipmentIDs removes the "equipment" edge to the Equipment entity by IDs.
func (m *ArmorMutation) RemoveEquipmentIDs(ids ...int) {
	if m.removedequipment == nil {
		m.removedequipment = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.equipment, ids[i])
		m.removedequipment[ids[i]] = struct{}{}
	}
}

// RemovedEquipment returns the removed IDs of the "equipment" edge to the Equipment entity.
func (m *ArmorMutation) RemovedEquipmentIDs() (ids []int) {
	for id := range m.removedequipment {
		ids = append(ids, id)
	}
	return
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
func (m *ArmorMutation) EquipmentIDs() (ids []int) {
	for id := range m.equipment {
		ids = append(ids, id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *ArmorMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
	m.removedequipment = nil
}

// AddArmorClasIDs adds the "armor_class" edge to the ArmorClass entity by ids.
func (m *ArmorMutation) AddArmorClasIDs(ids ...int) {
	if m.armor_class == nil {
		m.armor_class = make(map[int]struct{})
	}
	for i := range ids {
		m.armor_class[ids[i]] = struct{}{}
	}
}

// ClearArmorClass clears the "armor_class" edge to the ArmorClass entity.
func (m *ArmorMutation) ClearArmorClass() {
	m.clearedarmor_class = true
}

// ArmorClassCleared reports if the "armor_class" edge to the ArmorClass entity was cleared.
func (m *ArmorMutation) ArmorClassCleared() bool {
	return m.clearedarmor_class
}

// RemoveArmorClasIDs removes the "armor_class" edge to the ArmorClass entity by IDs.
func (m *ArmorMutation) RemoveArmorClasIDs(ids ...int) {
	if m.removedarmor_class == nil {
		m.removedarmor_class = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.armor_class, ids[i])
		m.removedarmor_class[ids[i]] = struct{}{}
	}
}

// RemovedArmorClass returns the removed IDs of the "armor_class" edge to the ArmorClass entity.
func (m *ArmorMutation) RemovedArmorClassIDs() (ids []int) {
	for id := range m.removedarmor_class {
		ids = append(ids, id)
	}
	return
}

// ArmorClassIDs returns the "armor_class" edge IDs in the mutation.
func (m *ArmorMutation) ArmorClassIDs() (ids []int) {
	for id := range m.armor_class {
		ids = append(ids, id)
	}
	return
}

// ResetArmorClass resets all changes to the "armor_class" edge.
func (m *ArmorMutation) ResetArmorClass() {
	m.armor_class = nil
	m.clearedarmor_class = false
	m.removedarmor_class = nil
}

// Where appends a list predicates to the ArmorMutation builder.
func (m *ArmorMutation) Where(ps ...predicate.Armor) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArmorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArmorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Armor, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArmorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArmorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Armor).
func (m *ArmorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArmorMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.indx != nil {
		fields = append(fields, armor.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, armor.FieldName)
	}
	if m.stealth_disadvantage != nil {
		fields = append(fields, armor.FieldStealthDisadvantage)
	}
	if m.min_strength != nil {
		fields = append(fields, armor.FieldMinStrength)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArmorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case armor.FieldIndx:
		return m.Indx()
	case armor.FieldName:
		return m.Name()
	case armor.FieldStealthDisadvantage:
		return m.StealthDisadvantage()
	case armor.FieldMinStrength:
		return m.MinStrength()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArmorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case armor.FieldIndx:
		return m.OldIndx(ctx)
	case armor.FieldName:
		return m.OldName(ctx)
	case armor.FieldStealthDisadvantage:
		return m.OldStealthDisadvantage(ctx)
	case armor.FieldMinStrength:
		return m.OldMinStrength(ctx)
	}
	return nil, fmt.Errorf("unknown Armor field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArmorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case armor.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case armor.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case armor.FieldStealthDisadvantage:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStealthDisadvantage(v)
		return nil
	case armor.FieldMinStrength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinStrength(v)
		return nil
	}
	return fmt.Errorf("unknown Armor field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArmorMutation) AddedFields() []string {
	var fields []string
	if m.addmin_strength != nil {
		fields = append(fields, armor.FieldMinStrength)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArmorMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case armor.FieldMinStrength:
		return m.AddedMinStrength()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArmorMutation) AddField(name string, value ent.Value) error {
	switch name {
	case armor.FieldMinStrength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinStrength(v)
		return nil
	}
	return fmt.Errorf("unknown Armor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArmorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArmorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArmorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Armor nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArmorMutation) ResetField(name string) error {
	switch name {
	case armor.FieldIndx:
		m.ResetIndx()
		return nil
	case armor.FieldName:
		m.ResetName()
		return nil
	case armor.FieldStealthDisadvantage:
		m.ResetStealthDisadvantage()
		return nil
	case armor.FieldMinStrength:
		m.ResetMinStrength()
		return nil
	}
	return fmt.Errorf("unknown Armor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArmorMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.equipment != nil {
		edges = append(edges, armor.EdgeEquipment)
	}
	if m.armor_class != nil {
		edges = append(edges, armor.EdgeArmorClass)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArmorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case armor.EdgeEquipment:
		ids := make([]ent.Value, 0, len(m.equipment))
		for id := range m.equipment {
			ids = append(ids, id)
		}
		return ids
	case armor.EdgeArmorClass:
		ids := make([]ent.Value, 0, len(m.armor_class))
		for id := range m.armor_class {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArmorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedequipment != nil {
		edges = append(edges, armor.EdgeEquipment)
	}
	if m.removedarmor_class != nil {
		edges = append(edges, armor.EdgeArmorClass)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArmorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case armor.EdgeEquipment:
		ids := make([]ent.Value, 0, len(m.removedequipment))
		for id := range m.removedequipment {
			ids = append(ids, id)
		}
		return ids
	case armor.EdgeArmorClass:
		ids := make([]ent.Value, 0, len(m.removedarmor_class))
		for id := range m.removedarmor_class {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArmorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedequipment {
		edges = append(edges, armor.EdgeEquipment)
	}
	if m.clearedarmor_class {
		edges = append(edges, armor.EdgeArmorClass)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArmorMutation) EdgeCleared(name string) bool {
	switch name {
	case armor.EdgeEquipment:
		return m.clearedequipment
	case armor.EdgeArmorClass:
		return m.clearedarmor_class
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArmorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Armor unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArmorMutation) ResetEdge(name string) error {
	switch name {
	case armor.EdgeEquipment:
		m.ResetEquipment()
		return nil
	case armor.EdgeArmorClass:
		m.ResetArmorClass()
		return nil
	}
	return fmt.Errorf("unknown Armor edge %s", name)
}

// ArmorClassMutation represents an operation that mutates the ArmorClass nodes in the graph.
type ArmorClassMutation struct {
	config
	op            Op
	typ           string
	id            *int
	base          *int
	addbase       *int
	dex_bonus     *bool
	max_bonus     *int
	addmax_bonus  *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ArmorClass, error)
	predicates    []predicate.ArmorClass
}

var _ ent.Mutation = (*ArmorClassMutation)(nil)

// armorclassOption allows management of the mutation configuration using functional options.
type armorclassOption func(*ArmorClassMutation)

// newArmorClassMutation creates new mutation for the ArmorClass entity.
func newArmorClassMutation(c config, op Op, opts ...armorclassOption) *ArmorClassMutation {
	m := &ArmorClassMutation{
		config:        c,
		op:            op,
		typ:           TypeArmorClass,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArmorClassID sets the ID field of the mutation.
func withArmorClassID(id int) armorclassOption {
	return func(m *ArmorClassMutation) {
		var (
			err   error
			once  sync.Once
			value *ArmorClass
		)
		m.oldValue = func(ctx context.Context) (*ArmorClass, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ArmorClass.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArmorClass sets the old ArmorClass of the mutation.
func withArmorClass(node *ArmorClass) armorclassOption {
	return func(m *ArmorClassMutation) {
		m.oldValue = func(context.Context) (*ArmorClass, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArmorClassMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArmorClassMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArmorClassMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArmorClassMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ArmorClass.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBase sets the "base" field.
func (m *ArmorClassMutation) SetBase(i int) {
	m.base = &i
	m.addbase = nil
}

// Base returns the value of the "base" field in the mutation.
func (m *ArmorClassMutation) Base() (r int, exists bool) {
	v := m.base
	if v == nil {
		return
	}
	return *v, true
}

// OldBase returns the old "base" field's value of the ArmorClass entity.
// If the ArmorClass object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorClassMutation) OldBase(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBase is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBase requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBase: %w", err)
	}
	return oldValue.Base, nil
}

// AddBase adds i to the "base" field.
func (m *ArmorClassMutation) AddBase(i int) {
	if m.addbase != nil {
		*m.addbase += i
	} else {
		m.addbase = &i
	}
}

// AddedBase returns the value that was added to the "base" field in this mutation.
func (m *ArmorClassMutation) AddedBase() (r int, exists bool) {
	v := m.addbase
	if v == nil {
		return
	}
	return *v, true
}

// ResetBase resets all changes to the "base" field.
func (m *ArmorClassMutation) ResetBase() {
	m.base = nil
	m.addbase = nil
}

// SetDexBonus sets the "dex_bonus" field.
func (m *ArmorClassMutation) SetDexBonus(b bool) {
	m.dex_bonus = &b
}

// DexBonus returns the value of the "dex_bonus" field in the mutation.
func (m *ArmorClassMutation) DexBonus() (r bool, exists bool) {
	v := m.dex_bonus
	if v == nil {
		return
	}
	return *v, true
}

// OldDexBonus returns the old "dex_bonus" field's value of the ArmorClass entity.
// If the ArmorClass object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorClassMutation) OldDexBonus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDexBonus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDexBonus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDexBonus: %w", err)
	}
	return oldValue.DexBonus, nil
}

// ResetDexBonus resets all changes to the "dex_bonus" field.
func (m *ArmorClassMutation) ResetDexBonus() {
	m.dex_bonus = nil
}

// SetMaxBonus sets the "max_bonus" field.
func (m *ArmorClassMutation) SetMaxBonus(i int) {
	m.max_bonus = &i
	m.addmax_bonus = nil
}

// MaxBonus returns the value of the "max_bonus" field in the mutation.
func (m *ArmorClassMutation) MaxBonus() (r int, exists bool) {
	v := m.max_bonus
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxBonus returns the old "max_bonus" field's value of the ArmorClass entity.
// If the ArmorClass object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorClassMutation) OldMaxBonus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxBonus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxBonus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxBonus: %w", err)
	}
	return oldValue.MaxBonus, nil
}

// AddMaxBonus adds i to the "max_bonus" field.
func (m *ArmorClassMutation) AddMaxBonus(i int) {
	if m.addmax_bonus != nil {
		*m.addmax_bonus += i
	} else {
		m.addmax_bonus = &i
	}
}

// AddedMaxBonus returns the value that was added to the "max_bonus" field in this mutation.
func (m *ArmorClassMutation) AddedMaxBonus() (r int, exists bool) {
	v := m.addmax_bonus
	if v == nil {
		return
	}
	return *v, true
}

// ClearMaxBonus clears the value of the "max_bonus" field.
func (m *ArmorClassMutation) ClearMaxBonus() {
	m.max_bonus = nil
	m.addmax_bonus = nil
	m.clearedFields[armorclass.FieldMaxBonus] = struct{}{}
}

// MaxBonusCleared returns if the "max_bonus" field was cleared in this mutation.
func (m *ArmorClassMutation) MaxBonusCleared() bool {
	_, ok := m.clearedFields[armorclass.FieldMaxBonus]
	return ok
}

// ResetMaxBonus resets all changes to the "max_bonus" field.
func (m *ArmorClassMutation) ResetMaxBonus() {
	m.max_bonus = nil
	m.addmax_bonus = nil
	delete(m.clearedFields, armorclass.FieldMaxBonus)
}

// Where appends a list predicates to the ArmorClassMutation builder.
func (m *ArmorClassMutation) Where(ps ...predicate.ArmorClass) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArmorClassMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArmorClassMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ArmorClass, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArmorClassMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArmorClassMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ArmorClass).
func (m *ArmorClassMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArmorClassMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.base != nil {
		fields = append(fields, armorclass.FieldBase)
	}
	if m.dex_bonus != nil {
		fields = append(fields, armorclass.FieldDexBonus)
	}
	if m.max_bonus != nil {
		fields = append(fields, armorclass.FieldMaxBonus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArmorClassMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case armorclass.FieldBase:
		return m.Base()
	case armorclass.FieldDexBonus:
		return m.DexBonus()
	case armorclass.FieldMaxBonus:
		return m.MaxBonus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArmorClassMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case armorclass.FieldBase:
		return m.OldBase(ctx)
	case armorclass.FieldDexBonus:
		return m.OldDexBonus(ctx)
	case armorclass.FieldMaxBonus:
		return m.OldMaxBonus(ctx)
	}
	return nil, fmt.Errorf("unknown ArmorClass field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArmorClassMutation) SetField(name string, value ent.Value) error {
	switch name {
	case armorclass.FieldBase:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBase(v)
		return nil
	case armorclass.FieldDexBonus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDexBonus(v)
		return nil
	case armorclass.FieldMaxBonus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxBonus(v)
		return nil
	}
	return fmt.Errorf("unknown ArmorClass field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArmorClassMutation) AddedFields() []string {
	var fields []string
	if m.addbase != nil {
		fields = append(fields, armorclass.FieldBase)
	}
	if m.addmax_bonus != nil {
		fields = append(fields, armorclass.FieldMaxBonus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArmorClassMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case armorclass.FieldBase:
		return m.AddedBase()
	case armorclass.FieldMaxBonus:
		return m.AddedMaxBonus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArmorClassMutation) AddField(name string, value ent.Value) error {
	switch name {
	case armorclass.FieldBase:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBase(v)
		return nil
	case armorclass.FieldMaxBonus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxBonus(v)
		return nil
	}
	return fmt.Errorf("unknown ArmorClass numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArmorClassMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(armorclass.FieldMaxBonus) {
		fields = append(fields, armorclass.FieldMaxBonus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArmorClassMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArmorClassMutation) ClearField(name string) error {
	switch name {
	case armorclass.FieldMaxBonus:
		m.ClearMaxBonus()
		return nil
	}
	return fmt.Errorf("unknown ArmorClass nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArmorClassMutation) ResetField(name string) error {
	switch name {
	case armorclass.FieldBase:
		m.ResetBase()
		return nil
	case armorclass.FieldDexBonus:
		m.ResetDexBonus()
		return nil
	case armorclass.FieldMaxBonus:
		m.ResetMaxBonus()
		return nil
	}
	return fmt.Errorf("unknown ArmorClass field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArmorClassMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArmorClassMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArmorClassMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArmorClassMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArmorClassMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArmorClassMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArmorClassMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ArmorClass unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArmorClassMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ArmorClass edge %s", name)
}

// ClassMutation represents an operation that mutates the Class nodes in the graph.
type ClassMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	indx                 *string
	name                 *string
	hit_die              *int
	addhit_die           *int
	clearedFields        map[string]struct{}
	saving_throws        map[int]struct{}
	removedsaving_throws map[int]struct{}
	clearedsaving_throws bool
	done                 bool
	oldValue             func(context.Context) (*Class, error)
	predicates           []predicate.Class
}

var _ ent.Mutation = (*ClassMutation)(nil)

// classOption allows management of the mutation configuration using functional options.
type classOption func(*ClassMutation)

// newClassMutation creates new mutation for the Class entity.
func newClassMutation(c config, op Op, opts ...classOption) *ClassMutation {
	m := &ClassMutation{
		config:        c,
		op:            op,
		typ:           TypeClass,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClassID sets the ID field of the mutation.
func withClassID(id int) classOption {
	return func(m *ClassMutation) {
		var (
			err   error
			once  sync.Once
			value *Class
		)
		m.oldValue = func(ctx context.Context) (*Class, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Class.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClass sets the old Class of the mutation.
func withClass(node *Class) classOption {
	return func(m *ClassMutation) {
		m.oldValue = func(context.Context) (*Class, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClassMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClassMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClassMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClassMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Class.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *ClassMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *ClassMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *ClassMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *ClassMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ClassMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ClassMutation) ResetName() {
	m.name = nil
}

// SetHitDie sets the "hit_die" field.
func (m *ClassMutation) SetHitDie(i int) {
	m.hit_die = &i
	m.addhit_die = nil
}

// HitDie returns the value of the "hit_die" field in the mutation.
func (m *ClassMutation) HitDie() (r int, exists bool) {
	v := m.hit_die
	if v == nil {
		return
	}
	return *v, true
}

// OldHitDie returns the old "hit_die" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldHitDie(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHitDie is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHitDie requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHitDie: %w", err)
	}
	return oldValue.HitDie, nil
}

// AddHitDie adds i to the "hit_die" field.
func (m *ClassMutation) AddHitDie(i int) {
	if m.addhit_die != nil {
		*m.addhit_die += i
	} else {
		m.addhit_die = &i
	}
}

// AddedHitDie returns the value that was added to the "hit_die" field in this mutation.
func (m *ClassMutation) AddedHitDie() (r int, exists bool) {
	v := m.addhit_die
	if v == nil {
		return
	}
	return *v, true
}

// ResetHitDie resets all changes to the "hit_die" field.
func (m *ClassMutation) ResetHitDie() {
	m.hit_die = nil
	m.addhit_die = nil
}

// AddSavingThrowIDs adds the "saving_throws" edge to the AbilityScore entity by ids.
func (m *ClassMutation) AddSavingThrowIDs(ids ...int) {
	if m.saving_throws == nil {
		m.saving_throws = make(map[int]struct{})
	}
	for i := range ids {
		m.saving_throws[ids[i]] = struct{}{}
	}
}

// ClearSavingThrows clears the "saving_throws" edge to the AbilityScore entity.
func (m *ClassMutation) ClearSavingThrows() {
	m.clearedsaving_throws = true
}

// SavingThrowsCleared reports if the "saving_throws" edge to the AbilityScore entity was cleared.
func (m *ClassMutation) SavingThrowsCleared() bool {
	return m.clearedsaving_throws
}

// RemoveSavingThrowIDs removes the "saving_throws" edge to the AbilityScore entity by IDs.
func (m *ClassMutation) RemoveSavingThrowIDs(ids ...int) {
	if m.removedsaving_throws == nil {
		m.removedsaving_throws = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.saving_throws, ids[i])
		m.removedsaving_throws[ids[i]] = struct{}{}
	}
}

// RemovedSavingThrows returns the removed IDs of the "saving_throws" edge to the AbilityScore entity.
func (m *ClassMutation) RemovedSavingThrowsIDs() (ids []int) {
	for id := range m.removedsaving_throws {
		ids = append(ids, id)
	}
	return
}

// SavingThrowsIDs returns the "saving_throws" edge IDs in the mutation.
func (m *ClassMutation) SavingThrowsIDs() (ids []int) {
	for id := range m.saving_throws {
		ids = append(ids, id)
	}
	return
}

// ResetSavingThrows resets all changes to the "saving_throws" edge.
func (m *ClassMutation) ResetSavingThrows() {
	m.saving_throws = nil
	m.clearedsaving_throws = false
	m.removedsaving_throws = nil
}

// Where appends a list predicates to the ClassMutation builder.
func (m *ClassMutation) Where(ps ...predicate.Class) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClassMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClassMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Class, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClassMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClassMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Class).
func (m *ClassMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClassMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, class.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, class.FieldName)
	}
	if m.hit_die != nil {
		fields = append(fields, class.FieldHitDie)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClassMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case class.FieldIndx:
		return m.Indx()
	case class.FieldName:
		return m.Name()
	case class.FieldHitDie:
		return m.HitDie()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClassMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case class.FieldIndx:
		return m.OldIndx(ctx)
	case class.FieldName:
		return m.OldName(ctx)
	case class.FieldHitDie:
		return m.OldHitDie(ctx)
	}
	return nil, fmt.Errorf("unknown Class field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassMutation) SetField(name string, value ent.Value) error {
	switch name {
	case class.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case class.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case class.FieldHitDie:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHitDie(v)
		return nil
	}
	return fmt.Errorf("unknown Class field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClassMutation) AddedFields() []string {
	var fields []string
	if m.addhit_die != nil {
		fields = append(fields, class.FieldHitDie)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClassMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case class.FieldHitDie:
		return m.AddedHitDie()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassMutation) AddField(name string, value ent.Value) error {
	switch name {
	case class.FieldHitDie:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHitDie(v)
		return nil
	}
	return fmt.Errorf("unknown Class numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClassMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClassMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClassMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Class nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClassMutation) ResetField(name string) error {
	switch name {
	case class.FieldIndx:
		m.ResetIndx()
		return nil
	case class.FieldName:
		m.ResetName()
		return nil
	case class.FieldHitDie:
		m.ResetHitDie()
		return nil
	}
	return fmt.Errorf("unknown Class field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClassMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.saving_throws != nil {
		edges = append(edges, class.EdgeSavingThrows)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClassMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case class.EdgeSavingThrows:
		ids := make([]ent.Value, 0, len(m.saving_throws))
		for id := range m.saving_throws {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClassMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsaving_throws != nil {
		edges = append(edges, class.EdgeSavingThrows)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClassMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case class.EdgeSavingThrows:
		ids := make([]ent.Value, 0, len(m.removedsaving_throws))
		for id := range m.removedsaving_throws {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClassMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsaving_throws {
		edges = append(edges, class.EdgeSavingThrows)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClassMutation) EdgeCleared(name string) bool {
	switch name {
	case class.EdgeSavingThrows:
		return m.clearedsaving_throws
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClassMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Class unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClassMutation) ResetEdge(name string) error {
	switch name {
	case class.EdgeSavingThrows:
		m.ResetSavingThrows()
		return nil
	}
	return fmt.Errorf("unknown Class edge %s", name)
}

// DamageTypeMutation represents an operation that mutates the DamageType nodes in the graph.
type DamageTypeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	indx          *string
	name          *string
	desc          *[]string
	appenddesc    []string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*DamageType, error)
	predicates    []predicate.DamageType
}

var _ ent.Mutation = (*DamageTypeMutation)(nil)

// damagetypeOption allows management of the mutation configuration using functional options.
type damagetypeOption func(*DamageTypeMutation)

// newDamageTypeMutation creates new mutation for the DamageType entity.
func newDamageTypeMutation(c config, op Op, opts ...damagetypeOption) *DamageTypeMutation {
	m := &DamageTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeDamageType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDamageTypeID sets the ID field of the mutation.
func withDamageTypeID(id int) damagetypeOption {
	return func(m *DamageTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *DamageType
		)
		m.oldValue = func(ctx context.Context) (*DamageType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DamageType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDamageType sets the old DamageType of the mutation.
func withDamageType(node *DamageType) damagetypeOption {
	return func(m *DamageTypeMutation) {
		m.oldValue = func(context.Context) (*DamageType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DamageTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DamageTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DamageTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DamageTypeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DamageType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *DamageTypeMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *DamageTypeMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the DamageType entity.
// If the DamageType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DamageTypeMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *DamageTypeMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *DamageTypeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DamageTypeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DamageType entity.
// If the DamageType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DamageTypeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DamageTypeMutation) ResetName() {
	m.name = nil
}

// SetDesc sets the "desc" field.
func (m *DamageTypeMutation) SetDesc(s []string) {
	m.desc = &s
	m.appenddesc = nil
}

// Desc returns the value of the "desc" field in the mutation.
func (m *DamageTypeMutation) Desc() (r []string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the DamageType entity.
// If the DamageType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DamageTypeMutation) OldDesc(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// AppendDesc adds s to the "desc" field.
func (m *DamageTypeMutation) AppendDesc(s []string) {
	m.appenddesc = append(m.appenddesc, s...)
}

// AppendedDesc returns the list of values that were appended to the "desc" field in this mutation.
func (m *DamageTypeMutation) AppendedDesc() ([]string, bool) {
	if len(m.appenddesc) == 0 {
		return nil, false
	}
	return m.appenddesc, true
}

// ResetDesc resets all changes to the "desc" field.
func (m *DamageTypeMutation) ResetDesc() {
	m.desc = nil
	m.appenddesc = nil
}

// Where appends a list predicates to the DamageTypeMutation builder.
func (m *DamageTypeMutation) Where(ps ...predicate.DamageType) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DamageTypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DamageTypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DamageType, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DamageTypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DamageTypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DamageType).
func (m *DamageTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DamageTypeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, damagetype.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, damagetype.FieldName)
	}
	if m.desc != nil {
		fields = append(fields, damagetype.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DamageTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case damagetype.FieldIndx:
		return m.Indx()
	case damagetype.FieldName:
		return m.Name()
	case damagetype.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DamageTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case damagetype.FieldIndx:
		return m.OldIndx(ctx)
	case damagetype.FieldName:
		return m.OldName(ctx)
	case damagetype.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown DamageType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DamageTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case damagetype.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case damagetype.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case damagetype.FieldDesc:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown DamageType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DamageTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DamageTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DamageTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DamageType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DamageTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DamageTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DamageTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DamageType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DamageTypeMutation) ResetField(name string) error {
	switch name {
	case damagetype.FieldIndx:
		m.ResetIndx()
		return nil
	case damagetype.FieldName:
		m.ResetName()
		return nil
	case damagetype.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown DamageType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DamageTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DamageTypeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DamageTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DamageTypeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DamageTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DamageTypeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DamageTypeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DamageType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DamageTypeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DamageType edge %s", name)
}

// EquipmentMutation represents an operation that mutates the Equipment nodes in the graph.
type EquipmentMutation struct {
	config
	op            Op
	typ           string
	id            *int
	indx          *string
	name          *string
	category      *equipment.Category
	clearedFields map[string]struct{}
	weapon        *int
	clearedweapon bool
	armor         *int
	clearedarmor  bool
	done          bool
	oldValue      func(context.Context) (*Equipment, error)
	predicates    []predicate.Equipment
}

var _ ent.Mutation = (*EquipmentMutation)(nil)

// equipmentOption allows management of the mutation configuration using functional options.
type equipmentOption func(*EquipmentMutation)

// newEquipmentMutation creates new mutation for the Equipment entity.
func newEquipmentMutation(c config, op Op, opts ...equipmentOption) *EquipmentMutation {
	m := &EquipmentMutation{
		config:        c,
		op:            op,
		typ:           TypeEquipment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEquipmentID sets the ID field of the mutation.
func withEquipmentID(id int) equipmentOption {
	return func(m *EquipmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Equipment
		)
		m.oldValue = func(ctx context.Context) (*Equipment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Equipment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEquipment sets the old Equipment of the mutation.
func withEquipment(node *Equipment) equipmentOption {
	return func(m *EquipmentMutation) {
		m.oldValue = func(context.Context) (*Equipment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EquipmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EquipmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EquipmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EquipmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Equipment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *EquipmentMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *EquipmentMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *EquipmentMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *EquipmentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EquipmentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EquipmentMutation) ResetName() {
	m.name = nil
}

// SetCategory sets the "category" field.
func (m *EquipmentMutation) SetCategory(e equipment.Category) {
	m.category = &e
}

// Category returns the value of the "category" field in the mutation.
func (m *EquipmentMutation) Category() (r equipment.Category, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldCategory(ctx context.Context) (v equipment.Category, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ResetCategory resets all changes to the "category" field.
func (m *EquipmentMutation) ResetCategory() {
	m.category = nil
}

// SetWeaponID sets the "weapon" edge to the Weapon entity by id.
func (m *EquipmentMutation) SetWeaponID(id int) {
	m.weapon = &id
}

// ClearWeapon clears the "weapon" edge to the Weapon entity.
func (m *EquipmentMutation) ClearWeapon() {
	m.clearedweapon = true
}

// WeaponCleared reports if the "weapon" edge to the Weapon entity was cleared.
func (m *EquipmentMutation) WeaponCleared() bool {
	return m.clearedweapon
}

// WeaponID returns the "weapon" edge ID in the mutation.
func (m *EquipmentMutation) WeaponID() (id int, exists bool) {
	if m.weapon != nil {
		return *m.weapon, true
	}
	return
}

// WeaponIDs returns the "weapon" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WeaponID instead. It exists only for internal usage by the builders.
func (m *EquipmentMutation) WeaponIDs() (ids []int) {
	if id := m.weapon; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWeapon resets all changes to the "weapon" edge.
func (m *EquipmentMutation) ResetWeapon() {
	m.weapon = nil
	m.clearedweapon = false
}

// SetArmorID sets the "armor" edge to the Armor entity by id.
func (m *EquipmentMutation) SetArmorID(id int) {
	m.armor = &id
}

// ClearArmor clears the "armor" edge to the Armor entity.
func (m *EquipmentMutation) ClearArmor() {
	m.clearedarmor = true
}

// ArmorCleared reports if the "armor" edge to the Armor entity was cleared.
func (m *EquipmentMutation) ArmorCleared() bool {
	return m.clearedarmor
}

// ArmorID returns the "armor" edge ID in the mutation.
func (m *EquipmentMutation) ArmorID() (id int, exists bool) {
	if m.armor != nil {
		return *m.armor, true
	}
	return
}

// ArmorIDs returns the "armor" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ArmorID instead. It exists only for internal usage by the builders.
func (m *EquipmentMutation) ArmorIDs() (ids []int) {
	if id := m.armor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetArmor resets all changes to the "armor" edge.
func (m *EquipmentMutation) ResetArmor() {
	m.armor = nil
	m.clearedarmor = false
}

// Where appends a list predicates to the EquipmentMutation builder.
func (m *EquipmentMutation) Where(ps ...predicate.Equipment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EquipmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EquipmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Equipment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EquipmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EquipmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Equipment).
func (m *EquipmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EquipmentMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, equipment.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, equipment.FieldName)
	}
	if m.category != nil {
		fields = append(fields, equipment.FieldCategory)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EquipmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case equipment.FieldIndx:
		return m.Indx()
	case equipment.FieldName:
		return m.Name()
	case equipment.FieldCategory:
		return m.Category()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EquipmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case equipment.FieldIndx:
		return m.OldIndx(ctx)
	case equipment.FieldName:
		return m.OldName(ctx)
	case equipment.FieldCategory:
		return m.OldCategory(ctx)
	}
	return nil, fmt.Errorf("unknown Equipment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EquipmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case equipment.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case equipment.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case equipment.FieldCategory:
		v, ok := value.(equipment.Category)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	}
	return fmt.Errorf("unknown Equipment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EquipmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EquipmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EquipmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Equipment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EquipmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EquipmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EquipmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Equipment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EquipmentMutation) ResetField(name string) error {
	switch name {
	case equipment.FieldIndx:
		m.ResetIndx()
		return nil
	case equipment.FieldName:
		m.ResetName()
		return nil
	case equipment.FieldCategory:
		m.ResetCategory()
		return nil
	}
	return fmt.Errorf("unknown Equipment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EquipmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.weapon != nil {
		edges = append(edges, equipment.EdgeWeapon)
	}
	if m.armor != nil {
		edges = append(edges, equipment.EdgeArmor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EquipmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case equipment.EdgeWeapon:
		if id := m.weapon; id != nil {
			return []ent.Value{*id}
		}
	case equipment.EdgeArmor:
		if id := m.armor; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EquipmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EquipmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EquipmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedweapon {
		edges = append(edges, equipment.EdgeWeapon)
	}
	if m.clearedarmor {
		edges = append(edges, equipment.EdgeArmor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EquipmentMutation) EdgeCleared(name string) bool {
	switch name {
	case equipment.EdgeWeapon:
		return m.clearedweapon
	case equipment.EdgeArmor:
		return m.clearedarmor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EquipmentMutation) ClearEdge(name string) error {
	switch name {
	case equipment.EdgeWeapon:
		m.ClearWeapon()
		return nil
	case equipment.EdgeArmor:
		m.ClearArmor()
		return nil
	}
	return fmt.Errorf("unknown Equipment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EquipmentMutation) ResetEdge(name string) error {
	switch name {
	case equipment.EdgeWeapon:
		m.ResetWeapon()
		return nil
	case equipment.EdgeArmor:
		m.ResetArmor()
		return nil
	}
	return fmt.Errorf("unknown Equipment edge %s", name)
}

// RaceMutation represents an operation that mutates the Race nodes in the graph.
type RaceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	indx          *string
	name          *string
	speed         *int
	addspeed      *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Race, error)
	predicates    []predicate.Race
}

var _ ent.Mutation = (*RaceMutation)(nil)

// raceOption allows management of the mutation configuration using functional options.
type raceOption func(*RaceMutation)

// newRaceMutation creates new mutation for the Race entity.
func newRaceMutation(c config, op Op, opts ...raceOption) *RaceMutation {
	m := &RaceMutation{
		config:        c,
		op:            op,
		typ:           TypeRace,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRaceID sets the ID field of the mutation.
func withRaceID(id int) raceOption {
	return func(m *RaceMutation) {
		var (
			err   error
			once  sync.Once
			value *Race
		)
		m.oldValue = func(ctx context.Context) (*Race, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Race.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRace sets the old Race of the mutation.
func withRace(node *Race) raceOption {
	return func(m *RaceMutation) {
		m.oldValue = func(context.Context) (*Race, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RaceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RaceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RaceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RaceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Race.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *RaceMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *RaceMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Race entity.
// If the Race object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RaceMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *RaceMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *RaceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RaceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Race entity.
// If the Race object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RaceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RaceMutation) ResetName() {
	m.name = nil
}

// SetSpeed sets the "speed" field.
func (m *RaceMutation) SetSpeed(i int) {
	m.speed = &i
	m.addspeed = nil
}

// Speed returns the value of the "speed" field in the mutation.
func (m *RaceMutation) Speed() (r int, exists bool) {
	v := m.speed
	if v == nil {
		return
	}
	return *v, true
}

// OldSpeed returns the old "speed" field's value of the Race entity.
// If the Race object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RaceMutation) OldSpeed(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpeed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpeed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpeed: %w", err)
	}
	return oldValue.Speed, nil
}

// AddSpeed adds i to the "speed" field.
func (m *RaceMutation) AddSpeed(i int) {
	if m.addspeed != nil {
		*m.addspeed += i
	} else {
		m.addspeed = &i
	}
}

// AddedSpeed returns the value that was added to the "speed" field in this mutation.
func (m *RaceMutation) AddedSpeed() (r int, exists bool) {
	v := m.addspeed
	if v == nil {
		return
	}
	return *v, true
}

// ResetSpeed resets all changes to the "speed" field.
func (m *RaceMutation) ResetSpeed() {
	m.speed = nil
	m.addspeed = nil
}

// Where appends a list predicates to the RaceMutation builder.
func (m *RaceMutation) Where(ps ...predicate.Race) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RaceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RaceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Race, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RaceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RaceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Race).
func (m *RaceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RaceMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, race.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, race.FieldName)
	}
	if m.speed != nil {
		fields = append(fields, race.FieldSpeed)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RaceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case race.FieldIndx:
		return m.Indx()
	case race.FieldName:
		return m.Name()
	case race.FieldSpeed:
		return m.Speed()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RaceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case race.FieldIndx:
		return m.OldIndx(ctx)
	case race.FieldName:
		return m.OldName(ctx)
	case race.FieldSpeed:
		return m.OldSpeed(ctx)
	}
	return nil, fmt.Errorf("unknown Race field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RaceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case race.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case race.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case race.FieldSpeed:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpeed(v)
		return nil
	}
	return fmt.Errorf("unknown Race field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RaceMutation) AddedFields() []string {
	var fields []string
	if m.addspeed != nil {
		fields = append(fields, race.FieldSpeed)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RaceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case race.FieldSpeed:
		return m.AddedSpeed()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RaceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case race.FieldSpeed:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSpeed(v)
		return nil
	}
	return fmt.Errorf("unknown Race numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RaceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RaceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RaceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Race nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RaceMutation) ResetField(name string) error {
	switch name {
	case race.FieldIndx:
		m.ResetIndx()
		return nil
	case race.FieldName:
		m.ResetName()
		return nil
	case race.FieldSpeed:
		m.ResetSpeed()
		return nil
	}
	return fmt.Errorf("unknown Race field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RaceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RaceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RaceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RaceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RaceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RaceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RaceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Race unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RaceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Race edge %s", name)
}

// SkillMutation represents an operation that mutates the Skill nodes in the graph.
type SkillMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	indx                 *string
	name                 *string
	desc                 *[]string
	appenddesc           []string
	clearedFields        map[string]struct{}
	ability_score        *int
	clearedability_score bool
	done                 bool
	oldValue             func(context.Context) (*Skill, error)
	predicates           []predicate.Skill
}

var _ ent.Mutation = (*SkillMutation)(nil)

// skillOption allows management of the mutation configuration using functional options.
type skillOption func(*SkillMutation)

// newSkillMutation creates new mutation for the Skill entity.
func newSkillMutation(c config, op Op, opts ...skillOption) *SkillMutation {
	m := &SkillMutation{
		config:        c,
		op:            op,
		typ:           TypeSkill,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSkillID sets the ID field of the mutation.
func withSkillID(id int) skillOption {
	return func(m *SkillMutation) {
		var (
			err   error
			once  sync.Once
			value *Skill
		)
		m.oldValue = func(ctx context.Context) (*Skill, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Skill.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSkill sets the old Skill of the mutation.
func withSkill(node *Skill) skillOption {
	return func(m *SkillMutation) {
		m.oldValue = func(context.Context) (*Skill, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SkillMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SkillMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SkillMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SkillMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Skill.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *SkillMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *SkillMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *SkillMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *SkillMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SkillMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SkillMutation) ResetName() {
	m.name = nil
}

// SetDesc sets the "desc" field.
func (m *SkillMutation) SetDesc(s []string) {
	m.desc = &s
	m.appenddesc = nil
}

// Desc returns the value of the "desc" field in the mutation.
func (m *SkillMutation) Desc() (r []string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldDesc(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// AppendDesc adds s to the "desc" field.
func (m *SkillMutation) AppendDesc(s []string) {
	m.appenddesc = append(m.appenddesc, s...)
}

// AppendedDesc returns the list of values that were appended to the "desc" field in this mutation.
func (m *SkillMutation) AppendedDesc() ([]string, bool) {
	if len(m.appenddesc) == 0 {
		return nil, false
	}
	return m.appenddesc, true
}

// ResetDesc resets all changes to the "desc" field.
func (m *SkillMutation) ResetDesc() {
	m.desc = nil
	m.appenddesc = nil
}

// SetAbilityScoreID sets the "ability_score" edge to the AbilityScore entity by id.
func (m *SkillMutation) SetAbilityScoreID(id int) {
	m.ability_score = &id
}

// ClearAbilityScore clears the "ability_score" edge to the AbilityScore entity.
func (m *SkillMutation) ClearAbilityScore() {
	m.clearedability_score = true
}

// AbilityScoreCleared reports if the "ability_score" edge to the AbilityScore entity was cleared.
func (m *SkillMutation) AbilityScoreCleared() bool {
	return m.clearedability_score
}

// AbilityScoreID returns the "ability_score" edge ID in the mutation.
func (m *SkillMutation) AbilityScoreID() (id int, exists bool) {
	if m.ability_score != nil {
		return *m.ability_score, true
	}
	return
}

// AbilityScoreIDs returns the "ability_score" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AbilityScoreID instead. It exists only for internal usage by the builders.
func (m *SkillMutation) AbilityScoreIDs() (ids []int) {
	if id := m.ability_score; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAbilityScore resets all changes to the "ability_score" edge.
func (m *SkillMutation) ResetAbilityScore() {
	m.ability_score = nil
	m.clearedability_score = false
}

// Where appends a list predicates to the SkillMutation builder.
func (m *SkillMutation) Where(ps ...predicate.Skill) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SkillMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SkillMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Skill, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SkillMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SkillMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Skill).
func (m *SkillMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SkillMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, skill.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, skill.FieldName)
	}
	if m.desc != nil {
		fields = append(fields, skill.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SkillMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case skill.FieldIndx:
		return m.Indx()
	case skill.FieldName:
		return m.Name()
	case skill.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SkillMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case skill.FieldIndx:
		return m.OldIndx(ctx)
	case skill.FieldName:
		return m.OldName(ctx)
	case skill.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown Skill field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SkillMutation) SetField(name string, value ent.Value) error {
	switch name {
	case skill.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case skill.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case skill.FieldDesc:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown Skill field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SkillMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SkillMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SkillMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Skill numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SkillMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SkillMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SkillMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Skill nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SkillMutation) ResetField(name string) error {
	switch name {
	case skill.FieldIndx:
		m.ResetIndx()
		return nil
	case skill.FieldName:
		m.ResetName()
		return nil
	case skill.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown Skill field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SkillMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ability_score != nil {
		edges = append(edges, skill.EdgeAbilityScore)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SkillMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case skill.EdgeAbilityScore:
		if id := m.ability_score; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SkillMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SkillMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SkillMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedability_score {
		edges = append(edges, skill.EdgeAbilityScore)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SkillMutation) EdgeCleared(name string) bool {
	switch name {
	case skill.EdgeAbilityScore:
		return m.clearedability_score
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SkillMutation) ClearEdge(name string) error {
	switch name {
	case skill.EdgeAbilityScore:
		m.ClearAbilityScore()
		return nil
	}
	return fmt.Errorf("unknown Skill unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SkillMutation) ResetEdge(name string) error {
	switch name {
	case skill.EdgeAbilityScore:
		m.ResetAbilityScore()
		return nil
	}
	return fmt.Errorf("unknown Skill edge %s", name)
}

// WeaponMutation represents an operation that mutates the Weapon nodes in the graph.
type WeaponMutation struct {
	config
	op               Op
	typ              string
	id               *int
	indx             *string
	name             *string
	weapon_range     *string
	clearedFields    map[string]struct{}
	equipment        map[int]struct{}
	removedequipment map[int]struct{}
	clearedequipment bool
	done             bool
	oldValue         func(context.Context) (*Weapon, error)
	predicates       []predicate.Weapon
}

var _ ent.Mutation = (*WeaponMutation)(nil)

// weaponOption allows management of the mutation configuration using functional options.
type weaponOption func(*WeaponMutation)

// newWeaponMutation creates new mutation for the Weapon entity.
func newWeaponMutation(c config, op Op, opts ...weaponOption) *WeaponMutation {
	m := &WeaponMutation{
		config:        c,
		op:            op,
		typ:           TypeWeapon,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWeaponID sets the ID field of the mutation.
func withWeaponID(id int) weaponOption {
	return func(m *WeaponMutation) {
		var (
			err   error
			once  sync.Once
			value *Weapon
		)
		m.oldValue = func(ctx context.Context) (*Weapon, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Weapon.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWeapon sets the old Weapon of the mutation.
func withWeapon(node *Weapon) weaponOption {
	return func(m *WeaponMutation) {
		m.oldValue = func(context.Context) (*Weapon, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WeaponMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WeaponMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WeaponMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WeaponMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Weapon.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *WeaponMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *WeaponMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Weapon entity.
// If the Weapon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *WeaponMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *WeaponMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *WeaponMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Weapon entity.
// If the Weapon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *WeaponMutation) ResetName() {
	m.name = nil
}

// SetWeaponRange sets the "weapon_range" field.
func (m *WeaponMutation) SetWeaponRange(s string) {
	m.weapon_range = &s
}

// WeaponRange returns the value of the "weapon_range" field in the mutation.
func (m *WeaponMutation) WeaponRange() (r string, exists bool) {
	v := m.weapon_range
	if v == nil {
		return
	}
	return *v, true
}

// OldWeaponRange returns the old "weapon_range" field's value of the Weapon entity.
// If the Weapon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponMutation) OldWeaponRange(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeaponRange is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeaponRange requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeaponRange: %w", err)
	}
	return oldValue.WeaponRange, nil
}

// ResetWeaponRange resets all changes to the "weapon_range" field.
func (m *WeaponMutation) ResetWeaponRange() {
	m.weapon_range = nil
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by ids.
func (m *WeaponMutation) AddEquipmentIDs(ids ...int) {
	if m.equipment == nil {
		m.equipment = make(map[int]struct{})
	}
	for i := range ids {
		m.equipment[ids[i]] = struct{}{}
	}
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *WeaponMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *WeaponMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// RemoveEquipmentIDs removes the "equipment" edge to the Equipment entity by IDs.
func (m *WeaponMutation) RemoveEquipmentIDs(ids ...int) {
	if m.removedequipment == nil {
		m.removedequipment = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.equipment, ids[i])
		m.removedequipment[ids[i]] = struct{}{}
	}
}

// RemovedEquipment returns the removed IDs of the "equipment" edge to the Equipment entity.
func (m *WeaponMutation) RemovedEquipmentIDs() (ids []int) {
	for id := range m.removedequipment {
		ids = append(ids, id)
	}
	return
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
func (m *WeaponMutation) EquipmentIDs() (ids []int) {
	for id := range m.equipment {
		ids = append(ids, id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *WeaponMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
	m.removedequipment = nil
}

// Where appends a list predicates to the WeaponMutation builder.
func (m *WeaponMutation) Where(ps ...predicate.Weapon) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WeaponMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WeaponMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Weapon, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WeaponMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WeaponMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Weapon).
func (m *WeaponMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WeaponMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, weapon.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, weapon.FieldName)
	}
	if m.weapon_range != nil {
		fields = append(fields, weapon.FieldWeaponRange)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WeaponMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case weapon.FieldIndx:
		return m.Indx()
	case weapon.FieldName:
		return m.Name()
	case weapon.FieldWeaponRange:
		return m.WeaponRange()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WeaponMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case weapon.FieldIndx:
		return m.OldIndx(ctx)
	case weapon.FieldName:
		return m.OldName(ctx)
	case weapon.FieldWeaponRange:
		return m.OldWeaponRange(ctx)
	}
	return nil, fmt.Errorf("unknown Weapon field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeaponMutation) SetField(name string, value ent.Value) error {
	switch name {
	case weapon.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case weapon.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case weapon.FieldWeaponRange:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeaponRange(v)
		return nil
	}
	return fmt.Errorf("unknown Weapon field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WeaponMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WeaponMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeaponMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Weapon numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WeaponMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WeaponMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WeaponMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Weapon nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WeaponMutation) ResetField(name string) error {
	switch name {
	case weapon.FieldIndx:
		m.ResetIndx()
		return nil
	case weapon.FieldName:
		m.ResetName()
		return nil
	case weapon.FieldWeaponRange:
		m.ResetWeaponRange()
		return nil
	}
	return fmt.Errorf("unknown Weapon field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WeaponMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.equipment != nil {
		edges = append(edges, weapon.EdgeEquipment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WeaponMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case weapon.EdgeEquipment:
		ids := make([]ent.Value, 0, len(m.equipment))
		for id := range m.equipment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WeaponMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedequipment != nil {
		edges = append(edges, weapon.EdgeEquipment)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WeaponMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case weapon.EdgeEquipment:
		ids := make([]ent.Value, 0, len(m.removedequipment))
		for id := range m.removedequipment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WeaponMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedequipment {
		edges = append(edges, weapon.EdgeEquipment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WeaponMutation) EdgeCleared(name string) bool {
	switch name {
	case weapon.EdgeEquipment:
		return m.clearedequipment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WeaponMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Weapon unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WeaponMutation) ResetEdge(name string) error {
	switch name {
	case weapon.EdgeEquipment:
		m.ResetEquipment()
		return nil
	}
	return fmt.Errorf("unknown Weapon edge %s", name)
}

// WeaponDamageMutation represents an operation that mutates the WeaponDamage nodes in the graph.
type WeaponDamageMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	dice               *string
	clearedFields      map[string]struct{}
	damage_type        map[int]struct{}
	removeddamage_type map[int]struct{}
	cleareddamage_type bool
	done               bool
	oldValue           func(context.Context) (*WeaponDamage, error)
	predicates         []predicate.WeaponDamage
}

var _ ent.Mutation = (*WeaponDamageMutation)(nil)

// weapondamageOption allows management of the mutation configuration using functional options.
type weapondamageOption func(*WeaponDamageMutation)

// newWeaponDamageMutation creates new mutation for the WeaponDamage entity.
func newWeaponDamageMutation(c config, op Op, opts ...weapondamageOption) *WeaponDamageMutation {
	m := &WeaponDamageMutation{
		config:        c,
		op:            op,
		typ:           TypeWeaponDamage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWeaponDamageID sets the ID field of the mutation.
func withWeaponDamageID(id int) weapondamageOption {
	return func(m *WeaponDamageMutation) {
		var (
			err   error
			once  sync.Once
			value *WeaponDamage
		)
		m.oldValue = func(ctx context.Context) (*WeaponDamage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WeaponDamage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWeaponDamage sets the old WeaponDamage of the mutation.
func withWeaponDamage(node *WeaponDamage) weapondamageOption {
	return func(m *WeaponDamageMutation) {
		m.oldValue = func(context.Context) (*WeaponDamage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WeaponDamageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WeaponDamageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WeaponDamageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WeaponDamageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WeaponDamage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDice sets the "dice" field.
func (m *WeaponDamageMutation) SetDice(s string) {
	m.dice = &s
}

// Dice returns the value of the "dice" field in the mutation.
func (m *WeaponDamageMutation) Dice() (r string, exists bool) {
	v := m.dice
	if v == nil {
		return
	}
	return *v, true
}

// OldDice returns the old "dice" field's value of the WeaponDamage entity.
// If the WeaponDamage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponDamageMutation) OldDice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDice: %w", err)
	}
	return oldValue.Dice, nil
}

// ResetDice resets all changes to the "dice" field.
func (m *WeaponDamageMutation) ResetDice() {
	m.dice = nil
}

// AddDamageTypeIDs adds the "damage_type" edge to the DamageType entity by ids.
func (m *WeaponDamageMutation) AddDamageTypeIDs(ids ...int) {
	if m.damage_type == nil {
		m.damage_type = make(map[int]struct{})
	}
	for i := range ids {
		m.damage_type[ids[i]] = struct{}{}
	}
}

// ClearDamageType clears the "damage_type" edge to the DamageType entity.
func (m *WeaponDamageMutation) ClearDamageType() {
	m.cleareddamage_type = true
}

// DamageTypeCleared reports if the "damage_type" edge to the DamageType entity was cleared.
func (m *WeaponDamageMutation) DamageTypeCleared() bool {
	return m.cleareddamage_type
}

// RemoveDamageTypeIDs removes the "damage_type" edge to the DamageType entity by IDs.
func (m *WeaponDamageMutation) RemoveDamageTypeIDs(ids ...int) {
	if m.removeddamage_type == nil {
		m.removeddamage_type = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.damage_type, ids[i])
		m.removeddamage_type[ids[i]] = struct{}{}
	}
}

// RemovedDamageType returns the removed IDs of the "damage_type" edge to the DamageType entity.
func (m *WeaponDamageMutation) RemovedDamageTypeIDs() (ids []int) {
	for id := range m.removeddamage_type {
		ids = append(ids, id)
	}
	return
}

// DamageTypeIDs returns the "damage_type" edge IDs in the mutation.
func (m *WeaponDamageMutation) DamageTypeIDs() (ids []int) {
	for id := range m.damage_type {
		ids = append(ids, id)
	}
	return
}

// ResetDamageType resets all changes to the "damage_type" edge.
func (m *WeaponDamageMutation) ResetDamageType() {
	m.damage_type = nil
	m.cleareddamage_type = false
	m.removeddamage_type = nil
}

// Where appends a list predicates to the WeaponDamageMutation builder.
func (m *WeaponDamageMutation) Where(ps ...predicate.WeaponDamage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WeaponDamageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WeaponDamageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WeaponDamage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WeaponDamageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WeaponDamageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WeaponDamage).
func (m *WeaponDamageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WeaponDamageMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.dice != nil {
		fields = append(fields, weapondamage.FieldDice)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WeaponDamageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case weapondamage.FieldDice:
		return m.Dice()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WeaponDamageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case weapondamage.FieldDice:
		return m.OldDice(ctx)
	}
	return nil, fmt.Errorf("unknown WeaponDamage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeaponDamageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case weapondamage.FieldDice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDice(v)
		return nil
	}
	return fmt.Errorf("unknown WeaponDamage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WeaponDamageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WeaponDamageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeaponDamageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WeaponDamage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WeaponDamageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WeaponDamageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WeaponDamageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WeaponDamage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WeaponDamageMutation) ResetField(name string) error {
	switch name {
	case weapondamage.FieldDice:
		m.ResetDice()
		return nil
	}
	return fmt.Errorf("unknown WeaponDamage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WeaponDamageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.damage_type != nil {
		edges = append(edges, weapondamage.EdgeDamageType)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WeaponDamageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case weapondamage.EdgeDamageType:
		ids := make([]ent.Value, 0, len(m.damage_type))
		for id := range m.damage_type {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WeaponDamageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddamage_type != nil {
		edges = append(edges, weapondamage.EdgeDamageType)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WeaponDamageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case weapondamage.EdgeDamageType:
		ids := make([]ent.Value, 0, len(m.removeddamage_type))
		for id := range m.removeddamage_type {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WeaponDamageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddamage_type {
		edges = append(edges, weapondamage.EdgeDamageType)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WeaponDamageMutation) EdgeCleared(name string) bool {
	switch name {
	case weapondamage.EdgeDamageType:
		return m.cleareddamage_type
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WeaponDamageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown WeaponDamage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WeaponDamageMutation) ResetEdge(name string) error {
	switch name {
	case weapondamage.EdgeDamageType:
		m.ResetDamageType()
		return nil
	}
	return fmt.Errorf("unknown WeaponDamage edge %s", name)
}
