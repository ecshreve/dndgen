// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/abilitybonus"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/armor"
	"github.com/ecshreve/dndgen/ent/armorclass"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/classequipment"
	"github.com/ecshreve/dndgen/ent/coin"
	"github.com/ecshreve/dndgen/ent/damagetype"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/equipmentchoice"
	"github.com/ecshreve/dndgen/ent/equipmentcost"
	"github.com/ecshreve/dndgen/ent/gear"
	"github.com/ecshreve/dndgen/ent/language"
	"github.com/ecshreve/dndgen/ent/magicschool"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/proficiencychoice"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/rule"
	"github.com/ecshreve/dndgen/ent/rulesection"
	"github.com/ecshreve/dndgen/ent/skill"
	"github.com/ecshreve/dndgen/ent/subrace"
	"github.com/ecshreve/dndgen/ent/tool"
	"github.com/ecshreve/dndgen/ent/trait"
	"github.com/ecshreve/dndgen/ent/vehicle"
	"github.com/ecshreve/dndgen/ent/weapon"
	"github.com/ecshreve/dndgen/ent/weapondamage"
	"github.com/ecshreve/dndgen/ent/weaponproperty"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAbilityBonus      = "AbilityBonus"
	TypeAbilityScore      = "AbilityScore"
	TypeArmor             = "Armor"
	TypeArmorClass        = "ArmorClass"
	TypeClass             = "Class"
	TypeClassEquipment    = "ClassEquipment"
	TypeCoin              = "Coin"
	TypeDamageType        = "DamageType"
	TypeEquipment         = "Equipment"
	TypeEquipmentChoice   = "EquipmentChoice"
	TypeEquipmentCost     = "EquipmentCost"
	TypeGear              = "Gear"
	TypeLanguage          = "Language"
	TypeMagicSchool       = "MagicSchool"
	TypeProficiency       = "Proficiency"
	TypeProficiencyChoice = "ProficiencyChoice"
	TypeRace              = "Race"
	TypeRule              = "Rule"
	TypeRuleSection       = "RuleSection"
	TypeSkill             = "Skill"
	TypeSubrace           = "Subrace"
	TypeTool              = "Tool"
	TypeTrait             = "Trait"
	TypeVehicle           = "Vehicle"
	TypeWeapon            = "Weapon"
	TypeWeaponDamage      = "WeaponDamage"
	TypeWeaponProperty    = "WeaponProperty"
)

// AbilityBonusMutation represents an operation that mutates the AbilityBonus nodes in the graph.
type AbilityBonusMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	bonus                *int
	addbonus             *int
	clearedFields        map[string]struct{}
	ability_score        *int
	clearedability_score bool
	race                 *int
	clearedrace          bool
	subrace              *int
	clearedsubrace       bool
	done                 bool
	oldValue             func(context.Context) (*AbilityBonus, error)
	predicates           []predicate.AbilityBonus
}

var _ ent.Mutation = (*AbilityBonusMutation)(nil)

// abilitybonusOption allows management of the mutation configuration using functional options.
type abilitybonusOption func(*AbilityBonusMutation)

// newAbilityBonusMutation creates new mutation for the AbilityBonus entity.
func newAbilityBonusMutation(c config, op Op, opts ...abilitybonusOption) *AbilityBonusMutation {
	m := &AbilityBonusMutation{
		config:        c,
		op:            op,
		typ:           TypeAbilityBonus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAbilityBonusID sets the ID field of the mutation.
func withAbilityBonusID(id int) abilitybonusOption {
	return func(m *AbilityBonusMutation) {
		var (
			err   error
			once  sync.Once
			value *AbilityBonus
		)
		m.oldValue = func(ctx context.Context) (*AbilityBonus, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AbilityBonus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAbilityBonus sets the old AbilityBonus of the mutation.
func withAbilityBonus(node *AbilityBonus) abilitybonusOption {
	return func(m *AbilityBonusMutation) {
		m.oldValue = func(context.Context) (*AbilityBonus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AbilityBonusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AbilityBonusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AbilityBonusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AbilityBonusMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AbilityBonus.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAbilityScoreID sets the "ability_score_id" field.
func (m *AbilityBonusMutation) SetAbilityScoreID(i int) {
	m.ability_score = &i
}

// AbilityScoreID returns the value of the "ability_score_id" field in the mutation.
func (m *AbilityBonusMutation) AbilityScoreID() (r int, exists bool) {
	v := m.ability_score
	if v == nil {
		return
	}
	return *v, true
}

// OldAbilityScoreID returns the old "ability_score_id" field's value of the AbilityBonus entity.
// If the AbilityBonus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AbilityBonusMutation) OldAbilityScoreID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAbilityScoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAbilityScoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAbilityScoreID: %w", err)
	}
	return oldValue.AbilityScoreID, nil
}

// ResetAbilityScoreID resets all changes to the "ability_score_id" field.
func (m *AbilityBonusMutation) ResetAbilityScoreID() {
	m.ability_score = nil
}

// SetBonus sets the "bonus" field.
func (m *AbilityBonusMutation) SetBonus(i int) {
	m.bonus = &i
	m.addbonus = nil
}

// Bonus returns the value of the "bonus" field in the mutation.
func (m *AbilityBonusMutation) Bonus() (r int, exists bool) {
	v := m.bonus
	if v == nil {
		return
	}
	return *v, true
}

// OldBonus returns the old "bonus" field's value of the AbilityBonus entity.
// If the AbilityBonus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AbilityBonusMutation) OldBonus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBonus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBonus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBonus: %w", err)
	}
	return oldValue.Bonus, nil
}

// AddBonus adds i to the "bonus" field.
func (m *AbilityBonusMutation) AddBonus(i int) {
	if m.addbonus != nil {
		*m.addbonus += i
	} else {
		m.addbonus = &i
	}
}

// AddedBonus returns the value that was added to the "bonus" field in this mutation.
func (m *AbilityBonusMutation) AddedBonus() (r int, exists bool) {
	v := m.addbonus
	if v == nil {
		return
	}
	return *v, true
}

// ResetBonus resets all changes to the "bonus" field.
func (m *AbilityBonusMutation) ResetBonus() {
	m.bonus = nil
	m.addbonus = nil
}

// ClearAbilityScore clears the "ability_score" edge to the AbilityScore entity.
func (m *AbilityBonusMutation) ClearAbilityScore() {
	m.clearedability_score = true
}

// AbilityScoreCleared reports if the "ability_score" edge to the AbilityScore entity was cleared.
func (m *AbilityBonusMutation) AbilityScoreCleared() bool {
	return m.clearedability_score
}

// AbilityScoreIDs returns the "ability_score" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AbilityScoreID instead. It exists only for internal usage by the builders.
func (m *AbilityBonusMutation) AbilityScoreIDs() (ids []int) {
	if id := m.ability_score; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAbilityScore resets all changes to the "ability_score" edge.
func (m *AbilityBonusMutation) ResetAbilityScore() {
	m.ability_score = nil
	m.clearedability_score = false
}

// SetRaceID sets the "race" edge to the Race entity by id.
func (m *AbilityBonusMutation) SetRaceID(id int) {
	m.race = &id
}

// ClearRace clears the "race" edge to the Race entity.
func (m *AbilityBonusMutation) ClearRace() {
	m.clearedrace = true
}

// RaceCleared reports if the "race" edge to the Race entity was cleared.
func (m *AbilityBonusMutation) RaceCleared() bool {
	return m.clearedrace
}

// RaceID returns the "race" edge ID in the mutation.
func (m *AbilityBonusMutation) RaceID() (id int, exists bool) {
	if m.race != nil {
		return *m.race, true
	}
	return
}

// RaceIDs returns the "race" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RaceID instead. It exists only for internal usage by the builders.
func (m *AbilityBonusMutation) RaceIDs() (ids []int) {
	if id := m.race; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRace resets all changes to the "race" edge.
func (m *AbilityBonusMutation) ResetRace() {
	m.race = nil
	m.clearedrace = false
}

// SetSubraceID sets the "subrace" edge to the Subrace entity by id.
func (m *AbilityBonusMutation) SetSubraceID(id int) {
	m.subrace = &id
}

// ClearSubrace clears the "subrace" edge to the Subrace entity.
func (m *AbilityBonusMutation) ClearSubrace() {
	m.clearedsubrace = true
}

// SubraceCleared reports if the "subrace" edge to the Subrace entity was cleared.
func (m *AbilityBonusMutation) SubraceCleared() bool {
	return m.clearedsubrace
}

// SubraceID returns the "subrace" edge ID in the mutation.
func (m *AbilityBonusMutation) SubraceID() (id int, exists bool) {
	if m.subrace != nil {
		return *m.subrace, true
	}
	return
}

// SubraceIDs returns the "subrace" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubraceID instead. It exists only for internal usage by the builders.
func (m *AbilityBonusMutation) SubraceIDs() (ids []int) {
	if id := m.subrace; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubrace resets all changes to the "subrace" edge.
func (m *AbilityBonusMutation) ResetSubrace() {
	m.subrace = nil
	m.clearedsubrace = false
}

// Where appends a list predicates to the AbilityBonusMutation builder.
func (m *AbilityBonusMutation) Where(ps ...predicate.AbilityBonus) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AbilityBonusMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AbilityBonusMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AbilityBonus, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AbilityBonusMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AbilityBonusMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AbilityBonus).
func (m *AbilityBonusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AbilityBonusMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.ability_score != nil {
		fields = append(fields, abilitybonus.FieldAbilityScoreID)
	}
	if m.bonus != nil {
		fields = append(fields, abilitybonus.FieldBonus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AbilityBonusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case abilitybonus.FieldAbilityScoreID:
		return m.AbilityScoreID()
	case abilitybonus.FieldBonus:
		return m.Bonus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AbilityBonusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case abilitybonus.FieldAbilityScoreID:
		return m.OldAbilityScoreID(ctx)
	case abilitybonus.FieldBonus:
		return m.OldBonus(ctx)
	}
	return nil, fmt.Errorf("unknown AbilityBonus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AbilityBonusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case abilitybonus.FieldAbilityScoreID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAbilityScoreID(v)
		return nil
	case abilitybonus.FieldBonus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBonus(v)
		return nil
	}
	return fmt.Errorf("unknown AbilityBonus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AbilityBonusMutation) AddedFields() []string {
	var fields []string
	if m.addbonus != nil {
		fields = append(fields, abilitybonus.FieldBonus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AbilityBonusMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case abilitybonus.FieldBonus:
		return m.AddedBonus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AbilityBonusMutation) AddField(name string, value ent.Value) error {
	switch name {
	case abilitybonus.FieldBonus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBonus(v)
		return nil
	}
	return fmt.Errorf("unknown AbilityBonus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AbilityBonusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AbilityBonusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AbilityBonusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AbilityBonus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AbilityBonusMutation) ResetField(name string) error {
	switch name {
	case abilitybonus.FieldAbilityScoreID:
		m.ResetAbilityScoreID()
		return nil
	case abilitybonus.FieldBonus:
		m.ResetBonus()
		return nil
	}
	return fmt.Errorf("unknown AbilityBonus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AbilityBonusMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.ability_score != nil {
		edges = append(edges, abilitybonus.EdgeAbilityScore)
	}
	if m.race != nil {
		edges = append(edges, abilitybonus.EdgeRace)
	}
	if m.subrace != nil {
		edges = append(edges, abilitybonus.EdgeSubrace)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AbilityBonusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case abilitybonus.EdgeAbilityScore:
		if id := m.ability_score; id != nil {
			return []ent.Value{*id}
		}
	case abilitybonus.EdgeRace:
		if id := m.race; id != nil {
			return []ent.Value{*id}
		}
	case abilitybonus.EdgeSubrace:
		if id := m.subrace; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AbilityBonusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AbilityBonusMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AbilityBonusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedability_score {
		edges = append(edges, abilitybonus.EdgeAbilityScore)
	}
	if m.clearedrace {
		edges = append(edges, abilitybonus.EdgeRace)
	}
	if m.clearedsubrace {
		edges = append(edges, abilitybonus.EdgeSubrace)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AbilityBonusMutation) EdgeCleared(name string) bool {
	switch name {
	case abilitybonus.EdgeAbilityScore:
		return m.clearedability_score
	case abilitybonus.EdgeRace:
		return m.clearedrace
	case abilitybonus.EdgeSubrace:
		return m.clearedsubrace
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AbilityBonusMutation) ClearEdge(name string) error {
	switch name {
	case abilitybonus.EdgeAbilityScore:
		m.ClearAbilityScore()
		return nil
	case abilitybonus.EdgeRace:
		m.ClearRace()
		return nil
	case abilitybonus.EdgeSubrace:
		m.ClearSubrace()
		return nil
	}
	return fmt.Errorf("unknown AbilityBonus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AbilityBonusMutation) ResetEdge(name string) error {
	switch name {
	case abilitybonus.EdgeAbilityScore:
		m.ResetAbilityScore()
		return nil
	case abilitybonus.EdgeRace:
		m.ResetRace()
		return nil
	case abilitybonus.EdgeSubrace:
		m.ResetSubrace()
		return nil
	}
	return fmt.Errorf("unknown AbilityBonus edge %s", name)
}

// AbilityScoreMutation represents an operation that mutates the AbilityScore nodes in the graph.
type AbilityScoreMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	indx                   *string
	name                   *string
	full_name              *string
	desc                   *[]string
	appenddesc             []string
	clearedFields          map[string]struct{}
	skills                 map[int]struct{}
	removedskills          map[int]struct{}
	clearedskills          bool
	ability_bonuses        map[int]struct{}
	removedability_bonuses map[int]struct{}
	clearedability_bonuses bool
	done                   bool
	oldValue               func(context.Context) (*AbilityScore, error)
	predicates             []predicate.AbilityScore
}

var _ ent.Mutation = (*AbilityScoreMutation)(nil)

// abilityscoreOption allows management of the mutation configuration using functional options.
type abilityscoreOption func(*AbilityScoreMutation)

// newAbilityScoreMutation creates new mutation for the AbilityScore entity.
func newAbilityScoreMutation(c config, op Op, opts ...abilityscoreOption) *AbilityScoreMutation {
	m := &AbilityScoreMutation{
		config:        c,
		op:            op,
		typ:           TypeAbilityScore,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAbilityScoreID sets the ID field of the mutation.
func withAbilityScoreID(id int) abilityscoreOption {
	return func(m *AbilityScoreMutation) {
		var (
			err   error
			once  sync.Once
			value *AbilityScore
		)
		m.oldValue = func(ctx context.Context) (*AbilityScore, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AbilityScore.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAbilityScore sets the old AbilityScore of the mutation.
func withAbilityScore(node *AbilityScore) abilityscoreOption {
	return func(m *AbilityScoreMutation) {
		m.oldValue = func(context.Context) (*AbilityScore, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AbilityScoreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AbilityScoreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AbilityScoreMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AbilityScoreMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AbilityScore.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *AbilityScoreMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *AbilityScoreMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the AbilityScore entity.
// If the AbilityScore object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AbilityScoreMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *AbilityScoreMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *AbilityScoreMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AbilityScoreMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AbilityScore entity.
// If the AbilityScore object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AbilityScoreMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AbilityScoreMutation) ResetName() {
	m.name = nil
}

// SetFullName sets the "full_name" field.
func (m *AbilityScoreMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *AbilityScoreMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the AbilityScore entity.
// If the AbilityScore object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AbilityScoreMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *AbilityScoreMutation) ResetFullName() {
	m.full_name = nil
}

// SetDesc sets the "desc" field.
func (m *AbilityScoreMutation) SetDesc(s []string) {
	m.desc = &s
	m.appenddesc = nil
}

// Desc returns the value of the "desc" field in the mutation.
func (m *AbilityScoreMutation) Desc() (r []string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the AbilityScore entity.
// If the AbilityScore object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AbilityScoreMutation) OldDesc(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// AppendDesc adds s to the "desc" field.
func (m *AbilityScoreMutation) AppendDesc(s []string) {
	m.appenddesc = append(m.appenddesc, s...)
}

// AppendedDesc returns the list of values that were appended to the "desc" field in this mutation.
func (m *AbilityScoreMutation) AppendedDesc() ([]string, bool) {
	if len(m.appenddesc) == 0 {
		return nil, false
	}
	return m.appenddesc, true
}

// ResetDesc resets all changes to the "desc" field.
func (m *AbilityScoreMutation) ResetDesc() {
	m.desc = nil
	m.appenddesc = nil
}

// AddSkillIDs adds the "skills" edge to the Skill entity by ids.
func (m *AbilityScoreMutation) AddSkillIDs(ids ...int) {
	if m.skills == nil {
		m.skills = make(map[int]struct{})
	}
	for i := range ids {
		m.skills[ids[i]] = struct{}{}
	}
}

// ClearSkills clears the "skills" edge to the Skill entity.
func (m *AbilityScoreMutation) ClearSkills() {
	m.clearedskills = true
}

// SkillsCleared reports if the "skills" edge to the Skill entity was cleared.
func (m *AbilityScoreMutation) SkillsCleared() bool {
	return m.clearedskills
}

// RemoveSkillIDs removes the "skills" edge to the Skill entity by IDs.
func (m *AbilityScoreMutation) RemoveSkillIDs(ids ...int) {
	if m.removedskills == nil {
		m.removedskills = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.skills, ids[i])
		m.removedskills[ids[i]] = struct{}{}
	}
}

// RemovedSkills returns the removed IDs of the "skills" edge to the Skill entity.
func (m *AbilityScoreMutation) RemovedSkillsIDs() (ids []int) {
	for id := range m.removedskills {
		ids = append(ids, id)
	}
	return
}

// SkillsIDs returns the "skills" edge IDs in the mutation.
func (m *AbilityScoreMutation) SkillsIDs() (ids []int) {
	for id := range m.skills {
		ids = append(ids, id)
	}
	return
}

// ResetSkills resets all changes to the "skills" edge.
func (m *AbilityScoreMutation) ResetSkills() {
	m.skills = nil
	m.clearedskills = false
	m.removedskills = nil
}

// AddAbilityBonuseIDs adds the "ability_bonuses" edge to the AbilityBonus entity by ids.
func (m *AbilityScoreMutation) AddAbilityBonuseIDs(ids ...int) {
	if m.ability_bonuses == nil {
		m.ability_bonuses = make(map[int]struct{})
	}
	for i := range ids {
		m.ability_bonuses[ids[i]] = struct{}{}
	}
}

// ClearAbilityBonuses clears the "ability_bonuses" edge to the AbilityBonus entity.
func (m *AbilityScoreMutation) ClearAbilityBonuses() {
	m.clearedability_bonuses = true
}

// AbilityBonusesCleared reports if the "ability_bonuses" edge to the AbilityBonus entity was cleared.
func (m *AbilityScoreMutation) AbilityBonusesCleared() bool {
	return m.clearedability_bonuses
}

// RemoveAbilityBonuseIDs removes the "ability_bonuses" edge to the AbilityBonus entity by IDs.
func (m *AbilityScoreMutation) RemoveAbilityBonuseIDs(ids ...int) {
	if m.removedability_bonuses == nil {
		m.removedability_bonuses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.ability_bonuses, ids[i])
		m.removedability_bonuses[ids[i]] = struct{}{}
	}
}

// RemovedAbilityBonuses returns the removed IDs of the "ability_bonuses" edge to the AbilityBonus entity.
func (m *AbilityScoreMutation) RemovedAbilityBonusesIDs() (ids []int) {
	for id := range m.removedability_bonuses {
		ids = append(ids, id)
	}
	return
}

// AbilityBonusesIDs returns the "ability_bonuses" edge IDs in the mutation.
func (m *AbilityScoreMutation) AbilityBonusesIDs() (ids []int) {
	for id := range m.ability_bonuses {
		ids = append(ids, id)
	}
	return
}

// ResetAbilityBonuses resets all changes to the "ability_bonuses" edge.
func (m *AbilityScoreMutation) ResetAbilityBonuses() {
	m.ability_bonuses = nil
	m.clearedability_bonuses = false
	m.removedability_bonuses = nil
}

// Where appends a list predicates to the AbilityScoreMutation builder.
func (m *AbilityScoreMutation) Where(ps ...predicate.AbilityScore) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AbilityScoreMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AbilityScoreMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AbilityScore, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AbilityScoreMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AbilityScoreMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AbilityScore).
func (m *AbilityScoreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AbilityScoreMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.indx != nil {
		fields = append(fields, abilityscore.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, abilityscore.FieldName)
	}
	if m.full_name != nil {
		fields = append(fields, abilityscore.FieldFullName)
	}
	if m.desc != nil {
		fields = append(fields, abilityscore.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AbilityScoreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case abilityscore.FieldIndx:
		return m.Indx()
	case abilityscore.FieldName:
		return m.Name()
	case abilityscore.FieldFullName:
		return m.FullName()
	case abilityscore.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AbilityScoreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case abilityscore.FieldIndx:
		return m.OldIndx(ctx)
	case abilityscore.FieldName:
		return m.OldName(ctx)
	case abilityscore.FieldFullName:
		return m.OldFullName(ctx)
	case abilityscore.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown AbilityScore field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AbilityScoreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case abilityscore.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case abilityscore.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case abilityscore.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case abilityscore.FieldDesc:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown AbilityScore field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AbilityScoreMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AbilityScoreMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AbilityScoreMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AbilityScore numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AbilityScoreMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AbilityScoreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AbilityScoreMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AbilityScore nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AbilityScoreMutation) ResetField(name string) error {
	switch name {
	case abilityscore.FieldIndx:
		m.ResetIndx()
		return nil
	case abilityscore.FieldName:
		m.ResetName()
		return nil
	case abilityscore.FieldFullName:
		m.ResetFullName()
		return nil
	case abilityscore.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown AbilityScore field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AbilityScoreMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.skills != nil {
		edges = append(edges, abilityscore.EdgeSkills)
	}
	if m.ability_bonuses != nil {
		edges = append(edges, abilityscore.EdgeAbilityBonuses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AbilityScoreMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case abilityscore.EdgeSkills:
		ids := make([]ent.Value, 0, len(m.skills))
		for id := range m.skills {
			ids = append(ids, id)
		}
		return ids
	case abilityscore.EdgeAbilityBonuses:
		ids := make([]ent.Value, 0, len(m.ability_bonuses))
		for id := range m.ability_bonuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AbilityScoreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedskills != nil {
		edges = append(edges, abilityscore.EdgeSkills)
	}
	if m.removedability_bonuses != nil {
		edges = append(edges, abilityscore.EdgeAbilityBonuses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AbilityScoreMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case abilityscore.EdgeSkills:
		ids := make([]ent.Value, 0, len(m.removedskills))
		for id := range m.removedskills {
			ids = append(ids, id)
		}
		return ids
	case abilityscore.EdgeAbilityBonuses:
		ids := make([]ent.Value, 0, len(m.removedability_bonuses))
		for id := range m.removedability_bonuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AbilityScoreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedskills {
		edges = append(edges, abilityscore.EdgeSkills)
	}
	if m.clearedability_bonuses {
		edges = append(edges, abilityscore.EdgeAbilityBonuses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AbilityScoreMutation) EdgeCleared(name string) bool {
	switch name {
	case abilityscore.EdgeSkills:
		return m.clearedskills
	case abilityscore.EdgeAbilityBonuses:
		return m.clearedability_bonuses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AbilityScoreMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AbilityScore unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AbilityScoreMutation) ResetEdge(name string) error {
	switch name {
	case abilityscore.EdgeSkills:
		m.ResetSkills()
		return nil
	case abilityscore.EdgeAbilityBonuses:
		m.ResetAbilityBonuses()
		return nil
	}
	return fmt.Errorf("unknown AbilityScore edge %s", name)
}

// ArmorMutation represents an operation that mutates the Armor nodes in the graph.
type ArmorMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	indx                 *string
	name                 *string
	armor_category       *string
	stealth_disadvantage *bool
	min_strength         *int
	addmin_strength      *int
	clearedFields        map[string]struct{}
	equipment            *int
	clearedequipment     bool
	armor_class          map[int]struct{}
	removedarmor_class   map[int]struct{}
	clearedarmor_class   bool
	done                 bool
	oldValue             func(context.Context) (*Armor, error)
	predicates           []predicate.Armor
}

var _ ent.Mutation = (*ArmorMutation)(nil)

// armorOption allows management of the mutation configuration using functional options.
type armorOption func(*ArmorMutation)

// newArmorMutation creates new mutation for the Armor entity.
func newArmorMutation(c config, op Op, opts ...armorOption) *ArmorMutation {
	m := &ArmorMutation{
		config:        c,
		op:            op,
		typ:           TypeArmor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArmorID sets the ID field of the mutation.
func withArmorID(id int) armorOption {
	return func(m *ArmorMutation) {
		var (
			err   error
			once  sync.Once
			value *Armor
		)
		m.oldValue = func(ctx context.Context) (*Armor, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Armor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArmor sets the old Armor of the mutation.
func withArmor(node *Armor) armorOption {
	return func(m *ArmorMutation) {
		m.oldValue = func(context.Context) (*Armor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArmorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArmorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArmorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArmorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Armor.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *ArmorMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *ArmorMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Armor entity.
// If the Armor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *ArmorMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *ArmorMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ArmorMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Armor entity.
// If the Armor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ArmorMutation) ResetName() {
	m.name = nil
}

// SetArmorCategory sets the "armor_category" field.
func (m *ArmorMutation) SetArmorCategory(s string) {
	m.armor_category = &s
}

// ArmorCategory returns the value of the "armor_category" field in the mutation.
func (m *ArmorMutation) ArmorCategory() (r string, exists bool) {
	v := m.armor_category
	if v == nil {
		return
	}
	return *v, true
}

// OldArmorCategory returns the old "armor_category" field's value of the Armor entity.
// If the Armor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorMutation) OldArmorCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArmorCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArmorCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArmorCategory: %w", err)
	}
	return oldValue.ArmorCategory, nil
}

// ResetArmorCategory resets all changes to the "armor_category" field.
func (m *ArmorMutation) ResetArmorCategory() {
	m.armor_category = nil
}

// SetStealthDisadvantage sets the "stealth_disadvantage" field.
func (m *ArmorMutation) SetStealthDisadvantage(b bool) {
	m.stealth_disadvantage = &b
}

// StealthDisadvantage returns the value of the "stealth_disadvantage" field in the mutation.
func (m *ArmorMutation) StealthDisadvantage() (r bool, exists bool) {
	v := m.stealth_disadvantage
	if v == nil {
		return
	}
	return *v, true
}

// OldStealthDisadvantage returns the old "stealth_disadvantage" field's value of the Armor entity.
// If the Armor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorMutation) OldStealthDisadvantage(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStealthDisadvantage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStealthDisadvantage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStealthDisadvantage: %w", err)
	}
	return oldValue.StealthDisadvantage, nil
}

// ResetStealthDisadvantage resets all changes to the "stealth_disadvantage" field.
func (m *ArmorMutation) ResetStealthDisadvantage() {
	m.stealth_disadvantage = nil
}

// SetMinStrength sets the "min_strength" field.
func (m *ArmorMutation) SetMinStrength(i int) {
	m.min_strength = &i
	m.addmin_strength = nil
}

// MinStrength returns the value of the "min_strength" field in the mutation.
func (m *ArmorMutation) MinStrength() (r int, exists bool) {
	v := m.min_strength
	if v == nil {
		return
	}
	return *v, true
}

// OldMinStrength returns the old "min_strength" field's value of the Armor entity.
// If the Armor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorMutation) OldMinStrength(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinStrength is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinStrength requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinStrength: %w", err)
	}
	return oldValue.MinStrength, nil
}

// AddMinStrength adds i to the "min_strength" field.
func (m *ArmorMutation) AddMinStrength(i int) {
	if m.addmin_strength != nil {
		*m.addmin_strength += i
	} else {
		m.addmin_strength = &i
	}
}

// AddedMinStrength returns the value that was added to the "min_strength" field in this mutation.
func (m *ArmorMutation) AddedMinStrength() (r int, exists bool) {
	v := m.addmin_strength
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinStrength resets all changes to the "min_strength" field.
func (m *ArmorMutation) ResetMinStrength() {
	m.min_strength = nil
	m.addmin_strength = nil
}

// SetEquipmentID sets the "equipment_id" field.
func (m *ArmorMutation) SetEquipmentID(i int) {
	m.equipment = &i
}

// EquipmentID returns the value of the "equipment_id" field in the mutation.
func (m *ArmorMutation) EquipmentID() (r int, exists bool) {
	v := m.equipment
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipmentID returns the old "equipment_id" field's value of the Armor entity.
// If the Armor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorMutation) OldEquipmentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquipmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquipmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipmentID: %w", err)
	}
	return oldValue.EquipmentID, nil
}

// ResetEquipmentID resets all changes to the "equipment_id" field.
func (m *ArmorMutation) ResetEquipmentID() {
	m.equipment = nil
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *ArmorMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *ArmorMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EquipmentID instead. It exists only for internal usage by the builders.
func (m *ArmorMutation) EquipmentIDs() (ids []int) {
	if id := m.equipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *ArmorMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
}

// AddArmorClasIDs adds the "armor_class" edge to the ArmorClass entity by ids.
func (m *ArmorMutation) AddArmorClasIDs(ids ...int) {
	if m.armor_class == nil {
		m.armor_class = make(map[int]struct{})
	}
	for i := range ids {
		m.armor_class[ids[i]] = struct{}{}
	}
}

// ClearArmorClass clears the "armor_class" edge to the ArmorClass entity.
func (m *ArmorMutation) ClearArmorClass() {
	m.clearedarmor_class = true
}

// ArmorClassCleared reports if the "armor_class" edge to the ArmorClass entity was cleared.
func (m *ArmorMutation) ArmorClassCleared() bool {
	return m.clearedarmor_class
}

// RemoveArmorClasIDs removes the "armor_class" edge to the ArmorClass entity by IDs.
func (m *ArmorMutation) RemoveArmorClasIDs(ids ...int) {
	if m.removedarmor_class == nil {
		m.removedarmor_class = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.armor_class, ids[i])
		m.removedarmor_class[ids[i]] = struct{}{}
	}
}

// RemovedArmorClass returns the removed IDs of the "armor_class" edge to the ArmorClass entity.
func (m *ArmorMutation) RemovedArmorClassIDs() (ids []int) {
	for id := range m.removedarmor_class {
		ids = append(ids, id)
	}
	return
}

// ArmorClassIDs returns the "armor_class" edge IDs in the mutation.
func (m *ArmorMutation) ArmorClassIDs() (ids []int) {
	for id := range m.armor_class {
		ids = append(ids, id)
	}
	return
}

// ResetArmorClass resets all changes to the "armor_class" edge.
func (m *ArmorMutation) ResetArmorClass() {
	m.armor_class = nil
	m.clearedarmor_class = false
	m.removedarmor_class = nil
}

// Where appends a list predicates to the ArmorMutation builder.
func (m *ArmorMutation) Where(ps ...predicate.Armor) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArmorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArmorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Armor, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArmorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArmorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Armor).
func (m *ArmorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArmorMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.indx != nil {
		fields = append(fields, armor.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, armor.FieldName)
	}
	if m.armor_category != nil {
		fields = append(fields, armor.FieldArmorCategory)
	}
	if m.stealth_disadvantage != nil {
		fields = append(fields, armor.FieldStealthDisadvantage)
	}
	if m.min_strength != nil {
		fields = append(fields, armor.FieldMinStrength)
	}
	if m.equipment != nil {
		fields = append(fields, armor.FieldEquipmentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArmorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case armor.FieldIndx:
		return m.Indx()
	case armor.FieldName:
		return m.Name()
	case armor.FieldArmorCategory:
		return m.ArmorCategory()
	case armor.FieldStealthDisadvantage:
		return m.StealthDisadvantage()
	case armor.FieldMinStrength:
		return m.MinStrength()
	case armor.FieldEquipmentID:
		return m.EquipmentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArmorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case armor.FieldIndx:
		return m.OldIndx(ctx)
	case armor.FieldName:
		return m.OldName(ctx)
	case armor.FieldArmorCategory:
		return m.OldArmorCategory(ctx)
	case armor.FieldStealthDisadvantage:
		return m.OldStealthDisadvantage(ctx)
	case armor.FieldMinStrength:
		return m.OldMinStrength(ctx)
	case armor.FieldEquipmentID:
		return m.OldEquipmentID(ctx)
	}
	return nil, fmt.Errorf("unknown Armor field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArmorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case armor.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case armor.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case armor.FieldArmorCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArmorCategory(v)
		return nil
	case armor.FieldStealthDisadvantage:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStealthDisadvantage(v)
		return nil
	case armor.FieldMinStrength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinStrength(v)
		return nil
	case armor.FieldEquipmentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipmentID(v)
		return nil
	}
	return fmt.Errorf("unknown Armor field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArmorMutation) AddedFields() []string {
	var fields []string
	if m.addmin_strength != nil {
		fields = append(fields, armor.FieldMinStrength)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArmorMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case armor.FieldMinStrength:
		return m.AddedMinStrength()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArmorMutation) AddField(name string, value ent.Value) error {
	switch name {
	case armor.FieldMinStrength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinStrength(v)
		return nil
	}
	return fmt.Errorf("unknown Armor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArmorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArmorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArmorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Armor nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArmorMutation) ResetField(name string) error {
	switch name {
	case armor.FieldIndx:
		m.ResetIndx()
		return nil
	case armor.FieldName:
		m.ResetName()
		return nil
	case armor.FieldArmorCategory:
		m.ResetArmorCategory()
		return nil
	case armor.FieldStealthDisadvantage:
		m.ResetStealthDisadvantage()
		return nil
	case armor.FieldMinStrength:
		m.ResetMinStrength()
		return nil
	case armor.FieldEquipmentID:
		m.ResetEquipmentID()
		return nil
	}
	return fmt.Errorf("unknown Armor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArmorMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.equipment != nil {
		edges = append(edges, armor.EdgeEquipment)
	}
	if m.armor_class != nil {
		edges = append(edges, armor.EdgeArmorClass)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArmorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case armor.EdgeEquipment:
		if id := m.equipment; id != nil {
			return []ent.Value{*id}
		}
	case armor.EdgeArmorClass:
		ids := make([]ent.Value, 0, len(m.armor_class))
		for id := range m.armor_class {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArmorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedarmor_class != nil {
		edges = append(edges, armor.EdgeArmorClass)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArmorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case armor.EdgeArmorClass:
		ids := make([]ent.Value, 0, len(m.removedarmor_class))
		for id := range m.removedarmor_class {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArmorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedequipment {
		edges = append(edges, armor.EdgeEquipment)
	}
	if m.clearedarmor_class {
		edges = append(edges, armor.EdgeArmorClass)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArmorMutation) EdgeCleared(name string) bool {
	switch name {
	case armor.EdgeEquipment:
		return m.clearedequipment
	case armor.EdgeArmorClass:
		return m.clearedarmor_class
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArmorMutation) ClearEdge(name string) error {
	switch name {
	case armor.EdgeEquipment:
		m.ClearEquipment()
		return nil
	}
	return fmt.Errorf("unknown Armor unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArmorMutation) ResetEdge(name string) error {
	switch name {
	case armor.EdgeEquipment:
		m.ResetEquipment()
		return nil
	case armor.EdgeArmorClass:
		m.ResetArmorClass()
		return nil
	}
	return fmt.Errorf("unknown Armor edge %s", name)
}

// ArmorClassMutation represents an operation that mutates the ArmorClass nodes in the graph.
type ArmorClassMutation struct {
	config
	op            Op
	typ           string
	id            *int
	base          *int
	addbase       *int
	dex_bonus     *bool
	max_bonus     *int
	addmax_bonus  *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ArmorClass, error)
	predicates    []predicate.ArmorClass
}

var _ ent.Mutation = (*ArmorClassMutation)(nil)

// armorclassOption allows management of the mutation configuration using functional options.
type armorclassOption func(*ArmorClassMutation)

// newArmorClassMutation creates new mutation for the ArmorClass entity.
func newArmorClassMutation(c config, op Op, opts ...armorclassOption) *ArmorClassMutation {
	m := &ArmorClassMutation{
		config:        c,
		op:            op,
		typ:           TypeArmorClass,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArmorClassID sets the ID field of the mutation.
func withArmorClassID(id int) armorclassOption {
	return func(m *ArmorClassMutation) {
		var (
			err   error
			once  sync.Once
			value *ArmorClass
		)
		m.oldValue = func(ctx context.Context) (*ArmorClass, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ArmorClass.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArmorClass sets the old ArmorClass of the mutation.
func withArmorClass(node *ArmorClass) armorclassOption {
	return func(m *ArmorClassMutation) {
		m.oldValue = func(context.Context) (*ArmorClass, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArmorClassMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArmorClassMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArmorClassMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArmorClassMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ArmorClass.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBase sets the "base" field.
func (m *ArmorClassMutation) SetBase(i int) {
	m.base = &i
	m.addbase = nil
}

// Base returns the value of the "base" field in the mutation.
func (m *ArmorClassMutation) Base() (r int, exists bool) {
	v := m.base
	if v == nil {
		return
	}
	return *v, true
}

// OldBase returns the old "base" field's value of the ArmorClass entity.
// If the ArmorClass object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorClassMutation) OldBase(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBase is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBase requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBase: %w", err)
	}
	return oldValue.Base, nil
}

// AddBase adds i to the "base" field.
func (m *ArmorClassMutation) AddBase(i int) {
	if m.addbase != nil {
		*m.addbase += i
	} else {
		m.addbase = &i
	}
}

// AddedBase returns the value that was added to the "base" field in this mutation.
func (m *ArmorClassMutation) AddedBase() (r int, exists bool) {
	v := m.addbase
	if v == nil {
		return
	}
	return *v, true
}

// ResetBase resets all changes to the "base" field.
func (m *ArmorClassMutation) ResetBase() {
	m.base = nil
	m.addbase = nil
}

// SetDexBonus sets the "dex_bonus" field.
func (m *ArmorClassMutation) SetDexBonus(b bool) {
	m.dex_bonus = &b
}

// DexBonus returns the value of the "dex_bonus" field in the mutation.
func (m *ArmorClassMutation) DexBonus() (r bool, exists bool) {
	v := m.dex_bonus
	if v == nil {
		return
	}
	return *v, true
}

// OldDexBonus returns the old "dex_bonus" field's value of the ArmorClass entity.
// If the ArmorClass object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorClassMutation) OldDexBonus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDexBonus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDexBonus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDexBonus: %w", err)
	}
	return oldValue.DexBonus, nil
}

// ResetDexBonus resets all changes to the "dex_bonus" field.
func (m *ArmorClassMutation) ResetDexBonus() {
	m.dex_bonus = nil
}

// SetMaxBonus sets the "max_bonus" field.
func (m *ArmorClassMutation) SetMaxBonus(i int) {
	m.max_bonus = &i
	m.addmax_bonus = nil
}

// MaxBonus returns the value of the "max_bonus" field in the mutation.
func (m *ArmorClassMutation) MaxBonus() (r int, exists bool) {
	v := m.max_bonus
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxBonus returns the old "max_bonus" field's value of the ArmorClass entity.
// If the ArmorClass object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArmorClassMutation) OldMaxBonus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxBonus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxBonus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxBonus: %w", err)
	}
	return oldValue.MaxBonus, nil
}

// AddMaxBonus adds i to the "max_bonus" field.
func (m *ArmorClassMutation) AddMaxBonus(i int) {
	if m.addmax_bonus != nil {
		*m.addmax_bonus += i
	} else {
		m.addmax_bonus = &i
	}
}

// AddedMaxBonus returns the value that was added to the "max_bonus" field in this mutation.
func (m *ArmorClassMutation) AddedMaxBonus() (r int, exists bool) {
	v := m.addmax_bonus
	if v == nil {
		return
	}
	return *v, true
}

// ClearMaxBonus clears the value of the "max_bonus" field.
func (m *ArmorClassMutation) ClearMaxBonus() {
	m.max_bonus = nil
	m.addmax_bonus = nil
	m.clearedFields[armorclass.FieldMaxBonus] = struct{}{}
}

// MaxBonusCleared returns if the "max_bonus" field was cleared in this mutation.
func (m *ArmorClassMutation) MaxBonusCleared() bool {
	_, ok := m.clearedFields[armorclass.FieldMaxBonus]
	return ok
}

// ResetMaxBonus resets all changes to the "max_bonus" field.
func (m *ArmorClassMutation) ResetMaxBonus() {
	m.max_bonus = nil
	m.addmax_bonus = nil
	delete(m.clearedFields, armorclass.FieldMaxBonus)
}

// Where appends a list predicates to the ArmorClassMutation builder.
func (m *ArmorClassMutation) Where(ps ...predicate.ArmorClass) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArmorClassMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArmorClassMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ArmorClass, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArmorClassMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArmorClassMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ArmorClass).
func (m *ArmorClassMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArmorClassMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.base != nil {
		fields = append(fields, armorclass.FieldBase)
	}
	if m.dex_bonus != nil {
		fields = append(fields, armorclass.FieldDexBonus)
	}
	if m.max_bonus != nil {
		fields = append(fields, armorclass.FieldMaxBonus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArmorClassMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case armorclass.FieldBase:
		return m.Base()
	case armorclass.FieldDexBonus:
		return m.DexBonus()
	case armorclass.FieldMaxBonus:
		return m.MaxBonus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArmorClassMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case armorclass.FieldBase:
		return m.OldBase(ctx)
	case armorclass.FieldDexBonus:
		return m.OldDexBonus(ctx)
	case armorclass.FieldMaxBonus:
		return m.OldMaxBonus(ctx)
	}
	return nil, fmt.Errorf("unknown ArmorClass field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArmorClassMutation) SetField(name string, value ent.Value) error {
	switch name {
	case armorclass.FieldBase:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBase(v)
		return nil
	case armorclass.FieldDexBonus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDexBonus(v)
		return nil
	case armorclass.FieldMaxBonus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxBonus(v)
		return nil
	}
	return fmt.Errorf("unknown ArmorClass field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArmorClassMutation) AddedFields() []string {
	var fields []string
	if m.addbase != nil {
		fields = append(fields, armorclass.FieldBase)
	}
	if m.addmax_bonus != nil {
		fields = append(fields, armorclass.FieldMaxBonus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArmorClassMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case armorclass.FieldBase:
		return m.AddedBase()
	case armorclass.FieldMaxBonus:
		return m.AddedMaxBonus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArmorClassMutation) AddField(name string, value ent.Value) error {
	switch name {
	case armorclass.FieldBase:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBase(v)
		return nil
	case armorclass.FieldMaxBonus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxBonus(v)
		return nil
	}
	return fmt.Errorf("unknown ArmorClass numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArmorClassMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(armorclass.FieldMaxBonus) {
		fields = append(fields, armorclass.FieldMaxBonus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArmorClassMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArmorClassMutation) ClearField(name string) error {
	switch name {
	case armorclass.FieldMaxBonus:
		m.ClearMaxBonus()
		return nil
	}
	return fmt.Errorf("unknown ArmorClass nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArmorClassMutation) ResetField(name string) error {
	switch name {
	case armorclass.FieldBase:
		m.ResetBase()
		return nil
	case armorclass.FieldDexBonus:
		m.ResetDexBonus()
		return nil
	case armorclass.FieldMaxBonus:
		m.ResetMaxBonus()
		return nil
	}
	return fmt.Errorf("unknown ArmorClass field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArmorClassMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArmorClassMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArmorClassMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArmorClassMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArmorClassMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArmorClassMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArmorClassMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ArmorClass unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArmorClassMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ArmorClass edge %s", name)
}

// ClassMutation represents an operation that mutates the Class nodes in the graph.
type ClassMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	indx                       *string
	name                       *string
	hit_die                    *int
	addhit_die                 *int
	clearedFields              map[string]struct{}
	proficiencies              map[int]struct{}
	removedproficiencies       map[int]struct{}
	clearedproficiencies       bool
	proficiency_choices        map[int]struct{}
	removedproficiency_choices map[int]struct{}
	clearedproficiency_choices bool
	equipment                  map[int]struct{}
	removedequipment           map[int]struct{}
	clearedequipment           bool
	equipment_choices          map[int]struct{}
	removedequipment_choices   map[int]struct{}
	clearedequipment_choices   bool
	done                       bool
	oldValue                   func(context.Context) (*Class, error)
	predicates                 []predicate.Class
}

var _ ent.Mutation = (*ClassMutation)(nil)

// classOption allows management of the mutation configuration using functional options.
type classOption func(*ClassMutation)

// newClassMutation creates new mutation for the Class entity.
func newClassMutation(c config, op Op, opts ...classOption) *ClassMutation {
	m := &ClassMutation{
		config:        c,
		op:            op,
		typ:           TypeClass,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClassID sets the ID field of the mutation.
func withClassID(id int) classOption {
	return func(m *ClassMutation) {
		var (
			err   error
			once  sync.Once
			value *Class
		)
		m.oldValue = func(ctx context.Context) (*Class, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Class.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClass sets the old Class of the mutation.
func withClass(node *Class) classOption {
	return func(m *ClassMutation) {
		m.oldValue = func(context.Context) (*Class, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClassMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClassMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClassMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClassMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Class.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *ClassMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *ClassMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *ClassMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *ClassMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ClassMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ClassMutation) ResetName() {
	m.name = nil
}

// SetHitDie sets the "hit_die" field.
func (m *ClassMutation) SetHitDie(i int) {
	m.hit_die = &i
	m.addhit_die = nil
}

// HitDie returns the value of the "hit_die" field in the mutation.
func (m *ClassMutation) HitDie() (r int, exists bool) {
	v := m.hit_die
	if v == nil {
		return
	}
	return *v, true
}

// OldHitDie returns the old "hit_die" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldHitDie(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHitDie is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHitDie requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHitDie: %w", err)
	}
	return oldValue.HitDie, nil
}

// AddHitDie adds i to the "hit_die" field.
func (m *ClassMutation) AddHitDie(i int) {
	if m.addhit_die != nil {
		*m.addhit_die += i
	} else {
		m.addhit_die = &i
	}
}

// AddedHitDie returns the value that was added to the "hit_die" field in this mutation.
func (m *ClassMutation) AddedHitDie() (r int, exists bool) {
	v := m.addhit_die
	if v == nil {
		return
	}
	return *v, true
}

// ResetHitDie resets all changes to the "hit_die" field.
func (m *ClassMutation) ResetHitDie() {
	m.hit_die = nil
	m.addhit_die = nil
}

// AddProficiencyIDs adds the "proficiencies" edge to the Proficiency entity by ids.
func (m *ClassMutation) AddProficiencyIDs(ids ...int) {
	if m.proficiencies == nil {
		m.proficiencies = make(map[int]struct{})
	}
	for i := range ids {
		m.proficiencies[ids[i]] = struct{}{}
	}
}

// ClearProficiencies clears the "proficiencies" edge to the Proficiency entity.
func (m *ClassMutation) ClearProficiencies() {
	m.clearedproficiencies = true
}

// ProficienciesCleared reports if the "proficiencies" edge to the Proficiency entity was cleared.
func (m *ClassMutation) ProficienciesCleared() bool {
	return m.clearedproficiencies
}

// RemoveProficiencyIDs removes the "proficiencies" edge to the Proficiency entity by IDs.
func (m *ClassMutation) RemoveProficiencyIDs(ids ...int) {
	if m.removedproficiencies == nil {
		m.removedproficiencies = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.proficiencies, ids[i])
		m.removedproficiencies[ids[i]] = struct{}{}
	}
}

// RemovedProficiencies returns the removed IDs of the "proficiencies" edge to the Proficiency entity.
func (m *ClassMutation) RemovedProficienciesIDs() (ids []int) {
	for id := range m.removedproficiencies {
		ids = append(ids, id)
	}
	return
}

// ProficienciesIDs returns the "proficiencies" edge IDs in the mutation.
func (m *ClassMutation) ProficienciesIDs() (ids []int) {
	for id := range m.proficiencies {
		ids = append(ids, id)
	}
	return
}

// ResetProficiencies resets all changes to the "proficiencies" edge.
func (m *ClassMutation) ResetProficiencies() {
	m.proficiencies = nil
	m.clearedproficiencies = false
	m.removedproficiencies = nil
}

// AddProficiencyChoiceIDs adds the "proficiency_choices" edge to the ProficiencyChoice entity by ids.
func (m *ClassMutation) AddProficiencyChoiceIDs(ids ...int) {
	if m.proficiency_choices == nil {
		m.proficiency_choices = make(map[int]struct{})
	}
	for i := range ids {
		m.proficiency_choices[ids[i]] = struct{}{}
	}
}

// ClearProficiencyChoices clears the "proficiency_choices" edge to the ProficiencyChoice entity.
func (m *ClassMutation) ClearProficiencyChoices() {
	m.clearedproficiency_choices = true
}

// ProficiencyChoicesCleared reports if the "proficiency_choices" edge to the ProficiencyChoice entity was cleared.
func (m *ClassMutation) ProficiencyChoicesCleared() bool {
	return m.clearedproficiency_choices
}

// RemoveProficiencyChoiceIDs removes the "proficiency_choices" edge to the ProficiencyChoice entity by IDs.
func (m *ClassMutation) RemoveProficiencyChoiceIDs(ids ...int) {
	if m.removedproficiency_choices == nil {
		m.removedproficiency_choices = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.proficiency_choices, ids[i])
		m.removedproficiency_choices[ids[i]] = struct{}{}
	}
}

// RemovedProficiencyChoices returns the removed IDs of the "proficiency_choices" edge to the ProficiencyChoice entity.
func (m *ClassMutation) RemovedProficiencyChoicesIDs() (ids []int) {
	for id := range m.removedproficiency_choices {
		ids = append(ids, id)
	}
	return
}

// ProficiencyChoicesIDs returns the "proficiency_choices" edge IDs in the mutation.
func (m *ClassMutation) ProficiencyChoicesIDs() (ids []int) {
	for id := range m.proficiency_choices {
		ids = append(ids, id)
	}
	return
}

// ResetProficiencyChoices resets all changes to the "proficiency_choices" edge.
func (m *ClassMutation) ResetProficiencyChoices() {
	m.proficiency_choices = nil
	m.clearedproficiency_choices = false
	m.removedproficiency_choices = nil
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by ids.
func (m *ClassMutation) AddEquipmentIDs(ids ...int) {
	if m.equipment == nil {
		m.equipment = make(map[int]struct{})
	}
	for i := range ids {
		m.equipment[ids[i]] = struct{}{}
	}
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *ClassMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *ClassMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// RemoveEquipmentIDs removes the "equipment" edge to the Equipment entity by IDs.
func (m *ClassMutation) RemoveEquipmentIDs(ids ...int) {
	if m.removedequipment == nil {
		m.removedequipment = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.equipment, ids[i])
		m.removedequipment[ids[i]] = struct{}{}
	}
}

// RemovedEquipment returns the removed IDs of the "equipment" edge to the Equipment entity.
func (m *ClassMutation) RemovedEquipmentIDs() (ids []int) {
	for id := range m.removedequipment {
		ids = append(ids, id)
	}
	return
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
func (m *ClassMutation) EquipmentIDs() (ids []int) {
	for id := range m.equipment {
		ids = append(ids, id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *ClassMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
	m.removedequipment = nil
}

// AddEquipmentChoiceIDs adds the "equipment_choices" edge to the EquipmentChoice entity by ids.
func (m *ClassMutation) AddEquipmentChoiceIDs(ids ...int) {
	if m.equipment_choices == nil {
		m.equipment_choices = make(map[int]struct{})
	}
	for i := range ids {
		m.equipment_choices[ids[i]] = struct{}{}
	}
}

// ClearEquipmentChoices clears the "equipment_choices" edge to the EquipmentChoice entity.
func (m *ClassMutation) ClearEquipmentChoices() {
	m.clearedequipment_choices = true
}

// EquipmentChoicesCleared reports if the "equipment_choices" edge to the EquipmentChoice entity was cleared.
func (m *ClassMutation) EquipmentChoicesCleared() bool {
	return m.clearedequipment_choices
}

// RemoveEquipmentChoiceIDs removes the "equipment_choices" edge to the EquipmentChoice entity by IDs.
func (m *ClassMutation) RemoveEquipmentChoiceIDs(ids ...int) {
	if m.removedequipment_choices == nil {
		m.removedequipment_choices = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.equipment_choices, ids[i])
		m.removedequipment_choices[ids[i]] = struct{}{}
	}
}

// RemovedEquipmentChoices returns the removed IDs of the "equipment_choices" edge to the EquipmentChoice entity.
func (m *ClassMutation) RemovedEquipmentChoicesIDs() (ids []int) {
	for id := range m.removedequipment_choices {
		ids = append(ids, id)
	}
	return
}

// EquipmentChoicesIDs returns the "equipment_choices" edge IDs in the mutation.
func (m *ClassMutation) EquipmentChoicesIDs() (ids []int) {
	for id := range m.equipment_choices {
		ids = append(ids, id)
	}
	return
}

// ResetEquipmentChoices resets all changes to the "equipment_choices" edge.
func (m *ClassMutation) ResetEquipmentChoices() {
	m.equipment_choices = nil
	m.clearedequipment_choices = false
	m.removedequipment_choices = nil
}

// Where appends a list predicates to the ClassMutation builder.
func (m *ClassMutation) Where(ps ...predicate.Class) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClassMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClassMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Class, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClassMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClassMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Class).
func (m *ClassMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClassMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, class.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, class.FieldName)
	}
	if m.hit_die != nil {
		fields = append(fields, class.FieldHitDie)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClassMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case class.FieldIndx:
		return m.Indx()
	case class.FieldName:
		return m.Name()
	case class.FieldHitDie:
		return m.HitDie()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClassMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case class.FieldIndx:
		return m.OldIndx(ctx)
	case class.FieldName:
		return m.OldName(ctx)
	case class.FieldHitDie:
		return m.OldHitDie(ctx)
	}
	return nil, fmt.Errorf("unknown Class field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassMutation) SetField(name string, value ent.Value) error {
	switch name {
	case class.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case class.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case class.FieldHitDie:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHitDie(v)
		return nil
	}
	return fmt.Errorf("unknown Class field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClassMutation) AddedFields() []string {
	var fields []string
	if m.addhit_die != nil {
		fields = append(fields, class.FieldHitDie)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClassMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case class.FieldHitDie:
		return m.AddedHitDie()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassMutation) AddField(name string, value ent.Value) error {
	switch name {
	case class.FieldHitDie:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHitDie(v)
		return nil
	}
	return fmt.Errorf("unknown Class numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClassMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClassMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClassMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Class nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClassMutation) ResetField(name string) error {
	switch name {
	case class.FieldIndx:
		m.ResetIndx()
		return nil
	case class.FieldName:
		m.ResetName()
		return nil
	case class.FieldHitDie:
		m.ResetHitDie()
		return nil
	}
	return fmt.Errorf("unknown Class field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClassMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.proficiencies != nil {
		edges = append(edges, class.EdgeProficiencies)
	}
	if m.proficiency_choices != nil {
		edges = append(edges, class.EdgeProficiencyChoices)
	}
	if m.equipment != nil {
		edges = append(edges, class.EdgeEquipment)
	}
	if m.equipment_choices != nil {
		edges = append(edges, class.EdgeEquipmentChoices)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClassMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case class.EdgeProficiencies:
		ids := make([]ent.Value, 0, len(m.proficiencies))
		for id := range m.proficiencies {
			ids = append(ids, id)
		}
		return ids
	case class.EdgeProficiencyChoices:
		ids := make([]ent.Value, 0, len(m.proficiency_choices))
		for id := range m.proficiency_choices {
			ids = append(ids, id)
		}
		return ids
	case class.EdgeEquipment:
		ids := make([]ent.Value, 0, len(m.equipment))
		for id := range m.equipment {
			ids = append(ids, id)
		}
		return ids
	case class.EdgeEquipmentChoices:
		ids := make([]ent.Value, 0, len(m.equipment_choices))
		for id := range m.equipment_choices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClassMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedproficiencies != nil {
		edges = append(edges, class.EdgeProficiencies)
	}
	if m.removedproficiency_choices != nil {
		edges = append(edges, class.EdgeProficiencyChoices)
	}
	if m.removedequipment != nil {
		edges = append(edges, class.EdgeEquipment)
	}
	if m.removedequipment_choices != nil {
		edges = append(edges, class.EdgeEquipmentChoices)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClassMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case class.EdgeProficiencies:
		ids := make([]ent.Value, 0, len(m.removedproficiencies))
		for id := range m.removedproficiencies {
			ids = append(ids, id)
		}
		return ids
	case class.EdgeProficiencyChoices:
		ids := make([]ent.Value, 0, len(m.removedproficiency_choices))
		for id := range m.removedproficiency_choices {
			ids = append(ids, id)
		}
		return ids
	case class.EdgeEquipment:
		ids := make([]ent.Value, 0, len(m.removedequipment))
		for id := range m.removedequipment {
			ids = append(ids, id)
		}
		return ids
	case class.EdgeEquipmentChoices:
		ids := make([]ent.Value, 0, len(m.removedequipment_choices))
		for id := range m.removedequipment_choices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClassMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedproficiencies {
		edges = append(edges, class.EdgeProficiencies)
	}
	if m.clearedproficiency_choices {
		edges = append(edges, class.EdgeProficiencyChoices)
	}
	if m.clearedequipment {
		edges = append(edges, class.EdgeEquipment)
	}
	if m.clearedequipment_choices {
		edges = append(edges, class.EdgeEquipmentChoices)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClassMutation) EdgeCleared(name string) bool {
	switch name {
	case class.EdgeProficiencies:
		return m.clearedproficiencies
	case class.EdgeProficiencyChoices:
		return m.clearedproficiency_choices
	case class.EdgeEquipment:
		return m.clearedequipment
	case class.EdgeEquipmentChoices:
		return m.clearedequipment_choices
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClassMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Class unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClassMutation) ResetEdge(name string) error {
	switch name {
	case class.EdgeProficiencies:
		m.ResetProficiencies()
		return nil
	case class.EdgeProficiencyChoices:
		m.ResetProficiencyChoices()
		return nil
	case class.EdgeEquipment:
		m.ResetEquipment()
		return nil
	case class.EdgeEquipmentChoices:
		m.ResetEquipmentChoices()
		return nil
	}
	return fmt.Errorf("unknown Class edge %s", name)
}

// ClassEquipmentMutation represents an operation that mutates the ClassEquipment nodes in the graph.
type ClassEquipmentMutation struct {
	config
	op               Op
	typ              string
	quantity         *int
	addquantity      *int
	clearedFields    map[string]struct{}
	class            *int
	clearedclass     bool
	equipment        *int
	clearedequipment bool
	done             bool
	oldValue         func(context.Context) (*ClassEquipment, error)
	predicates       []predicate.ClassEquipment
}

var _ ent.Mutation = (*ClassEquipmentMutation)(nil)

// classequipmentOption allows management of the mutation configuration using functional options.
type classequipmentOption func(*ClassEquipmentMutation)

// newClassEquipmentMutation creates new mutation for the ClassEquipment entity.
func newClassEquipmentMutation(c config, op Op, opts ...classequipmentOption) *ClassEquipmentMutation {
	m := &ClassEquipmentMutation{
		config:        c,
		op:            op,
		typ:           TypeClassEquipment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClassEquipmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClassEquipmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetClassID sets the "class_id" field.
func (m *ClassEquipmentMutation) SetClassID(i int) {
	m.class = &i
}

// ClassID returns the value of the "class_id" field in the mutation.
func (m *ClassEquipmentMutation) ClassID() (r int, exists bool) {
	v := m.class
	if v == nil {
		return
	}
	return *v, true
}

// ResetClassID resets all changes to the "class_id" field.
func (m *ClassEquipmentMutation) ResetClassID() {
	m.class = nil
}

// SetEquipmentID sets the "equipment_id" field.
func (m *ClassEquipmentMutation) SetEquipmentID(i int) {
	m.equipment = &i
}

// EquipmentID returns the value of the "equipment_id" field in the mutation.
func (m *ClassEquipmentMutation) EquipmentID() (r int, exists bool) {
	v := m.equipment
	if v == nil {
		return
	}
	return *v, true
}

// ResetEquipmentID resets all changes to the "equipment_id" field.
func (m *ClassEquipmentMutation) ResetEquipmentID() {
	m.equipment = nil
}

// SetQuantity sets the "quantity" field.
func (m *ClassEquipmentMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *ClassEquipmentMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// AddQuantity adds i to the "quantity" field.
func (m *ClassEquipmentMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *ClassEquipmentMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *ClassEquipmentMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// ClearClass clears the "class" edge to the Class entity.
func (m *ClassEquipmentMutation) ClearClass() {
	m.clearedclass = true
}

// ClassCleared reports if the "class" edge to the Class entity was cleared.
func (m *ClassEquipmentMutation) ClassCleared() bool {
	return m.clearedclass
}

// ClassIDs returns the "class" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ClassID instead. It exists only for internal usage by the builders.
func (m *ClassEquipmentMutation) ClassIDs() (ids []int) {
	if id := m.class; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClass resets all changes to the "class" edge.
func (m *ClassEquipmentMutation) ResetClass() {
	m.class = nil
	m.clearedclass = false
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *ClassEquipmentMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *ClassEquipmentMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EquipmentID instead. It exists only for internal usage by the builders.
func (m *ClassEquipmentMutation) EquipmentIDs() (ids []int) {
	if id := m.equipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *ClassEquipmentMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
}

// Where appends a list predicates to the ClassEquipmentMutation builder.
func (m *ClassEquipmentMutation) Where(ps ...predicate.ClassEquipment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClassEquipmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClassEquipmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ClassEquipment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClassEquipmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClassEquipmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ClassEquipment).
func (m *ClassEquipmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClassEquipmentMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.class != nil {
		fields = append(fields, classequipment.FieldClassID)
	}
	if m.equipment != nil {
		fields = append(fields, classequipment.FieldEquipmentID)
	}
	if m.quantity != nil {
		fields = append(fields, classequipment.FieldQuantity)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClassEquipmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case classequipment.FieldClassID:
		return m.ClassID()
	case classequipment.FieldEquipmentID:
		return m.EquipmentID()
	case classequipment.FieldQuantity:
		return m.Quantity()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClassEquipmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema ClassEquipment does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassEquipmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case classequipment.FieldClassID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClassID(v)
		return nil
	case classequipment.FieldEquipmentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipmentID(v)
		return nil
	case classequipment.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown ClassEquipment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClassEquipmentMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, classequipment.FieldQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClassEquipmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case classequipment.FieldQuantity:
		return m.AddedQuantity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassEquipmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case classequipment.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown ClassEquipment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClassEquipmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClassEquipmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClassEquipmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ClassEquipment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClassEquipmentMutation) ResetField(name string) error {
	switch name {
	case classequipment.FieldClassID:
		m.ResetClassID()
		return nil
	case classequipment.FieldEquipmentID:
		m.ResetEquipmentID()
		return nil
	case classequipment.FieldQuantity:
		m.ResetQuantity()
		return nil
	}
	return fmt.Errorf("unknown ClassEquipment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClassEquipmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.class != nil {
		edges = append(edges, classequipment.EdgeClass)
	}
	if m.equipment != nil {
		edges = append(edges, classequipment.EdgeEquipment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClassEquipmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case classequipment.EdgeClass:
		if id := m.class; id != nil {
			return []ent.Value{*id}
		}
	case classequipment.EdgeEquipment:
		if id := m.equipment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClassEquipmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClassEquipmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClassEquipmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedclass {
		edges = append(edges, classequipment.EdgeClass)
	}
	if m.clearedequipment {
		edges = append(edges, classequipment.EdgeEquipment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClassEquipmentMutation) EdgeCleared(name string) bool {
	switch name {
	case classequipment.EdgeClass:
		return m.clearedclass
	case classequipment.EdgeEquipment:
		return m.clearedequipment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClassEquipmentMutation) ClearEdge(name string) error {
	switch name {
	case classequipment.EdgeClass:
		m.ClearClass()
		return nil
	case classequipment.EdgeEquipment:
		m.ClearEquipment()
		return nil
	}
	return fmt.Errorf("unknown ClassEquipment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClassEquipmentMutation) ResetEdge(name string) error {
	switch name {
	case classequipment.EdgeClass:
		m.ResetClass()
		return nil
	case classequipment.EdgeEquipment:
		m.ResetEquipment()
		return nil
	}
	return fmt.Errorf("unknown ClassEquipment edge %s", name)
}

// CoinMutation represents an operation that mutates the Coin nodes in the graph.
type CoinMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	indx                    *string
	desc                    *string
	gold_conversion_rate    *float64
	addgold_conversion_rate *float64
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*Coin, error)
	predicates              []predicate.Coin
}

var _ ent.Mutation = (*CoinMutation)(nil)

// coinOption allows management of the mutation configuration using functional options.
type coinOption func(*CoinMutation)

// newCoinMutation creates new mutation for the Coin entity.
func newCoinMutation(c config, op Op, opts ...coinOption) *CoinMutation {
	m := &CoinMutation{
		config:        c,
		op:            op,
		typ:           TypeCoin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinID sets the ID field of the mutation.
func withCoinID(id int) coinOption {
	return func(m *CoinMutation) {
		var (
			err   error
			once  sync.Once
			value *Coin
		)
		m.oldValue = func(ctx context.Context) (*Coin, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Coin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoin sets the old Coin of the mutation.
func withCoin(node *Coin) coinOption {
	return func(m *CoinMutation) {
		m.oldValue = func(context.Context) (*Coin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoinMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Coin.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *CoinMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *CoinMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Coin entity.
// If the Coin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *CoinMutation) ResetIndx() {
	m.indx = nil
}

// SetDesc sets the "desc" field.
func (m *CoinMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *CoinMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the Coin entity.
// If the Coin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *CoinMutation) ResetDesc() {
	m.desc = nil
}

// SetGoldConversionRate sets the "gold_conversion_rate" field.
func (m *CoinMutation) SetGoldConversionRate(f float64) {
	m.gold_conversion_rate = &f
	m.addgold_conversion_rate = nil
}

// GoldConversionRate returns the value of the "gold_conversion_rate" field in the mutation.
func (m *CoinMutation) GoldConversionRate() (r float64, exists bool) {
	v := m.gold_conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldGoldConversionRate returns the old "gold_conversion_rate" field's value of the Coin entity.
// If the Coin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinMutation) OldGoldConversionRate(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoldConversionRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoldConversionRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoldConversionRate: %w", err)
	}
	return oldValue.GoldConversionRate, nil
}

// AddGoldConversionRate adds f to the "gold_conversion_rate" field.
func (m *CoinMutation) AddGoldConversionRate(f float64) {
	if m.addgold_conversion_rate != nil {
		*m.addgold_conversion_rate += f
	} else {
		m.addgold_conversion_rate = &f
	}
}

// AddedGoldConversionRate returns the value that was added to the "gold_conversion_rate" field in this mutation.
func (m *CoinMutation) AddedGoldConversionRate() (r float64, exists bool) {
	v := m.addgold_conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// ResetGoldConversionRate resets all changes to the "gold_conversion_rate" field.
func (m *CoinMutation) ResetGoldConversionRate() {
	m.gold_conversion_rate = nil
	m.addgold_conversion_rate = nil
}

// Where appends a list predicates to the CoinMutation builder.
func (m *CoinMutation) Where(ps ...predicate.Coin) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CoinMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CoinMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Coin, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CoinMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CoinMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Coin).
func (m *CoinMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, coin.FieldIndx)
	}
	if m.desc != nil {
		fields = append(fields, coin.FieldDesc)
	}
	if m.gold_conversion_rate != nil {
		fields = append(fields, coin.FieldGoldConversionRate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coin.FieldIndx:
		return m.Indx()
	case coin.FieldDesc:
		return m.Desc()
	case coin.FieldGoldConversionRate:
		return m.GoldConversionRate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coin.FieldIndx:
		return m.OldIndx(ctx)
	case coin.FieldDesc:
		return m.OldDesc(ctx)
	case coin.FieldGoldConversionRate:
		return m.OldGoldConversionRate(ctx)
	}
	return nil, fmt.Errorf("unknown Coin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coin.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case coin.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	case coin.FieldGoldConversionRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoldConversionRate(v)
		return nil
	}
	return fmt.Errorf("unknown Coin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinMutation) AddedFields() []string {
	var fields []string
	if m.addgold_conversion_rate != nil {
		fields = append(fields, coin.FieldGoldConversionRate)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coin.FieldGoldConversionRate:
		return m.AddedGoldConversionRate()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coin.FieldGoldConversionRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGoldConversionRate(v)
		return nil
	}
	return fmt.Errorf("unknown Coin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Coin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinMutation) ResetField(name string) error {
	switch name {
	case coin.FieldIndx:
		m.ResetIndx()
		return nil
	case coin.FieldDesc:
		m.ResetDesc()
		return nil
	case coin.FieldGoldConversionRate:
		m.ResetGoldConversionRate()
		return nil
	}
	return fmt.Errorf("unknown Coin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Coin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Coin edge %s", name)
}

// DamageTypeMutation represents an operation that mutates the DamageType nodes in the graph.
type DamageTypeMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	indx                 *string
	name                 *string
	desc                 *[]string
	appenddesc           []string
	clearedFields        map[string]struct{}
	weapon_damage        map[int]struct{}
	removedweapon_damage map[int]struct{}
	clearedweapon_damage bool
	done                 bool
	oldValue             func(context.Context) (*DamageType, error)
	predicates           []predicate.DamageType
}

var _ ent.Mutation = (*DamageTypeMutation)(nil)

// damagetypeOption allows management of the mutation configuration using functional options.
type damagetypeOption func(*DamageTypeMutation)

// newDamageTypeMutation creates new mutation for the DamageType entity.
func newDamageTypeMutation(c config, op Op, opts ...damagetypeOption) *DamageTypeMutation {
	m := &DamageTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeDamageType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDamageTypeID sets the ID field of the mutation.
func withDamageTypeID(id int) damagetypeOption {
	return func(m *DamageTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *DamageType
		)
		m.oldValue = func(ctx context.Context) (*DamageType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DamageType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDamageType sets the old DamageType of the mutation.
func withDamageType(node *DamageType) damagetypeOption {
	return func(m *DamageTypeMutation) {
		m.oldValue = func(context.Context) (*DamageType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DamageTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DamageTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DamageTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DamageTypeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DamageType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *DamageTypeMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *DamageTypeMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the DamageType entity.
// If the DamageType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DamageTypeMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *DamageTypeMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *DamageTypeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DamageTypeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DamageType entity.
// If the DamageType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DamageTypeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DamageTypeMutation) ResetName() {
	m.name = nil
}

// SetDesc sets the "desc" field.
func (m *DamageTypeMutation) SetDesc(s []string) {
	m.desc = &s
	m.appenddesc = nil
}

// Desc returns the value of the "desc" field in the mutation.
func (m *DamageTypeMutation) Desc() (r []string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the DamageType entity.
// If the DamageType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DamageTypeMutation) OldDesc(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// AppendDesc adds s to the "desc" field.
func (m *DamageTypeMutation) AppendDesc(s []string) {
	m.appenddesc = append(m.appenddesc, s...)
}

// AppendedDesc returns the list of values that were appended to the "desc" field in this mutation.
func (m *DamageTypeMutation) AppendedDesc() ([]string, bool) {
	if len(m.appenddesc) == 0 {
		return nil, false
	}
	return m.appenddesc, true
}

// ResetDesc resets all changes to the "desc" field.
func (m *DamageTypeMutation) ResetDesc() {
	m.desc = nil
	m.appenddesc = nil
}

// AddWeaponDamageIDs adds the "weapon_damage" edge to the WeaponDamage entity by ids.
func (m *DamageTypeMutation) AddWeaponDamageIDs(ids ...int) {
	if m.weapon_damage == nil {
		m.weapon_damage = make(map[int]struct{})
	}
	for i := range ids {
		m.weapon_damage[ids[i]] = struct{}{}
	}
}

// ClearWeaponDamage clears the "weapon_damage" edge to the WeaponDamage entity.
func (m *DamageTypeMutation) ClearWeaponDamage() {
	m.clearedweapon_damage = true
}

// WeaponDamageCleared reports if the "weapon_damage" edge to the WeaponDamage entity was cleared.
func (m *DamageTypeMutation) WeaponDamageCleared() bool {
	return m.clearedweapon_damage
}

// RemoveWeaponDamageIDs removes the "weapon_damage" edge to the WeaponDamage entity by IDs.
func (m *DamageTypeMutation) RemoveWeaponDamageIDs(ids ...int) {
	if m.removedweapon_damage == nil {
		m.removedweapon_damage = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.weapon_damage, ids[i])
		m.removedweapon_damage[ids[i]] = struct{}{}
	}
}

// RemovedWeaponDamage returns the removed IDs of the "weapon_damage" edge to the WeaponDamage entity.
func (m *DamageTypeMutation) RemovedWeaponDamageIDs() (ids []int) {
	for id := range m.removedweapon_damage {
		ids = append(ids, id)
	}
	return
}

// WeaponDamageIDs returns the "weapon_damage" edge IDs in the mutation.
func (m *DamageTypeMutation) WeaponDamageIDs() (ids []int) {
	for id := range m.weapon_damage {
		ids = append(ids, id)
	}
	return
}

// ResetWeaponDamage resets all changes to the "weapon_damage" edge.
func (m *DamageTypeMutation) ResetWeaponDamage() {
	m.weapon_damage = nil
	m.clearedweapon_damage = false
	m.removedweapon_damage = nil
}

// Where appends a list predicates to the DamageTypeMutation builder.
func (m *DamageTypeMutation) Where(ps ...predicate.DamageType) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DamageTypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DamageTypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DamageType, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DamageTypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DamageTypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DamageType).
func (m *DamageTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DamageTypeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, damagetype.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, damagetype.FieldName)
	}
	if m.desc != nil {
		fields = append(fields, damagetype.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DamageTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case damagetype.FieldIndx:
		return m.Indx()
	case damagetype.FieldName:
		return m.Name()
	case damagetype.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DamageTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case damagetype.FieldIndx:
		return m.OldIndx(ctx)
	case damagetype.FieldName:
		return m.OldName(ctx)
	case damagetype.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown DamageType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DamageTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case damagetype.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case damagetype.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case damagetype.FieldDesc:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown DamageType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DamageTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DamageTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DamageTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DamageType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DamageTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DamageTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DamageTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DamageType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DamageTypeMutation) ResetField(name string) error {
	switch name {
	case damagetype.FieldIndx:
		m.ResetIndx()
		return nil
	case damagetype.FieldName:
		m.ResetName()
		return nil
	case damagetype.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown DamageType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DamageTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.weapon_damage != nil {
		edges = append(edges, damagetype.EdgeWeaponDamage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DamageTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case damagetype.EdgeWeaponDamage:
		ids := make([]ent.Value, 0, len(m.weapon_damage))
		for id := range m.weapon_damage {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DamageTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedweapon_damage != nil {
		edges = append(edges, damagetype.EdgeWeaponDamage)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DamageTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case damagetype.EdgeWeaponDamage:
		ids := make([]ent.Value, 0, len(m.removedweapon_damage))
		for id := range m.removedweapon_damage {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DamageTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedweapon_damage {
		edges = append(edges, damagetype.EdgeWeaponDamage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DamageTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case damagetype.EdgeWeaponDamage:
		return m.clearedweapon_damage
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DamageTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown DamageType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DamageTypeMutation) ResetEdge(name string) error {
	switch name {
	case damagetype.EdgeWeaponDamage:
		m.ResetWeaponDamage()
		return nil
	}
	return fmt.Errorf("unknown DamageType edge %s", name)
}

// EquipmentMutation represents an operation that mutates the Equipment nodes in the graph.
type EquipmentMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	indx                  *string
	name                  *string
	equipment_category    *equipment.EquipmentCategory
	equipment_subcategory *string
	clearedFields         map[string]struct{}
	cost                  *int
	clearedcost           bool
	weapon                *int
	clearedweapon         bool
	armor                 *int
	clearedarmor          bool
	gear                  *int
	clearedgear           bool
	tool                  *int
	clearedtool           bool
	vehicle               *int
	clearedvehicle        bool
	class                 map[int]struct{}
	removedclass          map[int]struct{}
	clearedclass          bool
	choice                map[int]struct{}
	removedchoice         map[int]struct{}
	clearedchoice         bool
	done                  bool
	oldValue              func(context.Context) (*Equipment, error)
	predicates            []predicate.Equipment
}

var _ ent.Mutation = (*EquipmentMutation)(nil)

// equipmentOption allows management of the mutation configuration using functional options.
type equipmentOption func(*EquipmentMutation)

// newEquipmentMutation creates new mutation for the Equipment entity.
func newEquipmentMutation(c config, op Op, opts ...equipmentOption) *EquipmentMutation {
	m := &EquipmentMutation{
		config:        c,
		op:            op,
		typ:           TypeEquipment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEquipmentID sets the ID field of the mutation.
func withEquipmentID(id int) equipmentOption {
	return func(m *EquipmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Equipment
		)
		m.oldValue = func(ctx context.Context) (*Equipment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Equipment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEquipment sets the old Equipment of the mutation.
func withEquipment(node *Equipment) equipmentOption {
	return func(m *EquipmentMutation) {
		m.oldValue = func(context.Context) (*Equipment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EquipmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EquipmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EquipmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EquipmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Equipment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *EquipmentMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *EquipmentMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *EquipmentMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *EquipmentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EquipmentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EquipmentMutation) ResetName() {
	m.name = nil
}

// SetEquipmentCategory sets the "equipment_category" field.
func (m *EquipmentMutation) SetEquipmentCategory(ec equipment.EquipmentCategory) {
	m.equipment_category = &ec
}

// EquipmentCategory returns the value of the "equipment_category" field in the mutation.
func (m *EquipmentMutation) EquipmentCategory() (r equipment.EquipmentCategory, exists bool) {
	v := m.equipment_category
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipmentCategory returns the old "equipment_category" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldEquipmentCategory(ctx context.Context) (v equipment.EquipmentCategory, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquipmentCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquipmentCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipmentCategory: %w", err)
	}
	return oldValue.EquipmentCategory, nil
}

// ResetEquipmentCategory resets all changes to the "equipment_category" field.
func (m *EquipmentMutation) ResetEquipmentCategory() {
	m.equipment_category = nil
}

// SetEquipmentSubcategory sets the "equipment_subcategory" field.
func (m *EquipmentMutation) SetEquipmentSubcategory(s string) {
	m.equipment_subcategory = &s
}

// EquipmentSubcategory returns the value of the "equipment_subcategory" field in the mutation.
func (m *EquipmentMutation) EquipmentSubcategory() (r string, exists bool) {
	v := m.equipment_subcategory
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipmentSubcategory returns the old "equipment_subcategory" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldEquipmentSubcategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquipmentSubcategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquipmentSubcategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipmentSubcategory: %w", err)
	}
	return oldValue.EquipmentSubcategory, nil
}

// ClearEquipmentSubcategory clears the value of the "equipment_subcategory" field.
func (m *EquipmentMutation) ClearEquipmentSubcategory() {
	m.equipment_subcategory = nil
	m.clearedFields[equipment.FieldEquipmentSubcategory] = struct{}{}
}

// EquipmentSubcategoryCleared returns if the "equipment_subcategory" field was cleared in this mutation.
func (m *EquipmentMutation) EquipmentSubcategoryCleared() bool {
	_, ok := m.clearedFields[equipment.FieldEquipmentSubcategory]
	return ok
}

// ResetEquipmentSubcategory resets all changes to the "equipment_subcategory" field.
func (m *EquipmentMutation) ResetEquipmentSubcategory() {
	m.equipment_subcategory = nil
	delete(m.clearedFields, equipment.FieldEquipmentSubcategory)
}

// SetCostID sets the "cost" edge to the EquipmentCost entity by id.
func (m *EquipmentMutation) SetCostID(id int) {
	m.cost = &id
}

// ClearCost clears the "cost" edge to the EquipmentCost entity.
func (m *EquipmentMutation) ClearCost() {
	m.clearedcost = true
}

// CostCleared reports if the "cost" edge to the EquipmentCost entity was cleared.
func (m *EquipmentMutation) CostCleared() bool {
	return m.clearedcost
}

// CostID returns the "cost" edge ID in the mutation.
func (m *EquipmentMutation) CostID() (id int, exists bool) {
	if m.cost != nil {
		return *m.cost, true
	}
	return
}

// CostIDs returns the "cost" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CostID instead. It exists only for internal usage by the builders.
func (m *EquipmentMutation) CostIDs() (ids []int) {
	if id := m.cost; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCost resets all changes to the "cost" edge.
func (m *EquipmentMutation) ResetCost() {
	m.cost = nil
	m.clearedcost = false
}

// SetWeaponID sets the "weapon" edge to the Weapon entity by id.
func (m *EquipmentMutation) SetWeaponID(id int) {
	m.weapon = &id
}

// ClearWeapon clears the "weapon" edge to the Weapon entity.
func (m *EquipmentMutation) ClearWeapon() {
	m.clearedweapon = true
}

// WeaponCleared reports if the "weapon" edge to the Weapon entity was cleared.
func (m *EquipmentMutation) WeaponCleared() bool {
	return m.clearedweapon
}

// WeaponID returns the "weapon" edge ID in the mutation.
func (m *EquipmentMutation) WeaponID() (id int, exists bool) {
	if m.weapon != nil {
		return *m.weapon, true
	}
	return
}

// WeaponIDs returns the "weapon" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WeaponID instead. It exists only for internal usage by the builders.
func (m *EquipmentMutation) WeaponIDs() (ids []int) {
	if id := m.weapon; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWeapon resets all changes to the "weapon" edge.
func (m *EquipmentMutation) ResetWeapon() {
	m.weapon = nil
	m.clearedweapon = false
}

// SetArmorID sets the "armor" edge to the Armor entity by id.
func (m *EquipmentMutation) SetArmorID(id int) {
	m.armor = &id
}

// ClearArmor clears the "armor" edge to the Armor entity.
func (m *EquipmentMutation) ClearArmor() {
	m.clearedarmor = true
}

// ArmorCleared reports if the "armor" edge to the Armor entity was cleared.
func (m *EquipmentMutation) ArmorCleared() bool {
	return m.clearedarmor
}

// ArmorID returns the "armor" edge ID in the mutation.
func (m *EquipmentMutation) ArmorID() (id int, exists bool) {
	if m.armor != nil {
		return *m.armor, true
	}
	return
}

// ArmorIDs returns the "armor" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ArmorID instead. It exists only for internal usage by the builders.
func (m *EquipmentMutation) ArmorIDs() (ids []int) {
	if id := m.armor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetArmor resets all changes to the "armor" edge.
func (m *EquipmentMutation) ResetArmor() {
	m.armor = nil
	m.clearedarmor = false
}

// SetGearID sets the "gear" edge to the Gear entity by id.
func (m *EquipmentMutation) SetGearID(id int) {
	m.gear = &id
}

// ClearGear clears the "gear" edge to the Gear entity.
func (m *EquipmentMutation) ClearGear() {
	m.clearedgear = true
}

// GearCleared reports if the "gear" edge to the Gear entity was cleared.
func (m *EquipmentMutation) GearCleared() bool {
	return m.clearedgear
}

// GearID returns the "gear" edge ID in the mutation.
func (m *EquipmentMutation) GearID() (id int, exists bool) {
	if m.gear != nil {
		return *m.gear, true
	}
	return
}

// GearIDs returns the "gear" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GearID instead. It exists only for internal usage by the builders.
func (m *EquipmentMutation) GearIDs() (ids []int) {
	if id := m.gear; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGear resets all changes to the "gear" edge.
func (m *EquipmentMutation) ResetGear() {
	m.gear = nil
	m.clearedgear = false
}

// SetToolID sets the "tool" edge to the Tool entity by id.
func (m *EquipmentMutation) SetToolID(id int) {
	m.tool = &id
}

// ClearTool clears the "tool" edge to the Tool entity.
func (m *EquipmentMutation) ClearTool() {
	m.clearedtool = true
}

// ToolCleared reports if the "tool" edge to the Tool entity was cleared.
func (m *EquipmentMutation) ToolCleared() bool {
	return m.clearedtool
}

// ToolID returns the "tool" edge ID in the mutation.
func (m *EquipmentMutation) ToolID() (id int, exists bool) {
	if m.tool != nil {
		return *m.tool, true
	}
	return
}

// ToolIDs returns the "tool" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ToolID instead. It exists only for internal usage by the builders.
func (m *EquipmentMutation) ToolIDs() (ids []int) {
	if id := m.tool; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTool resets all changes to the "tool" edge.
func (m *EquipmentMutation) ResetTool() {
	m.tool = nil
	m.clearedtool = false
}

// SetVehicleID sets the "vehicle" edge to the Vehicle entity by id.
func (m *EquipmentMutation) SetVehicleID(id int) {
	m.vehicle = &id
}

// ClearVehicle clears the "vehicle" edge to the Vehicle entity.
func (m *EquipmentMutation) ClearVehicle() {
	m.clearedvehicle = true
}

// VehicleCleared reports if the "vehicle" edge to the Vehicle entity was cleared.
func (m *EquipmentMutation) VehicleCleared() bool {
	return m.clearedvehicle
}

// VehicleID returns the "vehicle" edge ID in the mutation.
func (m *EquipmentMutation) VehicleID() (id int, exists bool) {
	if m.vehicle != nil {
		return *m.vehicle, true
	}
	return
}

// VehicleIDs returns the "vehicle" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VehicleID instead. It exists only for internal usage by the builders.
func (m *EquipmentMutation) VehicleIDs() (ids []int) {
	if id := m.vehicle; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVehicle resets all changes to the "vehicle" edge.
func (m *EquipmentMutation) ResetVehicle() {
	m.vehicle = nil
	m.clearedvehicle = false
}

// AddClasIDs adds the "class" edge to the Class entity by ids.
func (m *EquipmentMutation) AddClasIDs(ids ...int) {
	if m.class == nil {
		m.class = make(map[int]struct{})
	}
	for i := range ids {
		m.class[ids[i]] = struct{}{}
	}
}

// ClearClass clears the "class" edge to the Class entity.
func (m *EquipmentMutation) ClearClass() {
	m.clearedclass = true
}

// ClassCleared reports if the "class" edge to the Class entity was cleared.
func (m *EquipmentMutation) ClassCleared() bool {
	return m.clearedclass
}

// RemoveClasIDs removes the "class" edge to the Class entity by IDs.
func (m *EquipmentMutation) RemoveClasIDs(ids ...int) {
	if m.removedclass == nil {
		m.removedclass = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.class, ids[i])
		m.removedclass[ids[i]] = struct{}{}
	}
}

// RemovedClass returns the removed IDs of the "class" edge to the Class entity.
func (m *EquipmentMutation) RemovedClassIDs() (ids []int) {
	for id := range m.removedclass {
		ids = append(ids, id)
	}
	return
}

// ClassIDs returns the "class" edge IDs in the mutation.
func (m *EquipmentMutation) ClassIDs() (ids []int) {
	for id := range m.class {
		ids = append(ids, id)
	}
	return
}

// ResetClass resets all changes to the "class" edge.
func (m *EquipmentMutation) ResetClass() {
	m.class = nil
	m.clearedclass = false
	m.removedclass = nil
}

// AddChoiceIDs adds the "choice" edge to the EquipmentChoice entity by ids.
func (m *EquipmentMutation) AddChoiceIDs(ids ...int) {
	if m.choice == nil {
		m.choice = make(map[int]struct{})
	}
	for i := range ids {
		m.choice[ids[i]] = struct{}{}
	}
}

// ClearChoice clears the "choice" edge to the EquipmentChoice entity.
func (m *EquipmentMutation) ClearChoice() {
	m.clearedchoice = true
}

// ChoiceCleared reports if the "choice" edge to the EquipmentChoice entity was cleared.
func (m *EquipmentMutation) ChoiceCleared() bool {
	return m.clearedchoice
}

// RemoveChoiceIDs removes the "choice" edge to the EquipmentChoice entity by IDs.
func (m *EquipmentMutation) RemoveChoiceIDs(ids ...int) {
	if m.removedchoice == nil {
		m.removedchoice = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.choice, ids[i])
		m.removedchoice[ids[i]] = struct{}{}
	}
}

// RemovedChoice returns the removed IDs of the "choice" edge to the EquipmentChoice entity.
func (m *EquipmentMutation) RemovedChoiceIDs() (ids []int) {
	for id := range m.removedchoice {
		ids = append(ids, id)
	}
	return
}

// ChoiceIDs returns the "choice" edge IDs in the mutation.
func (m *EquipmentMutation) ChoiceIDs() (ids []int) {
	for id := range m.choice {
		ids = append(ids, id)
	}
	return
}

// ResetChoice resets all changes to the "choice" edge.
func (m *EquipmentMutation) ResetChoice() {
	m.choice = nil
	m.clearedchoice = false
	m.removedchoice = nil
}

// Where appends a list predicates to the EquipmentMutation builder.
func (m *EquipmentMutation) Where(ps ...predicate.Equipment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EquipmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EquipmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Equipment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EquipmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EquipmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Equipment).
func (m *EquipmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EquipmentMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.indx != nil {
		fields = append(fields, equipment.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, equipment.FieldName)
	}
	if m.equipment_category != nil {
		fields = append(fields, equipment.FieldEquipmentCategory)
	}
	if m.equipment_subcategory != nil {
		fields = append(fields, equipment.FieldEquipmentSubcategory)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EquipmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case equipment.FieldIndx:
		return m.Indx()
	case equipment.FieldName:
		return m.Name()
	case equipment.FieldEquipmentCategory:
		return m.EquipmentCategory()
	case equipment.FieldEquipmentSubcategory:
		return m.EquipmentSubcategory()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EquipmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case equipment.FieldIndx:
		return m.OldIndx(ctx)
	case equipment.FieldName:
		return m.OldName(ctx)
	case equipment.FieldEquipmentCategory:
		return m.OldEquipmentCategory(ctx)
	case equipment.FieldEquipmentSubcategory:
		return m.OldEquipmentSubcategory(ctx)
	}
	return nil, fmt.Errorf("unknown Equipment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EquipmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case equipment.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case equipment.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case equipment.FieldEquipmentCategory:
		v, ok := value.(equipment.EquipmentCategory)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipmentCategory(v)
		return nil
	case equipment.FieldEquipmentSubcategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipmentSubcategory(v)
		return nil
	}
	return fmt.Errorf("unknown Equipment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EquipmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EquipmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EquipmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Equipment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EquipmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(equipment.FieldEquipmentSubcategory) {
		fields = append(fields, equipment.FieldEquipmentSubcategory)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EquipmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EquipmentMutation) ClearField(name string) error {
	switch name {
	case equipment.FieldEquipmentSubcategory:
		m.ClearEquipmentSubcategory()
		return nil
	}
	return fmt.Errorf("unknown Equipment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EquipmentMutation) ResetField(name string) error {
	switch name {
	case equipment.FieldIndx:
		m.ResetIndx()
		return nil
	case equipment.FieldName:
		m.ResetName()
		return nil
	case equipment.FieldEquipmentCategory:
		m.ResetEquipmentCategory()
		return nil
	case equipment.FieldEquipmentSubcategory:
		m.ResetEquipmentSubcategory()
		return nil
	}
	return fmt.Errorf("unknown Equipment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EquipmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.cost != nil {
		edges = append(edges, equipment.EdgeCost)
	}
	if m.weapon != nil {
		edges = append(edges, equipment.EdgeWeapon)
	}
	if m.armor != nil {
		edges = append(edges, equipment.EdgeArmor)
	}
	if m.gear != nil {
		edges = append(edges, equipment.EdgeGear)
	}
	if m.tool != nil {
		edges = append(edges, equipment.EdgeTool)
	}
	if m.vehicle != nil {
		edges = append(edges, equipment.EdgeVehicle)
	}
	if m.class != nil {
		edges = append(edges, equipment.EdgeClass)
	}
	if m.choice != nil {
		edges = append(edges, equipment.EdgeChoice)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EquipmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case equipment.EdgeCost:
		if id := m.cost; id != nil {
			return []ent.Value{*id}
		}
	case equipment.EdgeWeapon:
		if id := m.weapon; id != nil {
			return []ent.Value{*id}
		}
	case equipment.EdgeArmor:
		if id := m.armor; id != nil {
			return []ent.Value{*id}
		}
	case equipment.EdgeGear:
		if id := m.gear; id != nil {
			return []ent.Value{*id}
		}
	case equipment.EdgeTool:
		if id := m.tool; id != nil {
			return []ent.Value{*id}
		}
	case equipment.EdgeVehicle:
		if id := m.vehicle; id != nil {
			return []ent.Value{*id}
		}
	case equipment.EdgeClass:
		ids := make([]ent.Value, 0, len(m.class))
		for id := range m.class {
			ids = append(ids, id)
		}
		return ids
	case equipment.EdgeChoice:
		ids := make([]ent.Value, 0, len(m.choice))
		for id := range m.choice {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EquipmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	if m.removedclass != nil {
		edges = append(edges, equipment.EdgeClass)
	}
	if m.removedchoice != nil {
		edges = append(edges, equipment.EdgeChoice)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EquipmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case equipment.EdgeClass:
		ids := make([]ent.Value, 0, len(m.removedclass))
		for id := range m.removedclass {
			ids = append(ids, id)
		}
		return ids
	case equipment.EdgeChoice:
		ids := make([]ent.Value, 0, len(m.removedchoice))
		for id := range m.removedchoice {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EquipmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.clearedcost {
		edges = append(edges, equipment.EdgeCost)
	}
	if m.clearedweapon {
		edges = append(edges, equipment.EdgeWeapon)
	}
	if m.clearedarmor {
		edges = append(edges, equipment.EdgeArmor)
	}
	if m.clearedgear {
		edges = append(edges, equipment.EdgeGear)
	}
	if m.clearedtool {
		edges = append(edges, equipment.EdgeTool)
	}
	if m.clearedvehicle {
		edges = append(edges, equipment.EdgeVehicle)
	}
	if m.clearedclass {
		edges = append(edges, equipment.EdgeClass)
	}
	if m.clearedchoice {
		edges = append(edges, equipment.EdgeChoice)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EquipmentMutation) EdgeCleared(name string) bool {
	switch name {
	case equipment.EdgeCost:
		return m.clearedcost
	case equipment.EdgeWeapon:
		return m.clearedweapon
	case equipment.EdgeArmor:
		return m.clearedarmor
	case equipment.EdgeGear:
		return m.clearedgear
	case equipment.EdgeTool:
		return m.clearedtool
	case equipment.EdgeVehicle:
		return m.clearedvehicle
	case equipment.EdgeClass:
		return m.clearedclass
	case equipment.EdgeChoice:
		return m.clearedchoice
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EquipmentMutation) ClearEdge(name string) error {
	switch name {
	case equipment.EdgeCost:
		m.ClearCost()
		return nil
	case equipment.EdgeWeapon:
		m.ClearWeapon()
		return nil
	case equipment.EdgeArmor:
		m.ClearArmor()
		return nil
	case equipment.EdgeGear:
		m.ClearGear()
		return nil
	case equipment.EdgeTool:
		m.ClearTool()
		return nil
	case equipment.EdgeVehicle:
		m.ClearVehicle()
		return nil
	}
	return fmt.Errorf("unknown Equipment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EquipmentMutation) ResetEdge(name string) error {
	switch name {
	case equipment.EdgeCost:
		m.ResetCost()
		return nil
	case equipment.EdgeWeapon:
		m.ResetWeapon()
		return nil
	case equipment.EdgeArmor:
		m.ResetArmor()
		return nil
	case equipment.EdgeGear:
		m.ResetGear()
		return nil
	case equipment.EdgeTool:
		m.ResetTool()
		return nil
	case equipment.EdgeVehicle:
		m.ResetVehicle()
		return nil
	case equipment.EdgeClass:
		m.ResetClass()
		return nil
	case equipment.EdgeChoice:
		m.ResetChoice()
		return nil
	}
	return fmt.Errorf("unknown Equipment edge %s", name)
}

// EquipmentChoiceMutation represents an operation that mutates the EquipmentChoice nodes in the graph.
type EquipmentChoiceMutation struct {
	config
	op               Op
	typ              string
	id               *int
	choose           *int
	addchoose        *int
	desc             *string
	clearedFields    map[string]struct{}
	class            map[int]struct{}
	removedclass     map[int]struct{}
	clearedclass     bool
	equipment        map[int]struct{}
	removedequipment map[int]struct{}
	clearedequipment bool
	done             bool
	oldValue         func(context.Context) (*EquipmentChoice, error)
	predicates       []predicate.EquipmentChoice
}

var _ ent.Mutation = (*EquipmentChoiceMutation)(nil)

// equipmentchoiceOption allows management of the mutation configuration using functional options.
type equipmentchoiceOption func(*EquipmentChoiceMutation)

// newEquipmentChoiceMutation creates new mutation for the EquipmentChoice entity.
func newEquipmentChoiceMutation(c config, op Op, opts ...equipmentchoiceOption) *EquipmentChoiceMutation {
	m := &EquipmentChoiceMutation{
		config:        c,
		op:            op,
		typ:           TypeEquipmentChoice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEquipmentChoiceID sets the ID field of the mutation.
func withEquipmentChoiceID(id int) equipmentchoiceOption {
	return func(m *EquipmentChoiceMutation) {
		var (
			err   error
			once  sync.Once
			value *EquipmentChoice
		)
		m.oldValue = func(ctx context.Context) (*EquipmentChoice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EquipmentChoice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEquipmentChoice sets the old EquipmentChoice of the mutation.
func withEquipmentChoice(node *EquipmentChoice) equipmentchoiceOption {
	return func(m *EquipmentChoiceMutation) {
		m.oldValue = func(context.Context) (*EquipmentChoice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EquipmentChoiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EquipmentChoiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EquipmentChoiceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EquipmentChoiceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EquipmentChoice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChoose sets the "choose" field.
func (m *EquipmentChoiceMutation) SetChoose(i int) {
	m.choose = &i
	m.addchoose = nil
}

// Choose returns the value of the "choose" field in the mutation.
func (m *EquipmentChoiceMutation) Choose() (r int, exists bool) {
	v := m.choose
	if v == nil {
		return
	}
	return *v, true
}

// OldChoose returns the old "choose" field's value of the EquipmentChoice entity.
// If the EquipmentChoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentChoiceMutation) OldChoose(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChoose is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChoose requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChoose: %w", err)
	}
	return oldValue.Choose, nil
}

// AddChoose adds i to the "choose" field.
func (m *EquipmentChoiceMutation) AddChoose(i int) {
	if m.addchoose != nil {
		*m.addchoose += i
	} else {
		m.addchoose = &i
	}
}

// AddedChoose returns the value that was added to the "choose" field in this mutation.
func (m *EquipmentChoiceMutation) AddedChoose() (r int, exists bool) {
	v := m.addchoose
	if v == nil {
		return
	}
	return *v, true
}

// ResetChoose resets all changes to the "choose" field.
func (m *EquipmentChoiceMutation) ResetChoose() {
	m.choose = nil
	m.addchoose = nil
}

// SetDesc sets the "desc" field.
func (m *EquipmentChoiceMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *EquipmentChoiceMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the EquipmentChoice entity.
// If the EquipmentChoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentChoiceMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ClearDesc clears the value of the "desc" field.
func (m *EquipmentChoiceMutation) ClearDesc() {
	m.desc = nil
	m.clearedFields[equipmentchoice.FieldDesc] = struct{}{}
}

// DescCleared returns if the "desc" field was cleared in this mutation.
func (m *EquipmentChoiceMutation) DescCleared() bool {
	_, ok := m.clearedFields[equipmentchoice.FieldDesc]
	return ok
}

// ResetDesc resets all changes to the "desc" field.
func (m *EquipmentChoiceMutation) ResetDesc() {
	m.desc = nil
	delete(m.clearedFields, equipmentchoice.FieldDesc)
}

// AddClasIDs adds the "class" edge to the Class entity by ids.
func (m *EquipmentChoiceMutation) AddClasIDs(ids ...int) {
	if m.class == nil {
		m.class = make(map[int]struct{})
	}
	for i := range ids {
		m.class[ids[i]] = struct{}{}
	}
}

// ClearClass clears the "class" edge to the Class entity.
func (m *EquipmentChoiceMutation) ClearClass() {
	m.clearedclass = true
}

// ClassCleared reports if the "class" edge to the Class entity was cleared.
func (m *EquipmentChoiceMutation) ClassCleared() bool {
	return m.clearedclass
}

// RemoveClasIDs removes the "class" edge to the Class entity by IDs.
func (m *EquipmentChoiceMutation) RemoveClasIDs(ids ...int) {
	if m.removedclass == nil {
		m.removedclass = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.class, ids[i])
		m.removedclass[ids[i]] = struct{}{}
	}
}

// RemovedClass returns the removed IDs of the "class" edge to the Class entity.
func (m *EquipmentChoiceMutation) RemovedClassIDs() (ids []int) {
	for id := range m.removedclass {
		ids = append(ids, id)
	}
	return
}

// ClassIDs returns the "class" edge IDs in the mutation.
func (m *EquipmentChoiceMutation) ClassIDs() (ids []int) {
	for id := range m.class {
		ids = append(ids, id)
	}
	return
}

// ResetClass resets all changes to the "class" edge.
func (m *EquipmentChoiceMutation) ResetClass() {
	m.class = nil
	m.clearedclass = false
	m.removedclass = nil
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by ids.
func (m *EquipmentChoiceMutation) AddEquipmentIDs(ids ...int) {
	if m.equipment == nil {
		m.equipment = make(map[int]struct{})
	}
	for i := range ids {
		m.equipment[ids[i]] = struct{}{}
	}
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *EquipmentChoiceMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *EquipmentChoiceMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// RemoveEquipmentIDs removes the "equipment" edge to the Equipment entity by IDs.
func (m *EquipmentChoiceMutation) RemoveEquipmentIDs(ids ...int) {
	if m.removedequipment == nil {
		m.removedequipment = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.equipment, ids[i])
		m.removedequipment[ids[i]] = struct{}{}
	}
}

// RemovedEquipment returns the removed IDs of the "equipment" edge to the Equipment entity.
func (m *EquipmentChoiceMutation) RemovedEquipmentIDs() (ids []int) {
	for id := range m.removedequipment {
		ids = append(ids, id)
	}
	return
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
func (m *EquipmentChoiceMutation) EquipmentIDs() (ids []int) {
	for id := range m.equipment {
		ids = append(ids, id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *EquipmentChoiceMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
	m.removedequipment = nil
}

// Where appends a list predicates to the EquipmentChoiceMutation builder.
func (m *EquipmentChoiceMutation) Where(ps ...predicate.EquipmentChoice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EquipmentChoiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EquipmentChoiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EquipmentChoice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EquipmentChoiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EquipmentChoiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EquipmentChoice).
func (m *EquipmentChoiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EquipmentChoiceMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.choose != nil {
		fields = append(fields, equipmentchoice.FieldChoose)
	}
	if m.desc != nil {
		fields = append(fields, equipmentchoice.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EquipmentChoiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case equipmentchoice.FieldChoose:
		return m.Choose()
	case equipmentchoice.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EquipmentChoiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case equipmentchoice.FieldChoose:
		return m.OldChoose(ctx)
	case equipmentchoice.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown EquipmentChoice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EquipmentChoiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case equipmentchoice.FieldChoose:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChoose(v)
		return nil
	case equipmentchoice.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown EquipmentChoice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EquipmentChoiceMutation) AddedFields() []string {
	var fields []string
	if m.addchoose != nil {
		fields = append(fields, equipmentchoice.FieldChoose)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EquipmentChoiceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case equipmentchoice.FieldChoose:
		return m.AddedChoose()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EquipmentChoiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case equipmentchoice.FieldChoose:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChoose(v)
		return nil
	}
	return fmt.Errorf("unknown EquipmentChoice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EquipmentChoiceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(equipmentchoice.FieldDesc) {
		fields = append(fields, equipmentchoice.FieldDesc)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EquipmentChoiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EquipmentChoiceMutation) ClearField(name string) error {
	switch name {
	case equipmentchoice.FieldDesc:
		m.ClearDesc()
		return nil
	}
	return fmt.Errorf("unknown EquipmentChoice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EquipmentChoiceMutation) ResetField(name string) error {
	switch name {
	case equipmentchoice.FieldChoose:
		m.ResetChoose()
		return nil
	case equipmentchoice.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown EquipmentChoice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EquipmentChoiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.class != nil {
		edges = append(edges, equipmentchoice.EdgeClass)
	}
	if m.equipment != nil {
		edges = append(edges, equipmentchoice.EdgeEquipment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EquipmentChoiceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case equipmentchoice.EdgeClass:
		ids := make([]ent.Value, 0, len(m.class))
		for id := range m.class {
			ids = append(ids, id)
		}
		return ids
	case equipmentchoice.EdgeEquipment:
		ids := make([]ent.Value, 0, len(m.equipment))
		for id := range m.equipment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EquipmentChoiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedclass != nil {
		edges = append(edges, equipmentchoice.EdgeClass)
	}
	if m.removedequipment != nil {
		edges = append(edges, equipmentchoice.EdgeEquipment)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EquipmentChoiceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case equipmentchoice.EdgeClass:
		ids := make([]ent.Value, 0, len(m.removedclass))
		for id := range m.removedclass {
			ids = append(ids, id)
		}
		return ids
	case equipmentchoice.EdgeEquipment:
		ids := make([]ent.Value, 0, len(m.removedequipment))
		for id := range m.removedequipment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EquipmentChoiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedclass {
		edges = append(edges, equipmentchoice.EdgeClass)
	}
	if m.clearedequipment {
		edges = append(edges, equipmentchoice.EdgeEquipment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EquipmentChoiceMutation) EdgeCleared(name string) bool {
	switch name {
	case equipmentchoice.EdgeClass:
		return m.clearedclass
	case equipmentchoice.EdgeEquipment:
		return m.clearedequipment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EquipmentChoiceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown EquipmentChoice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EquipmentChoiceMutation) ResetEdge(name string) error {
	switch name {
	case equipmentchoice.EdgeClass:
		m.ResetClass()
		return nil
	case equipmentchoice.EdgeEquipment:
		m.ResetEquipment()
		return nil
	}
	return fmt.Errorf("unknown EquipmentChoice edge %s", name)
}

// EquipmentCostMutation represents an operation that mutates the EquipmentCost nodes in the graph.
type EquipmentCostMutation struct {
	config
	op               Op
	typ              string
	id               *int
	quantity         *int
	addquantity      *int
	gp_value         *float64
	addgp_value      *float64
	clearedFields    map[string]struct{}
	equipment        *int
	clearedequipment bool
	coin             *int
	clearedcoin      bool
	done             bool
	oldValue         func(context.Context) (*EquipmentCost, error)
	predicates       []predicate.EquipmentCost
}

var _ ent.Mutation = (*EquipmentCostMutation)(nil)

// equipmentcostOption allows management of the mutation configuration using functional options.
type equipmentcostOption func(*EquipmentCostMutation)

// newEquipmentCostMutation creates new mutation for the EquipmentCost entity.
func newEquipmentCostMutation(c config, op Op, opts ...equipmentcostOption) *EquipmentCostMutation {
	m := &EquipmentCostMutation{
		config:        c,
		op:            op,
		typ:           TypeEquipmentCost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEquipmentCostID sets the ID field of the mutation.
func withEquipmentCostID(id int) equipmentcostOption {
	return func(m *EquipmentCostMutation) {
		var (
			err   error
			once  sync.Once
			value *EquipmentCost
		)
		m.oldValue = func(ctx context.Context) (*EquipmentCost, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EquipmentCost.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEquipmentCost sets the old EquipmentCost of the mutation.
func withEquipmentCost(node *EquipmentCost) equipmentcostOption {
	return func(m *EquipmentCostMutation) {
		m.oldValue = func(context.Context) (*EquipmentCost, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EquipmentCostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EquipmentCostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EquipmentCostMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EquipmentCostMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EquipmentCost.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEquipmentID sets the "equipment_id" field.
func (m *EquipmentCostMutation) SetEquipmentID(i int) {
	m.equipment = &i
}

// EquipmentID returns the value of the "equipment_id" field in the mutation.
func (m *EquipmentCostMutation) EquipmentID() (r int, exists bool) {
	v := m.equipment
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipmentID returns the old "equipment_id" field's value of the EquipmentCost entity.
// If the EquipmentCost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentCostMutation) OldEquipmentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquipmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquipmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipmentID: %w", err)
	}
	return oldValue.EquipmentID, nil
}

// ResetEquipmentID resets all changes to the "equipment_id" field.
func (m *EquipmentCostMutation) ResetEquipmentID() {
	m.equipment = nil
}

// SetCoinID sets the "coin_id" field.
func (m *EquipmentCostMutation) SetCoinID(i int) {
	m.coin = &i
}

// CoinID returns the value of the "coin_id" field in the mutation.
func (m *EquipmentCostMutation) CoinID() (r int, exists bool) {
	v := m.coin
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinID returns the old "coin_id" field's value of the EquipmentCost entity.
// If the EquipmentCost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentCostMutation) OldCoinID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinID: %w", err)
	}
	return oldValue.CoinID, nil
}

// ResetCoinID resets all changes to the "coin_id" field.
func (m *EquipmentCostMutation) ResetCoinID() {
	m.coin = nil
}

// SetQuantity sets the "quantity" field.
func (m *EquipmentCostMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *EquipmentCostMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the EquipmentCost entity.
// If the EquipmentCost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentCostMutation) OldQuantity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to the "quantity" field.
func (m *EquipmentCostMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *EquipmentCostMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *EquipmentCostMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetGpValue sets the "gp_value" field.
func (m *EquipmentCostMutation) SetGpValue(f float64) {
	m.gp_value = &f
	m.addgp_value = nil
}

// GpValue returns the value of the "gp_value" field in the mutation.
func (m *EquipmentCostMutation) GpValue() (r float64, exists bool) {
	v := m.gp_value
	if v == nil {
		return
	}
	return *v, true
}

// OldGpValue returns the old "gp_value" field's value of the EquipmentCost entity.
// If the EquipmentCost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentCostMutation) OldGpValue(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGpValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGpValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGpValue: %w", err)
	}
	return oldValue.GpValue, nil
}

// AddGpValue adds f to the "gp_value" field.
func (m *EquipmentCostMutation) AddGpValue(f float64) {
	if m.addgp_value != nil {
		*m.addgp_value += f
	} else {
		m.addgp_value = &f
	}
}

// AddedGpValue returns the value that was added to the "gp_value" field in this mutation.
func (m *EquipmentCostMutation) AddedGpValue() (r float64, exists bool) {
	v := m.addgp_value
	if v == nil {
		return
	}
	return *v, true
}

// ResetGpValue resets all changes to the "gp_value" field.
func (m *EquipmentCostMutation) ResetGpValue() {
	m.gp_value = nil
	m.addgp_value = nil
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *EquipmentCostMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *EquipmentCostMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EquipmentID instead. It exists only for internal usage by the builders.
func (m *EquipmentCostMutation) EquipmentIDs() (ids []int) {
	if id := m.equipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *EquipmentCostMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
}

// ClearCoin clears the "coin" edge to the Coin entity.
func (m *EquipmentCostMutation) ClearCoin() {
	m.clearedcoin = true
}

// CoinCleared reports if the "coin" edge to the Coin entity was cleared.
func (m *EquipmentCostMutation) CoinCleared() bool {
	return m.clearedcoin
}

// CoinIDs returns the "coin" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CoinID instead. It exists only for internal usage by the builders.
func (m *EquipmentCostMutation) CoinIDs() (ids []int) {
	if id := m.coin; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCoin resets all changes to the "coin" edge.
func (m *EquipmentCostMutation) ResetCoin() {
	m.coin = nil
	m.clearedcoin = false
}

// Where appends a list predicates to the EquipmentCostMutation builder.
func (m *EquipmentCostMutation) Where(ps ...predicate.EquipmentCost) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EquipmentCostMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EquipmentCostMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EquipmentCost, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EquipmentCostMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EquipmentCostMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EquipmentCost).
func (m *EquipmentCostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EquipmentCostMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.equipment != nil {
		fields = append(fields, equipmentcost.FieldEquipmentID)
	}
	if m.coin != nil {
		fields = append(fields, equipmentcost.FieldCoinID)
	}
	if m.quantity != nil {
		fields = append(fields, equipmentcost.FieldQuantity)
	}
	if m.gp_value != nil {
		fields = append(fields, equipmentcost.FieldGpValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EquipmentCostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case equipmentcost.FieldEquipmentID:
		return m.EquipmentID()
	case equipmentcost.FieldCoinID:
		return m.CoinID()
	case equipmentcost.FieldQuantity:
		return m.Quantity()
	case equipmentcost.FieldGpValue:
		return m.GpValue()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EquipmentCostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case equipmentcost.FieldEquipmentID:
		return m.OldEquipmentID(ctx)
	case equipmentcost.FieldCoinID:
		return m.OldCoinID(ctx)
	case equipmentcost.FieldQuantity:
		return m.OldQuantity(ctx)
	case equipmentcost.FieldGpValue:
		return m.OldGpValue(ctx)
	}
	return nil, fmt.Errorf("unknown EquipmentCost field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EquipmentCostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case equipmentcost.FieldEquipmentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipmentID(v)
		return nil
	case equipmentcost.FieldCoinID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinID(v)
		return nil
	case equipmentcost.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case equipmentcost.FieldGpValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGpValue(v)
		return nil
	}
	return fmt.Errorf("unknown EquipmentCost field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EquipmentCostMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, equipmentcost.FieldQuantity)
	}
	if m.addgp_value != nil {
		fields = append(fields, equipmentcost.FieldGpValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EquipmentCostMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case equipmentcost.FieldQuantity:
		return m.AddedQuantity()
	case equipmentcost.FieldGpValue:
		return m.AddedGpValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EquipmentCostMutation) AddField(name string, value ent.Value) error {
	switch name {
	case equipmentcost.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	case equipmentcost.FieldGpValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGpValue(v)
		return nil
	}
	return fmt.Errorf("unknown EquipmentCost numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EquipmentCostMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EquipmentCostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EquipmentCostMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EquipmentCost nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EquipmentCostMutation) ResetField(name string) error {
	switch name {
	case equipmentcost.FieldEquipmentID:
		m.ResetEquipmentID()
		return nil
	case equipmentcost.FieldCoinID:
		m.ResetCoinID()
		return nil
	case equipmentcost.FieldQuantity:
		m.ResetQuantity()
		return nil
	case equipmentcost.FieldGpValue:
		m.ResetGpValue()
		return nil
	}
	return fmt.Errorf("unknown EquipmentCost field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EquipmentCostMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.equipment != nil {
		edges = append(edges, equipmentcost.EdgeEquipment)
	}
	if m.coin != nil {
		edges = append(edges, equipmentcost.EdgeCoin)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EquipmentCostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case equipmentcost.EdgeEquipment:
		if id := m.equipment; id != nil {
			return []ent.Value{*id}
		}
	case equipmentcost.EdgeCoin:
		if id := m.coin; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EquipmentCostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EquipmentCostMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EquipmentCostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedequipment {
		edges = append(edges, equipmentcost.EdgeEquipment)
	}
	if m.clearedcoin {
		edges = append(edges, equipmentcost.EdgeCoin)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EquipmentCostMutation) EdgeCleared(name string) bool {
	switch name {
	case equipmentcost.EdgeEquipment:
		return m.clearedequipment
	case equipmentcost.EdgeCoin:
		return m.clearedcoin
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EquipmentCostMutation) ClearEdge(name string) error {
	switch name {
	case equipmentcost.EdgeEquipment:
		m.ClearEquipment()
		return nil
	case equipmentcost.EdgeCoin:
		m.ClearCoin()
		return nil
	}
	return fmt.Errorf("unknown EquipmentCost unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EquipmentCostMutation) ResetEdge(name string) error {
	switch name {
	case equipmentcost.EdgeEquipment:
		m.ResetEquipment()
		return nil
	case equipmentcost.EdgeCoin:
		m.ResetCoin()
		return nil
	}
	return fmt.Errorf("unknown EquipmentCost edge %s", name)
}

// GearMutation represents an operation that mutates the Gear nodes in the graph.
type GearMutation struct {
	config
	op               Op
	typ              string
	id               *int
	indx             *string
	name             *string
	gear_category    *gear.GearCategory
	quantity         *int
	addquantity      *int
	clearedFields    map[string]struct{}
	equipment        *int
	clearedequipment bool
	done             bool
	oldValue         func(context.Context) (*Gear, error)
	predicates       []predicate.Gear
}

var _ ent.Mutation = (*GearMutation)(nil)

// gearOption allows management of the mutation configuration using functional options.
type gearOption func(*GearMutation)

// newGearMutation creates new mutation for the Gear entity.
func newGearMutation(c config, op Op, opts ...gearOption) *GearMutation {
	m := &GearMutation{
		config:        c,
		op:            op,
		typ:           TypeGear,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGearID sets the ID field of the mutation.
func withGearID(id int) gearOption {
	return func(m *GearMutation) {
		var (
			err   error
			once  sync.Once
			value *Gear
		)
		m.oldValue = func(ctx context.Context) (*Gear, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gear.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGear sets the old Gear of the mutation.
func withGear(node *Gear) gearOption {
	return func(m *GearMutation) {
		m.oldValue = func(context.Context) (*Gear, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GearMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GearMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GearMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GearMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Gear.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *GearMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *GearMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Gear entity.
// If the Gear object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GearMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *GearMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *GearMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GearMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Gear entity.
// If the Gear object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GearMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GearMutation) ResetName() {
	m.name = nil
}

// SetGearCategory sets the "gear_category" field.
func (m *GearMutation) SetGearCategory(gc gear.GearCategory) {
	m.gear_category = &gc
}

// GearCategory returns the value of the "gear_category" field in the mutation.
func (m *GearMutation) GearCategory() (r gear.GearCategory, exists bool) {
	v := m.gear_category
	if v == nil {
		return
	}
	return *v, true
}

// OldGearCategory returns the old "gear_category" field's value of the Gear entity.
// If the Gear object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GearMutation) OldGearCategory(ctx context.Context) (v gear.GearCategory, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGearCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGearCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGearCategory: %w", err)
	}
	return oldValue.GearCategory, nil
}

// ResetGearCategory resets all changes to the "gear_category" field.
func (m *GearMutation) ResetGearCategory() {
	m.gear_category = nil
}

// SetQuantity sets the "quantity" field.
func (m *GearMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *GearMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the Gear entity.
// If the Gear object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GearMutation) OldQuantity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to the "quantity" field.
func (m *GearMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *GearMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ClearQuantity clears the value of the "quantity" field.
func (m *GearMutation) ClearQuantity() {
	m.quantity = nil
	m.addquantity = nil
	m.clearedFields[gear.FieldQuantity] = struct{}{}
}

// QuantityCleared returns if the "quantity" field was cleared in this mutation.
func (m *GearMutation) QuantityCleared() bool {
	_, ok := m.clearedFields[gear.FieldQuantity]
	return ok
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *GearMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
	delete(m.clearedFields, gear.FieldQuantity)
}

// SetEquipmentID sets the "equipment_id" field.
func (m *GearMutation) SetEquipmentID(i int) {
	m.equipment = &i
}

// EquipmentID returns the value of the "equipment_id" field in the mutation.
func (m *GearMutation) EquipmentID() (r int, exists bool) {
	v := m.equipment
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipmentID returns the old "equipment_id" field's value of the Gear entity.
// If the Gear object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GearMutation) OldEquipmentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquipmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquipmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipmentID: %w", err)
	}
	return oldValue.EquipmentID, nil
}

// ResetEquipmentID resets all changes to the "equipment_id" field.
func (m *GearMutation) ResetEquipmentID() {
	m.equipment = nil
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *GearMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *GearMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EquipmentID instead. It exists only for internal usage by the builders.
func (m *GearMutation) EquipmentIDs() (ids []int) {
	if id := m.equipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *GearMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
}

// Where appends a list predicates to the GearMutation builder.
func (m *GearMutation) Where(ps ...predicate.Gear) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GearMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GearMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Gear, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GearMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GearMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Gear).
func (m *GearMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GearMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.indx != nil {
		fields = append(fields, gear.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, gear.FieldName)
	}
	if m.gear_category != nil {
		fields = append(fields, gear.FieldGearCategory)
	}
	if m.quantity != nil {
		fields = append(fields, gear.FieldQuantity)
	}
	if m.equipment != nil {
		fields = append(fields, gear.FieldEquipmentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GearMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gear.FieldIndx:
		return m.Indx()
	case gear.FieldName:
		return m.Name()
	case gear.FieldGearCategory:
		return m.GearCategory()
	case gear.FieldQuantity:
		return m.Quantity()
	case gear.FieldEquipmentID:
		return m.EquipmentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GearMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gear.FieldIndx:
		return m.OldIndx(ctx)
	case gear.FieldName:
		return m.OldName(ctx)
	case gear.FieldGearCategory:
		return m.OldGearCategory(ctx)
	case gear.FieldQuantity:
		return m.OldQuantity(ctx)
	case gear.FieldEquipmentID:
		return m.OldEquipmentID(ctx)
	}
	return nil, fmt.Errorf("unknown Gear field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GearMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gear.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case gear.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case gear.FieldGearCategory:
		v, ok := value.(gear.GearCategory)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGearCategory(v)
		return nil
	case gear.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case gear.FieldEquipmentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipmentID(v)
		return nil
	}
	return fmt.Errorf("unknown Gear field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GearMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, gear.FieldQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GearMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gear.FieldQuantity:
		return m.AddedQuantity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GearMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gear.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown Gear numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GearMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(gear.FieldQuantity) {
		fields = append(fields, gear.FieldQuantity)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GearMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GearMutation) ClearField(name string) error {
	switch name {
	case gear.FieldQuantity:
		m.ClearQuantity()
		return nil
	}
	return fmt.Errorf("unknown Gear nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GearMutation) ResetField(name string) error {
	switch name {
	case gear.FieldIndx:
		m.ResetIndx()
		return nil
	case gear.FieldName:
		m.ResetName()
		return nil
	case gear.FieldGearCategory:
		m.ResetGearCategory()
		return nil
	case gear.FieldQuantity:
		m.ResetQuantity()
		return nil
	case gear.FieldEquipmentID:
		m.ResetEquipmentID()
		return nil
	}
	return fmt.Errorf("unknown Gear field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GearMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.equipment != nil {
		edges = append(edges, gear.EdgeEquipment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GearMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gear.EdgeEquipment:
		if id := m.equipment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GearMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GearMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GearMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedequipment {
		edges = append(edges, gear.EdgeEquipment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GearMutation) EdgeCleared(name string) bool {
	switch name {
	case gear.EdgeEquipment:
		return m.clearedequipment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GearMutation) ClearEdge(name string) error {
	switch name {
	case gear.EdgeEquipment:
		m.ClearEquipment()
		return nil
	}
	return fmt.Errorf("unknown Gear unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GearMutation) ResetEdge(name string) error {
	switch name {
	case gear.EdgeEquipment:
		m.ResetEquipment()
		return nil
	}
	return fmt.Errorf("unknown Gear edge %s", name)
}

// LanguageMutation represents an operation that mutates the Language nodes in the graph.
type LanguageMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	indx                 *string
	name                 *string
	desc                 *string
	language_type        *language.LanguageType
	script               *language.Script
	clearedFields        map[string]struct{}
	race_speakers        map[int]struct{}
	removedrace_speakers map[int]struct{}
	clearedrace_speakers bool
	done                 bool
	oldValue             func(context.Context) (*Language, error)
	predicates           []predicate.Language
}

var _ ent.Mutation = (*LanguageMutation)(nil)

// languageOption allows management of the mutation configuration using functional options.
type languageOption func(*LanguageMutation)

// newLanguageMutation creates new mutation for the Language entity.
func newLanguageMutation(c config, op Op, opts ...languageOption) *LanguageMutation {
	m := &LanguageMutation{
		config:        c,
		op:            op,
		typ:           TypeLanguage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLanguageID sets the ID field of the mutation.
func withLanguageID(id int) languageOption {
	return func(m *LanguageMutation) {
		var (
			err   error
			once  sync.Once
			value *Language
		)
		m.oldValue = func(ctx context.Context) (*Language, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Language.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLanguage sets the old Language of the mutation.
func withLanguage(node *Language) languageOption {
	return func(m *LanguageMutation) {
		m.oldValue = func(context.Context) (*Language, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LanguageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LanguageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LanguageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LanguageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Language.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *LanguageMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *LanguageMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *LanguageMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *LanguageMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LanguageMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LanguageMutation) ResetName() {
	m.name = nil
}

// SetDesc sets the "desc" field.
func (m *LanguageMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *LanguageMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *LanguageMutation) ResetDesc() {
	m.desc = nil
}

// SetLanguageType sets the "language_type" field.
func (m *LanguageMutation) SetLanguageType(lt language.LanguageType) {
	m.language_type = &lt
}

// LanguageType returns the value of the "language_type" field in the mutation.
func (m *LanguageMutation) LanguageType() (r language.LanguageType, exists bool) {
	v := m.language_type
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguageType returns the old "language_type" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldLanguageType(ctx context.Context) (v language.LanguageType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguageType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguageType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguageType: %w", err)
	}
	return oldValue.LanguageType, nil
}

// ResetLanguageType resets all changes to the "language_type" field.
func (m *LanguageMutation) ResetLanguageType() {
	m.language_type = nil
}

// SetScript sets the "script" field.
func (m *LanguageMutation) SetScript(l language.Script) {
	m.script = &l
}

// Script returns the value of the "script" field in the mutation.
func (m *LanguageMutation) Script() (r language.Script, exists bool) {
	v := m.script
	if v == nil {
		return
	}
	return *v, true
}

// OldScript returns the old "script" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldScript(ctx context.Context) (v language.Script, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScript is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScript requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScript: %w", err)
	}
	return oldValue.Script, nil
}

// ClearScript clears the value of the "script" field.
func (m *LanguageMutation) ClearScript() {
	m.script = nil
	m.clearedFields[language.FieldScript] = struct{}{}
}

// ScriptCleared returns if the "script" field was cleared in this mutation.
func (m *LanguageMutation) ScriptCleared() bool {
	_, ok := m.clearedFields[language.FieldScript]
	return ok
}

// ResetScript resets all changes to the "script" field.
func (m *LanguageMutation) ResetScript() {
	m.script = nil
	delete(m.clearedFields, language.FieldScript)
}

// AddRaceSpeakerIDs adds the "race_speakers" edge to the Race entity by ids.
func (m *LanguageMutation) AddRaceSpeakerIDs(ids ...int) {
	if m.race_speakers == nil {
		m.race_speakers = make(map[int]struct{})
	}
	for i := range ids {
		m.race_speakers[ids[i]] = struct{}{}
	}
}

// ClearRaceSpeakers clears the "race_speakers" edge to the Race entity.
func (m *LanguageMutation) ClearRaceSpeakers() {
	m.clearedrace_speakers = true
}

// RaceSpeakersCleared reports if the "race_speakers" edge to the Race entity was cleared.
func (m *LanguageMutation) RaceSpeakersCleared() bool {
	return m.clearedrace_speakers
}

// RemoveRaceSpeakerIDs removes the "race_speakers" edge to the Race entity by IDs.
func (m *LanguageMutation) RemoveRaceSpeakerIDs(ids ...int) {
	if m.removedrace_speakers == nil {
		m.removedrace_speakers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.race_speakers, ids[i])
		m.removedrace_speakers[ids[i]] = struct{}{}
	}
}

// RemovedRaceSpeakers returns the removed IDs of the "race_speakers" edge to the Race entity.
func (m *LanguageMutation) RemovedRaceSpeakersIDs() (ids []int) {
	for id := range m.removedrace_speakers {
		ids = append(ids, id)
	}
	return
}

// RaceSpeakersIDs returns the "race_speakers" edge IDs in the mutation.
func (m *LanguageMutation) RaceSpeakersIDs() (ids []int) {
	for id := range m.race_speakers {
		ids = append(ids, id)
	}
	return
}

// ResetRaceSpeakers resets all changes to the "race_speakers" edge.
func (m *LanguageMutation) ResetRaceSpeakers() {
	m.race_speakers = nil
	m.clearedrace_speakers = false
	m.removedrace_speakers = nil
}

// Where appends a list predicates to the LanguageMutation builder.
func (m *LanguageMutation) Where(ps ...predicate.Language) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LanguageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LanguageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Language, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LanguageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LanguageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Language).
func (m *LanguageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LanguageMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.indx != nil {
		fields = append(fields, language.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, language.FieldName)
	}
	if m.desc != nil {
		fields = append(fields, language.FieldDesc)
	}
	if m.language_type != nil {
		fields = append(fields, language.FieldLanguageType)
	}
	if m.script != nil {
		fields = append(fields, language.FieldScript)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LanguageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case language.FieldIndx:
		return m.Indx()
	case language.FieldName:
		return m.Name()
	case language.FieldDesc:
		return m.Desc()
	case language.FieldLanguageType:
		return m.LanguageType()
	case language.FieldScript:
		return m.Script()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LanguageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case language.FieldIndx:
		return m.OldIndx(ctx)
	case language.FieldName:
		return m.OldName(ctx)
	case language.FieldDesc:
		return m.OldDesc(ctx)
	case language.FieldLanguageType:
		return m.OldLanguageType(ctx)
	case language.FieldScript:
		return m.OldScript(ctx)
	}
	return nil, fmt.Errorf("unknown Language field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LanguageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case language.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case language.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case language.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	case language.FieldLanguageType:
		v, ok := value.(language.LanguageType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguageType(v)
		return nil
	case language.FieldScript:
		v, ok := value.(language.Script)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScript(v)
		return nil
	}
	return fmt.Errorf("unknown Language field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LanguageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LanguageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LanguageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Language numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LanguageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(language.FieldScript) {
		fields = append(fields, language.FieldScript)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LanguageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LanguageMutation) ClearField(name string) error {
	switch name {
	case language.FieldScript:
		m.ClearScript()
		return nil
	}
	return fmt.Errorf("unknown Language nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LanguageMutation) ResetField(name string) error {
	switch name {
	case language.FieldIndx:
		m.ResetIndx()
		return nil
	case language.FieldName:
		m.ResetName()
		return nil
	case language.FieldDesc:
		m.ResetDesc()
		return nil
	case language.FieldLanguageType:
		m.ResetLanguageType()
		return nil
	case language.FieldScript:
		m.ResetScript()
		return nil
	}
	return fmt.Errorf("unknown Language field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LanguageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.race_speakers != nil {
		edges = append(edges, language.EdgeRaceSpeakers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LanguageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case language.EdgeRaceSpeakers:
		ids := make([]ent.Value, 0, len(m.race_speakers))
		for id := range m.race_speakers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LanguageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrace_speakers != nil {
		edges = append(edges, language.EdgeRaceSpeakers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LanguageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case language.EdgeRaceSpeakers:
		ids := make([]ent.Value, 0, len(m.removedrace_speakers))
		for id := range m.removedrace_speakers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LanguageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrace_speakers {
		edges = append(edges, language.EdgeRaceSpeakers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LanguageMutation) EdgeCleared(name string) bool {
	switch name {
	case language.EdgeRaceSpeakers:
		return m.clearedrace_speakers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LanguageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Language unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LanguageMutation) ResetEdge(name string) error {
	switch name {
	case language.EdgeRaceSpeakers:
		m.ResetRaceSpeakers()
		return nil
	}
	return fmt.Errorf("unknown Language edge %s", name)
}

// MagicSchoolMutation represents an operation that mutates the MagicSchool nodes in the graph.
type MagicSchoolMutation struct {
	config
	op            Op
	typ           string
	id            *int
	indx          *string
	name          *string
	desc          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MagicSchool, error)
	predicates    []predicate.MagicSchool
}

var _ ent.Mutation = (*MagicSchoolMutation)(nil)

// magicschoolOption allows management of the mutation configuration using functional options.
type magicschoolOption func(*MagicSchoolMutation)

// newMagicSchoolMutation creates new mutation for the MagicSchool entity.
func newMagicSchoolMutation(c config, op Op, opts ...magicschoolOption) *MagicSchoolMutation {
	m := &MagicSchoolMutation{
		config:        c,
		op:            op,
		typ:           TypeMagicSchool,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMagicSchoolID sets the ID field of the mutation.
func withMagicSchoolID(id int) magicschoolOption {
	return func(m *MagicSchoolMutation) {
		var (
			err   error
			once  sync.Once
			value *MagicSchool
		)
		m.oldValue = func(ctx context.Context) (*MagicSchool, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MagicSchool.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMagicSchool sets the old MagicSchool of the mutation.
func withMagicSchool(node *MagicSchool) magicschoolOption {
	return func(m *MagicSchoolMutation) {
		m.oldValue = func(context.Context) (*MagicSchool, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MagicSchoolMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MagicSchoolMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MagicSchoolMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MagicSchoolMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MagicSchool.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *MagicSchoolMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *MagicSchoolMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the MagicSchool entity.
// If the MagicSchool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MagicSchoolMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *MagicSchoolMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *MagicSchoolMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MagicSchoolMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the MagicSchool entity.
// If the MagicSchool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MagicSchoolMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MagicSchoolMutation) ResetName() {
	m.name = nil
}

// SetDesc sets the "desc" field.
func (m *MagicSchoolMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *MagicSchoolMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the MagicSchool entity.
// If the MagicSchool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MagicSchoolMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *MagicSchoolMutation) ResetDesc() {
	m.desc = nil
}

// Where appends a list predicates to the MagicSchoolMutation builder.
func (m *MagicSchoolMutation) Where(ps ...predicate.MagicSchool) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MagicSchoolMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MagicSchoolMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MagicSchool, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MagicSchoolMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MagicSchoolMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MagicSchool).
func (m *MagicSchoolMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MagicSchoolMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, magicschool.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, magicschool.FieldName)
	}
	if m.desc != nil {
		fields = append(fields, magicschool.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MagicSchoolMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case magicschool.FieldIndx:
		return m.Indx()
	case magicschool.FieldName:
		return m.Name()
	case magicschool.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MagicSchoolMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case magicschool.FieldIndx:
		return m.OldIndx(ctx)
	case magicschool.FieldName:
		return m.OldName(ctx)
	case magicschool.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown MagicSchool field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MagicSchoolMutation) SetField(name string, value ent.Value) error {
	switch name {
	case magicschool.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case magicschool.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case magicschool.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown MagicSchool field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MagicSchoolMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MagicSchoolMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MagicSchoolMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MagicSchool numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MagicSchoolMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MagicSchoolMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MagicSchoolMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MagicSchool nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MagicSchoolMutation) ResetField(name string) error {
	switch name {
	case magicschool.FieldIndx:
		m.ResetIndx()
		return nil
	case magicschool.FieldName:
		m.ResetName()
		return nil
	case magicschool.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown MagicSchool field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MagicSchoolMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MagicSchoolMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MagicSchoolMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MagicSchoolMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MagicSchoolMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MagicSchoolMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MagicSchoolMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MagicSchool unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MagicSchoolMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MagicSchool edge %s", name)
}

// ProficiencyMutation represents an operation that mutates the Proficiency nodes in the graph.
type ProficiencyMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	indx                 *string
	name                 *string
	proficiency_category *string
	clearedFields        map[string]struct{}
	classes              map[int]struct{}
	removedclasses       map[int]struct{}
	clearedclasses       bool
	races                map[int]struct{}
	removedraces         map[int]struct{}
	clearedraces         bool
	subraces             map[int]struct{}
	removedsubraces      map[int]struct{}
	clearedsubraces      bool
	choice               map[int]struct{}
	removedchoice        map[int]struct{}
	clearedchoice        bool
	skill                *int
	clearedskill         bool
	equipment            *int
	clearedequipment     bool
	saving_throw         *int
	clearedsaving_throw  bool
	done                 bool
	oldValue             func(context.Context) (*Proficiency, error)
	predicates           []predicate.Proficiency
}

var _ ent.Mutation = (*ProficiencyMutation)(nil)

// proficiencyOption allows management of the mutation configuration using functional options.
type proficiencyOption func(*ProficiencyMutation)

// newProficiencyMutation creates new mutation for the Proficiency entity.
func newProficiencyMutation(c config, op Op, opts ...proficiencyOption) *ProficiencyMutation {
	m := &ProficiencyMutation{
		config:        c,
		op:            op,
		typ:           TypeProficiency,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProficiencyID sets the ID field of the mutation.
func withProficiencyID(id int) proficiencyOption {
	return func(m *ProficiencyMutation) {
		var (
			err   error
			once  sync.Once
			value *Proficiency
		)
		m.oldValue = func(ctx context.Context) (*Proficiency, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Proficiency.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProficiency sets the old Proficiency of the mutation.
func withProficiency(node *Proficiency) proficiencyOption {
	return func(m *ProficiencyMutation) {
		m.oldValue = func(context.Context) (*Proficiency, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProficiencyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProficiencyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProficiencyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProficiencyMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Proficiency.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *ProficiencyMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *ProficiencyMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Proficiency entity.
// If the Proficiency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProficiencyMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *ProficiencyMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *ProficiencyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProficiencyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Proficiency entity.
// If the Proficiency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProficiencyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProficiencyMutation) ResetName() {
	m.name = nil
}

// SetProficiencyCategory sets the "proficiency_category" field.
func (m *ProficiencyMutation) SetProficiencyCategory(s string) {
	m.proficiency_category = &s
}

// ProficiencyCategory returns the value of the "proficiency_category" field in the mutation.
func (m *ProficiencyMutation) ProficiencyCategory() (r string, exists bool) {
	v := m.proficiency_category
	if v == nil {
		return
	}
	return *v, true
}

// OldProficiencyCategory returns the old "proficiency_category" field's value of the Proficiency entity.
// If the Proficiency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProficiencyMutation) OldProficiencyCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProficiencyCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProficiencyCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProficiencyCategory: %w", err)
	}
	return oldValue.ProficiencyCategory, nil
}

// ResetProficiencyCategory resets all changes to the "proficiency_category" field.
func (m *ProficiencyMutation) ResetProficiencyCategory() {
	m.proficiency_category = nil
}

// AddClassIDs adds the "classes" edge to the Class entity by ids.
func (m *ProficiencyMutation) AddClassIDs(ids ...int) {
	if m.classes == nil {
		m.classes = make(map[int]struct{})
	}
	for i := range ids {
		m.classes[ids[i]] = struct{}{}
	}
}

// ClearClasses clears the "classes" edge to the Class entity.
func (m *ProficiencyMutation) ClearClasses() {
	m.clearedclasses = true
}

// ClassesCleared reports if the "classes" edge to the Class entity was cleared.
func (m *ProficiencyMutation) ClassesCleared() bool {
	return m.clearedclasses
}

// RemoveClassIDs removes the "classes" edge to the Class entity by IDs.
func (m *ProficiencyMutation) RemoveClassIDs(ids ...int) {
	if m.removedclasses == nil {
		m.removedclasses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.classes, ids[i])
		m.removedclasses[ids[i]] = struct{}{}
	}
}

// RemovedClasses returns the removed IDs of the "classes" edge to the Class entity.
func (m *ProficiencyMutation) RemovedClassesIDs() (ids []int) {
	for id := range m.removedclasses {
		ids = append(ids, id)
	}
	return
}

// ClassesIDs returns the "classes" edge IDs in the mutation.
func (m *ProficiencyMutation) ClassesIDs() (ids []int) {
	for id := range m.classes {
		ids = append(ids, id)
	}
	return
}

// ResetClasses resets all changes to the "classes" edge.
func (m *ProficiencyMutation) ResetClasses() {
	m.classes = nil
	m.clearedclasses = false
	m.removedclasses = nil
}

// AddRaceIDs adds the "races" edge to the Race entity by ids.
func (m *ProficiencyMutation) AddRaceIDs(ids ...int) {
	if m.races == nil {
		m.races = make(map[int]struct{})
	}
	for i := range ids {
		m.races[ids[i]] = struct{}{}
	}
}

// ClearRaces clears the "races" edge to the Race entity.
func (m *ProficiencyMutation) ClearRaces() {
	m.clearedraces = true
}

// RacesCleared reports if the "races" edge to the Race entity was cleared.
func (m *ProficiencyMutation) RacesCleared() bool {
	return m.clearedraces
}

// RemoveRaceIDs removes the "races" edge to the Race entity by IDs.
func (m *ProficiencyMutation) RemoveRaceIDs(ids ...int) {
	if m.removedraces == nil {
		m.removedraces = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.races, ids[i])
		m.removedraces[ids[i]] = struct{}{}
	}
}

// RemovedRaces returns the removed IDs of the "races" edge to the Race entity.
func (m *ProficiencyMutation) RemovedRacesIDs() (ids []int) {
	for id := range m.removedraces {
		ids = append(ids, id)
	}
	return
}

// RacesIDs returns the "races" edge IDs in the mutation.
func (m *ProficiencyMutation) RacesIDs() (ids []int) {
	for id := range m.races {
		ids = append(ids, id)
	}
	return
}

// ResetRaces resets all changes to the "races" edge.
func (m *ProficiencyMutation) ResetRaces() {
	m.races = nil
	m.clearedraces = false
	m.removedraces = nil
}

// AddSubraceIDs adds the "subraces" edge to the Subrace entity by ids.
func (m *ProficiencyMutation) AddSubraceIDs(ids ...int) {
	if m.subraces == nil {
		m.subraces = make(map[int]struct{})
	}
	for i := range ids {
		m.subraces[ids[i]] = struct{}{}
	}
}

// ClearSubraces clears the "subraces" edge to the Subrace entity.
func (m *ProficiencyMutation) ClearSubraces() {
	m.clearedsubraces = true
}

// SubracesCleared reports if the "subraces" edge to the Subrace entity was cleared.
func (m *ProficiencyMutation) SubracesCleared() bool {
	return m.clearedsubraces
}

// RemoveSubraceIDs removes the "subraces" edge to the Subrace entity by IDs.
func (m *ProficiencyMutation) RemoveSubraceIDs(ids ...int) {
	if m.removedsubraces == nil {
		m.removedsubraces = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.subraces, ids[i])
		m.removedsubraces[ids[i]] = struct{}{}
	}
}

// RemovedSubraces returns the removed IDs of the "subraces" edge to the Subrace entity.
func (m *ProficiencyMutation) RemovedSubracesIDs() (ids []int) {
	for id := range m.removedsubraces {
		ids = append(ids, id)
	}
	return
}

// SubracesIDs returns the "subraces" edge IDs in the mutation.
func (m *ProficiencyMutation) SubracesIDs() (ids []int) {
	for id := range m.subraces {
		ids = append(ids, id)
	}
	return
}

// ResetSubraces resets all changes to the "subraces" edge.
func (m *ProficiencyMutation) ResetSubraces() {
	m.subraces = nil
	m.clearedsubraces = false
	m.removedsubraces = nil
}

// AddChoiceIDs adds the "choice" edge to the ProficiencyChoice entity by ids.
func (m *ProficiencyMutation) AddChoiceIDs(ids ...int) {
	if m.choice == nil {
		m.choice = make(map[int]struct{})
	}
	for i := range ids {
		m.choice[ids[i]] = struct{}{}
	}
}

// ClearChoice clears the "choice" edge to the ProficiencyChoice entity.
func (m *ProficiencyMutation) ClearChoice() {
	m.clearedchoice = true
}

// ChoiceCleared reports if the "choice" edge to the ProficiencyChoice entity was cleared.
func (m *ProficiencyMutation) ChoiceCleared() bool {
	return m.clearedchoice
}

// RemoveChoiceIDs removes the "choice" edge to the ProficiencyChoice entity by IDs.
func (m *ProficiencyMutation) RemoveChoiceIDs(ids ...int) {
	if m.removedchoice == nil {
		m.removedchoice = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.choice, ids[i])
		m.removedchoice[ids[i]] = struct{}{}
	}
}

// RemovedChoice returns the removed IDs of the "choice" edge to the ProficiencyChoice entity.
func (m *ProficiencyMutation) RemovedChoiceIDs() (ids []int) {
	for id := range m.removedchoice {
		ids = append(ids, id)
	}
	return
}

// ChoiceIDs returns the "choice" edge IDs in the mutation.
func (m *ProficiencyMutation) ChoiceIDs() (ids []int) {
	for id := range m.choice {
		ids = append(ids, id)
	}
	return
}

// ResetChoice resets all changes to the "choice" edge.
func (m *ProficiencyMutation) ResetChoice() {
	m.choice = nil
	m.clearedchoice = false
	m.removedchoice = nil
}

// SetSkillID sets the "skill" edge to the Skill entity by id.
func (m *ProficiencyMutation) SetSkillID(id int) {
	m.skill = &id
}

// ClearSkill clears the "skill" edge to the Skill entity.
func (m *ProficiencyMutation) ClearSkill() {
	m.clearedskill = true
}

// SkillCleared reports if the "skill" edge to the Skill entity was cleared.
func (m *ProficiencyMutation) SkillCleared() bool {
	return m.clearedskill
}

// SkillID returns the "skill" edge ID in the mutation.
func (m *ProficiencyMutation) SkillID() (id int, exists bool) {
	if m.skill != nil {
		return *m.skill, true
	}
	return
}

// SkillIDs returns the "skill" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SkillID instead. It exists only for internal usage by the builders.
func (m *ProficiencyMutation) SkillIDs() (ids []int) {
	if id := m.skill; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSkill resets all changes to the "skill" edge.
func (m *ProficiencyMutation) ResetSkill() {
	m.skill = nil
	m.clearedskill = false
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by id.
func (m *ProficiencyMutation) SetEquipmentID(id int) {
	m.equipment = &id
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *ProficiencyMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *ProficiencyMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// EquipmentID returns the "equipment" edge ID in the mutation.
func (m *ProficiencyMutation) EquipmentID() (id int, exists bool) {
	if m.equipment != nil {
		return *m.equipment, true
	}
	return
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EquipmentID instead. It exists only for internal usage by the builders.
func (m *ProficiencyMutation) EquipmentIDs() (ids []int) {
	if id := m.equipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *ProficiencyMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
}

// SetSavingThrowID sets the "saving_throw" edge to the AbilityScore entity by id.
func (m *ProficiencyMutation) SetSavingThrowID(id int) {
	m.saving_throw = &id
}

// ClearSavingThrow clears the "saving_throw" edge to the AbilityScore entity.
func (m *ProficiencyMutation) ClearSavingThrow() {
	m.clearedsaving_throw = true
}

// SavingThrowCleared reports if the "saving_throw" edge to the AbilityScore entity was cleared.
func (m *ProficiencyMutation) SavingThrowCleared() bool {
	return m.clearedsaving_throw
}

// SavingThrowID returns the "saving_throw" edge ID in the mutation.
func (m *ProficiencyMutation) SavingThrowID() (id int, exists bool) {
	if m.saving_throw != nil {
		return *m.saving_throw, true
	}
	return
}

// SavingThrowIDs returns the "saving_throw" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SavingThrowID instead. It exists only for internal usage by the builders.
func (m *ProficiencyMutation) SavingThrowIDs() (ids []int) {
	if id := m.saving_throw; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSavingThrow resets all changes to the "saving_throw" edge.
func (m *ProficiencyMutation) ResetSavingThrow() {
	m.saving_throw = nil
	m.clearedsaving_throw = false
}

// Where appends a list predicates to the ProficiencyMutation builder.
func (m *ProficiencyMutation) Where(ps ...predicate.Proficiency) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProficiencyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProficiencyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Proficiency, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProficiencyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProficiencyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Proficiency).
func (m *ProficiencyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProficiencyMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, proficiency.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, proficiency.FieldName)
	}
	if m.proficiency_category != nil {
		fields = append(fields, proficiency.FieldProficiencyCategory)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProficiencyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case proficiency.FieldIndx:
		return m.Indx()
	case proficiency.FieldName:
		return m.Name()
	case proficiency.FieldProficiencyCategory:
		return m.ProficiencyCategory()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProficiencyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case proficiency.FieldIndx:
		return m.OldIndx(ctx)
	case proficiency.FieldName:
		return m.OldName(ctx)
	case proficiency.FieldProficiencyCategory:
		return m.OldProficiencyCategory(ctx)
	}
	return nil, fmt.Errorf("unknown Proficiency field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProficiencyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case proficiency.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case proficiency.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case proficiency.FieldProficiencyCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProficiencyCategory(v)
		return nil
	}
	return fmt.Errorf("unknown Proficiency field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProficiencyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProficiencyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProficiencyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Proficiency numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProficiencyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProficiencyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProficiencyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Proficiency nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProficiencyMutation) ResetField(name string) error {
	switch name {
	case proficiency.FieldIndx:
		m.ResetIndx()
		return nil
	case proficiency.FieldName:
		m.ResetName()
		return nil
	case proficiency.FieldProficiencyCategory:
		m.ResetProficiencyCategory()
		return nil
	}
	return fmt.Errorf("unknown Proficiency field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProficiencyMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.classes != nil {
		edges = append(edges, proficiency.EdgeClasses)
	}
	if m.races != nil {
		edges = append(edges, proficiency.EdgeRaces)
	}
	if m.subraces != nil {
		edges = append(edges, proficiency.EdgeSubraces)
	}
	if m.choice != nil {
		edges = append(edges, proficiency.EdgeChoice)
	}
	if m.skill != nil {
		edges = append(edges, proficiency.EdgeSkill)
	}
	if m.equipment != nil {
		edges = append(edges, proficiency.EdgeEquipment)
	}
	if m.saving_throw != nil {
		edges = append(edges, proficiency.EdgeSavingThrow)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProficiencyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case proficiency.EdgeClasses:
		ids := make([]ent.Value, 0, len(m.classes))
		for id := range m.classes {
			ids = append(ids, id)
		}
		return ids
	case proficiency.EdgeRaces:
		ids := make([]ent.Value, 0, len(m.races))
		for id := range m.races {
			ids = append(ids, id)
		}
		return ids
	case proficiency.EdgeSubraces:
		ids := make([]ent.Value, 0, len(m.subraces))
		for id := range m.subraces {
			ids = append(ids, id)
		}
		return ids
	case proficiency.EdgeChoice:
		ids := make([]ent.Value, 0, len(m.choice))
		for id := range m.choice {
			ids = append(ids, id)
		}
		return ids
	case proficiency.EdgeSkill:
		if id := m.skill; id != nil {
			return []ent.Value{*id}
		}
	case proficiency.EdgeEquipment:
		if id := m.equipment; id != nil {
			return []ent.Value{*id}
		}
	case proficiency.EdgeSavingThrow:
		if id := m.saving_throw; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProficiencyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedclasses != nil {
		edges = append(edges, proficiency.EdgeClasses)
	}
	if m.removedraces != nil {
		edges = append(edges, proficiency.EdgeRaces)
	}
	if m.removedsubraces != nil {
		edges = append(edges, proficiency.EdgeSubraces)
	}
	if m.removedchoice != nil {
		edges = append(edges, proficiency.EdgeChoice)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProficiencyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case proficiency.EdgeClasses:
		ids := make([]ent.Value, 0, len(m.removedclasses))
		for id := range m.removedclasses {
			ids = append(ids, id)
		}
		return ids
	case proficiency.EdgeRaces:
		ids := make([]ent.Value, 0, len(m.removedraces))
		for id := range m.removedraces {
			ids = append(ids, id)
		}
		return ids
	case proficiency.EdgeSubraces:
		ids := make([]ent.Value, 0, len(m.removedsubraces))
		for id := range m.removedsubraces {
			ids = append(ids, id)
		}
		return ids
	case proficiency.EdgeChoice:
		ids := make([]ent.Value, 0, len(m.removedchoice))
		for id := range m.removedchoice {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProficiencyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.clearedclasses {
		edges = append(edges, proficiency.EdgeClasses)
	}
	if m.clearedraces {
		edges = append(edges, proficiency.EdgeRaces)
	}
	if m.clearedsubraces {
		edges = append(edges, proficiency.EdgeSubraces)
	}
	if m.clearedchoice {
		edges = append(edges, proficiency.EdgeChoice)
	}
	if m.clearedskill {
		edges = append(edges, proficiency.EdgeSkill)
	}
	if m.clearedequipment {
		edges = append(edges, proficiency.EdgeEquipment)
	}
	if m.clearedsaving_throw {
		edges = append(edges, proficiency.EdgeSavingThrow)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProficiencyMutation) EdgeCleared(name string) bool {
	switch name {
	case proficiency.EdgeClasses:
		return m.clearedclasses
	case proficiency.EdgeRaces:
		return m.clearedraces
	case proficiency.EdgeSubraces:
		return m.clearedsubraces
	case proficiency.EdgeChoice:
		return m.clearedchoice
	case proficiency.EdgeSkill:
		return m.clearedskill
	case proficiency.EdgeEquipment:
		return m.clearedequipment
	case proficiency.EdgeSavingThrow:
		return m.clearedsaving_throw
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProficiencyMutation) ClearEdge(name string) error {
	switch name {
	case proficiency.EdgeSkill:
		m.ClearSkill()
		return nil
	case proficiency.EdgeEquipment:
		m.ClearEquipment()
		return nil
	case proficiency.EdgeSavingThrow:
		m.ClearSavingThrow()
		return nil
	}
	return fmt.Errorf("unknown Proficiency unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProficiencyMutation) ResetEdge(name string) error {
	switch name {
	case proficiency.EdgeClasses:
		m.ResetClasses()
		return nil
	case proficiency.EdgeRaces:
		m.ResetRaces()
		return nil
	case proficiency.EdgeSubraces:
		m.ResetSubraces()
		return nil
	case proficiency.EdgeChoice:
		m.ResetChoice()
		return nil
	case proficiency.EdgeSkill:
		m.ResetSkill()
		return nil
	case proficiency.EdgeEquipment:
		m.ResetEquipment()
		return nil
	case proficiency.EdgeSavingThrow:
		m.ResetSavingThrow()
		return nil
	}
	return fmt.Errorf("unknown Proficiency edge %s", name)
}

// ProficiencyChoiceMutation represents an operation that mutates the ProficiencyChoice nodes in the graph.
type ProficiencyChoiceMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	choose               *int
	addchoose            *int
	desc                 *string
	clearedFields        map[string]struct{}
	proficiency          map[int]struct{}
	removedproficiency   map[int]struct{}
	clearedproficiency   bool
	parent_choice        *int
	clearedparent_choice bool
	sub_choice           map[int]struct{}
	removedsub_choice    map[int]struct{}
	clearedsub_choice    bool
	class                map[int]struct{}
	removedclass         map[int]struct{}
	clearedclass         bool
	race                 map[int]struct{}
	removedrace          map[int]struct{}
	clearedrace          bool
	done                 bool
	oldValue             func(context.Context) (*ProficiencyChoice, error)
	predicates           []predicate.ProficiencyChoice
}

var _ ent.Mutation = (*ProficiencyChoiceMutation)(nil)

// proficiencychoiceOption allows management of the mutation configuration using functional options.
type proficiencychoiceOption func(*ProficiencyChoiceMutation)

// newProficiencyChoiceMutation creates new mutation for the ProficiencyChoice entity.
func newProficiencyChoiceMutation(c config, op Op, opts ...proficiencychoiceOption) *ProficiencyChoiceMutation {
	m := &ProficiencyChoiceMutation{
		config:        c,
		op:            op,
		typ:           TypeProficiencyChoice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProficiencyChoiceID sets the ID field of the mutation.
func withProficiencyChoiceID(id int) proficiencychoiceOption {
	return func(m *ProficiencyChoiceMutation) {
		var (
			err   error
			once  sync.Once
			value *ProficiencyChoice
		)
		m.oldValue = func(ctx context.Context) (*ProficiencyChoice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProficiencyChoice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProficiencyChoice sets the old ProficiencyChoice of the mutation.
func withProficiencyChoice(node *ProficiencyChoice) proficiencychoiceOption {
	return func(m *ProficiencyChoiceMutation) {
		m.oldValue = func(context.Context) (*ProficiencyChoice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProficiencyChoiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProficiencyChoiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProficiencyChoiceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProficiencyChoiceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProficiencyChoice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChoose sets the "choose" field.
func (m *ProficiencyChoiceMutation) SetChoose(i int) {
	m.choose = &i
	m.addchoose = nil
}

// Choose returns the value of the "choose" field in the mutation.
func (m *ProficiencyChoiceMutation) Choose() (r int, exists bool) {
	v := m.choose
	if v == nil {
		return
	}
	return *v, true
}

// OldChoose returns the old "choose" field's value of the ProficiencyChoice entity.
// If the ProficiencyChoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProficiencyChoiceMutation) OldChoose(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChoose is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChoose requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChoose: %w", err)
	}
	return oldValue.Choose, nil
}

// AddChoose adds i to the "choose" field.
func (m *ProficiencyChoiceMutation) AddChoose(i int) {
	if m.addchoose != nil {
		*m.addchoose += i
	} else {
		m.addchoose = &i
	}
}

// AddedChoose returns the value that was added to the "choose" field in this mutation.
func (m *ProficiencyChoiceMutation) AddedChoose() (r int, exists bool) {
	v := m.addchoose
	if v == nil {
		return
	}
	return *v, true
}

// ResetChoose resets all changes to the "choose" field.
func (m *ProficiencyChoiceMutation) ResetChoose() {
	m.choose = nil
	m.addchoose = nil
}

// SetDesc sets the "desc" field.
func (m *ProficiencyChoiceMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *ProficiencyChoiceMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the ProficiencyChoice entity.
// If the ProficiencyChoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProficiencyChoiceMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ClearDesc clears the value of the "desc" field.
func (m *ProficiencyChoiceMutation) ClearDesc() {
	m.desc = nil
	m.clearedFields[proficiencychoice.FieldDesc] = struct{}{}
}

// DescCleared returns if the "desc" field was cleared in this mutation.
func (m *ProficiencyChoiceMutation) DescCleared() bool {
	_, ok := m.clearedFields[proficiencychoice.FieldDesc]
	return ok
}

// ResetDesc resets all changes to the "desc" field.
func (m *ProficiencyChoiceMutation) ResetDesc() {
	m.desc = nil
	delete(m.clearedFields, proficiencychoice.FieldDesc)
}

// AddProficiencyIDs adds the "proficiency" edge to the Proficiency entity by ids.
func (m *ProficiencyChoiceMutation) AddProficiencyIDs(ids ...int) {
	if m.proficiency == nil {
		m.proficiency = make(map[int]struct{})
	}
	for i := range ids {
		m.proficiency[ids[i]] = struct{}{}
	}
}

// ClearProficiency clears the "proficiency" edge to the Proficiency entity.
func (m *ProficiencyChoiceMutation) ClearProficiency() {
	m.clearedproficiency = true
}

// ProficiencyCleared reports if the "proficiency" edge to the Proficiency entity was cleared.
func (m *ProficiencyChoiceMutation) ProficiencyCleared() bool {
	return m.clearedproficiency
}

// RemoveProficiencyIDs removes the "proficiency" edge to the Proficiency entity by IDs.
func (m *ProficiencyChoiceMutation) RemoveProficiencyIDs(ids ...int) {
	if m.removedproficiency == nil {
		m.removedproficiency = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.proficiency, ids[i])
		m.removedproficiency[ids[i]] = struct{}{}
	}
}

// RemovedProficiency returns the removed IDs of the "proficiency" edge to the Proficiency entity.
func (m *ProficiencyChoiceMutation) RemovedProficiencyIDs() (ids []int) {
	for id := range m.removedproficiency {
		ids = append(ids, id)
	}
	return
}

// ProficiencyIDs returns the "proficiency" edge IDs in the mutation.
func (m *ProficiencyChoiceMutation) ProficiencyIDs() (ids []int) {
	for id := range m.proficiency {
		ids = append(ids, id)
	}
	return
}

// ResetProficiency resets all changes to the "proficiency" edge.
func (m *ProficiencyChoiceMutation) ResetProficiency() {
	m.proficiency = nil
	m.clearedproficiency = false
	m.removedproficiency = nil
}

// SetParentChoiceID sets the "parent_choice" edge to the ProficiencyChoice entity by id.
func (m *ProficiencyChoiceMutation) SetParentChoiceID(id int) {
	m.parent_choice = &id
}

// ClearParentChoice clears the "parent_choice" edge to the ProficiencyChoice entity.
func (m *ProficiencyChoiceMutation) ClearParentChoice() {
	m.clearedparent_choice = true
}

// ParentChoiceCleared reports if the "parent_choice" edge to the ProficiencyChoice entity was cleared.
func (m *ProficiencyChoiceMutation) ParentChoiceCleared() bool {
	return m.clearedparent_choice
}

// ParentChoiceID returns the "parent_choice" edge ID in the mutation.
func (m *ProficiencyChoiceMutation) ParentChoiceID() (id int, exists bool) {
	if m.parent_choice != nil {
		return *m.parent_choice, true
	}
	return
}

// ParentChoiceIDs returns the "parent_choice" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentChoiceID instead. It exists only for internal usage by the builders.
func (m *ProficiencyChoiceMutation) ParentChoiceIDs() (ids []int) {
	if id := m.parent_choice; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParentChoice resets all changes to the "parent_choice" edge.
func (m *ProficiencyChoiceMutation) ResetParentChoice() {
	m.parent_choice = nil
	m.clearedparent_choice = false
}

// AddSubChoiceIDs adds the "sub_choice" edge to the ProficiencyChoice entity by ids.
func (m *ProficiencyChoiceMutation) AddSubChoiceIDs(ids ...int) {
	if m.sub_choice == nil {
		m.sub_choice = make(map[int]struct{})
	}
	for i := range ids {
		m.sub_choice[ids[i]] = struct{}{}
	}
}

// ClearSubChoice clears the "sub_choice" edge to the ProficiencyChoice entity.
func (m *ProficiencyChoiceMutation) ClearSubChoice() {
	m.clearedsub_choice = true
}

// SubChoiceCleared reports if the "sub_choice" edge to the ProficiencyChoice entity was cleared.
func (m *ProficiencyChoiceMutation) SubChoiceCleared() bool {
	return m.clearedsub_choice
}

// RemoveSubChoiceIDs removes the "sub_choice" edge to the ProficiencyChoice entity by IDs.
func (m *ProficiencyChoiceMutation) RemoveSubChoiceIDs(ids ...int) {
	if m.removedsub_choice == nil {
		m.removedsub_choice = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sub_choice, ids[i])
		m.removedsub_choice[ids[i]] = struct{}{}
	}
}

// RemovedSubChoice returns the removed IDs of the "sub_choice" edge to the ProficiencyChoice entity.
func (m *ProficiencyChoiceMutation) RemovedSubChoiceIDs() (ids []int) {
	for id := range m.removedsub_choice {
		ids = append(ids, id)
	}
	return
}

// SubChoiceIDs returns the "sub_choice" edge IDs in the mutation.
func (m *ProficiencyChoiceMutation) SubChoiceIDs() (ids []int) {
	for id := range m.sub_choice {
		ids = append(ids, id)
	}
	return
}

// ResetSubChoice resets all changes to the "sub_choice" edge.
func (m *ProficiencyChoiceMutation) ResetSubChoice() {
	m.sub_choice = nil
	m.clearedsub_choice = false
	m.removedsub_choice = nil
}

// AddClasIDs adds the "class" edge to the Class entity by ids.
func (m *ProficiencyChoiceMutation) AddClasIDs(ids ...int) {
	if m.class == nil {
		m.class = make(map[int]struct{})
	}
	for i := range ids {
		m.class[ids[i]] = struct{}{}
	}
}

// ClearClass clears the "class" edge to the Class entity.
func (m *ProficiencyChoiceMutation) ClearClass() {
	m.clearedclass = true
}

// ClassCleared reports if the "class" edge to the Class entity was cleared.
func (m *ProficiencyChoiceMutation) ClassCleared() bool {
	return m.clearedclass
}

// RemoveClasIDs removes the "class" edge to the Class entity by IDs.
func (m *ProficiencyChoiceMutation) RemoveClasIDs(ids ...int) {
	if m.removedclass == nil {
		m.removedclass = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.class, ids[i])
		m.removedclass[ids[i]] = struct{}{}
	}
}

// RemovedClass returns the removed IDs of the "class" edge to the Class entity.
func (m *ProficiencyChoiceMutation) RemovedClassIDs() (ids []int) {
	for id := range m.removedclass {
		ids = append(ids, id)
	}
	return
}

// ClassIDs returns the "class" edge IDs in the mutation.
func (m *ProficiencyChoiceMutation) ClassIDs() (ids []int) {
	for id := range m.class {
		ids = append(ids, id)
	}
	return
}

// ResetClass resets all changes to the "class" edge.
func (m *ProficiencyChoiceMutation) ResetClass() {
	m.class = nil
	m.clearedclass = false
	m.removedclass = nil
}

// AddRaceIDs adds the "race" edge to the Race entity by ids.
func (m *ProficiencyChoiceMutation) AddRaceIDs(ids ...int) {
	if m.race == nil {
		m.race = make(map[int]struct{})
	}
	for i := range ids {
		m.race[ids[i]] = struct{}{}
	}
}

// ClearRace clears the "race" edge to the Race entity.
func (m *ProficiencyChoiceMutation) ClearRace() {
	m.clearedrace = true
}

// RaceCleared reports if the "race" edge to the Race entity was cleared.
func (m *ProficiencyChoiceMutation) RaceCleared() bool {
	return m.clearedrace
}

// RemoveRaceIDs removes the "race" edge to the Race entity by IDs.
func (m *ProficiencyChoiceMutation) RemoveRaceIDs(ids ...int) {
	if m.removedrace == nil {
		m.removedrace = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.race, ids[i])
		m.removedrace[ids[i]] = struct{}{}
	}
}

// RemovedRace returns the removed IDs of the "race" edge to the Race entity.
func (m *ProficiencyChoiceMutation) RemovedRaceIDs() (ids []int) {
	for id := range m.removedrace {
		ids = append(ids, id)
	}
	return
}

// RaceIDs returns the "race" edge IDs in the mutation.
func (m *ProficiencyChoiceMutation) RaceIDs() (ids []int) {
	for id := range m.race {
		ids = append(ids, id)
	}
	return
}

// ResetRace resets all changes to the "race" edge.
func (m *ProficiencyChoiceMutation) ResetRace() {
	m.race = nil
	m.clearedrace = false
	m.removedrace = nil
}

// Where appends a list predicates to the ProficiencyChoiceMutation builder.
func (m *ProficiencyChoiceMutation) Where(ps ...predicate.ProficiencyChoice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProficiencyChoiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProficiencyChoiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProficiencyChoice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProficiencyChoiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProficiencyChoiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProficiencyChoice).
func (m *ProficiencyChoiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProficiencyChoiceMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.choose != nil {
		fields = append(fields, proficiencychoice.FieldChoose)
	}
	if m.desc != nil {
		fields = append(fields, proficiencychoice.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProficiencyChoiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case proficiencychoice.FieldChoose:
		return m.Choose()
	case proficiencychoice.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProficiencyChoiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case proficiencychoice.FieldChoose:
		return m.OldChoose(ctx)
	case proficiencychoice.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown ProficiencyChoice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProficiencyChoiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case proficiencychoice.FieldChoose:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChoose(v)
		return nil
	case proficiencychoice.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown ProficiencyChoice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProficiencyChoiceMutation) AddedFields() []string {
	var fields []string
	if m.addchoose != nil {
		fields = append(fields, proficiencychoice.FieldChoose)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProficiencyChoiceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case proficiencychoice.FieldChoose:
		return m.AddedChoose()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProficiencyChoiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case proficiencychoice.FieldChoose:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChoose(v)
		return nil
	}
	return fmt.Errorf("unknown ProficiencyChoice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProficiencyChoiceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(proficiencychoice.FieldDesc) {
		fields = append(fields, proficiencychoice.FieldDesc)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProficiencyChoiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProficiencyChoiceMutation) ClearField(name string) error {
	switch name {
	case proficiencychoice.FieldDesc:
		m.ClearDesc()
		return nil
	}
	return fmt.Errorf("unknown ProficiencyChoice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProficiencyChoiceMutation) ResetField(name string) error {
	switch name {
	case proficiencychoice.FieldChoose:
		m.ResetChoose()
		return nil
	case proficiencychoice.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown ProficiencyChoice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProficiencyChoiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.proficiency != nil {
		edges = append(edges, proficiencychoice.EdgeProficiency)
	}
	if m.parent_choice != nil {
		edges = append(edges, proficiencychoice.EdgeParentChoice)
	}
	if m.sub_choice != nil {
		edges = append(edges, proficiencychoice.EdgeSubChoice)
	}
	if m.class != nil {
		edges = append(edges, proficiencychoice.EdgeClass)
	}
	if m.race != nil {
		edges = append(edges, proficiencychoice.EdgeRace)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProficiencyChoiceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case proficiencychoice.EdgeProficiency:
		ids := make([]ent.Value, 0, len(m.proficiency))
		for id := range m.proficiency {
			ids = append(ids, id)
		}
		return ids
	case proficiencychoice.EdgeParentChoice:
		if id := m.parent_choice; id != nil {
			return []ent.Value{*id}
		}
	case proficiencychoice.EdgeSubChoice:
		ids := make([]ent.Value, 0, len(m.sub_choice))
		for id := range m.sub_choice {
			ids = append(ids, id)
		}
		return ids
	case proficiencychoice.EdgeClass:
		ids := make([]ent.Value, 0, len(m.class))
		for id := range m.class {
			ids = append(ids, id)
		}
		return ids
	case proficiencychoice.EdgeRace:
		ids := make([]ent.Value, 0, len(m.race))
		for id := range m.race {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProficiencyChoiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedproficiency != nil {
		edges = append(edges, proficiencychoice.EdgeProficiency)
	}
	if m.removedsub_choice != nil {
		edges = append(edges, proficiencychoice.EdgeSubChoice)
	}
	if m.removedclass != nil {
		edges = append(edges, proficiencychoice.EdgeClass)
	}
	if m.removedrace != nil {
		edges = append(edges, proficiencychoice.EdgeRace)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProficiencyChoiceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case proficiencychoice.EdgeProficiency:
		ids := make([]ent.Value, 0, len(m.removedproficiency))
		for id := range m.removedproficiency {
			ids = append(ids, id)
		}
		return ids
	case proficiencychoice.EdgeSubChoice:
		ids := make([]ent.Value, 0, len(m.removedsub_choice))
		for id := range m.removedsub_choice {
			ids = append(ids, id)
		}
		return ids
	case proficiencychoice.EdgeClass:
		ids := make([]ent.Value, 0, len(m.removedclass))
		for id := range m.removedclass {
			ids = append(ids, id)
		}
		return ids
	case proficiencychoice.EdgeRace:
		ids := make([]ent.Value, 0, len(m.removedrace))
		for id := range m.removedrace {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProficiencyChoiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedproficiency {
		edges = append(edges, proficiencychoice.EdgeProficiency)
	}
	if m.clearedparent_choice {
		edges = append(edges, proficiencychoice.EdgeParentChoice)
	}
	if m.clearedsub_choice {
		edges = append(edges, proficiencychoice.EdgeSubChoice)
	}
	if m.clearedclass {
		edges = append(edges, proficiencychoice.EdgeClass)
	}
	if m.clearedrace {
		edges = append(edges, proficiencychoice.EdgeRace)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProficiencyChoiceMutation) EdgeCleared(name string) bool {
	switch name {
	case proficiencychoice.EdgeProficiency:
		return m.clearedproficiency
	case proficiencychoice.EdgeParentChoice:
		return m.clearedparent_choice
	case proficiencychoice.EdgeSubChoice:
		return m.clearedsub_choice
	case proficiencychoice.EdgeClass:
		return m.clearedclass
	case proficiencychoice.EdgeRace:
		return m.clearedrace
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProficiencyChoiceMutation) ClearEdge(name string) error {
	switch name {
	case proficiencychoice.EdgeParentChoice:
		m.ClearParentChoice()
		return nil
	}
	return fmt.Errorf("unknown ProficiencyChoice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProficiencyChoiceMutation) ResetEdge(name string) error {
	switch name {
	case proficiencychoice.EdgeProficiency:
		m.ResetProficiency()
		return nil
	case proficiencychoice.EdgeParentChoice:
		m.ResetParentChoice()
		return nil
	case proficiencychoice.EdgeSubChoice:
		m.ResetSubChoice()
		return nil
	case proficiencychoice.EdgeClass:
		m.ResetClass()
		return nil
	case proficiencychoice.EdgeRace:
		m.ResetRace()
		return nil
	}
	return fmt.Errorf("unknown ProficiencyChoice edge %s", name)
}

// RaceMutation represents an operation that mutates the Race nodes in the graph.
type RaceMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	indx                      *string
	name                      *string
	alignment                 *string
	age                       *string
	size                      *string
	size_description          *string
	language_desc             *string
	speed                     *int
	addspeed                  *int
	clearedFields             map[string]struct{}
	proficiencies             map[int]struct{}
	removedproficiencies      map[int]struct{}
	clearedproficiencies      bool
	proficiency_choice        map[int]struct{}
	removedproficiency_choice map[int]struct{}
	clearedproficiency_choice bool
	languages                 map[int]struct{}
	removedlanguages          map[int]struct{}
	clearedlanguages          bool
	subrace                   map[int]struct{}
	removedsubrace            map[int]struct{}
	clearedsubrace            bool
	traits                    map[int]struct{}
	removedtraits             map[int]struct{}
	clearedtraits             bool
	ability_bonuses           map[int]struct{}
	removedability_bonuses    map[int]struct{}
	clearedability_bonuses    bool
	done                      bool
	oldValue                  func(context.Context) (*Race, error)
	predicates                []predicate.Race
}

var _ ent.Mutation = (*RaceMutation)(nil)

// raceOption allows management of the mutation configuration using functional options.
type raceOption func(*RaceMutation)

// newRaceMutation creates new mutation for the Race entity.
func newRaceMutation(c config, op Op, opts ...raceOption) *RaceMutation {
	m := &RaceMutation{
		config:        c,
		op:            op,
		typ:           TypeRace,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRaceID sets the ID field of the mutation.
func withRaceID(id int) raceOption {
	return func(m *RaceMutation) {
		var (
			err   error
			once  sync.Once
			value *Race
		)
		m.oldValue = func(ctx context.Context) (*Race, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Race.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRace sets the old Race of the mutation.
func withRace(node *Race) raceOption {
	return func(m *RaceMutation) {
		m.oldValue = func(context.Context) (*Race, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RaceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RaceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RaceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RaceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Race.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *RaceMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *RaceMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Race entity.
// If the Race object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RaceMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *RaceMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *RaceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RaceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Race entity.
// If the Race object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RaceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RaceMutation) ResetName() {
	m.name = nil
}

// SetAlignment sets the "alignment" field.
func (m *RaceMutation) SetAlignment(s string) {
	m.alignment = &s
}

// Alignment returns the value of the "alignment" field in the mutation.
func (m *RaceMutation) Alignment() (r string, exists bool) {
	v := m.alignment
	if v == nil {
		return
	}
	return *v, true
}

// OldAlignment returns the old "alignment" field's value of the Race entity.
// If the Race object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RaceMutation) OldAlignment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlignment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlignment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlignment: %w", err)
	}
	return oldValue.Alignment, nil
}

// ResetAlignment resets all changes to the "alignment" field.
func (m *RaceMutation) ResetAlignment() {
	m.alignment = nil
}

// SetAge sets the "age" field.
func (m *RaceMutation) SetAge(s string) {
	m.age = &s
}

// Age returns the value of the "age" field in the mutation.
func (m *RaceMutation) Age() (r string, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the Race entity.
// If the Race object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RaceMutation) OldAge(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// ResetAge resets all changes to the "age" field.
func (m *RaceMutation) ResetAge() {
	m.age = nil
}

// SetSize sets the "size" field.
func (m *RaceMutation) SetSize(s string) {
	m.size = &s
}

// Size returns the value of the "size" field in the mutation.
func (m *RaceMutation) Size() (r string, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the Race entity.
// If the Race object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RaceMutation) OldSize(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// ResetSize resets all changes to the "size" field.
func (m *RaceMutation) ResetSize() {
	m.size = nil
}

// SetSizeDescription sets the "size_description" field.
func (m *RaceMutation) SetSizeDescription(s string) {
	m.size_description = &s
}

// SizeDescription returns the value of the "size_description" field in the mutation.
func (m *RaceMutation) SizeDescription() (r string, exists bool) {
	v := m.size_description
	if v == nil {
		return
	}
	return *v, true
}

// OldSizeDescription returns the old "size_description" field's value of the Race entity.
// If the Race object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RaceMutation) OldSizeDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSizeDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSizeDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSizeDescription: %w", err)
	}
	return oldValue.SizeDescription, nil
}

// ResetSizeDescription resets all changes to the "size_description" field.
func (m *RaceMutation) ResetSizeDescription() {
	m.size_description = nil
}

// SetLanguageDesc sets the "language_desc" field.
func (m *RaceMutation) SetLanguageDesc(s string) {
	m.language_desc = &s
}

// LanguageDesc returns the value of the "language_desc" field in the mutation.
func (m *RaceMutation) LanguageDesc() (r string, exists bool) {
	v := m.language_desc
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguageDesc returns the old "language_desc" field's value of the Race entity.
// If the Race object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RaceMutation) OldLanguageDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguageDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguageDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguageDesc: %w", err)
	}
	return oldValue.LanguageDesc, nil
}

// ResetLanguageDesc resets all changes to the "language_desc" field.
func (m *RaceMutation) ResetLanguageDesc() {
	m.language_desc = nil
}

// SetSpeed sets the "speed" field.
func (m *RaceMutation) SetSpeed(i int) {
	m.speed = &i
	m.addspeed = nil
}

// Speed returns the value of the "speed" field in the mutation.
func (m *RaceMutation) Speed() (r int, exists bool) {
	v := m.speed
	if v == nil {
		return
	}
	return *v, true
}

// OldSpeed returns the old "speed" field's value of the Race entity.
// If the Race object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RaceMutation) OldSpeed(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpeed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpeed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpeed: %w", err)
	}
	return oldValue.Speed, nil
}

// AddSpeed adds i to the "speed" field.
func (m *RaceMutation) AddSpeed(i int) {
	if m.addspeed != nil {
		*m.addspeed += i
	} else {
		m.addspeed = &i
	}
}

// AddedSpeed returns the value that was added to the "speed" field in this mutation.
func (m *RaceMutation) AddedSpeed() (r int, exists bool) {
	v := m.addspeed
	if v == nil {
		return
	}
	return *v, true
}

// ResetSpeed resets all changes to the "speed" field.
func (m *RaceMutation) ResetSpeed() {
	m.speed = nil
	m.addspeed = nil
}

// AddProficiencyIDs adds the "proficiencies" edge to the Proficiency entity by ids.
func (m *RaceMutation) AddProficiencyIDs(ids ...int) {
	if m.proficiencies == nil {
		m.proficiencies = make(map[int]struct{})
	}
	for i := range ids {
		m.proficiencies[ids[i]] = struct{}{}
	}
}

// ClearProficiencies clears the "proficiencies" edge to the Proficiency entity.
func (m *RaceMutation) ClearProficiencies() {
	m.clearedproficiencies = true
}

// ProficienciesCleared reports if the "proficiencies" edge to the Proficiency entity was cleared.
func (m *RaceMutation) ProficienciesCleared() bool {
	return m.clearedproficiencies
}

// RemoveProficiencyIDs removes the "proficiencies" edge to the Proficiency entity by IDs.
func (m *RaceMutation) RemoveProficiencyIDs(ids ...int) {
	if m.removedproficiencies == nil {
		m.removedproficiencies = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.proficiencies, ids[i])
		m.removedproficiencies[ids[i]] = struct{}{}
	}
}

// RemovedProficiencies returns the removed IDs of the "proficiencies" edge to the Proficiency entity.
func (m *RaceMutation) RemovedProficienciesIDs() (ids []int) {
	for id := range m.removedproficiencies {
		ids = append(ids, id)
	}
	return
}

// ProficienciesIDs returns the "proficiencies" edge IDs in the mutation.
func (m *RaceMutation) ProficienciesIDs() (ids []int) {
	for id := range m.proficiencies {
		ids = append(ids, id)
	}
	return
}

// ResetProficiencies resets all changes to the "proficiencies" edge.
func (m *RaceMutation) ResetProficiencies() {
	m.proficiencies = nil
	m.clearedproficiencies = false
	m.removedproficiencies = nil
}

// AddProficiencyChoiceIDs adds the "proficiency_choice" edge to the ProficiencyChoice entity by ids.
func (m *RaceMutation) AddProficiencyChoiceIDs(ids ...int) {
	if m.proficiency_choice == nil {
		m.proficiency_choice = make(map[int]struct{})
	}
	for i := range ids {
		m.proficiency_choice[ids[i]] = struct{}{}
	}
}

// ClearProficiencyChoice clears the "proficiency_choice" edge to the ProficiencyChoice entity.
func (m *RaceMutation) ClearProficiencyChoice() {
	m.clearedproficiency_choice = true
}

// ProficiencyChoiceCleared reports if the "proficiency_choice" edge to the ProficiencyChoice entity was cleared.
func (m *RaceMutation) ProficiencyChoiceCleared() bool {
	return m.clearedproficiency_choice
}

// RemoveProficiencyChoiceIDs removes the "proficiency_choice" edge to the ProficiencyChoice entity by IDs.
func (m *RaceMutation) RemoveProficiencyChoiceIDs(ids ...int) {
	if m.removedproficiency_choice == nil {
		m.removedproficiency_choice = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.proficiency_choice, ids[i])
		m.removedproficiency_choice[ids[i]] = struct{}{}
	}
}

// RemovedProficiencyChoice returns the removed IDs of the "proficiency_choice" edge to the ProficiencyChoice entity.
func (m *RaceMutation) RemovedProficiencyChoiceIDs() (ids []int) {
	for id := range m.removedproficiency_choice {
		ids = append(ids, id)
	}
	return
}

// ProficiencyChoiceIDs returns the "proficiency_choice" edge IDs in the mutation.
func (m *RaceMutation) ProficiencyChoiceIDs() (ids []int) {
	for id := range m.proficiency_choice {
		ids = append(ids, id)
	}
	return
}

// ResetProficiencyChoice resets all changes to the "proficiency_choice" edge.
func (m *RaceMutation) ResetProficiencyChoice() {
	m.proficiency_choice = nil
	m.clearedproficiency_choice = false
	m.removedproficiency_choice = nil
}

// AddLanguageIDs adds the "languages" edge to the Language entity by ids.
func (m *RaceMutation) AddLanguageIDs(ids ...int) {
	if m.languages == nil {
		m.languages = make(map[int]struct{})
	}
	for i := range ids {
		m.languages[ids[i]] = struct{}{}
	}
}

// ClearLanguages clears the "languages" edge to the Language entity.
func (m *RaceMutation) ClearLanguages() {
	m.clearedlanguages = true
}

// LanguagesCleared reports if the "languages" edge to the Language entity was cleared.
func (m *RaceMutation) LanguagesCleared() bool {
	return m.clearedlanguages
}

// RemoveLanguageIDs removes the "languages" edge to the Language entity by IDs.
func (m *RaceMutation) RemoveLanguageIDs(ids ...int) {
	if m.removedlanguages == nil {
		m.removedlanguages = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.languages, ids[i])
		m.removedlanguages[ids[i]] = struct{}{}
	}
}

// RemovedLanguages returns the removed IDs of the "languages" edge to the Language entity.
func (m *RaceMutation) RemovedLanguagesIDs() (ids []int) {
	for id := range m.removedlanguages {
		ids = append(ids, id)
	}
	return
}

// LanguagesIDs returns the "languages" edge IDs in the mutation.
func (m *RaceMutation) LanguagesIDs() (ids []int) {
	for id := range m.languages {
		ids = append(ids, id)
	}
	return
}

// ResetLanguages resets all changes to the "languages" edge.
func (m *RaceMutation) ResetLanguages() {
	m.languages = nil
	m.clearedlanguages = false
	m.removedlanguages = nil
}

// AddSubraceIDs adds the "subrace" edge to the Subrace entity by ids.
func (m *RaceMutation) AddSubraceIDs(ids ...int) {
	if m.subrace == nil {
		m.subrace = make(map[int]struct{})
	}
	for i := range ids {
		m.subrace[ids[i]] = struct{}{}
	}
}

// ClearSubrace clears the "subrace" edge to the Subrace entity.
func (m *RaceMutation) ClearSubrace() {
	m.clearedsubrace = true
}

// SubraceCleared reports if the "subrace" edge to the Subrace entity was cleared.
func (m *RaceMutation) SubraceCleared() bool {
	return m.clearedsubrace
}

// RemoveSubraceIDs removes the "subrace" edge to the Subrace entity by IDs.
func (m *RaceMutation) RemoveSubraceIDs(ids ...int) {
	if m.removedsubrace == nil {
		m.removedsubrace = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.subrace, ids[i])
		m.removedsubrace[ids[i]] = struct{}{}
	}
}

// RemovedSubrace returns the removed IDs of the "subrace" edge to the Subrace entity.
func (m *RaceMutation) RemovedSubraceIDs() (ids []int) {
	for id := range m.removedsubrace {
		ids = append(ids, id)
	}
	return
}

// SubraceIDs returns the "subrace" edge IDs in the mutation.
func (m *RaceMutation) SubraceIDs() (ids []int) {
	for id := range m.subrace {
		ids = append(ids, id)
	}
	return
}

// ResetSubrace resets all changes to the "subrace" edge.
func (m *RaceMutation) ResetSubrace() {
	m.subrace = nil
	m.clearedsubrace = false
	m.removedsubrace = nil
}

// AddTraitIDs adds the "traits" edge to the Trait entity by ids.
func (m *RaceMutation) AddTraitIDs(ids ...int) {
	if m.traits == nil {
		m.traits = make(map[int]struct{})
	}
	for i := range ids {
		m.traits[ids[i]] = struct{}{}
	}
}

// ClearTraits clears the "traits" edge to the Trait entity.
func (m *RaceMutation) ClearTraits() {
	m.clearedtraits = true
}

// TraitsCleared reports if the "traits" edge to the Trait entity was cleared.
func (m *RaceMutation) TraitsCleared() bool {
	return m.clearedtraits
}

// RemoveTraitIDs removes the "traits" edge to the Trait entity by IDs.
func (m *RaceMutation) RemoveTraitIDs(ids ...int) {
	if m.removedtraits == nil {
		m.removedtraits = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.traits, ids[i])
		m.removedtraits[ids[i]] = struct{}{}
	}
}

// RemovedTraits returns the removed IDs of the "traits" edge to the Trait entity.
func (m *RaceMutation) RemovedTraitsIDs() (ids []int) {
	for id := range m.removedtraits {
		ids = append(ids, id)
	}
	return
}

// TraitsIDs returns the "traits" edge IDs in the mutation.
func (m *RaceMutation) TraitsIDs() (ids []int) {
	for id := range m.traits {
		ids = append(ids, id)
	}
	return
}

// ResetTraits resets all changes to the "traits" edge.
func (m *RaceMutation) ResetTraits() {
	m.traits = nil
	m.clearedtraits = false
	m.removedtraits = nil
}

// AddAbilityBonuseIDs adds the "ability_bonuses" edge to the AbilityBonus entity by ids.
func (m *RaceMutation) AddAbilityBonuseIDs(ids ...int) {
	if m.ability_bonuses == nil {
		m.ability_bonuses = make(map[int]struct{})
	}
	for i := range ids {
		m.ability_bonuses[ids[i]] = struct{}{}
	}
}

// ClearAbilityBonuses clears the "ability_bonuses" edge to the AbilityBonus entity.
func (m *RaceMutation) ClearAbilityBonuses() {
	m.clearedability_bonuses = true
}

// AbilityBonusesCleared reports if the "ability_bonuses" edge to the AbilityBonus entity was cleared.
func (m *RaceMutation) AbilityBonusesCleared() bool {
	return m.clearedability_bonuses
}

// RemoveAbilityBonuseIDs removes the "ability_bonuses" edge to the AbilityBonus entity by IDs.
func (m *RaceMutation) RemoveAbilityBonuseIDs(ids ...int) {
	if m.removedability_bonuses == nil {
		m.removedability_bonuses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.ability_bonuses, ids[i])
		m.removedability_bonuses[ids[i]] = struct{}{}
	}
}

// RemovedAbilityBonuses returns the removed IDs of the "ability_bonuses" edge to the AbilityBonus entity.
func (m *RaceMutation) RemovedAbilityBonusesIDs() (ids []int) {
	for id := range m.removedability_bonuses {
		ids = append(ids, id)
	}
	return
}

// AbilityBonusesIDs returns the "ability_bonuses" edge IDs in the mutation.
func (m *RaceMutation) AbilityBonusesIDs() (ids []int) {
	for id := range m.ability_bonuses {
		ids = append(ids, id)
	}
	return
}

// ResetAbilityBonuses resets all changes to the "ability_bonuses" edge.
func (m *RaceMutation) ResetAbilityBonuses() {
	m.ability_bonuses = nil
	m.clearedability_bonuses = false
	m.removedability_bonuses = nil
}

// Where appends a list predicates to the RaceMutation builder.
func (m *RaceMutation) Where(ps ...predicate.Race) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RaceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RaceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Race, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RaceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RaceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Race).
func (m *RaceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RaceMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.indx != nil {
		fields = append(fields, race.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, race.FieldName)
	}
	if m.alignment != nil {
		fields = append(fields, race.FieldAlignment)
	}
	if m.age != nil {
		fields = append(fields, race.FieldAge)
	}
	if m.size != nil {
		fields = append(fields, race.FieldSize)
	}
	if m.size_description != nil {
		fields = append(fields, race.FieldSizeDescription)
	}
	if m.language_desc != nil {
		fields = append(fields, race.FieldLanguageDesc)
	}
	if m.speed != nil {
		fields = append(fields, race.FieldSpeed)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RaceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case race.FieldIndx:
		return m.Indx()
	case race.FieldName:
		return m.Name()
	case race.FieldAlignment:
		return m.Alignment()
	case race.FieldAge:
		return m.Age()
	case race.FieldSize:
		return m.Size()
	case race.FieldSizeDescription:
		return m.SizeDescription()
	case race.FieldLanguageDesc:
		return m.LanguageDesc()
	case race.FieldSpeed:
		return m.Speed()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RaceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case race.FieldIndx:
		return m.OldIndx(ctx)
	case race.FieldName:
		return m.OldName(ctx)
	case race.FieldAlignment:
		return m.OldAlignment(ctx)
	case race.FieldAge:
		return m.OldAge(ctx)
	case race.FieldSize:
		return m.OldSize(ctx)
	case race.FieldSizeDescription:
		return m.OldSizeDescription(ctx)
	case race.FieldLanguageDesc:
		return m.OldLanguageDesc(ctx)
	case race.FieldSpeed:
		return m.OldSpeed(ctx)
	}
	return nil, fmt.Errorf("unknown Race field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RaceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case race.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case race.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case race.FieldAlignment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlignment(v)
		return nil
	case race.FieldAge:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case race.FieldSize:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case race.FieldSizeDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSizeDescription(v)
		return nil
	case race.FieldLanguageDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguageDesc(v)
		return nil
	case race.FieldSpeed:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpeed(v)
		return nil
	}
	return fmt.Errorf("unknown Race field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RaceMutation) AddedFields() []string {
	var fields []string
	if m.addspeed != nil {
		fields = append(fields, race.FieldSpeed)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RaceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case race.FieldSpeed:
		return m.AddedSpeed()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RaceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case race.FieldSpeed:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSpeed(v)
		return nil
	}
	return fmt.Errorf("unknown Race numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RaceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RaceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RaceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Race nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RaceMutation) ResetField(name string) error {
	switch name {
	case race.FieldIndx:
		m.ResetIndx()
		return nil
	case race.FieldName:
		m.ResetName()
		return nil
	case race.FieldAlignment:
		m.ResetAlignment()
		return nil
	case race.FieldAge:
		m.ResetAge()
		return nil
	case race.FieldSize:
		m.ResetSize()
		return nil
	case race.FieldSizeDescription:
		m.ResetSizeDescription()
		return nil
	case race.FieldLanguageDesc:
		m.ResetLanguageDesc()
		return nil
	case race.FieldSpeed:
		m.ResetSpeed()
		return nil
	}
	return fmt.Errorf("unknown Race field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RaceMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.proficiencies != nil {
		edges = append(edges, race.EdgeProficiencies)
	}
	if m.proficiency_choice != nil {
		edges = append(edges, race.EdgeProficiencyChoice)
	}
	if m.languages != nil {
		edges = append(edges, race.EdgeLanguages)
	}
	if m.subrace != nil {
		edges = append(edges, race.EdgeSubrace)
	}
	if m.traits != nil {
		edges = append(edges, race.EdgeTraits)
	}
	if m.ability_bonuses != nil {
		edges = append(edges, race.EdgeAbilityBonuses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RaceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case race.EdgeProficiencies:
		ids := make([]ent.Value, 0, len(m.proficiencies))
		for id := range m.proficiencies {
			ids = append(ids, id)
		}
		return ids
	case race.EdgeProficiencyChoice:
		ids := make([]ent.Value, 0, len(m.proficiency_choice))
		for id := range m.proficiency_choice {
			ids = append(ids, id)
		}
		return ids
	case race.EdgeLanguages:
		ids := make([]ent.Value, 0, len(m.languages))
		for id := range m.languages {
			ids = append(ids, id)
		}
		return ids
	case race.EdgeSubrace:
		ids := make([]ent.Value, 0, len(m.subrace))
		for id := range m.subrace {
			ids = append(ids, id)
		}
		return ids
	case race.EdgeTraits:
		ids := make([]ent.Value, 0, len(m.traits))
		for id := range m.traits {
			ids = append(ids, id)
		}
		return ids
	case race.EdgeAbilityBonuses:
		ids := make([]ent.Value, 0, len(m.ability_bonuses))
		for id := range m.ability_bonuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RaceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedproficiencies != nil {
		edges = append(edges, race.EdgeProficiencies)
	}
	if m.removedproficiency_choice != nil {
		edges = append(edges, race.EdgeProficiencyChoice)
	}
	if m.removedlanguages != nil {
		edges = append(edges, race.EdgeLanguages)
	}
	if m.removedsubrace != nil {
		edges = append(edges, race.EdgeSubrace)
	}
	if m.removedtraits != nil {
		edges = append(edges, race.EdgeTraits)
	}
	if m.removedability_bonuses != nil {
		edges = append(edges, race.EdgeAbilityBonuses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RaceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case race.EdgeProficiencies:
		ids := make([]ent.Value, 0, len(m.removedproficiencies))
		for id := range m.removedproficiencies {
			ids = append(ids, id)
		}
		return ids
	case race.EdgeProficiencyChoice:
		ids := make([]ent.Value, 0, len(m.removedproficiency_choice))
		for id := range m.removedproficiency_choice {
			ids = append(ids, id)
		}
		return ids
	case race.EdgeLanguages:
		ids := make([]ent.Value, 0, len(m.removedlanguages))
		for id := range m.removedlanguages {
			ids = append(ids, id)
		}
		return ids
	case race.EdgeSubrace:
		ids := make([]ent.Value, 0, len(m.removedsubrace))
		for id := range m.removedsubrace {
			ids = append(ids, id)
		}
		return ids
	case race.EdgeTraits:
		ids := make([]ent.Value, 0, len(m.removedtraits))
		for id := range m.removedtraits {
			ids = append(ids, id)
		}
		return ids
	case race.EdgeAbilityBonuses:
		ids := make([]ent.Value, 0, len(m.removedability_bonuses))
		for id := range m.removedability_bonuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RaceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedproficiencies {
		edges = append(edges, race.EdgeProficiencies)
	}
	if m.clearedproficiency_choice {
		edges = append(edges, race.EdgeProficiencyChoice)
	}
	if m.clearedlanguages {
		edges = append(edges, race.EdgeLanguages)
	}
	if m.clearedsubrace {
		edges = append(edges, race.EdgeSubrace)
	}
	if m.clearedtraits {
		edges = append(edges, race.EdgeTraits)
	}
	if m.clearedability_bonuses {
		edges = append(edges, race.EdgeAbilityBonuses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RaceMutation) EdgeCleared(name string) bool {
	switch name {
	case race.EdgeProficiencies:
		return m.clearedproficiencies
	case race.EdgeProficiencyChoice:
		return m.clearedproficiency_choice
	case race.EdgeLanguages:
		return m.clearedlanguages
	case race.EdgeSubrace:
		return m.clearedsubrace
	case race.EdgeTraits:
		return m.clearedtraits
	case race.EdgeAbilityBonuses:
		return m.clearedability_bonuses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RaceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Race unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RaceMutation) ResetEdge(name string) error {
	switch name {
	case race.EdgeProficiencies:
		m.ResetProficiencies()
		return nil
	case race.EdgeProficiencyChoice:
		m.ResetProficiencyChoice()
		return nil
	case race.EdgeLanguages:
		m.ResetLanguages()
		return nil
	case race.EdgeSubrace:
		m.ResetSubrace()
		return nil
	case race.EdgeTraits:
		m.ResetTraits()
		return nil
	case race.EdgeAbilityBonuses:
		m.ResetAbilityBonuses()
		return nil
	}
	return fmt.Errorf("unknown Race edge %s", name)
}

// RuleMutation represents an operation that mutates the Rule nodes in the graph.
type RuleMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	indx                 *string
	name                 *string
	desc                 *string
	clearedFields        map[string]struct{}
	rule_sections        map[int]struct{}
	removedrule_sections map[int]struct{}
	clearedrule_sections bool
	done                 bool
	oldValue             func(context.Context) (*Rule, error)
	predicates           []predicate.Rule
}

var _ ent.Mutation = (*RuleMutation)(nil)

// ruleOption allows management of the mutation configuration using functional options.
type ruleOption func(*RuleMutation)

// newRuleMutation creates new mutation for the Rule entity.
func newRuleMutation(c config, op Op, opts ...ruleOption) *RuleMutation {
	m := &RuleMutation{
		config:        c,
		op:            op,
		typ:           TypeRule,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRuleID sets the ID field of the mutation.
func withRuleID(id int) ruleOption {
	return func(m *RuleMutation) {
		var (
			err   error
			once  sync.Once
			value *Rule
		)
		m.oldValue = func(ctx context.Context) (*Rule, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rule.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRule sets the old Rule of the mutation.
func withRule(node *Rule) ruleOption {
	return func(m *RuleMutation) {
		m.oldValue = func(context.Context) (*Rule, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RuleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RuleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RuleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RuleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rule.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *RuleMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *RuleMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Rule entity.
// If the Rule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *RuleMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *RuleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RuleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Rule entity.
// If the Rule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RuleMutation) ResetName() {
	m.name = nil
}

// SetDesc sets the "desc" field.
func (m *RuleMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *RuleMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the Rule entity.
// If the Rule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *RuleMutation) ResetDesc() {
	m.desc = nil
}

// AddRuleSectionIDs adds the "rule_sections" edge to the RuleSection entity by ids.
func (m *RuleMutation) AddRuleSectionIDs(ids ...int) {
	if m.rule_sections == nil {
		m.rule_sections = make(map[int]struct{})
	}
	for i := range ids {
		m.rule_sections[ids[i]] = struct{}{}
	}
}

// ClearRuleSections clears the "rule_sections" edge to the RuleSection entity.
func (m *RuleMutation) ClearRuleSections() {
	m.clearedrule_sections = true
}

// RuleSectionsCleared reports if the "rule_sections" edge to the RuleSection entity was cleared.
func (m *RuleMutation) RuleSectionsCleared() bool {
	return m.clearedrule_sections
}

// RemoveRuleSectionIDs removes the "rule_sections" edge to the RuleSection entity by IDs.
func (m *RuleMutation) RemoveRuleSectionIDs(ids ...int) {
	if m.removedrule_sections == nil {
		m.removedrule_sections = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rule_sections, ids[i])
		m.removedrule_sections[ids[i]] = struct{}{}
	}
}

// RemovedRuleSections returns the removed IDs of the "rule_sections" edge to the RuleSection entity.
func (m *RuleMutation) RemovedRuleSectionsIDs() (ids []int) {
	for id := range m.removedrule_sections {
		ids = append(ids, id)
	}
	return
}

// RuleSectionsIDs returns the "rule_sections" edge IDs in the mutation.
func (m *RuleMutation) RuleSectionsIDs() (ids []int) {
	for id := range m.rule_sections {
		ids = append(ids, id)
	}
	return
}

// ResetRuleSections resets all changes to the "rule_sections" edge.
func (m *RuleMutation) ResetRuleSections() {
	m.rule_sections = nil
	m.clearedrule_sections = false
	m.removedrule_sections = nil
}

// Where appends a list predicates to the RuleMutation builder.
func (m *RuleMutation) Where(ps ...predicate.Rule) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RuleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RuleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rule, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RuleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RuleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rule).
func (m *RuleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RuleMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, rule.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, rule.FieldName)
	}
	if m.desc != nil {
		fields = append(fields, rule.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RuleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rule.FieldIndx:
		return m.Indx()
	case rule.FieldName:
		return m.Name()
	case rule.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RuleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rule.FieldIndx:
		return m.OldIndx(ctx)
	case rule.FieldName:
		return m.OldName(ctx)
	case rule.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown Rule field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RuleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rule.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case rule.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rule.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown Rule field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RuleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RuleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RuleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Rule numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RuleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RuleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RuleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rule nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RuleMutation) ResetField(name string) error {
	switch name {
	case rule.FieldIndx:
		m.ResetIndx()
		return nil
	case rule.FieldName:
		m.ResetName()
		return nil
	case rule.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown Rule field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RuleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rule_sections != nil {
		edges = append(edges, rule.EdgeRuleSections)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RuleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rule.EdgeRuleSections:
		ids := make([]ent.Value, 0, len(m.rule_sections))
		for id := range m.rule_sections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RuleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrule_sections != nil {
		edges = append(edges, rule.EdgeRuleSections)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RuleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rule.EdgeRuleSections:
		ids := make([]ent.Value, 0, len(m.removedrule_sections))
		for id := range m.removedrule_sections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RuleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrule_sections {
		edges = append(edges, rule.EdgeRuleSections)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RuleMutation) EdgeCleared(name string) bool {
	switch name {
	case rule.EdgeRuleSections:
		return m.clearedrule_sections
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RuleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rule unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RuleMutation) ResetEdge(name string) error {
	switch name {
	case rule.EdgeRuleSections:
		m.ResetRuleSections()
		return nil
	}
	return fmt.Errorf("unknown Rule edge %s", name)
}

// RuleSectionMutation represents an operation that mutates the RuleSection nodes in the graph.
type RuleSectionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	indx          *string
	name          *string
	desc          *string
	clearedFields map[string]struct{}
	rules         map[int]struct{}
	removedrules  map[int]struct{}
	clearedrules  bool
	done          bool
	oldValue      func(context.Context) (*RuleSection, error)
	predicates    []predicate.RuleSection
}

var _ ent.Mutation = (*RuleSectionMutation)(nil)

// rulesectionOption allows management of the mutation configuration using functional options.
type rulesectionOption func(*RuleSectionMutation)

// newRuleSectionMutation creates new mutation for the RuleSection entity.
func newRuleSectionMutation(c config, op Op, opts ...rulesectionOption) *RuleSectionMutation {
	m := &RuleSectionMutation{
		config:        c,
		op:            op,
		typ:           TypeRuleSection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRuleSectionID sets the ID field of the mutation.
func withRuleSectionID(id int) rulesectionOption {
	return func(m *RuleSectionMutation) {
		var (
			err   error
			once  sync.Once
			value *RuleSection
		)
		m.oldValue = func(ctx context.Context) (*RuleSection, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RuleSection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRuleSection sets the old RuleSection of the mutation.
func withRuleSection(node *RuleSection) rulesectionOption {
	return func(m *RuleSectionMutation) {
		m.oldValue = func(context.Context) (*RuleSection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RuleSectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RuleSectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RuleSectionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RuleSectionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RuleSection.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *RuleSectionMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *RuleSectionMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the RuleSection entity.
// If the RuleSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleSectionMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *RuleSectionMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *RuleSectionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RuleSectionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the RuleSection entity.
// If the RuleSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleSectionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RuleSectionMutation) ResetName() {
	m.name = nil
}

// SetDesc sets the "desc" field.
func (m *RuleSectionMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *RuleSectionMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the RuleSection entity.
// If the RuleSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleSectionMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *RuleSectionMutation) ResetDesc() {
	m.desc = nil
}

// AddRuleIDs adds the "rules" edge to the Rule entity by ids.
func (m *RuleSectionMutation) AddRuleIDs(ids ...int) {
	if m.rules == nil {
		m.rules = make(map[int]struct{})
	}
	for i := range ids {
		m.rules[ids[i]] = struct{}{}
	}
}

// ClearRules clears the "rules" edge to the Rule entity.
func (m *RuleSectionMutation) ClearRules() {
	m.clearedrules = true
}

// RulesCleared reports if the "rules" edge to the Rule entity was cleared.
func (m *RuleSectionMutation) RulesCleared() bool {
	return m.clearedrules
}

// RemoveRuleIDs removes the "rules" edge to the Rule entity by IDs.
func (m *RuleSectionMutation) RemoveRuleIDs(ids ...int) {
	if m.removedrules == nil {
		m.removedrules = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rules, ids[i])
		m.removedrules[ids[i]] = struct{}{}
	}
}

// RemovedRules returns the removed IDs of the "rules" edge to the Rule entity.
func (m *RuleSectionMutation) RemovedRulesIDs() (ids []int) {
	for id := range m.removedrules {
		ids = append(ids, id)
	}
	return
}

// RulesIDs returns the "rules" edge IDs in the mutation.
func (m *RuleSectionMutation) RulesIDs() (ids []int) {
	for id := range m.rules {
		ids = append(ids, id)
	}
	return
}

// ResetRules resets all changes to the "rules" edge.
func (m *RuleSectionMutation) ResetRules() {
	m.rules = nil
	m.clearedrules = false
	m.removedrules = nil
}

// Where appends a list predicates to the RuleSectionMutation builder.
func (m *RuleSectionMutation) Where(ps ...predicate.RuleSection) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RuleSectionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RuleSectionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RuleSection, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RuleSectionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RuleSectionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RuleSection).
func (m *RuleSectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RuleSectionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, rulesection.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, rulesection.FieldName)
	}
	if m.desc != nil {
		fields = append(fields, rulesection.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RuleSectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rulesection.FieldIndx:
		return m.Indx()
	case rulesection.FieldName:
		return m.Name()
	case rulesection.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RuleSectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rulesection.FieldIndx:
		return m.OldIndx(ctx)
	case rulesection.FieldName:
		return m.OldName(ctx)
	case rulesection.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown RuleSection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RuleSectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rulesection.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case rulesection.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rulesection.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown RuleSection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RuleSectionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RuleSectionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RuleSectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RuleSection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RuleSectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RuleSectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RuleSectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RuleSection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RuleSectionMutation) ResetField(name string) error {
	switch name {
	case rulesection.FieldIndx:
		m.ResetIndx()
		return nil
	case rulesection.FieldName:
		m.ResetName()
		return nil
	case rulesection.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown RuleSection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RuleSectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rules != nil {
		edges = append(edges, rulesection.EdgeRules)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RuleSectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rulesection.EdgeRules:
		ids := make([]ent.Value, 0, len(m.rules))
		for id := range m.rules {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RuleSectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrules != nil {
		edges = append(edges, rulesection.EdgeRules)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RuleSectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rulesection.EdgeRules:
		ids := make([]ent.Value, 0, len(m.removedrules))
		for id := range m.removedrules {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RuleSectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrules {
		edges = append(edges, rulesection.EdgeRules)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RuleSectionMutation) EdgeCleared(name string) bool {
	switch name {
	case rulesection.EdgeRules:
		return m.clearedrules
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RuleSectionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RuleSection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RuleSectionMutation) ResetEdge(name string) error {
	switch name {
	case rulesection.EdgeRules:
		m.ResetRules()
		return nil
	}
	return fmt.Errorf("unknown RuleSection edge %s", name)
}

// SkillMutation represents an operation that mutates the Skill nodes in the graph.
type SkillMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	indx                 *string
	name                 *string
	desc                 *[]string
	appenddesc           []string
	clearedFields        map[string]struct{}
	ability_score        *int
	clearedability_score bool
	done                 bool
	oldValue             func(context.Context) (*Skill, error)
	predicates           []predicate.Skill
}

var _ ent.Mutation = (*SkillMutation)(nil)

// skillOption allows management of the mutation configuration using functional options.
type skillOption func(*SkillMutation)

// newSkillMutation creates new mutation for the Skill entity.
func newSkillMutation(c config, op Op, opts ...skillOption) *SkillMutation {
	m := &SkillMutation{
		config:        c,
		op:            op,
		typ:           TypeSkill,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSkillID sets the ID field of the mutation.
func withSkillID(id int) skillOption {
	return func(m *SkillMutation) {
		var (
			err   error
			once  sync.Once
			value *Skill
		)
		m.oldValue = func(ctx context.Context) (*Skill, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Skill.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSkill sets the old Skill of the mutation.
func withSkill(node *Skill) skillOption {
	return func(m *SkillMutation) {
		m.oldValue = func(context.Context) (*Skill, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SkillMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SkillMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SkillMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SkillMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Skill.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *SkillMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *SkillMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *SkillMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *SkillMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SkillMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SkillMutation) ResetName() {
	m.name = nil
}

// SetDesc sets the "desc" field.
func (m *SkillMutation) SetDesc(s []string) {
	m.desc = &s
	m.appenddesc = nil
}

// Desc returns the value of the "desc" field in the mutation.
func (m *SkillMutation) Desc() (r []string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldDesc(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// AppendDesc adds s to the "desc" field.
func (m *SkillMutation) AppendDesc(s []string) {
	m.appenddesc = append(m.appenddesc, s...)
}

// AppendedDesc returns the list of values that were appended to the "desc" field in this mutation.
func (m *SkillMutation) AppendedDesc() ([]string, bool) {
	if len(m.appenddesc) == 0 {
		return nil, false
	}
	return m.appenddesc, true
}

// ResetDesc resets all changes to the "desc" field.
func (m *SkillMutation) ResetDesc() {
	m.desc = nil
	m.appenddesc = nil
}

// SetAbilityScoreID sets the "ability_score" edge to the AbilityScore entity by id.
func (m *SkillMutation) SetAbilityScoreID(id int) {
	m.ability_score = &id
}

// ClearAbilityScore clears the "ability_score" edge to the AbilityScore entity.
func (m *SkillMutation) ClearAbilityScore() {
	m.clearedability_score = true
}

// AbilityScoreCleared reports if the "ability_score" edge to the AbilityScore entity was cleared.
func (m *SkillMutation) AbilityScoreCleared() bool {
	return m.clearedability_score
}

// AbilityScoreID returns the "ability_score" edge ID in the mutation.
func (m *SkillMutation) AbilityScoreID() (id int, exists bool) {
	if m.ability_score != nil {
		return *m.ability_score, true
	}
	return
}

// AbilityScoreIDs returns the "ability_score" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AbilityScoreID instead. It exists only for internal usage by the builders.
func (m *SkillMutation) AbilityScoreIDs() (ids []int) {
	if id := m.ability_score; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAbilityScore resets all changes to the "ability_score" edge.
func (m *SkillMutation) ResetAbilityScore() {
	m.ability_score = nil
	m.clearedability_score = false
}

// Where appends a list predicates to the SkillMutation builder.
func (m *SkillMutation) Where(ps ...predicate.Skill) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SkillMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SkillMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Skill, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SkillMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SkillMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Skill).
func (m *SkillMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SkillMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, skill.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, skill.FieldName)
	}
	if m.desc != nil {
		fields = append(fields, skill.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SkillMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case skill.FieldIndx:
		return m.Indx()
	case skill.FieldName:
		return m.Name()
	case skill.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SkillMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case skill.FieldIndx:
		return m.OldIndx(ctx)
	case skill.FieldName:
		return m.OldName(ctx)
	case skill.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown Skill field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SkillMutation) SetField(name string, value ent.Value) error {
	switch name {
	case skill.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case skill.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case skill.FieldDesc:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown Skill field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SkillMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SkillMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SkillMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Skill numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SkillMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SkillMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SkillMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Skill nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SkillMutation) ResetField(name string) error {
	switch name {
	case skill.FieldIndx:
		m.ResetIndx()
		return nil
	case skill.FieldName:
		m.ResetName()
		return nil
	case skill.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown Skill field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SkillMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ability_score != nil {
		edges = append(edges, skill.EdgeAbilityScore)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SkillMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case skill.EdgeAbilityScore:
		if id := m.ability_score; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SkillMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SkillMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SkillMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedability_score {
		edges = append(edges, skill.EdgeAbilityScore)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SkillMutation) EdgeCleared(name string) bool {
	switch name {
	case skill.EdgeAbilityScore:
		return m.clearedability_score
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SkillMutation) ClearEdge(name string) error {
	switch name {
	case skill.EdgeAbilityScore:
		m.ClearAbilityScore()
		return nil
	}
	return fmt.Errorf("unknown Skill unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SkillMutation) ResetEdge(name string) error {
	switch name {
	case skill.EdgeAbilityScore:
		m.ResetAbilityScore()
		return nil
	}
	return fmt.Errorf("unknown Skill edge %s", name)
}

// SubraceMutation represents an operation that mutates the Subrace nodes in the graph.
type SubraceMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	indx                   *string
	name                   *string
	desc                   *string
	clearedFields          map[string]struct{}
	race                   *int
	clearedrace            bool
	proficiencies          map[int]struct{}
	removedproficiencies   map[int]struct{}
	clearedproficiencies   bool
	traits                 map[int]struct{}
	removedtraits          map[int]struct{}
	clearedtraits          bool
	ability_bonuses        map[int]struct{}
	removedability_bonuses map[int]struct{}
	clearedability_bonuses bool
	done                   bool
	oldValue               func(context.Context) (*Subrace, error)
	predicates             []predicate.Subrace
}

var _ ent.Mutation = (*SubraceMutation)(nil)

// subraceOption allows management of the mutation configuration using functional options.
type subraceOption func(*SubraceMutation)

// newSubraceMutation creates new mutation for the Subrace entity.
func newSubraceMutation(c config, op Op, opts ...subraceOption) *SubraceMutation {
	m := &SubraceMutation{
		config:        c,
		op:            op,
		typ:           TypeSubrace,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubraceID sets the ID field of the mutation.
func withSubraceID(id int) subraceOption {
	return func(m *SubraceMutation) {
		var (
			err   error
			once  sync.Once
			value *Subrace
		)
		m.oldValue = func(ctx context.Context) (*Subrace, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Subrace.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubrace sets the old Subrace of the mutation.
func withSubrace(node *Subrace) subraceOption {
	return func(m *SubraceMutation) {
		m.oldValue = func(context.Context) (*Subrace, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubraceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubraceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubraceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubraceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Subrace.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *SubraceMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *SubraceMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Subrace entity.
// If the Subrace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubraceMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *SubraceMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *SubraceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SubraceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Subrace entity.
// If the Subrace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubraceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SubraceMutation) ResetName() {
	m.name = nil
}

// SetDesc sets the "desc" field.
func (m *SubraceMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *SubraceMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the Subrace entity.
// If the Subrace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubraceMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *SubraceMutation) ResetDesc() {
	m.desc = nil
}

// SetRaceID sets the "race" edge to the Race entity by id.
func (m *SubraceMutation) SetRaceID(id int) {
	m.race = &id
}

// ClearRace clears the "race" edge to the Race entity.
func (m *SubraceMutation) ClearRace() {
	m.clearedrace = true
}

// RaceCleared reports if the "race" edge to the Race entity was cleared.
func (m *SubraceMutation) RaceCleared() bool {
	return m.clearedrace
}

// RaceID returns the "race" edge ID in the mutation.
func (m *SubraceMutation) RaceID() (id int, exists bool) {
	if m.race != nil {
		return *m.race, true
	}
	return
}

// RaceIDs returns the "race" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RaceID instead. It exists only for internal usage by the builders.
func (m *SubraceMutation) RaceIDs() (ids []int) {
	if id := m.race; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRace resets all changes to the "race" edge.
func (m *SubraceMutation) ResetRace() {
	m.race = nil
	m.clearedrace = false
}

// AddProficiencyIDs adds the "proficiencies" edge to the Proficiency entity by ids.
func (m *SubraceMutation) AddProficiencyIDs(ids ...int) {
	if m.proficiencies == nil {
		m.proficiencies = make(map[int]struct{})
	}
	for i := range ids {
		m.proficiencies[ids[i]] = struct{}{}
	}
}

// ClearProficiencies clears the "proficiencies" edge to the Proficiency entity.
func (m *SubraceMutation) ClearProficiencies() {
	m.clearedproficiencies = true
}

// ProficienciesCleared reports if the "proficiencies" edge to the Proficiency entity was cleared.
func (m *SubraceMutation) ProficienciesCleared() bool {
	return m.clearedproficiencies
}

// RemoveProficiencyIDs removes the "proficiencies" edge to the Proficiency entity by IDs.
func (m *SubraceMutation) RemoveProficiencyIDs(ids ...int) {
	if m.removedproficiencies == nil {
		m.removedproficiencies = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.proficiencies, ids[i])
		m.removedproficiencies[ids[i]] = struct{}{}
	}
}

// RemovedProficiencies returns the removed IDs of the "proficiencies" edge to the Proficiency entity.
func (m *SubraceMutation) RemovedProficienciesIDs() (ids []int) {
	for id := range m.removedproficiencies {
		ids = append(ids, id)
	}
	return
}

// ProficienciesIDs returns the "proficiencies" edge IDs in the mutation.
func (m *SubraceMutation) ProficienciesIDs() (ids []int) {
	for id := range m.proficiencies {
		ids = append(ids, id)
	}
	return
}

// ResetProficiencies resets all changes to the "proficiencies" edge.
func (m *SubraceMutation) ResetProficiencies() {
	m.proficiencies = nil
	m.clearedproficiencies = false
	m.removedproficiencies = nil
}

// AddTraitIDs adds the "traits" edge to the Trait entity by ids.
func (m *SubraceMutation) AddTraitIDs(ids ...int) {
	if m.traits == nil {
		m.traits = make(map[int]struct{})
	}
	for i := range ids {
		m.traits[ids[i]] = struct{}{}
	}
}

// ClearTraits clears the "traits" edge to the Trait entity.
func (m *SubraceMutation) ClearTraits() {
	m.clearedtraits = true
}

// TraitsCleared reports if the "traits" edge to the Trait entity was cleared.
func (m *SubraceMutation) TraitsCleared() bool {
	return m.clearedtraits
}

// RemoveTraitIDs removes the "traits" edge to the Trait entity by IDs.
func (m *SubraceMutation) RemoveTraitIDs(ids ...int) {
	if m.removedtraits == nil {
		m.removedtraits = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.traits, ids[i])
		m.removedtraits[ids[i]] = struct{}{}
	}
}

// RemovedTraits returns the removed IDs of the "traits" edge to the Trait entity.
func (m *SubraceMutation) RemovedTraitsIDs() (ids []int) {
	for id := range m.removedtraits {
		ids = append(ids, id)
	}
	return
}

// TraitsIDs returns the "traits" edge IDs in the mutation.
func (m *SubraceMutation) TraitsIDs() (ids []int) {
	for id := range m.traits {
		ids = append(ids, id)
	}
	return
}

// ResetTraits resets all changes to the "traits" edge.
func (m *SubraceMutation) ResetTraits() {
	m.traits = nil
	m.clearedtraits = false
	m.removedtraits = nil
}

// AddAbilityBonuseIDs adds the "ability_bonuses" edge to the AbilityBonus entity by ids.
func (m *SubraceMutation) AddAbilityBonuseIDs(ids ...int) {
	if m.ability_bonuses == nil {
		m.ability_bonuses = make(map[int]struct{})
	}
	for i := range ids {
		m.ability_bonuses[ids[i]] = struct{}{}
	}
}

// ClearAbilityBonuses clears the "ability_bonuses" edge to the AbilityBonus entity.
func (m *SubraceMutation) ClearAbilityBonuses() {
	m.clearedability_bonuses = true
}

// AbilityBonusesCleared reports if the "ability_bonuses" edge to the AbilityBonus entity was cleared.
func (m *SubraceMutation) AbilityBonusesCleared() bool {
	return m.clearedability_bonuses
}

// RemoveAbilityBonuseIDs removes the "ability_bonuses" edge to the AbilityBonus entity by IDs.
func (m *SubraceMutation) RemoveAbilityBonuseIDs(ids ...int) {
	if m.removedability_bonuses == nil {
		m.removedability_bonuses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.ability_bonuses, ids[i])
		m.removedability_bonuses[ids[i]] = struct{}{}
	}
}

// RemovedAbilityBonuses returns the removed IDs of the "ability_bonuses" edge to the AbilityBonus entity.
func (m *SubraceMutation) RemovedAbilityBonusesIDs() (ids []int) {
	for id := range m.removedability_bonuses {
		ids = append(ids, id)
	}
	return
}

// AbilityBonusesIDs returns the "ability_bonuses" edge IDs in the mutation.
func (m *SubraceMutation) AbilityBonusesIDs() (ids []int) {
	for id := range m.ability_bonuses {
		ids = append(ids, id)
	}
	return
}

// ResetAbilityBonuses resets all changes to the "ability_bonuses" edge.
func (m *SubraceMutation) ResetAbilityBonuses() {
	m.ability_bonuses = nil
	m.clearedability_bonuses = false
	m.removedability_bonuses = nil
}

// Where appends a list predicates to the SubraceMutation builder.
func (m *SubraceMutation) Where(ps ...predicate.Subrace) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubraceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubraceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Subrace, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubraceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubraceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Subrace).
func (m *SubraceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubraceMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, subrace.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, subrace.FieldName)
	}
	if m.desc != nil {
		fields = append(fields, subrace.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubraceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subrace.FieldIndx:
		return m.Indx()
	case subrace.FieldName:
		return m.Name()
	case subrace.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubraceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subrace.FieldIndx:
		return m.OldIndx(ctx)
	case subrace.FieldName:
		return m.OldName(ctx)
	case subrace.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown Subrace field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubraceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subrace.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case subrace.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case subrace.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown Subrace field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubraceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubraceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubraceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Subrace numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubraceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubraceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubraceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Subrace nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubraceMutation) ResetField(name string) error {
	switch name {
	case subrace.FieldIndx:
		m.ResetIndx()
		return nil
	case subrace.FieldName:
		m.ResetName()
		return nil
	case subrace.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown Subrace field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubraceMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.race != nil {
		edges = append(edges, subrace.EdgeRace)
	}
	if m.proficiencies != nil {
		edges = append(edges, subrace.EdgeProficiencies)
	}
	if m.traits != nil {
		edges = append(edges, subrace.EdgeTraits)
	}
	if m.ability_bonuses != nil {
		edges = append(edges, subrace.EdgeAbilityBonuses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubraceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subrace.EdgeRace:
		if id := m.race; id != nil {
			return []ent.Value{*id}
		}
	case subrace.EdgeProficiencies:
		ids := make([]ent.Value, 0, len(m.proficiencies))
		for id := range m.proficiencies {
			ids = append(ids, id)
		}
		return ids
	case subrace.EdgeTraits:
		ids := make([]ent.Value, 0, len(m.traits))
		for id := range m.traits {
			ids = append(ids, id)
		}
		return ids
	case subrace.EdgeAbilityBonuses:
		ids := make([]ent.Value, 0, len(m.ability_bonuses))
		for id := range m.ability_bonuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubraceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedproficiencies != nil {
		edges = append(edges, subrace.EdgeProficiencies)
	}
	if m.removedtraits != nil {
		edges = append(edges, subrace.EdgeTraits)
	}
	if m.removedability_bonuses != nil {
		edges = append(edges, subrace.EdgeAbilityBonuses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubraceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case subrace.EdgeProficiencies:
		ids := make([]ent.Value, 0, len(m.removedproficiencies))
		for id := range m.removedproficiencies {
			ids = append(ids, id)
		}
		return ids
	case subrace.EdgeTraits:
		ids := make([]ent.Value, 0, len(m.removedtraits))
		for id := range m.removedtraits {
			ids = append(ids, id)
		}
		return ids
	case subrace.EdgeAbilityBonuses:
		ids := make([]ent.Value, 0, len(m.removedability_bonuses))
		for id := range m.removedability_bonuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubraceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedrace {
		edges = append(edges, subrace.EdgeRace)
	}
	if m.clearedproficiencies {
		edges = append(edges, subrace.EdgeProficiencies)
	}
	if m.clearedtraits {
		edges = append(edges, subrace.EdgeTraits)
	}
	if m.clearedability_bonuses {
		edges = append(edges, subrace.EdgeAbilityBonuses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubraceMutation) EdgeCleared(name string) bool {
	switch name {
	case subrace.EdgeRace:
		return m.clearedrace
	case subrace.EdgeProficiencies:
		return m.clearedproficiencies
	case subrace.EdgeTraits:
		return m.clearedtraits
	case subrace.EdgeAbilityBonuses:
		return m.clearedability_bonuses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubraceMutation) ClearEdge(name string) error {
	switch name {
	case subrace.EdgeRace:
		m.ClearRace()
		return nil
	}
	return fmt.Errorf("unknown Subrace unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubraceMutation) ResetEdge(name string) error {
	switch name {
	case subrace.EdgeRace:
		m.ResetRace()
		return nil
	case subrace.EdgeProficiencies:
		m.ResetProficiencies()
		return nil
	case subrace.EdgeTraits:
		m.ResetTraits()
		return nil
	case subrace.EdgeAbilityBonuses:
		m.ResetAbilityBonuses()
		return nil
	}
	return fmt.Errorf("unknown Subrace edge %s", name)
}

// ToolMutation represents an operation that mutates the Tool nodes in the graph.
type ToolMutation struct {
	config
	op               Op
	typ              string
	id               *int
	indx             *string
	name             *string
	tool_category    *string
	clearedFields    map[string]struct{}
	equipment        *int
	clearedequipment bool
	done             bool
	oldValue         func(context.Context) (*Tool, error)
	predicates       []predicate.Tool
}

var _ ent.Mutation = (*ToolMutation)(nil)

// toolOption allows management of the mutation configuration using functional options.
type toolOption func(*ToolMutation)

// newToolMutation creates new mutation for the Tool entity.
func newToolMutation(c config, op Op, opts ...toolOption) *ToolMutation {
	m := &ToolMutation{
		config:        c,
		op:            op,
		typ:           TypeTool,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withToolID sets the ID field of the mutation.
func withToolID(id int) toolOption {
	return func(m *ToolMutation) {
		var (
			err   error
			once  sync.Once
			value *Tool
		)
		m.oldValue = func(ctx context.Context) (*Tool, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tool.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTool sets the old Tool of the mutation.
func withTool(node *Tool) toolOption {
	return func(m *ToolMutation) {
		m.oldValue = func(context.Context) (*Tool, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ToolMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ToolMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ToolMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ToolMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tool.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *ToolMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *ToolMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Tool entity.
// If the Tool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ToolMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *ToolMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *ToolMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ToolMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tool entity.
// If the Tool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ToolMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ToolMutation) ResetName() {
	m.name = nil
}

// SetToolCategory sets the "tool_category" field.
func (m *ToolMutation) SetToolCategory(s string) {
	m.tool_category = &s
}

// ToolCategory returns the value of the "tool_category" field in the mutation.
func (m *ToolMutation) ToolCategory() (r string, exists bool) {
	v := m.tool_category
	if v == nil {
		return
	}
	return *v, true
}

// OldToolCategory returns the old "tool_category" field's value of the Tool entity.
// If the Tool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ToolMutation) OldToolCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToolCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToolCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToolCategory: %w", err)
	}
	return oldValue.ToolCategory, nil
}

// ResetToolCategory resets all changes to the "tool_category" field.
func (m *ToolMutation) ResetToolCategory() {
	m.tool_category = nil
}

// SetEquipmentID sets the "equipment_id" field.
func (m *ToolMutation) SetEquipmentID(i int) {
	m.equipment = &i
}

// EquipmentID returns the value of the "equipment_id" field in the mutation.
func (m *ToolMutation) EquipmentID() (r int, exists bool) {
	v := m.equipment
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipmentID returns the old "equipment_id" field's value of the Tool entity.
// If the Tool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ToolMutation) OldEquipmentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquipmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquipmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipmentID: %w", err)
	}
	return oldValue.EquipmentID, nil
}

// ResetEquipmentID resets all changes to the "equipment_id" field.
func (m *ToolMutation) ResetEquipmentID() {
	m.equipment = nil
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *ToolMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *ToolMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EquipmentID instead. It exists only for internal usage by the builders.
func (m *ToolMutation) EquipmentIDs() (ids []int) {
	if id := m.equipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *ToolMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
}

// Where appends a list predicates to the ToolMutation builder.
func (m *ToolMutation) Where(ps ...predicate.Tool) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ToolMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ToolMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tool, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ToolMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ToolMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tool).
func (m *ToolMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ToolMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.indx != nil {
		fields = append(fields, tool.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, tool.FieldName)
	}
	if m.tool_category != nil {
		fields = append(fields, tool.FieldToolCategory)
	}
	if m.equipment != nil {
		fields = append(fields, tool.FieldEquipmentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ToolMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tool.FieldIndx:
		return m.Indx()
	case tool.FieldName:
		return m.Name()
	case tool.FieldToolCategory:
		return m.ToolCategory()
	case tool.FieldEquipmentID:
		return m.EquipmentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ToolMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tool.FieldIndx:
		return m.OldIndx(ctx)
	case tool.FieldName:
		return m.OldName(ctx)
	case tool.FieldToolCategory:
		return m.OldToolCategory(ctx)
	case tool.FieldEquipmentID:
		return m.OldEquipmentID(ctx)
	}
	return nil, fmt.Errorf("unknown Tool field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ToolMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tool.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case tool.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tool.FieldToolCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToolCategory(v)
		return nil
	case tool.FieldEquipmentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipmentID(v)
		return nil
	}
	return fmt.Errorf("unknown Tool field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ToolMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ToolMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ToolMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tool numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ToolMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ToolMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ToolMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tool nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ToolMutation) ResetField(name string) error {
	switch name {
	case tool.FieldIndx:
		m.ResetIndx()
		return nil
	case tool.FieldName:
		m.ResetName()
		return nil
	case tool.FieldToolCategory:
		m.ResetToolCategory()
		return nil
	case tool.FieldEquipmentID:
		m.ResetEquipmentID()
		return nil
	}
	return fmt.Errorf("unknown Tool field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ToolMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.equipment != nil {
		edges = append(edges, tool.EdgeEquipment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ToolMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tool.EdgeEquipment:
		if id := m.equipment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ToolMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ToolMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ToolMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedequipment {
		edges = append(edges, tool.EdgeEquipment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ToolMutation) EdgeCleared(name string) bool {
	switch name {
	case tool.EdgeEquipment:
		return m.clearedequipment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ToolMutation) ClearEdge(name string) error {
	switch name {
	case tool.EdgeEquipment:
		m.ClearEquipment()
		return nil
	}
	return fmt.Errorf("unknown Tool unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ToolMutation) ResetEdge(name string) error {
	switch name {
	case tool.EdgeEquipment:
		m.ResetEquipment()
		return nil
	}
	return fmt.Errorf("unknown Tool edge %s", name)
}

// TraitMutation represents an operation that mutates the Trait nodes in the graph.
type TraitMutation struct {
	config
	op              Op
	typ             string
	id              *int
	indx            *string
	name            *string
	desc            *[]string
	appenddesc      []string
	clearedFields   map[string]struct{}
	races           map[int]struct{}
	removedraces    map[int]struct{}
	clearedraces    bool
	subraces        map[int]struct{}
	removedsubraces map[int]struct{}
	clearedsubraces bool
	done            bool
	oldValue        func(context.Context) (*Trait, error)
	predicates      []predicate.Trait
}

var _ ent.Mutation = (*TraitMutation)(nil)

// traitOption allows management of the mutation configuration using functional options.
type traitOption func(*TraitMutation)

// newTraitMutation creates new mutation for the Trait entity.
func newTraitMutation(c config, op Op, opts ...traitOption) *TraitMutation {
	m := &TraitMutation{
		config:        c,
		op:            op,
		typ:           TypeTrait,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTraitID sets the ID field of the mutation.
func withTraitID(id int) traitOption {
	return func(m *TraitMutation) {
		var (
			err   error
			once  sync.Once
			value *Trait
		)
		m.oldValue = func(ctx context.Context) (*Trait, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Trait.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTrait sets the old Trait of the mutation.
func withTrait(node *Trait) traitOption {
	return func(m *TraitMutation) {
		m.oldValue = func(context.Context) (*Trait, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TraitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TraitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TraitMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TraitMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Trait.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *TraitMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *TraitMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Trait entity.
// If the Trait object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TraitMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *TraitMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *TraitMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TraitMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Trait entity.
// If the Trait object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TraitMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TraitMutation) ResetName() {
	m.name = nil
}

// SetDesc sets the "desc" field.
func (m *TraitMutation) SetDesc(s []string) {
	m.desc = &s
	m.appenddesc = nil
}

// Desc returns the value of the "desc" field in the mutation.
func (m *TraitMutation) Desc() (r []string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the Trait entity.
// If the Trait object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TraitMutation) OldDesc(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// AppendDesc adds s to the "desc" field.
func (m *TraitMutation) AppendDesc(s []string) {
	m.appenddesc = append(m.appenddesc, s...)
}

// AppendedDesc returns the list of values that were appended to the "desc" field in this mutation.
func (m *TraitMutation) AppendedDesc() ([]string, bool) {
	if len(m.appenddesc) == 0 {
		return nil, false
	}
	return m.appenddesc, true
}

// ResetDesc resets all changes to the "desc" field.
func (m *TraitMutation) ResetDesc() {
	m.desc = nil
	m.appenddesc = nil
}

// AddRaceIDs adds the "races" edge to the Race entity by ids.
func (m *TraitMutation) AddRaceIDs(ids ...int) {
	if m.races == nil {
		m.races = make(map[int]struct{})
	}
	for i := range ids {
		m.races[ids[i]] = struct{}{}
	}
}

// ClearRaces clears the "races" edge to the Race entity.
func (m *TraitMutation) ClearRaces() {
	m.clearedraces = true
}

// RacesCleared reports if the "races" edge to the Race entity was cleared.
func (m *TraitMutation) RacesCleared() bool {
	return m.clearedraces
}

// RemoveRaceIDs removes the "races" edge to the Race entity by IDs.
func (m *TraitMutation) RemoveRaceIDs(ids ...int) {
	if m.removedraces == nil {
		m.removedraces = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.races, ids[i])
		m.removedraces[ids[i]] = struct{}{}
	}
}

// RemovedRaces returns the removed IDs of the "races" edge to the Race entity.
func (m *TraitMutation) RemovedRacesIDs() (ids []int) {
	for id := range m.removedraces {
		ids = append(ids, id)
	}
	return
}

// RacesIDs returns the "races" edge IDs in the mutation.
func (m *TraitMutation) RacesIDs() (ids []int) {
	for id := range m.races {
		ids = append(ids, id)
	}
	return
}

// ResetRaces resets all changes to the "races" edge.
func (m *TraitMutation) ResetRaces() {
	m.races = nil
	m.clearedraces = false
	m.removedraces = nil
}

// AddSubraceIDs adds the "subraces" edge to the Subrace entity by ids.
func (m *TraitMutation) AddSubraceIDs(ids ...int) {
	if m.subraces == nil {
		m.subraces = make(map[int]struct{})
	}
	for i := range ids {
		m.subraces[ids[i]] = struct{}{}
	}
}

// ClearSubraces clears the "subraces" edge to the Subrace entity.
func (m *TraitMutation) ClearSubraces() {
	m.clearedsubraces = true
}

// SubracesCleared reports if the "subraces" edge to the Subrace entity was cleared.
func (m *TraitMutation) SubracesCleared() bool {
	return m.clearedsubraces
}

// RemoveSubraceIDs removes the "subraces" edge to the Subrace entity by IDs.
func (m *TraitMutation) RemoveSubraceIDs(ids ...int) {
	if m.removedsubraces == nil {
		m.removedsubraces = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.subraces, ids[i])
		m.removedsubraces[ids[i]] = struct{}{}
	}
}

// RemovedSubraces returns the removed IDs of the "subraces" edge to the Subrace entity.
func (m *TraitMutation) RemovedSubracesIDs() (ids []int) {
	for id := range m.removedsubraces {
		ids = append(ids, id)
	}
	return
}

// SubracesIDs returns the "subraces" edge IDs in the mutation.
func (m *TraitMutation) SubracesIDs() (ids []int) {
	for id := range m.subraces {
		ids = append(ids, id)
	}
	return
}

// ResetSubraces resets all changes to the "subraces" edge.
func (m *TraitMutation) ResetSubraces() {
	m.subraces = nil
	m.clearedsubraces = false
	m.removedsubraces = nil
}

// Where appends a list predicates to the TraitMutation builder.
func (m *TraitMutation) Where(ps ...predicate.Trait) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TraitMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TraitMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Trait, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TraitMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TraitMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Trait).
func (m *TraitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TraitMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, trait.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, trait.FieldName)
	}
	if m.desc != nil {
		fields = append(fields, trait.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TraitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case trait.FieldIndx:
		return m.Indx()
	case trait.FieldName:
		return m.Name()
	case trait.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TraitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case trait.FieldIndx:
		return m.OldIndx(ctx)
	case trait.FieldName:
		return m.OldName(ctx)
	case trait.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown Trait field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TraitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case trait.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case trait.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case trait.FieldDesc:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown Trait field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TraitMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TraitMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TraitMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Trait numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TraitMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TraitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TraitMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Trait nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TraitMutation) ResetField(name string) error {
	switch name {
	case trait.FieldIndx:
		m.ResetIndx()
		return nil
	case trait.FieldName:
		m.ResetName()
		return nil
	case trait.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown Trait field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TraitMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.races != nil {
		edges = append(edges, trait.EdgeRaces)
	}
	if m.subraces != nil {
		edges = append(edges, trait.EdgeSubraces)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TraitMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case trait.EdgeRaces:
		ids := make([]ent.Value, 0, len(m.races))
		for id := range m.races {
			ids = append(ids, id)
		}
		return ids
	case trait.EdgeSubraces:
		ids := make([]ent.Value, 0, len(m.subraces))
		for id := range m.subraces {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TraitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedraces != nil {
		edges = append(edges, trait.EdgeRaces)
	}
	if m.removedsubraces != nil {
		edges = append(edges, trait.EdgeSubraces)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TraitMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case trait.EdgeRaces:
		ids := make([]ent.Value, 0, len(m.removedraces))
		for id := range m.removedraces {
			ids = append(ids, id)
		}
		return ids
	case trait.EdgeSubraces:
		ids := make([]ent.Value, 0, len(m.removedsubraces))
		for id := range m.removedsubraces {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TraitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedraces {
		edges = append(edges, trait.EdgeRaces)
	}
	if m.clearedsubraces {
		edges = append(edges, trait.EdgeSubraces)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TraitMutation) EdgeCleared(name string) bool {
	switch name {
	case trait.EdgeRaces:
		return m.clearedraces
	case trait.EdgeSubraces:
		return m.clearedsubraces
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TraitMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Trait unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TraitMutation) ResetEdge(name string) error {
	switch name {
	case trait.EdgeRaces:
		m.ResetRaces()
		return nil
	case trait.EdgeSubraces:
		m.ResetSubraces()
		return nil
	}
	return fmt.Errorf("unknown Trait edge %s", name)
}

// VehicleMutation represents an operation that mutates the Vehicle nodes in the graph.
type VehicleMutation struct {
	config
	op               Op
	typ              string
	id               *int
	indx             *string
	name             *string
	vehicle_category *string
	capacity         *string
	clearedFields    map[string]struct{}
	equipment        *int
	clearedequipment bool
	done             bool
	oldValue         func(context.Context) (*Vehicle, error)
	predicates       []predicate.Vehicle
}

var _ ent.Mutation = (*VehicleMutation)(nil)

// vehicleOption allows management of the mutation configuration using functional options.
type vehicleOption func(*VehicleMutation)

// newVehicleMutation creates new mutation for the Vehicle entity.
func newVehicleMutation(c config, op Op, opts ...vehicleOption) *VehicleMutation {
	m := &VehicleMutation{
		config:        c,
		op:            op,
		typ:           TypeVehicle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVehicleID sets the ID field of the mutation.
func withVehicleID(id int) vehicleOption {
	return func(m *VehicleMutation) {
		var (
			err   error
			once  sync.Once
			value *Vehicle
		)
		m.oldValue = func(ctx context.Context) (*Vehicle, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Vehicle.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVehicle sets the old Vehicle of the mutation.
func withVehicle(node *Vehicle) vehicleOption {
	return func(m *VehicleMutation) {
		m.oldValue = func(context.Context) (*Vehicle, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VehicleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VehicleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VehicleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VehicleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Vehicle.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *VehicleMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *VehicleMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Vehicle entity.
// If the Vehicle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *VehicleMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *VehicleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *VehicleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Vehicle entity.
// If the Vehicle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *VehicleMutation) ResetName() {
	m.name = nil
}

// SetVehicleCategory sets the "vehicle_category" field.
func (m *VehicleMutation) SetVehicleCategory(s string) {
	m.vehicle_category = &s
}

// VehicleCategory returns the value of the "vehicle_category" field in the mutation.
func (m *VehicleMutation) VehicleCategory() (r string, exists bool) {
	v := m.vehicle_category
	if v == nil {
		return
	}
	return *v, true
}

// OldVehicleCategory returns the old "vehicle_category" field's value of the Vehicle entity.
// If the Vehicle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleMutation) OldVehicleCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVehicleCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVehicleCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVehicleCategory: %w", err)
	}
	return oldValue.VehicleCategory, nil
}

// ResetVehicleCategory resets all changes to the "vehicle_category" field.
func (m *VehicleMutation) ResetVehicleCategory() {
	m.vehicle_category = nil
}

// SetCapacity sets the "capacity" field.
func (m *VehicleMutation) SetCapacity(s string) {
	m.capacity = &s
}

// Capacity returns the value of the "capacity" field in the mutation.
func (m *VehicleMutation) Capacity() (r string, exists bool) {
	v := m.capacity
	if v == nil {
		return
	}
	return *v, true
}

// OldCapacity returns the old "capacity" field's value of the Vehicle entity.
// If the Vehicle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleMutation) OldCapacity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCapacity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCapacity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCapacity: %w", err)
	}
	return oldValue.Capacity, nil
}

// ResetCapacity resets all changes to the "capacity" field.
func (m *VehicleMutation) ResetCapacity() {
	m.capacity = nil
}

// SetEquipmentID sets the "equipment_id" field.
func (m *VehicleMutation) SetEquipmentID(i int) {
	m.equipment = &i
}

// EquipmentID returns the value of the "equipment_id" field in the mutation.
func (m *VehicleMutation) EquipmentID() (r int, exists bool) {
	v := m.equipment
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipmentID returns the old "equipment_id" field's value of the Vehicle entity.
// If the Vehicle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleMutation) OldEquipmentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquipmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquipmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipmentID: %w", err)
	}
	return oldValue.EquipmentID, nil
}

// ResetEquipmentID resets all changes to the "equipment_id" field.
func (m *VehicleMutation) ResetEquipmentID() {
	m.equipment = nil
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *VehicleMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *VehicleMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EquipmentID instead. It exists only for internal usage by the builders.
func (m *VehicleMutation) EquipmentIDs() (ids []int) {
	if id := m.equipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *VehicleMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
}

// Where appends a list predicates to the VehicleMutation builder.
func (m *VehicleMutation) Where(ps ...predicate.Vehicle) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VehicleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VehicleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Vehicle, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VehicleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VehicleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Vehicle).
func (m *VehicleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VehicleMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.indx != nil {
		fields = append(fields, vehicle.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, vehicle.FieldName)
	}
	if m.vehicle_category != nil {
		fields = append(fields, vehicle.FieldVehicleCategory)
	}
	if m.capacity != nil {
		fields = append(fields, vehicle.FieldCapacity)
	}
	if m.equipment != nil {
		fields = append(fields, vehicle.FieldEquipmentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VehicleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vehicle.FieldIndx:
		return m.Indx()
	case vehicle.FieldName:
		return m.Name()
	case vehicle.FieldVehicleCategory:
		return m.VehicleCategory()
	case vehicle.FieldCapacity:
		return m.Capacity()
	case vehicle.FieldEquipmentID:
		return m.EquipmentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VehicleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vehicle.FieldIndx:
		return m.OldIndx(ctx)
	case vehicle.FieldName:
		return m.OldName(ctx)
	case vehicle.FieldVehicleCategory:
		return m.OldVehicleCategory(ctx)
	case vehicle.FieldCapacity:
		return m.OldCapacity(ctx)
	case vehicle.FieldEquipmentID:
		return m.OldEquipmentID(ctx)
	}
	return nil, fmt.Errorf("unknown Vehicle field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VehicleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vehicle.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case vehicle.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case vehicle.FieldVehicleCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVehicleCategory(v)
		return nil
	case vehicle.FieldCapacity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCapacity(v)
		return nil
	case vehicle.FieldEquipmentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipmentID(v)
		return nil
	}
	return fmt.Errorf("unknown Vehicle field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VehicleMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VehicleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VehicleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Vehicle numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VehicleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VehicleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VehicleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Vehicle nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VehicleMutation) ResetField(name string) error {
	switch name {
	case vehicle.FieldIndx:
		m.ResetIndx()
		return nil
	case vehicle.FieldName:
		m.ResetName()
		return nil
	case vehicle.FieldVehicleCategory:
		m.ResetVehicleCategory()
		return nil
	case vehicle.FieldCapacity:
		m.ResetCapacity()
		return nil
	case vehicle.FieldEquipmentID:
		m.ResetEquipmentID()
		return nil
	}
	return fmt.Errorf("unknown Vehicle field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VehicleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.equipment != nil {
		edges = append(edges, vehicle.EdgeEquipment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VehicleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vehicle.EdgeEquipment:
		if id := m.equipment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VehicleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VehicleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VehicleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedequipment {
		edges = append(edges, vehicle.EdgeEquipment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VehicleMutation) EdgeCleared(name string) bool {
	switch name {
	case vehicle.EdgeEquipment:
		return m.clearedequipment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VehicleMutation) ClearEdge(name string) error {
	switch name {
	case vehicle.EdgeEquipment:
		m.ClearEquipment()
		return nil
	}
	return fmt.Errorf("unknown Vehicle unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VehicleMutation) ResetEdge(name string) error {
	switch name {
	case vehicle.EdgeEquipment:
		m.ResetEquipment()
		return nil
	}
	return fmt.Errorf("unknown Vehicle edge %s", name)
}

// WeaponMutation represents an operation that mutates the Weapon nodes in the graph.
type WeaponMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	indx                     *string
	name                     *string
	weapon_category          *string
	weapon_range             *string
	clearedFields            map[string]struct{}
	equipment                *int
	clearedequipment         bool
	weapon_damage            map[int]struct{}
	removedweapon_damage     map[int]struct{}
	clearedweapon_damage     bool
	weapon_properties        map[int]struct{}
	removedweapon_properties map[int]struct{}
	clearedweapon_properties bool
	done                     bool
	oldValue                 func(context.Context) (*Weapon, error)
	predicates               []predicate.Weapon
}

var _ ent.Mutation = (*WeaponMutation)(nil)

// weaponOption allows management of the mutation configuration using functional options.
type weaponOption func(*WeaponMutation)

// newWeaponMutation creates new mutation for the Weapon entity.
func newWeaponMutation(c config, op Op, opts ...weaponOption) *WeaponMutation {
	m := &WeaponMutation{
		config:        c,
		op:            op,
		typ:           TypeWeapon,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWeaponID sets the ID field of the mutation.
func withWeaponID(id int) weaponOption {
	return func(m *WeaponMutation) {
		var (
			err   error
			once  sync.Once
			value *Weapon
		)
		m.oldValue = func(ctx context.Context) (*Weapon, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Weapon.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWeapon sets the old Weapon of the mutation.
func withWeapon(node *Weapon) weaponOption {
	return func(m *WeaponMutation) {
		m.oldValue = func(context.Context) (*Weapon, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WeaponMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WeaponMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WeaponMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WeaponMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Weapon.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *WeaponMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *WeaponMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the Weapon entity.
// If the Weapon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *WeaponMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *WeaponMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *WeaponMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Weapon entity.
// If the Weapon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *WeaponMutation) ResetName() {
	m.name = nil
}

// SetEquipmentID sets the "equipment_id" field.
func (m *WeaponMutation) SetEquipmentID(i int) {
	m.equipment = &i
}

// EquipmentID returns the value of the "equipment_id" field in the mutation.
func (m *WeaponMutation) EquipmentID() (r int, exists bool) {
	v := m.equipment
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipmentID returns the old "equipment_id" field's value of the Weapon entity.
// If the Weapon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponMutation) OldEquipmentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquipmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquipmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipmentID: %w", err)
	}
	return oldValue.EquipmentID, nil
}

// ResetEquipmentID resets all changes to the "equipment_id" field.
func (m *WeaponMutation) ResetEquipmentID() {
	m.equipment = nil
}

// SetWeaponCategory sets the "weapon_category" field.
func (m *WeaponMutation) SetWeaponCategory(s string) {
	m.weapon_category = &s
}

// WeaponCategory returns the value of the "weapon_category" field in the mutation.
func (m *WeaponMutation) WeaponCategory() (r string, exists bool) {
	v := m.weapon_category
	if v == nil {
		return
	}
	return *v, true
}

// OldWeaponCategory returns the old "weapon_category" field's value of the Weapon entity.
// If the Weapon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponMutation) OldWeaponCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeaponCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeaponCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeaponCategory: %w", err)
	}
	return oldValue.WeaponCategory, nil
}

// ResetWeaponCategory resets all changes to the "weapon_category" field.
func (m *WeaponMutation) ResetWeaponCategory() {
	m.weapon_category = nil
}

// SetWeaponRange sets the "weapon_range" field.
func (m *WeaponMutation) SetWeaponRange(s string) {
	m.weapon_range = &s
}

// WeaponRange returns the value of the "weapon_range" field in the mutation.
func (m *WeaponMutation) WeaponRange() (r string, exists bool) {
	v := m.weapon_range
	if v == nil {
		return
	}
	return *v, true
}

// OldWeaponRange returns the old "weapon_range" field's value of the Weapon entity.
// If the Weapon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponMutation) OldWeaponRange(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeaponRange is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeaponRange requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeaponRange: %w", err)
	}
	return oldValue.WeaponRange, nil
}

// ResetWeaponRange resets all changes to the "weapon_range" field.
func (m *WeaponMutation) ResetWeaponRange() {
	m.weapon_range = nil
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *WeaponMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *WeaponMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EquipmentID instead. It exists only for internal usage by the builders.
func (m *WeaponMutation) EquipmentIDs() (ids []int) {
	if id := m.equipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *WeaponMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
}

// AddWeaponDamageIDs adds the "weapon_damage" edge to the WeaponDamage entity by ids.
func (m *WeaponMutation) AddWeaponDamageIDs(ids ...int) {
	if m.weapon_damage == nil {
		m.weapon_damage = make(map[int]struct{})
	}
	for i := range ids {
		m.weapon_damage[ids[i]] = struct{}{}
	}
}

// ClearWeaponDamage clears the "weapon_damage" edge to the WeaponDamage entity.
func (m *WeaponMutation) ClearWeaponDamage() {
	m.clearedweapon_damage = true
}

// WeaponDamageCleared reports if the "weapon_damage" edge to the WeaponDamage entity was cleared.
func (m *WeaponMutation) WeaponDamageCleared() bool {
	return m.clearedweapon_damage
}

// RemoveWeaponDamageIDs removes the "weapon_damage" edge to the WeaponDamage entity by IDs.
func (m *WeaponMutation) RemoveWeaponDamageIDs(ids ...int) {
	if m.removedweapon_damage == nil {
		m.removedweapon_damage = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.weapon_damage, ids[i])
		m.removedweapon_damage[ids[i]] = struct{}{}
	}
}

// RemovedWeaponDamage returns the removed IDs of the "weapon_damage" edge to the WeaponDamage entity.
func (m *WeaponMutation) RemovedWeaponDamageIDs() (ids []int) {
	for id := range m.removedweapon_damage {
		ids = append(ids, id)
	}
	return
}

// WeaponDamageIDs returns the "weapon_damage" edge IDs in the mutation.
func (m *WeaponMutation) WeaponDamageIDs() (ids []int) {
	for id := range m.weapon_damage {
		ids = append(ids, id)
	}
	return
}

// ResetWeaponDamage resets all changes to the "weapon_damage" edge.
func (m *WeaponMutation) ResetWeaponDamage() {
	m.weapon_damage = nil
	m.clearedweapon_damage = false
	m.removedweapon_damage = nil
}

// AddWeaponPropertyIDs adds the "weapon_properties" edge to the WeaponProperty entity by ids.
func (m *WeaponMutation) AddWeaponPropertyIDs(ids ...int) {
	if m.weapon_properties == nil {
		m.weapon_properties = make(map[int]struct{})
	}
	for i := range ids {
		m.weapon_properties[ids[i]] = struct{}{}
	}
}

// ClearWeaponProperties clears the "weapon_properties" edge to the WeaponProperty entity.
func (m *WeaponMutation) ClearWeaponProperties() {
	m.clearedweapon_properties = true
}

// WeaponPropertiesCleared reports if the "weapon_properties" edge to the WeaponProperty entity was cleared.
func (m *WeaponMutation) WeaponPropertiesCleared() bool {
	return m.clearedweapon_properties
}

// RemoveWeaponPropertyIDs removes the "weapon_properties" edge to the WeaponProperty entity by IDs.
func (m *WeaponMutation) RemoveWeaponPropertyIDs(ids ...int) {
	if m.removedweapon_properties == nil {
		m.removedweapon_properties = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.weapon_properties, ids[i])
		m.removedweapon_properties[ids[i]] = struct{}{}
	}
}

// RemovedWeaponProperties returns the removed IDs of the "weapon_properties" edge to the WeaponProperty entity.
func (m *WeaponMutation) RemovedWeaponPropertiesIDs() (ids []int) {
	for id := range m.removedweapon_properties {
		ids = append(ids, id)
	}
	return
}

// WeaponPropertiesIDs returns the "weapon_properties" edge IDs in the mutation.
func (m *WeaponMutation) WeaponPropertiesIDs() (ids []int) {
	for id := range m.weapon_properties {
		ids = append(ids, id)
	}
	return
}

// ResetWeaponProperties resets all changes to the "weapon_properties" edge.
func (m *WeaponMutation) ResetWeaponProperties() {
	m.weapon_properties = nil
	m.clearedweapon_properties = false
	m.removedweapon_properties = nil
}

// Where appends a list predicates to the WeaponMutation builder.
func (m *WeaponMutation) Where(ps ...predicate.Weapon) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WeaponMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WeaponMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Weapon, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WeaponMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WeaponMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Weapon).
func (m *WeaponMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WeaponMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.indx != nil {
		fields = append(fields, weapon.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, weapon.FieldName)
	}
	if m.equipment != nil {
		fields = append(fields, weapon.FieldEquipmentID)
	}
	if m.weapon_category != nil {
		fields = append(fields, weapon.FieldWeaponCategory)
	}
	if m.weapon_range != nil {
		fields = append(fields, weapon.FieldWeaponRange)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WeaponMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case weapon.FieldIndx:
		return m.Indx()
	case weapon.FieldName:
		return m.Name()
	case weapon.FieldEquipmentID:
		return m.EquipmentID()
	case weapon.FieldWeaponCategory:
		return m.WeaponCategory()
	case weapon.FieldWeaponRange:
		return m.WeaponRange()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WeaponMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case weapon.FieldIndx:
		return m.OldIndx(ctx)
	case weapon.FieldName:
		return m.OldName(ctx)
	case weapon.FieldEquipmentID:
		return m.OldEquipmentID(ctx)
	case weapon.FieldWeaponCategory:
		return m.OldWeaponCategory(ctx)
	case weapon.FieldWeaponRange:
		return m.OldWeaponRange(ctx)
	}
	return nil, fmt.Errorf("unknown Weapon field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeaponMutation) SetField(name string, value ent.Value) error {
	switch name {
	case weapon.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case weapon.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case weapon.FieldEquipmentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipmentID(v)
		return nil
	case weapon.FieldWeaponCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeaponCategory(v)
		return nil
	case weapon.FieldWeaponRange:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeaponRange(v)
		return nil
	}
	return fmt.Errorf("unknown Weapon field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WeaponMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WeaponMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeaponMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Weapon numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WeaponMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WeaponMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WeaponMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Weapon nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WeaponMutation) ResetField(name string) error {
	switch name {
	case weapon.FieldIndx:
		m.ResetIndx()
		return nil
	case weapon.FieldName:
		m.ResetName()
		return nil
	case weapon.FieldEquipmentID:
		m.ResetEquipmentID()
		return nil
	case weapon.FieldWeaponCategory:
		m.ResetWeaponCategory()
		return nil
	case weapon.FieldWeaponRange:
		m.ResetWeaponRange()
		return nil
	}
	return fmt.Errorf("unknown Weapon field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WeaponMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.equipment != nil {
		edges = append(edges, weapon.EdgeEquipment)
	}
	if m.weapon_damage != nil {
		edges = append(edges, weapon.EdgeWeaponDamage)
	}
	if m.weapon_properties != nil {
		edges = append(edges, weapon.EdgeWeaponProperties)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WeaponMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case weapon.EdgeEquipment:
		if id := m.equipment; id != nil {
			return []ent.Value{*id}
		}
	case weapon.EdgeWeaponDamage:
		ids := make([]ent.Value, 0, len(m.weapon_damage))
		for id := range m.weapon_damage {
			ids = append(ids, id)
		}
		return ids
	case weapon.EdgeWeaponProperties:
		ids := make([]ent.Value, 0, len(m.weapon_properties))
		for id := range m.weapon_properties {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WeaponMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedweapon_damage != nil {
		edges = append(edges, weapon.EdgeWeaponDamage)
	}
	if m.removedweapon_properties != nil {
		edges = append(edges, weapon.EdgeWeaponProperties)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WeaponMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case weapon.EdgeWeaponDamage:
		ids := make([]ent.Value, 0, len(m.removedweapon_damage))
		for id := range m.removedweapon_damage {
			ids = append(ids, id)
		}
		return ids
	case weapon.EdgeWeaponProperties:
		ids := make([]ent.Value, 0, len(m.removedweapon_properties))
		for id := range m.removedweapon_properties {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WeaponMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedequipment {
		edges = append(edges, weapon.EdgeEquipment)
	}
	if m.clearedweapon_damage {
		edges = append(edges, weapon.EdgeWeaponDamage)
	}
	if m.clearedweapon_properties {
		edges = append(edges, weapon.EdgeWeaponProperties)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WeaponMutation) EdgeCleared(name string) bool {
	switch name {
	case weapon.EdgeEquipment:
		return m.clearedequipment
	case weapon.EdgeWeaponDamage:
		return m.clearedweapon_damage
	case weapon.EdgeWeaponProperties:
		return m.clearedweapon_properties
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WeaponMutation) ClearEdge(name string) error {
	switch name {
	case weapon.EdgeEquipment:
		m.ClearEquipment()
		return nil
	}
	return fmt.Errorf("unknown Weapon unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WeaponMutation) ResetEdge(name string) error {
	switch name {
	case weapon.EdgeEquipment:
		m.ResetEquipment()
		return nil
	case weapon.EdgeWeaponDamage:
		m.ResetWeaponDamage()
		return nil
	case weapon.EdgeWeaponProperties:
		m.ResetWeaponProperties()
		return nil
	}
	return fmt.Errorf("unknown Weapon edge %s", name)
}

// WeaponDamageMutation represents an operation that mutates the WeaponDamage nodes in the graph.
type WeaponDamageMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	dice               *string
	clearedFields      map[string]struct{}
	weapon             *int
	clearedweapon      bool
	damage_type        *int
	cleareddamage_type bool
	done               bool
	oldValue           func(context.Context) (*WeaponDamage, error)
	predicates         []predicate.WeaponDamage
}

var _ ent.Mutation = (*WeaponDamageMutation)(nil)

// weapondamageOption allows management of the mutation configuration using functional options.
type weapondamageOption func(*WeaponDamageMutation)

// newWeaponDamageMutation creates new mutation for the WeaponDamage entity.
func newWeaponDamageMutation(c config, op Op, opts ...weapondamageOption) *WeaponDamageMutation {
	m := &WeaponDamageMutation{
		config:        c,
		op:            op,
		typ:           TypeWeaponDamage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWeaponDamageID sets the ID field of the mutation.
func withWeaponDamageID(id int) weapondamageOption {
	return func(m *WeaponDamageMutation) {
		var (
			err   error
			once  sync.Once
			value *WeaponDamage
		)
		m.oldValue = func(ctx context.Context) (*WeaponDamage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WeaponDamage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWeaponDamage sets the old WeaponDamage of the mutation.
func withWeaponDamage(node *WeaponDamage) weapondamageOption {
	return func(m *WeaponDamageMutation) {
		m.oldValue = func(context.Context) (*WeaponDamage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WeaponDamageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WeaponDamageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WeaponDamageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WeaponDamageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WeaponDamage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWeaponID sets the "weapon_id" field.
func (m *WeaponDamageMutation) SetWeaponID(i int) {
	m.weapon = &i
}

// WeaponID returns the value of the "weapon_id" field in the mutation.
func (m *WeaponDamageMutation) WeaponID() (r int, exists bool) {
	v := m.weapon
	if v == nil {
		return
	}
	return *v, true
}

// OldWeaponID returns the old "weapon_id" field's value of the WeaponDamage entity.
// If the WeaponDamage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponDamageMutation) OldWeaponID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeaponID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeaponID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeaponID: %w", err)
	}
	return oldValue.WeaponID, nil
}

// ResetWeaponID resets all changes to the "weapon_id" field.
func (m *WeaponDamageMutation) ResetWeaponID() {
	m.weapon = nil
}

// SetDamageTypeID sets the "damage_type_id" field.
func (m *WeaponDamageMutation) SetDamageTypeID(i int) {
	m.damage_type = &i
}

// DamageTypeID returns the value of the "damage_type_id" field in the mutation.
func (m *WeaponDamageMutation) DamageTypeID() (r int, exists bool) {
	v := m.damage_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDamageTypeID returns the old "damage_type_id" field's value of the WeaponDamage entity.
// If the WeaponDamage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponDamageMutation) OldDamageTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDamageTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDamageTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDamageTypeID: %w", err)
	}
	return oldValue.DamageTypeID, nil
}

// ResetDamageTypeID resets all changes to the "damage_type_id" field.
func (m *WeaponDamageMutation) ResetDamageTypeID() {
	m.damage_type = nil
}

// SetDice sets the "dice" field.
func (m *WeaponDamageMutation) SetDice(s string) {
	m.dice = &s
}

// Dice returns the value of the "dice" field in the mutation.
func (m *WeaponDamageMutation) Dice() (r string, exists bool) {
	v := m.dice
	if v == nil {
		return
	}
	return *v, true
}

// OldDice returns the old "dice" field's value of the WeaponDamage entity.
// If the WeaponDamage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponDamageMutation) OldDice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDice: %w", err)
	}
	return oldValue.Dice, nil
}

// ResetDice resets all changes to the "dice" field.
func (m *WeaponDamageMutation) ResetDice() {
	m.dice = nil
}

// ClearWeapon clears the "weapon" edge to the Weapon entity.
func (m *WeaponDamageMutation) ClearWeapon() {
	m.clearedweapon = true
}

// WeaponCleared reports if the "weapon" edge to the Weapon entity was cleared.
func (m *WeaponDamageMutation) WeaponCleared() bool {
	return m.clearedweapon
}

// WeaponIDs returns the "weapon" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WeaponID instead. It exists only for internal usage by the builders.
func (m *WeaponDamageMutation) WeaponIDs() (ids []int) {
	if id := m.weapon; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWeapon resets all changes to the "weapon" edge.
func (m *WeaponDamageMutation) ResetWeapon() {
	m.weapon = nil
	m.clearedweapon = false
}

// ClearDamageType clears the "damage_type" edge to the DamageType entity.
func (m *WeaponDamageMutation) ClearDamageType() {
	m.cleareddamage_type = true
}

// DamageTypeCleared reports if the "damage_type" edge to the DamageType entity was cleared.
func (m *WeaponDamageMutation) DamageTypeCleared() bool {
	return m.cleareddamage_type
}

// DamageTypeIDs returns the "damage_type" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DamageTypeID instead. It exists only for internal usage by the builders.
func (m *WeaponDamageMutation) DamageTypeIDs() (ids []int) {
	if id := m.damage_type; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDamageType resets all changes to the "damage_type" edge.
func (m *WeaponDamageMutation) ResetDamageType() {
	m.damage_type = nil
	m.cleareddamage_type = false
}

// Where appends a list predicates to the WeaponDamageMutation builder.
func (m *WeaponDamageMutation) Where(ps ...predicate.WeaponDamage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WeaponDamageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WeaponDamageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WeaponDamage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WeaponDamageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WeaponDamageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WeaponDamage).
func (m *WeaponDamageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WeaponDamageMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.weapon != nil {
		fields = append(fields, weapondamage.FieldWeaponID)
	}
	if m.damage_type != nil {
		fields = append(fields, weapondamage.FieldDamageTypeID)
	}
	if m.dice != nil {
		fields = append(fields, weapondamage.FieldDice)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WeaponDamageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case weapondamage.FieldWeaponID:
		return m.WeaponID()
	case weapondamage.FieldDamageTypeID:
		return m.DamageTypeID()
	case weapondamage.FieldDice:
		return m.Dice()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WeaponDamageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case weapondamage.FieldWeaponID:
		return m.OldWeaponID(ctx)
	case weapondamage.FieldDamageTypeID:
		return m.OldDamageTypeID(ctx)
	case weapondamage.FieldDice:
		return m.OldDice(ctx)
	}
	return nil, fmt.Errorf("unknown WeaponDamage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeaponDamageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case weapondamage.FieldWeaponID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeaponID(v)
		return nil
	case weapondamage.FieldDamageTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDamageTypeID(v)
		return nil
	case weapondamage.FieldDice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDice(v)
		return nil
	}
	return fmt.Errorf("unknown WeaponDamage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WeaponDamageMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WeaponDamageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeaponDamageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WeaponDamage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WeaponDamageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WeaponDamageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WeaponDamageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WeaponDamage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WeaponDamageMutation) ResetField(name string) error {
	switch name {
	case weapondamage.FieldWeaponID:
		m.ResetWeaponID()
		return nil
	case weapondamage.FieldDamageTypeID:
		m.ResetDamageTypeID()
		return nil
	case weapondamage.FieldDice:
		m.ResetDice()
		return nil
	}
	return fmt.Errorf("unknown WeaponDamage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WeaponDamageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.weapon != nil {
		edges = append(edges, weapondamage.EdgeWeapon)
	}
	if m.damage_type != nil {
		edges = append(edges, weapondamage.EdgeDamageType)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WeaponDamageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case weapondamage.EdgeWeapon:
		if id := m.weapon; id != nil {
			return []ent.Value{*id}
		}
	case weapondamage.EdgeDamageType:
		if id := m.damage_type; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WeaponDamageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WeaponDamageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WeaponDamageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedweapon {
		edges = append(edges, weapondamage.EdgeWeapon)
	}
	if m.cleareddamage_type {
		edges = append(edges, weapondamage.EdgeDamageType)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WeaponDamageMutation) EdgeCleared(name string) bool {
	switch name {
	case weapondamage.EdgeWeapon:
		return m.clearedweapon
	case weapondamage.EdgeDamageType:
		return m.cleareddamage_type
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WeaponDamageMutation) ClearEdge(name string) error {
	switch name {
	case weapondamage.EdgeWeapon:
		m.ClearWeapon()
		return nil
	case weapondamage.EdgeDamageType:
		m.ClearDamageType()
		return nil
	}
	return fmt.Errorf("unknown WeaponDamage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WeaponDamageMutation) ResetEdge(name string) error {
	switch name {
	case weapondamage.EdgeWeapon:
		m.ResetWeapon()
		return nil
	case weapondamage.EdgeDamageType:
		m.ResetDamageType()
		return nil
	}
	return fmt.Errorf("unknown WeaponDamage edge %s", name)
}

// WeaponPropertyMutation represents an operation that mutates the WeaponProperty nodes in the graph.
type WeaponPropertyMutation struct {
	config
	op             Op
	typ            string
	id             *int
	indx           *string
	name           *string
	desc           *[]string
	appenddesc     []string
	clearedFields  map[string]struct{}
	weapons        map[int]struct{}
	removedweapons map[int]struct{}
	clearedweapons bool
	done           bool
	oldValue       func(context.Context) (*WeaponProperty, error)
	predicates     []predicate.WeaponProperty
}

var _ ent.Mutation = (*WeaponPropertyMutation)(nil)

// weaponpropertyOption allows management of the mutation configuration using functional options.
type weaponpropertyOption func(*WeaponPropertyMutation)

// newWeaponPropertyMutation creates new mutation for the WeaponProperty entity.
func newWeaponPropertyMutation(c config, op Op, opts ...weaponpropertyOption) *WeaponPropertyMutation {
	m := &WeaponPropertyMutation{
		config:        c,
		op:            op,
		typ:           TypeWeaponProperty,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWeaponPropertyID sets the ID field of the mutation.
func withWeaponPropertyID(id int) weaponpropertyOption {
	return func(m *WeaponPropertyMutation) {
		var (
			err   error
			once  sync.Once
			value *WeaponProperty
		)
		m.oldValue = func(ctx context.Context) (*WeaponProperty, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WeaponProperty.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWeaponProperty sets the old WeaponProperty of the mutation.
func withWeaponProperty(node *WeaponProperty) weaponpropertyOption {
	return func(m *WeaponPropertyMutation) {
		m.oldValue = func(context.Context) (*WeaponProperty, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WeaponPropertyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WeaponPropertyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WeaponPropertyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WeaponPropertyMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WeaponProperty.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndx sets the "indx" field.
func (m *WeaponPropertyMutation) SetIndx(s string) {
	m.indx = &s
}

// Indx returns the value of the "indx" field in the mutation.
func (m *WeaponPropertyMutation) Indx() (r string, exists bool) {
	v := m.indx
	if v == nil {
		return
	}
	return *v, true
}

// OldIndx returns the old "indx" field's value of the WeaponProperty entity.
// If the WeaponProperty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponPropertyMutation) OldIndx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndx: %w", err)
	}
	return oldValue.Indx, nil
}

// ResetIndx resets all changes to the "indx" field.
func (m *WeaponPropertyMutation) ResetIndx() {
	m.indx = nil
}

// SetName sets the "name" field.
func (m *WeaponPropertyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *WeaponPropertyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the WeaponProperty entity.
// If the WeaponProperty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponPropertyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *WeaponPropertyMutation) ResetName() {
	m.name = nil
}

// SetDesc sets the "desc" field.
func (m *WeaponPropertyMutation) SetDesc(s []string) {
	m.desc = &s
	m.appenddesc = nil
}

// Desc returns the value of the "desc" field in the mutation.
func (m *WeaponPropertyMutation) Desc() (r []string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the WeaponProperty entity.
// If the WeaponProperty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeaponPropertyMutation) OldDesc(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// AppendDesc adds s to the "desc" field.
func (m *WeaponPropertyMutation) AppendDesc(s []string) {
	m.appenddesc = append(m.appenddesc, s...)
}

// AppendedDesc returns the list of values that were appended to the "desc" field in this mutation.
func (m *WeaponPropertyMutation) AppendedDesc() ([]string, bool) {
	if len(m.appenddesc) == 0 {
		return nil, false
	}
	return m.appenddesc, true
}

// ResetDesc resets all changes to the "desc" field.
func (m *WeaponPropertyMutation) ResetDesc() {
	m.desc = nil
	m.appenddesc = nil
}

// AddWeaponIDs adds the "weapons" edge to the Weapon entity by ids.
func (m *WeaponPropertyMutation) AddWeaponIDs(ids ...int) {
	if m.weapons == nil {
		m.weapons = make(map[int]struct{})
	}
	for i := range ids {
		m.weapons[ids[i]] = struct{}{}
	}
}

// ClearWeapons clears the "weapons" edge to the Weapon entity.
func (m *WeaponPropertyMutation) ClearWeapons() {
	m.clearedweapons = true
}

// WeaponsCleared reports if the "weapons" edge to the Weapon entity was cleared.
func (m *WeaponPropertyMutation) WeaponsCleared() bool {
	return m.clearedweapons
}

// RemoveWeaponIDs removes the "weapons" edge to the Weapon entity by IDs.
func (m *WeaponPropertyMutation) RemoveWeaponIDs(ids ...int) {
	if m.removedweapons == nil {
		m.removedweapons = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.weapons, ids[i])
		m.removedweapons[ids[i]] = struct{}{}
	}
}

// RemovedWeapons returns the removed IDs of the "weapons" edge to the Weapon entity.
func (m *WeaponPropertyMutation) RemovedWeaponsIDs() (ids []int) {
	for id := range m.removedweapons {
		ids = append(ids, id)
	}
	return
}

// WeaponsIDs returns the "weapons" edge IDs in the mutation.
func (m *WeaponPropertyMutation) WeaponsIDs() (ids []int) {
	for id := range m.weapons {
		ids = append(ids, id)
	}
	return
}

// ResetWeapons resets all changes to the "weapons" edge.
func (m *WeaponPropertyMutation) ResetWeapons() {
	m.weapons = nil
	m.clearedweapons = false
	m.removedweapons = nil
}

// Where appends a list predicates to the WeaponPropertyMutation builder.
func (m *WeaponPropertyMutation) Where(ps ...predicate.WeaponProperty) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WeaponPropertyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WeaponPropertyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WeaponProperty, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WeaponPropertyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WeaponPropertyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WeaponProperty).
func (m *WeaponPropertyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WeaponPropertyMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.indx != nil {
		fields = append(fields, weaponproperty.FieldIndx)
	}
	if m.name != nil {
		fields = append(fields, weaponproperty.FieldName)
	}
	if m.desc != nil {
		fields = append(fields, weaponproperty.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WeaponPropertyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case weaponproperty.FieldIndx:
		return m.Indx()
	case weaponproperty.FieldName:
		return m.Name()
	case weaponproperty.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WeaponPropertyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case weaponproperty.FieldIndx:
		return m.OldIndx(ctx)
	case weaponproperty.FieldName:
		return m.OldName(ctx)
	case weaponproperty.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown WeaponProperty field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeaponPropertyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case weaponproperty.FieldIndx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndx(v)
		return nil
	case weaponproperty.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case weaponproperty.FieldDesc:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown WeaponProperty field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WeaponPropertyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WeaponPropertyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeaponPropertyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WeaponProperty numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WeaponPropertyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WeaponPropertyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WeaponPropertyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WeaponProperty nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WeaponPropertyMutation) ResetField(name string) error {
	switch name {
	case weaponproperty.FieldIndx:
		m.ResetIndx()
		return nil
	case weaponproperty.FieldName:
		m.ResetName()
		return nil
	case weaponproperty.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown WeaponProperty field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WeaponPropertyMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.weapons != nil {
		edges = append(edges, weaponproperty.EdgeWeapons)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WeaponPropertyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case weaponproperty.EdgeWeapons:
		ids := make([]ent.Value, 0, len(m.weapons))
		for id := range m.weapons {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WeaponPropertyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedweapons != nil {
		edges = append(edges, weaponproperty.EdgeWeapons)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WeaponPropertyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case weaponproperty.EdgeWeapons:
		ids := make([]ent.Value, 0, len(m.removedweapons))
		for id := range m.removedweapons {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WeaponPropertyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedweapons {
		edges = append(edges, weaponproperty.EdgeWeapons)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WeaponPropertyMutation) EdgeCleared(name string) bool {
	switch name {
	case weaponproperty.EdgeWeapons:
		return m.clearedweapons
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WeaponPropertyMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown WeaponProperty unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WeaponPropertyMutation) ResetEdge(name string) error {
	switch name {
	case weaponproperty.EdgeWeapons:
		m.ResetWeapons()
		return nil
	}
	return fmt.Errorf("unknown WeaponProperty edge %s", name)
}
