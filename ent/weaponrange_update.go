// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/weaponrange"
)

// WeaponRangeUpdate is the builder for updating WeaponRange entities.
type WeaponRangeUpdate struct {
	config
	hooks    []Hook
	mutation *WeaponRangeMutation
}

// Where appends a list predicates to the WeaponRangeUpdate builder.
func (wru *WeaponRangeUpdate) Where(ps ...predicate.WeaponRange) *WeaponRangeUpdate {
	wru.mutation.Where(ps...)
	return wru
}

// SetRangeNormal sets the "range_normal" field.
func (wru *WeaponRangeUpdate) SetRangeNormal(i int) *WeaponRangeUpdate {
	wru.mutation.ResetRangeNormal()
	wru.mutation.SetRangeNormal(i)
	return wru
}

// SetNillableRangeNormal sets the "range_normal" field if the given value is not nil.
func (wru *WeaponRangeUpdate) SetNillableRangeNormal(i *int) *WeaponRangeUpdate {
	if i != nil {
		wru.SetRangeNormal(*i)
	}
	return wru
}

// AddRangeNormal adds i to the "range_normal" field.
func (wru *WeaponRangeUpdate) AddRangeNormal(i int) *WeaponRangeUpdate {
	wru.mutation.AddRangeNormal(i)
	return wru
}

// ClearRangeNormal clears the value of the "range_normal" field.
func (wru *WeaponRangeUpdate) ClearRangeNormal() *WeaponRangeUpdate {
	wru.mutation.ClearRangeNormal()
	return wru
}

// SetRangeLong sets the "range_long" field.
func (wru *WeaponRangeUpdate) SetRangeLong(i int) *WeaponRangeUpdate {
	wru.mutation.ResetRangeLong()
	wru.mutation.SetRangeLong(i)
	return wru
}

// SetNillableRangeLong sets the "range_long" field if the given value is not nil.
func (wru *WeaponRangeUpdate) SetNillableRangeLong(i *int) *WeaponRangeUpdate {
	if i != nil {
		wru.SetRangeLong(*i)
	}
	return wru
}

// AddRangeLong adds i to the "range_long" field.
func (wru *WeaponRangeUpdate) AddRangeLong(i int) *WeaponRangeUpdate {
	wru.mutation.AddRangeLong(i)
	return wru
}

// ClearRangeLong clears the value of the "range_long" field.
func (wru *WeaponRangeUpdate) ClearRangeLong() *WeaponRangeUpdate {
	wru.mutation.ClearRangeLong()
	return wru
}

// SetThrowRangeNormal sets the "throw_range_normal" field.
func (wru *WeaponRangeUpdate) SetThrowRangeNormal(i int) *WeaponRangeUpdate {
	wru.mutation.ResetThrowRangeNormal()
	wru.mutation.SetThrowRangeNormal(i)
	return wru
}

// SetNillableThrowRangeNormal sets the "throw_range_normal" field if the given value is not nil.
func (wru *WeaponRangeUpdate) SetNillableThrowRangeNormal(i *int) *WeaponRangeUpdate {
	if i != nil {
		wru.SetThrowRangeNormal(*i)
	}
	return wru
}

// AddThrowRangeNormal adds i to the "throw_range_normal" field.
func (wru *WeaponRangeUpdate) AddThrowRangeNormal(i int) *WeaponRangeUpdate {
	wru.mutation.AddThrowRangeNormal(i)
	return wru
}

// ClearThrowRangeNormal clears the value of the "throw_range_normal" field.
func (wru *WeaponRangeUpdate) ClearThrowRangeNormal() *WeaponRangeUpdate {
	wru.mutation.ClearThrowRangeNormal()
	return wru
}

// SetThrowRangeLong sets the "throw_range_long" field.
func (wru *WeaponRangeUpdate) SetThrowRangeLong(i int) *WeaponRangeUpdate {
	wru.mutation.ResetThrowRangeLong()
	wru.mutation.SetThrowRangeLong(i)
	return wru
}

// SetNillableThrowRangeLong sets the "throw_range_long" field if the given value is not nil.
func (wru *WeaponRangeUpdate) SetNillableThrowRangeLong(i *int) *WeaponRangeUpdate {
	if i != nil {
		wru.SetThrowRangeLong(*i)
	}
	return wru
}

// AddThrowRangeLong adds i to the "throw_range_long" field.
func (wru *WeaponRangeUpdate) AddThrowRangeLong(i int) *WeaponRangeUpdate {
	wru.mutation.AddThrowRangeLong(i)
	return wru
}

// ClearThrowRangeLong clears the value of the "throw_range_long" field.
func (wru *WeaponRangeUpdate) ClearThrowRangeLong() *WeaponRangeUpdate {
	wru.mutation.ClearThrowRangeLong()
	return wru
}

// Mutation returns the WeaponRangeMutation object of the builder.
func (wru *WeaponRangeUpdate) Mutation() *WeaponRangeMutation {
	return wru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wru *WeaponRangeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wru.sqlSave, wru.mutation, wru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wru *WeaponRangeUpdate) SaveX(ctx context.Context) int {
	affected, err := wru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wru *WeaponRangeUpdate) Exec(ctx context.Context) error {
	_, err := wru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wru *WeaponRangeUpdate) ExecX(ctx context.Context) {
	if err := wru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wru *WeaponRangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(weaponrange.Table, weaponrange.Columns, sqlgraph.NewFieldSpec(weaponrange.FieldID, field.TypeInt))
	if ps := wru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wru.mutation.RangeNormal(); ok {
		_spec.SetField(weaponrange.FieldRangeNormal, field.TypeInt, value)
	}
	if value, ok := wru.mutation.AddedRangeNormal(); ok {
		_spec.AddField(weaponrange.FieldRangeNormal, field.TypeInt, value)
	}
	if wru.mutation.RangeNormalCleared() {
		_spec.ClearField(weaponrange.FieldRangeNormal, field.TypeInt)
	}
	if value, ok := wru.mutation.RangeLong(); ok {
		_spec.SetField(weaponrange.FieldRangeLong, field.TypeInt, value)
	}
	if value, ok := wru.mutation.AddedRangeLong(); ok {
		_spec.AddField(weaponrange.FieldRangeLong, field.TypeInt, value)
	}
	if wru.mutation.RangeLongCleared() {
		_spec.ClearField(weaponrange.FieldRangeLong, field.TypeInt)
	}
	if value, ok := wru.mutation.ThrowRangeNormal(); ok {
		_spec.SetField(weaponrange.FieldThrowRangeNormal, field.TypeInt, value)
	}
	if value, ok := wru.mutation.AddedThrowRangeNormal(); ok {
		_spec.AddField(weaponrange.FieldThrowRangeNormal, field.TypeInt, value)
	}
	if wru.mutation.ThrowRangeNormalCleared() {
		_spec.ClearField(weaponrange.FieldThrowRangeNormal, field.TypeInt)
	}
	if value, ok := wru.mutation.ThrowRangeLong(); ok {
		_spec.SetField(weaponrange.FieldThrowRangeLong, field.TypeInt, value)
	}
	if value, ok := wru.mutation.AddedThrowRangeLong(); ok {
		_spec.AddField(weaponrange.FieldThrowRangeLong, field.TypeInt, value)
	}
	if wru.mutation.ThrowRangeLongCleared() {
		_spec.ClearField(weaponrange.FieldThrowRangeLong, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weaponrange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wru.mutation.done = true
	return n, nil
}

// WeaponRangeUpdateOne is the builder for updating a single WeaponRange entity.
type WeaponRangeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WeaponRangeMutation
}

// SetRangeNormal sets the "range_normal" field.
func (wruo *WeaponRangeUpdateOne) SetRangeNormal(i int) *WeaponRangeUpdateOne {
	wruo.mutation.ResetRangeNormal()
	wruo.mutation.SetRangeNormal(i)
	return wruo
}

// SetNillableRangeNormal sets the "range_normal" field if the given value is not nil.
func (wruo *WeaponRangeUpdateOne) SetNillableRangeNormal(i *int) *WeaponRangeUpdateOne {
	if i != nil {
		wruo.SetRangeNormal(*i)
	}
	return wruo
}

// AddRangeNormal adds i to the "range_normal" field.
func (wruo *WeaponRangeUpdateOne) AddRangeNormal(i int) *WeaponRangeUpdateOne {
	wruo.mutation.AddRangeNormal(i)
	return wruo
}

// ClearRangeNormal clears the value of the "range_normal" field.
func (wruo *WeaponRangeUpdateOne) ClearRangeNormal() *WeaponRangeUpdateOne {
	wruo.mutation.ClearRangeNormal()
	return wruo
}

// SetRangeLong sets the "range_long" field.
func (wruo *WeaponRangeUpdateOne) SetRangeLong(i int) *WeaponRangeUpdateOne {
	wruo.mutation.ResetRangeLong()
	wruo.mutation.SetRangeLong(i)
	return wruo
}

// SetNillableRangeLong sets the "range_long" field if the given value is not nil.
func (wruo *WeaponRangeUpdateOne) SetNillableRangeLong(i *int) *WeaponRangeUpdateOne {
	if i != nil {
		wruo.SetRangeLong(*i)
	}
	return wruo
}

// AddRangeLong adds i to the "range_long" field.
func (wruo *WeaponRangeUpdateOne) AddRangeLong(i int) *WeaponRangeUpdateOne {
	wruo.mutation.AddRangeLong(i)
	return wruo
}

// ClearRangeLong clears the value of the "range_long" field.
func (wruo *WeaponRangeUpdateOne) ClearRangeLong() *WeaponRangeUpdateOne {
	wruo.mutation.ClearRangeLong()
	return wruo
}

// SetThrowRangeNormal sets the "throw_range_normal" field.
func (wruo *WeaponRangeUpdateOne) SetThrowRangeNormal(i int) *WeaponRangeUpdateOne {
	wruo.mutation.ResetThrowRangeNormal()
	wruo.mutation.SetThrowRangeNormal(i)
	return wruo
}

// SetNillableThrowRangeNormal sets the "throw_range_normal" field if the given value is not nil.
func (wruo *WeaponRangeUpdateOne) SetNillableThrowRangeNormal(i *int) *WeaponRangeUpdateOne {
	if i != nil {
		wruo.SetThrowRangeNormal(*i)
	}
	return wruo
}

// AddThrowRangeNormal adds i to the "throw_range_normal" field.
func (wruo *WeaponRangeUpdateOne) AddThrowRangeNormal(i int) *WeaponRangeUpdateOne {
	wruo.mutation.AddThrowRangeNormal(i)
	return wruo
}

// ClearThrowRangeNormal clears the value of the "throw_range_normal" field.
func (wruo *WeaponRangeUpdateOne) ClearThrowRangeNormal() *WeaponRangeUpdateOne {
	wruo.mutation.ClearThrowRangeNormal()
	return wruo
}

// SetThrowRangeLong sets the "throw_range_long" field.
func (wruo *WeaponRangeUpdateOne) SetThrowRangeLong(i int) *WeaponRangeUpdateOne {
	wruo.mutation.ResetThrowRangeLong()
	wruo.mutation.SetThrowRangeLong(i)
	return wruo
}

// SetNillableThrowRangeLong sets the "throw_range_long" field if the given value is not nil.
func (wruo *WeaponRangeUpdateOne) SetNillableThrowRangeLong(i *int) *WeaponRangeUpdateOne {
	if i != nil {
		wruo.SetThrowRangeLong(*i)
	}
	return wruo
}

// AddThrowRangeLong adds i to the "throw_range_long" field.
func (wruo *WeaponRangeUpdateOne) AddThrowRangeLong(i int) *WeaponRangeUpdateOne {
	wruo.mutation.AddThrowRangeLong(i)
	return wruo
}

// ClearThrowRangeLong clears the value of the "throw_range_long" field.
func (wruo *WeaponRangeUpdateOne) ClearThrowRangeLong() *WeaponRangeUpdateOne {
	wruo.mutation.ClearThrowRangeLong()
	return wruo
}

// Mutation returns the WeaponRangeMutation object of the builder.
func (wruo *WeaponRangeUpdateOne) Mutation() *WeaponRangeMutation {
	return wruo.mutation
}

// Where appends a list predicates to the WeaponRangeUpdate builder.
func (wruo *WeaponRangeUpdateOne) Where(ps ...predicate.WeaponRange) *WeaponRangeUpdateOne {
	wruo.mutation.Where(ps...)
	return wruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wruo *WeaponRangeUpdateOne) Select(field string, fields ...string) *WeaponRangeUpdateOne {
	wruo.fields = append([]string{field}, fields...)
	return wruo
}

// Save executes the query and returns the updated WeaponRange entity.
func (wruo *WeaponRangeUpdateOne) Save(ctx context.Context) (*WeaponRange, error) {
	return withHooks(ctx, wruo.sqlSave, wruo.mutation, wruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wruo *WeaponRangeUpdateOne) SaveX(ctx context.Context) *WeaponRange {
	node, err := wruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wruo *WeaponRangeUpdateOne) Exec(ctx context.Context) error {
	_, err := wruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wruo *WeaponRangeUpdateOne) ExecX(ctx context.Context) {
	if err := wruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wruo *WeaponRangeUpdateOne) sqlSave(ctx context.Context) (_node *WeaponRange, err error) {
	_spec := sqlgraph.NewUpdateSpec(weaponrange.Table, weaponrange.Columns, sqlgraph.NewFieldSpec(weaponrange.FieldID, field.TypeInt))
	id, ok := wruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WeaponRange.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weaponrange.FieldID)
		for _, f := range fields {
			if !weaponrange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != weaponrange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wruo.mutation.RangeNormal(); ok {
		_spec.SetField(weaponrange.FieldRangeNormal, field.TypeInt, value)
	}
	if value, ok := wruo.mutation.AddedRangeNormal(); ok {
		_spec.AddField(weaponrange.FieldRangeNormal, field.TypeInt, value)
	}
	if wruo.mutation.RangeNormalCleared() {
		_spec.ClearField(weaponrange.FieldRangeNormal, field.TypeInt)
	}
	if value, ok := wruo.mutation.RangeLong(); ok {
		_spec.SetField(weaponrange.FieldRangeLong, field.TypeInt, value)
	}
	if value, ok := wruo.mutation.AddedRangeLong(); ok {
		_spec.AddField(weaponrange.FieldRangeLong, field.TypeInt, value)
	}
	if wruo.mutation.RangeLongCleared() {
		_spec.ClearField(weaponrange.FieldRangeLong, field.TypeInt)
	}
	if value, ok := wruo.mutation.ThrowRangeNormal(); ok {
		_spec.SetField(weaponrange.FieldThrowRangeNormal, field.TypeInt, value)
	}
	if value, ok := wruo.mutation.AddedThrowRangeNormal(); ok {
		_spec.AddField(weaponrange.FieldThrowRangeNormal, field.TypeInt, value)
	}
	if wruo.mutation.ThrowRangeNormalCleared() {
		_spec.ClearField(weaponrange.FieldThrowRangeNormal, field.TypeInt)
	}
	if value, ok := wruo.mutation.ThrowRangeLong(); ok {
		_spec.SetField(weaponrange.FieldThrowRangeLong, field.TypeInt, value)
	}
	if value, ok := wruo.mutation.AddedThrowRangeLong(); ok {
		_spec.AddField(weaponrange.FieldThrowRangeLong, field.TypeInt, value)
	}
	if wruo.mutation.ThrowRangeLongCleared() {
		_spec.ClearField(weaponrange.FieldThrowRangeLong, field.TypeInt)
	}
	_node = &WeaponRange{config: wruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weaponrange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wruo.mutation.done = true
	return _node, nil
}
