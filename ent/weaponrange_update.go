// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/weapon"
	"github.com/ecshreve/dndgen/ent/weaponrange"
)

// WeaponRangeUpdate is the builder for updating WeaponRange entities.
type WeaponRangeUpdate struct {
	config
	hooks    []Hook
	mutation *WeaponRangeMutation
}

// Where appends a list predicates to the WeaponRangeUpdate builder.
func (wru *WeaponRangeUpdate) Where(ps ...predicate.WeaponRange) *WeaponRangeUpdate {
	wru.mutation.Where(ps...)
	return wru
}

// SetDesc sets the "desc" field.
func (wru *WeaponRangeUpdate) SetDesc(s string) *WeaponRangeUpdate {
	wru.mutation.SetDesc(s)
	return wru
}

// SetNormal sets the "normal" field.
func (wru *WeaponRangeUpdate) SetNormal(i int) *WeaponRangeUpdate {
	wru.mutation.ResetNormal()
	wru.mutation.SetNormal(i)
	return wru
}

// AddNormal adds i to the "normal" field.
func (wru *WeaponRangeUpdate) AddNormal(i int) *WeaponRangeUpdate {
	wru.mutation.AddNormal(i)
	return wru
}

// SetLong sets the "long" field.
func (wru *WeaponRangeUpdate) SetLong(i int) *WeaponRangeUpdate {
	wru.mutation.ResetLong()
	wru.mutation.SetLong(i)
	return wru
}

// AddLong adds i to the "long" field.
func (wru *WeaponRangeUpdate) AddLong(i int) *WeaponRangeUpdate {
	wru.mutation.AddLong(i)
	return wru
}

// AddWeaponIDs adds the "weapon" edge to the Weapon entity by IDs.
func (wru *WeaponRangeUpdate) AddWeaponIDs(ids ...int) *WeaponRangeUpdate {
	wru.mutation.AddWeaponIDs(ids...)
	return wru
}

// AddWeapon adds the "weapon" edges to the Weapon entity.
func (wru *WeaponRangeUpdate) AddWeapon(w ...*Weapon) *WeaponRangeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wru.AddWeaponIDs(ids...)
}

// Mutation returns the WeaponRangeMutation object of the builder.
func (wru *WeaponRangeUpdate) Mutation() *WeaponRangeMutation {
	return wru.mutation
}

// ClearWeapon clears all "weapon" edges to the Weapon entity.
func (wru *WeaponRangeUpdate) ClearWeapon() *WeaponRangeUpdate {
	wru.mutation.ClearWeapon()
	return wru
}

// RemoveWeaponIDs removes the "weapon" edge to Weapon entities by IDs.
func (wru *WeaponRangeUpdate) RemoveWeaponIDs(ids ...int) *WeaponRangeUpdate {
	wru.mutation.RemoveWeaponIDs(ids...)
	return wru
}

// RemoveWeapon removes "weapon" edges to Weapon entities.
func (wru *WeaponRangeUpdate) RemoveWeapon(w ...*Weapon) *WeaponRangeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wru.RemoveWeaponIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wru *WeaponRangeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WeaponRangeMutation](ctx, wru.sqlSave, wru.mutation, wru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wru *WeaponRangeUpdate) SaveX(ctx context.Context) int {
	affected, err := wru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wru *WeaponRangeUpdate) Exec(ctx context.Context) error {
	_, err := wru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wru *WeaponRangeUpdate) ExecX(ctx context.Context) {
	if err := wru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wru *WeaponRangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(weaponrange.Table, weaponrange.Columns, sqlgraph.NewFieldSpec(weaponrange.FieldID, field.TypeInt))
	if ps := wru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wru.mutation.Desc(); ok {
		_spec.SetField(weaponrange.FieldDesc, field.TypeString, value)
	}
	if value, ok := wru.mutation.Normal(); ok {
		_spec.SetField(weaponrange.FieldNormal, field.TypeInt, value)
	}
	if value, ok := wru.mutation.AddedNormal(); ok {
		_spec.AddField(weaponrange.FieldNormal, field.TypeInt, value)
	}
	if value, ok := wru.mutation.Long(); ok {
		_spec.SetField(weaponrange.FieldLong, field.TypeInt, value)
	}
	if value, ok := wru.mutation.AddedLong(); ok {
		_spec.AddField(weaponrange.FieldLong, field.TypeInt, value)
	}
	if wru.mutation.WeaponCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weaponrange.WeaponTable,
			Columns: weaponrange.WeaponPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapon.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wru.mutation.RemovedWeaponIDs(); len(nodes) > 0 && !wru.mutation.WeaponCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weaponrange.WeaponTable,
			Columns: weaponrange.WeaponPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wru.mutation.WeaponIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weaponrange.WeaponTable,
			Columns: weaponrange.WeaponPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weaponrange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wru.mutation.done = true
	return n, nil
}

// WeaponRangeUpdateOne is the builder for updating a single WeaponRange entity.
type WeaponRangeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WeaponRangeMutation
}

// SetDesc sets the "desc" field.
func (wruo *WeaponRangeUpdateOne) SetDesc(s string) *WeaponRangeUpdateOne {
	wruo.mutation.SetDesc(s)
	return wruo
}

// SetNormal sets the "normal" field.
func (wruo *WeaponRangeUpdateOne) SetNormal(i int) *WeaponRangeUpdateOne {
	wruo.mutation.ResetNormal()
	wruo.mutation.SetNormal(i)
	return wruo
}

// AddNormal adds i to the "normal" field.
func (wruo *WeaponRangeUpdateOne) AddNormal(i int) *WeaponRangeUpdateOne {
	wruo.mutation.AddNormal(i)
	return wruo
}

// SetLong sets the "long" field.
func (wruo *WeaponRangeUpdateOne) SetLong(i int) *WeaponRangeUpdateOne {
	wruo.mutation.ResetLong()
	wruo.mutation.SetLong(i)
	return wruo
}

// AddLong adds i to the "long" field.
func (wruo *WeaponRangeUpdateOne) AddLong(i int) *WeaponRangeUpdateOne {
	wruo.mutation.AddLong(i)
	return wruo
}

// AddWeaponIDs adds the "weapon" edge to the Weapon entity by IDs.
func (wruo *WeaponRangeUpdateOne) AddWeaponIDs(ids ...int) *WeaponRangeUpdateOne {
	wruo.mutation.AddWeaponIDs(ids...)
	return wruo
}

// AddWeapon adds the "weapon" edges to the Weapon entity.
func (wruo *WeaponRangeUpdateOne) AddWeapon(w ...*Weapon) *WeaponRangeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wruo.AddWeaponIDs(ids...)
}

// Mutation returns the WeaponRangeMutation object of the builder.
func (wruo *WeaponRangeUpdateOne) Mutation() *WeaponRangeMutation {
	return wruo.mutation
}

// ClearWeapon clears all "weapon" edges to the Weapon entity.
func (wruo *WeaponRangeUpdateOne) ClearWeapon() *WeaponRangeUpdateOne {
	wruo.mutation.ClearWeapon()
	return wruo
}

// RemoveWeaponIDs removes the "weapon" edge to Weapon entities by IDs.
func (wruo *WeaponRangeUpdateOne) RemoveWeaponIDs(ids ...int) *WeaponRangeUpdateOne {
	wruo.mutation.RemoveWeaponIDs(ids...)
	return wruo
}

// RemoveWeapon removes "weapon" edges to Weapon entities.
func (wruo *WeaponRangeUpdateOne) RemoveWeapon(w ...*Weapon) *WeaponRangeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wruo.RemoveWeaponIDs(ids...)
}

// Where appends a list predicates to the WeaponRangeUpdate builder.
func (wruo *WeaponRangeUpdateOne) Where(ps ...predicate.WeaponRange) *WeaponRangeUpdateOne {
	wruo.mutation.Where(ps...)
	return wruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wruo *WeaponRangeUpdateOne) Select(field string, fields ...string) *WeaponRangeUpdateOne {
	wruo.fields = append([]string{field}, fields...)
	return wruo
}

// Save executes the query and returns the updated WeaponRange entity.
func (wruo *WeaponRangeUpdateOne) Save(ctx context.Context) (*WeaponRange, error) {
	return withHooks[*WeaponRange, WeaponRangeMutation](ctx, wruo.sqlSave, wruo.mutation, wruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wruo *WeaponRangeUpdateOne) SaveX(ctx context.Context) *WeaponRange {
	node, err := wruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wruo *WeaponRangeUpdateOne) Exec(ctx context.Context) error {
	_, err := wruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wruo *WeaponRangeUpdateOne) ExecX(ctx context.Context) {
	if err := wruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wruo *WeaponRangeUpdateOne) sqlSave(ctx context.Context) (_node *WeaponRange, err error) {
	_spec := sqlgraph.NewUpdateSpec(weaponrange.Table, weaponrange.Columns, sqlgraph.NewFieldSpec(weaponrange.FieldID, field.TypeInt))
	id, ok := wruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WeaponRange.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weaponrange.FieldID)
		for _, f := range fields {
			if !weaponrange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != weaponrange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wruo.mutation.Desc(); ok {
		_spec.SetField(weaponrange.FieldDesc, field.TypeString, value)
	}
	if value, ok := wruo.mutation.Normal(); ok {
		_spec.SetField(weaponrange.FieldNormal, field.TypeInt, value)
	}
	if value, ok := wruo.mutation.AddedNormal(); ok {
		_spec.AddField(weaponrange.FieldNormal, field.TypeInt, value)
	}
	if value, ok := wruo.mutation.Long(); ok {
		_spec.SetField(weaponrange.FieldLong, field.TypeInt, value)
	}
	if value, ok := wruo.mutation.AddedLong(); ok {
		_spec.AddField(weaponrange.FieldLong, field.TypeInt, value)
	}
	if wruo.mutation.WeaponCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weaponrange.WeaponTable,
			Columns: weaponrange.WeaponPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapon.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wruo.mutation.RemovedWeaponIDs(); len(nodes) > 0 && !wruo.mutation.WeaponCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weaponrange.WeaponTable,
			Columns: weaponrange.WeaponPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wruo.mutation.WeaponIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   weaponrange.WeaponTable,
			Columns: weaponrange.WeaponPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weapon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WeaponRange{config: wruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weaponrange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wruo.mutation.done = true
	return _node, nil
}
