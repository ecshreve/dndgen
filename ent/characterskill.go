// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/character"
	"github.com/ecshreve/dndgen/ent/characterabilityscore"
	"github.com/ecshreve/dndgen/ent/characterproficiency"
	"github.com/ecshreve/dndgen/ent/characterskill"
	"github.com/ecshreve/dndgen/ent/skill"
)

// CharacterSkill is the model entity for the CharacterSkill schema.
type CharacterSkill struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Proficient holds the value of the "proficient" field.
	Proficient bool `json:"proficient,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CharacterSkillQuery when eager-loading is set.
	Edges                                   CharacterSkillEdges `json:"-"`
	character_character_skills              *int
	character_skill_character_ability_score *int
	selectValues                            sql.SelectValues
}

// CharacterSkillEdges holds the relations/edges for other nodes in the graph.
type CharacterSkillEdges struct {
	// Character holds the value of the character edge.
	Character *Character `json:"character,omitempty"`
	// Skill holds the value of the skill edge.
	Skill *Skill `json:"skill,omitempty"`
	// CharacterAbilityScore holds the value of the character_ability_score edge.
	CharacterAbilityScore *CharacterAbilityScore `json:"character_ability_score,omitempty"`
	// CharacterProficiency holds the value of the character_proficiency edge.
	CharacterProficiency *CharacterProficiency `json:"character_proficiency,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int
}

// CharacterOrErr returns the Character value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CharacterSkillEdges) CharacterOrErr() (*Character, error) {
	if e.Character != nil {
		return e.Character, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: character.Label}
	}
	return nil, &NotLoadedError{edge: "character"}
}

// SkillOrErr returns the Skill value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CharacterSkillEdges) SkillOrErr() (*Skill, error) {
	if e.Skill != nil {
		return e.Skill, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: skill.Label}
	}
	return nil, &NotLoadedError{edge: "skill"}
}

// CharacterAbilityScoreOrErr returns the CharacterAbilityScore value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CharacterSkillEdges) CharacterAbilityScoreOrErr() (*CharacterAbilityScore, error) {
	if e.CharacterAbilityScore != nil {
		return e.CharacterAbilityScore, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: characterabilityscore.Label}
	}
	return nil, &NotLoadedError{edge: "character_ability_score"}
}

// CharacterProficiencyOrErr returns the CharacterProficiency value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CharacterSkillEdges) CharacterProficiencyOrErr() (*CharacterProficiency, error) {
	if e.CharacterProficiency != nil {
		return e.CharacterProficiency, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: characterproficiency.Label}
	}
	return nil, &NotLoadedError{edge: "character_proficiency"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CharacterSkill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case characterskill.FieldProficient:
			values[i] = new(sql.NullBool)
		case characterskill.FieldID:
			values[i] = new(sql.NullInt64)
		case characterskill.ForeignKeys[0]: // character_character_skills
			values[i] = new(sql.NullInt64)
		case characterskill.ForeignKeys[1]: // character_skill_character_ability_score
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CharacterSkill fields.
func (cs *CharacterSkill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case characterskill.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int(value.Int64)
		case characterskill.FieldProficient:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field proficient", values[i])
			} else if value.Valid {
				cs.Proficient = value.Bool
			}
		case characterskill.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field character_character_skills", value)
			} else if value.Valid {
				cs.character_character_skills = new(int)
				*cs.character_character_skills = int(value.Int64)
			}
		case characterskill.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field character_skill_character_ability_score", value)
			} else if value.Valid {
				cs.character_skill_character_ability_score = new(int)
				*cs.character_skill_character_ability_score = int(value.Int64)
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CharacterSkill.
// This includes values selected through modifiers, order, etc.
func (cs *CharacterSkill) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QueryCharacter queries the "character" edge of the CharacterSkill entity.
func (cs *CharacterSkill) QueryCharacter() *CharacterQuery {
	return NewCharacterSkillClient(cs.config).QueryCharacter(cs)
}

// QuerySkill queries the "skill" edge of the CharacterSkill entity.
func (cs *CharacterSkill) QuerySkill() *SkillQuery {
	return NewCharacterSkillClient(cs.config).QuerySkill(cs)
}

// QueryCharacterAbilityScore queries the "character_ability_score" edge of the CharacterSkill entity.
func (cs *CharacterSkill) QueryCharacterAbilityScore() *CharacterAbilityScoreQuery {
	return NewCharacterSkillClient(cs.config).QueryCharacterAbilityScore(cs)
}

// QueryCharacterProficiency queries the "character_proficiency" edge of the CharacterSkill entity.
func (cs *CharacterSkill) QueryCharacterProficiency() *CharacterProficiencyQuery {
	return NewCharacterSkillClient(cs.config).QueryCharacterProficiency(cs)
}

// Update returns a builder for updating this CharacterSkill.
// Note that you need to call CharacterSkill.Unwrap() before calling this method if this CharacterSkill
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CharacterSkill) Update() *CharacterSkillUpdateOne {
	return NewCharacterSkillClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the CharacterSkill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CharacterSkill) Unwrap() *CharacterSkill {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CharacterSkill is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CharacterSkill) String() string {
	var builder strings.Builder
	builder.WriteString("CharacterSkill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("proficient=")
	builder.WriteString(fmt.Sprintf("%v", cs.Proficient))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (cs *CharacterSkill) MarshalJSON() ([]byte, error) {
	type Alias CharacterSkill
	return json.Marshal(&struct {
		*Alias
		CharacterSkillEdges
	}{
		Alias:               (*Alias)(cs),
		CharacterSkillEdges: cs.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (cs *CharacterSkill) UnmarshalJSON(data []byte) error {
	type Alias CharacterSkill
	aux := &struct {
		*Alias
		CharacterSkillEdges
	}{
		Alias: (*Alias)(cs),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	cs.Edges = aux.CharacterSkillEdges
	return nil
}

func (csc *CharacterSkillCreate) SetCharacterSkill(input *CharacterSkill) *CharacterSkillCreate {
	csc.SetProficient(input.Proficient)
	return csc
}

// CharacterSkills is a parsable slice of CharacterSkill.
type CharacterSkills []*CharacterSkill
