// Code generated by ent, DO NOT EDIT.

package abilitybonuschoice

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the abilitybonuschoice type in the database.
	Label = "ability_bonus_choice"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChoose holds the string denoting the choose field in the database.
	FieldChoose = "choose"
	// EdgeAbilityBonuses holds the string denoting the ability_bonuses edge name in mutations.
	EdgeAbilityBonuses = "ability_bonuses"
	// EdgeRace holds the string denoting the race edge name in mutations.
	EdgeRace = "race"
	// Table holds the table name of the abilitybonuschoice in the database.
	Table = "ability_bonus_choices"
	// AbilityBonusesTable is the table that holds the ability_bonuses relation/edge. The primary key declared below.
	AbilityBonusesTable = "ability_bonus_choice_ability_bonuses"
	// AbilityBonusesInverseTable is the table name for the AbilityBonus entity.
	// It exists in this package in order to avoid circular dependency with the "abilitybonus" package.
	AbilityBonusesInverseTable = "ability_bonus"
	// RaceTable is the table that holds the race relation/edge.
	RaceTable = "races"
	// RaceInverseTable is the table name for the Race entity.
	// It exists in this package in order to avoid circular dependency with the "race" package.
	RaceInverseTable = "races"
	// RaceColumn is the table column denoting the race relation/edge.
	RaceColumn = "race_ability_bonus_options"
)

// Columns holds all SQL columns for abilitybonuschoice fields.
var Columns = []string{
	FieldID,
	FieldChoose,
}

var (
	// AbilityBonusesPrimaryKey and AbilityBonusesColumn2 are the table columns denoting the
	// primary key for the ability_bonuses relation (M2M).
	AbilityBonusesPrimaryKey = []string{"ability_bonus_choice_id", "ability_bonus_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ChooseValidator is a validator for the "choose" field. It is called by the builders before save.
	ChooseValidator func(int) error
)

// OrderOption defines the ordering options for the AbilityBonusChoice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChoose orders the results by the choose field.
func ByChoose(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChoose, opts...).ToFunc()
}

// ByAbilityBonusesCount orders the results by ability_bonuses count.
func ByAbilityBonusesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAbilityBonusesStep(), opts...)
	}
}

// ByAbilityBonuses orders the results by ability_bonuses terms.
func ByAbilityBonuses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAbilityBonusesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRaceCount orders the results by race count.
func ByRaceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRaceStep(), opts...)
	}
}

// ByRace orders the results by race terms.
func ByRace(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRaceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAbilityBonusesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AbilityBonusesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AbilityBonusesTable, AbilityBonusesPrimaryKey...),
	)
}
func newRaceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RaceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RaceTable, RaceColumn),
	)
}
