// Code generated by ent, DO NOT EDIT.

package equipment

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the equipment type in the database.
	Label = "equipment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// EdgeWeapon holds the string denoting the weapon edge name in mutations.
	EdgeWeapon = "weapon"
	// EdgeArmor holds the string denoting the armor edge name in mutations.
	EdgeArmor = "armor"
	// Table holds the table name of the equipment in the database.
	Table = "equipment"
	// WeaponTable is the table that holds the weapon relation/edge.
	WeaponTable = "equipment"
	// WeaponInverseTable is the table name for the Weapon entity.
	// It exists in this package in order to avoid circular dependency with the "weapon" package.
	WeaponInverseTable = "weapons"
	// WeaponColumn is the table column denoting the weapon relation/edge.
	WeaponColumn = "equipment_weapon"
	// ArmorTable is the table that holds the armor relation/edge.
	ArmorTable = "equipment"
	// ArmorInverseTable is the table name for the Armor entity.
	// It exists in this package in order to avoid circular dependency with the "armor" package.
	ArmorInverseTable = "armors"
	// ArmorColumn is the table column denoting the armor relation/edge.
	ArmorColumn = "equipment_armor"
)

// Columns holds all SQL columns for equipment fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldCategory,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "equipment"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"equipment_weapon",
	"equipment_armor",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// Category defines the type for the "category" enum field.
type Category string

// Category values.
const (
	CategoryWeapon            Category = "weapon"
	CategoryArmor             Category = "armor"
	CategoryAdventuringGear   Category = "adventuring_gear"
	CategoryTools             Category = "tools"
	CategoryMountsAndVehicles Category = "mounts_and_vehicles"
	CategoryTradeGoods        Category = "trade_goods"
	CategoryOther             Category = "other"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryWeapon, CategoryArmor, CategoryAdventuringGear, CategoryTools, CategoryMountsAndVehicles, CategoryTradeGoods, CategoryOther:
		return nil
	default:
		return fmt.Errorf("equipment: invalid enum value for category field: %q", c)
	}
}

// OrderOption defines the ordering options for the Equipment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByWeaponField orders the results by weapon field.
func ByWeaponField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWeaponStep(), sql.OrderByField(field, opts...))
	}
}

// ByArmorField orders the results by armor field.
func ByArmorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArmorStep(), sql.OrderByField(field, opts...))
	}
}
func newWeaponStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WeaponInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, WeaponTable, WeaponColumn),
	)
}
func newArmorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArmorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ArmorTable, ArmorColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Category) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Category) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Category(str)
	if err := CategoryValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}
