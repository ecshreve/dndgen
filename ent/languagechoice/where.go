// Code generated by ent, DO NOT EDIT.

package languagechoice

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldLTE(FieldID, id))
}

// Choose applies equality check predicate on the "choose" field. It's identical to ChooseEQ.
func Choose(v int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldEQ(FieldChoose, v))
}

// ChooseEQ applies the EQ predicate on the "choose" field.
func ChooseEQ(v int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldEQ(FieldChoose, v))
}

// ChooseNEQ applies the NEQ predicate on the "choose" field.
func ChooseNEQ(v int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldNEQ(FieldChoose, v))
}

// ChooseIn applies the In predicate on the "choose" field.
func ChooseIn(vs ...int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldIn(FieldChoose, vs...))
}

// ChooseNotIn applies the NotIn predicate on the "choose" field.
func ChooseNotIn(vs ...int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldNotIn(FieldChoose, vs...))
}

// ChooseGT applies the GT predicate on the "choose" field.
func ChooseGT(v int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldGT(FieldChoose, v))
}

// ChooseGTE applies the GTE predicate on the "choose" field.
func ChooseGTE(v int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldGTE(FieldChoose, v))
}

// ChooseLT applies the LT predicate on the "choose" field.
func ChooseLT(v int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldLT(FieldChoose, v))
}

// ChooseLTE applies the LTE predicate on the "choose" field.
func ChooseLTE(v int) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.FieldLTE(FieldChoose, v))
}

// HasLanguages applies the HasEdge predicate on the "languages" edge.
func HasLanguages() predicate.LanguageChoice {
	return predicate.LanguageChoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, LanguagesTable, LanguagesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguagesWith applies the HasEdge predicate on the "languages" edge with a given conditions (other predicates).
func HasLanguagesWith(preds ...predicate.Language) predicate.LanguageChoice {
	return predicate.LanguageChoice(func(s *sql.Selector) {
		step := newLanguagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRace applies the HasEdge predicate on the "race" edge.
func HasRace() predicate.LanguageChoice {
	return predicate.LanguageChoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, RaceTable, RaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRaceWith applies the HasEdge predicate on the "race" edge with a given conditions (other predicates).
func HasRaceWith(preds ...predicate.Race) predicate.LanguageChoice {
	return predicate.LanguageChoice(func(s *sql.Selector) {
		step := newRaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubrace applies the HasEdge predicate on the "subrace" edge.
func HasSubrace() predicate.LanguageChoice {
	return predicate.LanguageChoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubraceTable, SubraceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubraceWith applies the HasEdge predicate on the "subrace" edge with a given conditions (other predicates).
func HasSubraceWith(preds ...predicate.Subrace) predicate.LanguageChoice {
	return predicate.LanguageChoice(func(s *sql.Selector) {
		step := newSubraceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LanguageChoice) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LanguageChoice) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LanguageChoice) predicate.LanguageChoice {
	return predicate.LanguageChoice(sql.NotPredicates(p))
}
