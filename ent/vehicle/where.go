// Code generated by ent, DO NOT EDIT.

package vehicle

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldID, id))
}

// Capacity applies equality check predicate on the "capacity" field. It's identical to CapacityEQ.
func Capacity(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldCapacity, v))
}

// SpeedQuantity applies equality check predicate on the "speed_quantity" field. It's identical to SpeedQuantityEQ.
func SpeedQuantity(v float64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldSpeedQuantity, v))
}

// VehicleCategoryEQ applies the EQ predicate on the "vehicle_category" field.
func VehicleCategoryEQ(v VehicleCategory) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldVehicleCategory, v))
}

// VehicleCategoryNEQ applies the NEQ predicate on the "vehicle_category" field.
func VehicleCategoryNEQ(v VehicleCategory) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldVehicleCategory, v))
}

// VehicleCategoryIn applies the In predicate on the "vehicle_category" field.
func VehicleCategoryIn(vs ...VehicleCategory) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldVehicleCategory, vs...))
}

// VehicleCategoryNotIn applies the NotIn predicate on the "vehicle_category" field.
func VehicleCategoryNotIn(vs ...VehicleCategory) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldVehicleCategory, vs...))
}

// CapacityEQ applies the EQ predicate on the "capacity" field.
func CapacityEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldCapacity, v))
}

// CapacityNEQ applies the NEQ predicate on the "capacity" field.
func CapacityNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldCapacity, v))
}

// CapacityIn applies the In predicate on the "capacity" field.
func CapacityIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldCapacity, vs...))
}

// CapacityNotIn applies the NotIn predicate on the "capacity" field.
func CapacityNotIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldCapacity, vs...))
}

// CapacityGT applies the GT predicate on the "capacity" field.
func CapacityGT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldCapacity, v))
}

// CapacityGTE applies the GTE predicate on the "capacity" field.
func CapacityGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldCapacity, v))
}

// CapacityLT applies the LT predicate on the "capacity" field.
func CapacityLT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldCapacity, v))
}

// CapacityLTE applies the LTE predicate on the "capacity" field.
func CapacityLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldCapacity, v))
}

// CapacityContains applies the Contains predicate on the "capacity" field.
func CapacityContains(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContains(FieldCapacity, v))
}

// CapacityHasPrefix applies the HasPrefix predicate on the "capacity" field.
func CapacityHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasPrefix(FieldCapacity, v))
}

// CapacityHasSuffix applies the HasSuffix predicate on the "capacity" field.
func CapacityHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasSuffix(FieldCapacity, v))
}

// CapacityIsNil applies the IsNil predicate on the "capacity" field.
func CapacityIsNil() predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIsNull(FieldCapacity))
}

// CapacityNotNil applies the NotNil predicate on the "capacity" field.
func CapacityNotNil() predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotNull(FieldCapacity))
}

// CapacityEqualFold applies the EqualFold predicate on the "capacity" field.
func CapacityEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEqualFold(FieldCapacity, v))
}

// CapacityContainsFold applies the ContainsFold predicate on the "capacity" field.
func CapacityContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContainsFold(FieldCapacity, v))
}

// SpeedQuantityEQ applies the EQ predicate on the "speed_quantity" field.
func SpeedQuantityEQ(v float64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldSpeedQuantity, v))
}

// SpeedQuantityNEQ applies the NEQ predicate on the "speed_quantity" field.
func SpeedQuantityNEQ(v float64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldSpeedQuantity, v))
}

// SpeedQuantityIn applies the In predicate on the "speed_quantity" field.
func SpeedQuantityIn(vs ...float64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldSpeedQuantity, vs...))
}

// SpeedQuantityNotIn applies the NotIn predicate on the "speed_quantity" field.
func SpeedQuantityNotIn(vs ...float64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldSpeedQuantity, vs...))
}

// SpeedQuantityGT applies the GT predicate on the "speed_quantity" field.
func SpeedQuantityGT(v float64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldSpeedQuantity, v))
}

// SpeedQuantityGTE applies the GTE predicate on the "speed_quantity" field.
func SpeedQuantityGTE(v float64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldSpeedQuantity, v))
}

// SpeedQuantityLT applies the LT predicate on the "speed_quantity" field.
func SpeedQuantityLT(v float64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldSpeedQuantity, v))
}

// SpeedQuantityLTE applies the LTE predicate on the "speed_quantity" field.
func SpeedQuantityLTE(v float64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldSpeedQuantity, v))
}

// SpeedQuantityIsNil applies the IsNil predicate on the "speed_quantity" field.
func SpeedQuantityIsNil() predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIsNull(FieldSpeedQuantity))
}

// SpeedQuantityNotNil applies the NotNil predicate on the "speed_quantity" field.
func SpeedQuantityNotNil() predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotNull(FieldSpeedQuantity))
}

// SpeedUnitsEQ applies the EQ predicate on the "speed_units" field.
func SpeedUnitsEQ(v SpeedUnits) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldSpeedUnits, v))
}

// SpeedUnitsNEQ applies the NEQ predicate on the "speed_units" field.
func SpeedUnitsNEQ(v SpeedUnits) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldSpeedUnits, v))
}

// SpeedUnitsIn applies the In predicate on the "speed_units" field.
func SpeedUnitsIn(vs ...SpeedUnits) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldSpeedUnits, vs...))
}

// SpeedUnitsNotIn applies the NotIn predicate on the "speed_units" field.
func SpeedUnitsNotIn(vs ...SpeedUnits) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldSpeedUnits, vs...))
}

// SpeedUnitsIsNil applies the IsNil predicate on the "speed_units" field.
func SpeedUnitsIsNil() predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIsNull(FieldSpeedUnits))
}

// SpeedUnitsNotNil applies the NotNil predicate on the "speed_units" field.
func SpeedUnitsNotNil() predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotNull(FieldSpeedUnits))
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := newEquipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(sql.NotPredicates(p))
}
