// Code generated by ent, DO NOT EDIT.

package vehicle

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldID, id))
}

// Speed applies equality check predicate on the "speed" field. It's identical to SpeedEQ.
func Speed(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldSpeed, v))
}

// Capacity applies equality check predicate on the "capacity" field. It's identical to CapacityEQ.
func Capacity(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldCapacity, v))
}

// SpeedEQ applies the EQ predicate on the "speed" field.
func SpeedEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldSpeed, v))
}

// SpeedNEQ applies the NEQ predicate on the "speed" field.
func SpeedNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldSpeed, v))
}

// SpeedIn applies the In predicate on the "speed" field.
func SpeedIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldSpeed, vs...))
}

// SpeedNotIn applies the NotIn predicate on the "speed" field.
func SpeedNotIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldSpeed, vs...))
}

// SpeedGT applies the GT predicate on the "speed" field.
func SpeedGT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldSpeed, v))
}

// SpeedGTE applies the GTE predicate on the "speed" field.
func SpeedGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldSpeed, v))
}

// SpeedLT applies the LT predicate on the "speed" field.
func SpeedLT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldSpeed, v))
}

// SpeedLTE applies the LTE predicate on the "speed" field.
func SpeedLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldSpeed, v))
}

// SpeedContains applies the Contains predicate on the "speed" field.
func SpeedContains(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContains(FieldSpeed, v))
}

// SpeedHasPrefix applies the HasPrefix predicate on the "speed" field.
func SpeedHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasPrefix(FieldSpeed, v))
}

// SpeedHasSuffix applies the HasSuffix predicate on the "speed" field.
func SpeedHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasSuffix(FieldSpeed, v))
}

// SpeedEqualFold applies the EqualFold predicate on the "speed" field.
func SpeedEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEqualFold(FieldSpeed, v))
}

// SpeedContainsFold applies the ContainsFold predicate on the "speed" field.
func SpeedContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContainsFold(FieldSpeed, v))
}

// CapacityEQ applies the EQ predicate on the "capacity" field.
func CapacityEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldCapacity, v))
}

// CapacityNEQ applies the NEQ predicate on the "capacity" field.
func CapacityNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldCapacity, v))
}

// CapacityIn applies the In predicate on the "capacity" field.
func CapacityIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldCapacity, vs...))
}

// CapacityNotIn applies the NotIn predicate on the "capacity" field.
func CapacityNotIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldCapacity, vs...))
}

// CapacityGT applies the GT predicate on the "capacity" field.
func CapacityGT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldCapacity, v))
}

// CapacityGTE applies the GTE predicate on the "capacity" field.
func CapacityGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldCapacity, v))
}

// CapacityLT applies the LT predicate on the "capacity" field.
func CapacityLT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldCapacity, v))
}

// CapacityLTE applies the LTE predicate on the "capacity" field.
func CapacityLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldCapacity, v))
}

// CapacityContains applies the Contains predicate on the "capacity" field.
func CapacityContains(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContains(FieldCapacity, v))
}

// CapacityHasPrefix applies the HasPrefix predicate on the "capacity" field.
func CapacityHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasPrefix(FieldCapacity, v))
}

// CapacityHasSuffix applies the HasSuffix predicate on the "capacity" field.
func CapacityHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasSuffix(FieldCapacity, v))
}

// CapacityEqualFold applies the EqualFold predicate on the "capacity" field.
func CapacityEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEqualFold(FieldCapacity, v))
}

// CapacityContainsFold applies the ContainsFold predicate on the "capacity" field.
func CapacityContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContainsFold(FieldCapacity, v))
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EquipmentTable, EquipmentPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := newEquipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		p(s.Not())
	})
}
