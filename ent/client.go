// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/ecshreve/dndgen/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/abilitybonus"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/alignment"
	"github.com/ecshreve/dndgen/ent/coin"
	"github.com/ecshreve/dndgen/ent/condition"
	"github.com/ecshreve/dndgen/ent/damage"
	"github.com/ecshreve/dndgen/ent/damagetype"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/equipmentcost"
	"github.com/ecshreve/dndgen/ent/feat"
	"github.com/ecshreve/dndgen/ent/language"
	"github.com/ecshreve/dndgen/ent/magicschool"
	"github.com/ecshreve/dndgen/ent/property"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/rule"
	"github.com/ecshreve/dndgen/ent/rulesection"
	"github.com/ecshreve/dndgen/ent/skill"
	"github.com/ecshreve/dndgen/ent/weapon"
	"github.com/ecshreve/dndgen/ent/weaponrange"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AbilityBonus is the client for interacting with the AbilityBonus builders.
	AbilityBonus *AbilityBonusClient
	// AbilityScore is the client for interacting with the AbilityScore builders.
	AbilityScore *AbilityScoreClient
	// Alignment is the client for interacting with the Alignment builders.
	Alignment *AlignmentClient
	// Coin is the client for interacting with the Coin builders.
	Coin *CoinClient
	// Condition is the client for interacting with the Condition builders.
	Condition *ConditionClient
	// Damage is the client for interacting with the Damage builders.
	Damage *DamageClient
	// DamageType is the client for interacting with the DamageType builders.
	DamageType *DamageTypeClient
	// Equipment is the client for interacting with the Equipment builders.
	Equipment *EquipmentClient
	// EquipmentCost is the client for interacting with the EquipmentCost builders.
	EquipmentCost *EquipmentCostClient
	// Feat is the client for interacting with the Feat builders.
	Feat *FeatClient
	// Language is the client for interacting with the Language builders.
	Language *LanguageClient
	// MagicSchool is the client for interacting with the MagicSchool builders.
	MagicSchool *MagicSchoolClient
	// Property is the client for interacting with the Property builders.
	Property *PropertyClient
	// Race is the client for interacting with the Race builders.
	Race *RaceClient
	// Rule is the client for interacting with the Rule builders.
	Rule *RuleClient
	// RuleSection is the client for interacting with the RuleSection builders.
	RuleSection *RuleSectionClient
	// Skill is the client for interacting with the Skill builders.
	Skill *SkillClient
	// Weapon is the client for interacting with the Weapon builders.
	Weapon *WeaponClient
	// WeaponRange is the client for interacting with the WeaponRange builders.
	WeaponRange *WeaponRangeClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AbilityBonus = NewAbilityBonusClient(c.config)
	c.AbilityScore = NewAbilityScoreClient(c.config)
	c.Alignment = NewAlignmentClient(c.config)
	c.Coin = NewCoinClient(c.config)
	c.Condition = NewConditionClient(c.config)
	c.Damage = NewDamageClient(c.config)
	c.DamageType = NewDamageTypeClient(c.config)
	c.Equipment = NewEquipmentClient(c.config)
	c.EquipmentCost = NewEquipmentCostClient(c.config)
	c.Feat = NewFeatClient(c.config)
	c.Language = NewLanguageClient(c.config)
	c.MagicSchool = NewMagicSchoolClient(c.config)
	c.Property = NewPropertyClient(c.config)
	c.Race = NewRaceClient(c.config)
	c.Rule = NewRuleClient(c.config)
	c.RuleSection = NewRuleSectionClient(c.config)
	c.Skill = NewSkillClient(c.config)
	c.Weapon = NewWeaponClient(c.config)
	c.WeaponRange = NewWeaponRangeClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		AbilityBonus:  NewAbilityBonusClient(cfg),
		AbilityScore:  NewAbilityScoreClient(cfg),
		Alignment:     NewAlignmentClient(cfg),
		Coin:          NewCoinClient(cfg),
		Condition:     NewConditionClient(cfg),
		Damage:        NewDamageClient(cfg),
		DamageType:    NewDamageTypeClient(cfg),
		Equipment:     NewEquipmentClient(cfg),
		EquipmentCost: NewEquipmentCostClient(cfg),
		Feat:          NewFeatClient(cfg),
		Language:      NewLanguageClient(cfg),
		MagicSchool:   NewMagicSchoolClient(cfg),
		Property:      NewPropertyClient(cfg),
		Race:          NewRaceClient(cfg),
		Rule:          NewRuleClient(cfg),
		RuleSection:   NewRuleSectionClient(cfg),
		Skill:         NewSkillClient(cfg),
		Weapon:        NewWeaponClient(cfg),
		WeaponRange:   NewWeaponRangeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		AbilityBonus:  NewAbilityBonusClient(cfg),
		AbilityScore:  NewAbilityScoreClient(cfg),
		Alignment:     NewAlignmentClient(cfg),
		Coin:          NewCoinClient(cfg),
		Condition:     NewConditionClient(cfg),
		Damage:        NewDamageClient(cfg),
		DamageType:    NewDamageTypeClient(cfg),
		Equipment:     NewEquipmentClient(cfg),
		EquipmentCost: NewEquipmentCostClient(cfg),
		Feat:          NewFeatClient(cfg),
		Language:      NewLanguageClient(cfg),
		MagicSchool:   NewMagicSchoolClient(cfg),
		Property:      NewPropertyClient(cfg),
		Race:          NewRaceClient(cfg),
		Rule:          NewRuleClient(cfg),
		RuleSection:   NewRuleSectionClient(cfg),
		Skill:         NewSkillClient(cfg),
		Weapon:        NewWeaponClient(cfg),
		WeaponRange:   NewWeaponRangeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AbilityBonus.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AbilityBonus, c.AbilityScore, c.Alignment, c.Coin, c.Condition, c.Damage,
		c.DamageType, c.Equipment, c.EquipmentCost, c.Feat, c.Language, c.MagicSchool,
		c.Property, c.Race, c.Rule, c.RuleSection, c.Skill, c.Weapon, c.WeaponRange,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AbilityBonus, c.AbilityScore, c.Alignment, c.Coin, c.Condition, c.Damage,
		c.DamageType, c.Equipment, c.EquipmentCost, c.Feat, c.Language, c.MagicSchool,
		c.Property, c.Race, c.Rule, c.RuleSection, c.Skill, c.Weapon, c.WeaponRange,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AbilityBonusMutation:
		return c.AbilityBonus.mutate(ctx, m)
	case *AbilityScoreMutation:
		return c.AbilityScore.mutate(ctx, m)
	case *AlignmentMutation:
		return c.Alignment.mutate(ctx, m)
	case *CoinMutation:
		return c.Coin.mutate(ctx, m)
	case *ConditionMutation:
		return c.Condition.mutate(ctx, m)
	case *DamageMutation:
		return c.Damage.mutate(ctx, m)
	case *DamageTypeMutation:
		return c.DamageType.mutate(ctx, m)
	case *EquipmentMutation:
		return c.Equipment.mutate(ctx, m)
	case *EquipmentCostMutation:
		return c.EquipmentCost.mutate(ctx, m)
	case *FeatMutation:
		return c.Feat.mutate(ctx, m)
	case *LanguageMutation:
		return c.Language.mutate(ctx, m)
	case *MagicSchoolMutation:
		return c.MagicSchool.mutate(ctx, m)
	case *PropertyMutation:
		return c.Property.mutate(ctx, m)
	case *RaceMutation:
		return c.Race.mutate(ctx, m)
	case *RuleMutation:
		return c.Rule.mutate(ctx, m)
	case *RuleSectionMutation:
		return c.RuleSection.mutate(ctx, m)
	case *SkillMutation:
		return c.Skill.mutate(ctx, m)
	case *WeaponMutation:
		return c.Weapon.mutate(ctx, m)
	case *WeaponRangeMutation:
		return c.WeaponRange.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AbilityBonusClient is a client for the AbilityBonus schema.
type AbilityBonusClient struct {
	config
}

// NewAbilityBonusClient returns a client for the AbilityBonus from the given config.
func NewAbilityBonusClient(c config) *AbilityBonusClient {
	return &AbilityBonusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abilitybonus.Hooks(f(g(h())))`.
func (c *AbilityBonusClient) Use(hooks ...Hook) {
	c.hooks.AbilityBonus = append(c.hooks.AbilityBonus, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `abilitybonus.Intercept(f(g(h())))`.
func (c *AbilityBonusClient) Intercept(interceptors ...Interceptor) {
	c.inters.AbilityBonus = append(c.inters.AbilityBonus, interceptors...)
}

// Create returns a builder for creating a AbilityBonus entity.
func (c *AbilityBonusClient) Create() *AbilityBonusCreate {
	mutation := newAbilityBonusMutation(c.config, OpCreate)
	return &AbilityBonusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AbilityBonus entities.
func (c *AbilityBonusClient) CreateBulk(builders ...*AbilityBonusCreate) *AbilityBonusCreateBulk {
	return &AbilityBonusCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AbilityBonusClient) MapCreateBulk(slice any, setFunc func(*AbilityBonusCreate, int)) *AbilityBonusCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AbilityBonusCreateBulk{err: fmt.Errorf("calling to AbilityBonusClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AbilityBonusCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AbilityBonusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AbilityBonus.
func (c *AbilityBonusClient) Update() *AbilityBonusUpdate {
	mutation := newAbilityBonusMutation(c.config, OpUpdate)
	return &AbilityBonusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbilityBonusClient) UpdateOne(ab *AbilityBonus) *AbilityBonusUpdateOne {
	mutation := newAbilityBonusMutation(c.config, OpUpdateOne, withAbilityBonus(ab))
	return &AbilityBonusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbilityBonusClient) UpdateOneID(id int) *AbilityBonusUpdateOne {
	mutation := newAbilityBonusMutation(c.config, OpUpdateOne, withAbilityBonusID(id))
	return &AbilityBonusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AbilityBonus.
func (c *AbilityBonusClient) Delete() *AbilityBonusDelete {
	mutation := newAbilityBonusMutation(c.config, OpDelete)
	return &AbilityBonusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AbilityBonusClient) DeleteOne(ab *AbilityBonus) *AbilityBonusDeleteOne {
	return c.DeleteOneID(ab.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AbilityBonusClient) DeleteOneID(id int) *AbilityBonusDeleteOne {
	builder := c.Delete().Where(abilitybonus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbilityBonusDeleteOne{builder}
}

// Query returns a query builder for AbilityBonus.
func (c *AbilityBonusClient) Query() *AbilityBonusQuery {
	return &AbilityBonusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAbilityBonus},
		inters: c.Interceptors(),
	}
}

// Get returns a AbilityBonus entity by its id.
func (c *AbilityBonusClient) Get(ctx context.Context, id int) (*AbilityBonus, error) {
	return c.Query().Where(abilitybonus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbilityBonusClient) GetX(ctx context.Context, id int) *AbilityBonus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAbilityScore queries the ability_score edge of a AbilityBonus.
func (c *AbilityBonusClient) QueryAbilityScore(ab *AbilityBonus) *AbilityScoreQuery {
	query := (&AbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ab.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilitybonus.Table, abilitybonus.FieldID, id),
			sqlgraph.To(abilityscore.Table, abilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, abilitybonus.AbilityScoreTable, abilitybonus.AbilityScoreColumn),
		)
		fromV = sqlgraph.Neighbors(ab.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRace queries the race edge of a AbilityBonus.
func (c *AbilityBonusClient) QueryRace(ab *AbilityBonus) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ab.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilitybonus.Table, abilitybonus.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, abilitybonus.RaceTable, abilitybonus.RaceColumn),
		)
		fromV = sqlgraph.Neighbors(ab.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AbilityBonusClient) Hooks() []Hook {
	return c.hooks.AbilityBonus
}

// Interceptors returns the client interceptors.
func (c *AbilityBonusClient) Interceptors() []Interceptor {
	return c.inters.AbilityBonus
}

func (c *AbilityBonusClient) mutate(ctx context.Context, m *AbilityBonusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AbilityBonusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AbilityBonusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AbilityBonusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AbilityBonusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AbilityBonus mutation op: %q", m.Op())
	}
}

// AbilityScoreClient is a client for the AbilityScore schema.
type AbilityScoreClient struct {
	config
}

// NewAbilityScoreClient returns a client for the AbilityScore from the given config.
func NewAbilityScoreClient(c config) *AbilityScoreClient {
	return &AbilityScoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abilityscore.Hooks(f(g(h())))`.
func (c *AbilityScoreClient) Use(hooks ...Hook) {
	c.hooks.AbilityScore = append(c.hooks.AbilityScore, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `abilityscore.Intercept(f(g(h())))`.
func (c *AbilityScoreClient) Intercept(interceptors ...Interceptor) {
	c.inters.AbilityScore = append(c.inters.AbilityScore, interceptors...)
}

// Create returns a builder for creating a AbilityScore entity.
func (c *AbilityScoreClient) Create() *AbilityScoreCreate {
	mutation := newAbilityScoreMutation(c.config, OpCreate)
	return &AbilityScoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AbilityScore entities.
func (c *AbilityScoreClient) CreateBulk(builders ...*AbilityScoreCreate) *AbilityScoreCreateBulk {
	return &AbilityScoreCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AbilityScoreClient) MapCreateBulk(slice any, setFunc func(*AbilityScoreCreate, int)) *AbilityScoreCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AbilityScoreCreateBulk{err: fmt.Errorf("calling to AbilityScoreClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AbilityScoreCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AbilityScoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AbilityScore.
func (c *AbilityScoreClient) Update() *AbilityScoreUpdate {
	mutation := newAbilityScoreMutation(c.config, OpUpdate)
	return &AbilityScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbilityScoreClient) UpdateOne(as *AbilityScore) *AbilityScoreUpdateOne {
	mutation := newAbilityScoreMutation(c.config, OpUpdateOne, withAbilityScore(as))
	return &AbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbilityScoreClient) UpdateOneID(id int) *AbilityScoreUpdateOne {
	mutation := newAbilityScoreMutation(c.config, OpUpdateOne, withAbilityScoreID(id))
	return &AbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AbilityScore.
func (c *AbilityScoreClient) Delete() *AbilityScoreDelete {
	mutation := newAbilityScoreMutation(c.config, OpDelete)
	return &AbilityScoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AbilityScoreClient) DeleteOne(as *AbilityScore) *AbilityScoreDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AbilityScoreClient) DeleteOneID(id int) *AbilityScoreDeleteOne {
	builder := c.Delete().Where(abilityscore.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbilityScoreDeleteOne{builder}
}

// Query returns a query builder for AbilityScore.
func (c *AbilityScoreClient) Query() *AbilityScoreQuery {
	return &AbilityScoreQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAbilityScore},
		inters: c.Interceptors(),
	}
}

// Get returns a AbilityScore entity by its id.
func (c *AbilityScoreClient) Get(ctx context.Context, id int) (*AbilityScore, error) {
	return c.Query().Where(abilityscore.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbilityScoreClient) GetX(ctx context.Context, id int) *AbilityScore {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySkills queries the skills edge of a AbilityScore.
func (c *AbilityScoreClient) QuerySkills(as *AbilityScore) *SkillQuery {
	query := (&SkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilityscore.Table, abilityscore.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, abilityscore.SkillsTable, abilityscore.SkillsColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAbilityBonuses queries the ability_bonuses edge of a AbilityScore.
func (c *AbilityScoreClient) QueryAbilityBonuses(as *AbilityScore) *AbilityBonusQuery {
	query := (&AbilityBonusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilityscore.Table, abilityscore.FieldID, id),
			sqlgraph.To(abilitybonus.Table, abilitybonus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, abilityscore.AbilityBonusesTable, abilityscore.AbilityBonusesColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AbilityScoreClient) Hooks() []Hook {
	return c.hooks.AbilityScore
}

// Interceptors returns the client interceptors.
func (c *AbilityScoreClient) Interceptors() []Interceptor {
	return c.inters.AbilityScore
}

func (c *AbilityScoreClient) mutate(ctx context.Context, m *AbilityScoreMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AbilityScoreCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AbilityScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AbilityScoreDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AbilityScore mutation op: %q", m.Op())
	}
}

// AlignmentClient is a client for the Alignment schema.
type AlignmentClient struct {
	config
}

// NewAlignmentClient returns a client for the Alignment from the given config.
func NewAlignmentClient(c config) *AlignmentClient {
	return &AlignmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `alignment.Hooks(f(g(h())))`.
func (c *AlignmentClient) Use(hooks ...Hook) {
	c.hooks.Alignment = append(c.hooks.Alignment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `alignment.Intercept(f(g(h())))`.
func (c *AlignmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Alignment = append(c.inters.Alignment, interceptors...)
}

// Create returns a builder for creating a Alignment entity.
func (c *AlignmentClient) Create() *AlignmentCreate {
	mutation := newAlignmentMutation(c.config, OpCreate)
	return &AlignmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Alignment entities.
func (c *AlignmentClient) CreateBulk(builders ...*AlignmentCreate) *AlignmentCreateBulk {
	return &AlignmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AlignmentClient) MapCreateBulk(slice any, setFunc func(*AlignmentCreate, int)) *AlignmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AlignmentCreateBulk{err: fmt.Errorf("calling to AlignmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AlignmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AlignmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Alignment.
func (c *AlignmentClient) Update() *AlignmentUpdate {
	mutation := newAlignmentMutation(c.config, OpUpdate)
	return &AlignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AlignmentClient) UpdateOne(a *Alignment) *AlignmentUpdateOne {
	mutation := newAlignmentMutation(c.config, OpUpdateOne, withAlignment(a))
	return &AlignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AlignmentClient) UpdateOneID(id int) *AlignmentUpdateOne {
	mutation := newAlignmentMutation(c.config, OpUpdateOne, withAlignmentID(id))
	return &AlignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Alignment.
func (c *AlignmentClient) Delete() *AlignmentDelete {
	mutation := newAlignmentMutation(c.config, OpDelete)
	return &AlignmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AlignmentClient) DeleteOne(a *Alignment) *AlignmentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AlignmentClient) DeleteOneID(id int) *AlignmentDeleteOne {
	builder := c.Delete().Where(alignment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AlignmentDeleteOne{builder}
}

// Query returns a query builder for Alignment.
func (c *AlignmentClient) Query() *AlignmentQuery {
	return &AlignmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAlignment},
		inters: c.Interceptors(),
	}
}

// Get returns a Alignment entity by its id.
func (c *AlignmentClient) Get(ctx context.Context, id int) (*Alignment, error) {
	return c.Query().Where(alignment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AlignmentClient) GetX(ctx context.Context, id int) *Alignment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AlignmentClient) Hooks() []Hook {
	return c.hooks.Alignment
}

// Interceptors returns the client interceptors.
func (c *AlignmentClient) Interceptors() []Interceptor {
	return c.inters.Alignment
}

func (c *AlignmentClient) mutate(ctx context.Context, m *AlignmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AlignmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AlignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AlignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AlignmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Alignment mutation op: %q", m.Op())
	}
}

// CoinClient is a client for the Coin schema.
type CoinClient struct {
	config
}

// NewCoinClient returns a client for the Coin from the given config.
func NewCoinClient(c config) *CoinClient {
	return &CoinClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coin.Hooks(f(g(h())))`.
func (c *CoinClient) Use(hooks ...Hook) {
	c.hooks.Coin = append(c.hooks.Coin, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coin.Intercept(f(g(h())))`.
func (c *CoinClient) Intercept(interceptors ...Interceptor) {
	c.inters.Coin = append(c.inters.Coin, interceptors...)
}

// Create returns a builder for creating a Coin entity.
func (c *CoinClient) Create() *CoinCreate {
	mutation := newCoinMutation(c.config, OpCreate)
	return &CoinCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Coin entities.
func (c *CoinClient) CreateBulk(builders ...*CoinCreate) *CoinCreateBulk {
	return &CoinCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CoinClient) MapCreateBulk(slice any, setFunc func(*CoinCreate, int)) *CoinCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CoinCreateBulk{err: fmt.Errorf("calling to CoinClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CoinCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CoinCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Coin.
func (c *CoinClient) Update() *CoinUpdate {
	mutation := newCoinMutation(c.config, OpUpdate)
	return &CoinUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinClient) UpdateOne(co *Coin) *CoinUpdateOne {
	mutation := newCoinMutation(c.config, OpUpdateOne, withCoin(co))
	return &CoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinClient) UpdateOneID(id int) *CoinUpdateOne {
	mutation := newCoinMutation(c.config, OpUpdateOne, withCoinID(id))
	return &CoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Coin.
func (c *CoinClient) Delete() *CoinDelete {
	mutation := newCoinMutation(c.config, OpDelete)
	return &CoinDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinClient) DeleteOne(co *Coin) *CoinDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CoinClient) DeleteOneID(id int) *CoinDeleteOne {
	builder := c.Delete().Where(coin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinDeleteOne{builder}
}

// Query returns a query builder for Coin.
func (c *CoinClient) Query() *CoinQuery {
	return &CoinQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoin},
		inters: c.Interceptors(),
	}
}

// Get returns a Coin entity by its id.
func (c *CoinClient) Get(ctx context.Context, id int) (*Coin, error) {
	return c.Query().Where(coin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinClient) GetX(ctx context.Context, id int) *Coin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipmentCosts queries the equipment_costs edge of a Coin.
func (c *CoinClient) QueryEquipmentCosts(co *Coin) *EquipmentCostQuery {
	query := (&EquipmentCostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coin.Table, coin.FieldID, id),
			sqlgraph.To(equipmentcost.Table, equipmentcost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, coin.EquipmentCostsTable, coin.EquipmentCostsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CoinClient) Hooks() []Hook {
	return c.hooks.Coin
}

// Interceptors returns the client interceptors.
func (c *CoinClient) Interceptors() []Interceptor {
	return c.inters.Coin
}

func (c *CoinClient) mutate(ctx context.Context, m *CoinMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CoinCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CoinUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CoinDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Coin mutation op: %q", m.Op())
	}
}

// ConditionClient is a client for the Condition schema.
type ConditionClient struct {
	config
}

// NewConditionClient returns a client for the Condition from the given config.
func NewConditionClient(c config) *ConditionClient {
	return &ConditionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `condition.Hooks(f(g(h())))`.
func (c *ConditionClient) Use(hooks ...Hook) {
	c.hooks.Condition = append(c.hooks.Condition, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `condition.Intercept(f(g(h())))`.
func (c *ConditionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Condition = append(c.inters.Condition, interceptors...)
}

// Create returns a builder for creating a Condition entity.
func (c *ConditionClient) Create() *ConditionCreate {
	mutation := newConditionMutation(c.config, OpCreate)
	return &ConditionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Condition entities.
func (c *ConditionClient) CreateBulk(builders ...*ConditionCreate) *ConditionCreateBulk {
	return &ConditionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConditionClient) MapCreateBulk(slice any, setFunc func(*ConditionCreate, int)) *ConditionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConditionCreateBulk{err: fmt.Errorf("calling to ConditionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConditionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConditionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Condition.
func (c *ConditionClient) Update() *ConditionUpdate {
	mutation := newConditionMutation(c.config, OpUpdate)
	return &ConditionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConditionClient) UpdateOne(co *Condition) *ConditionUpdateOne {
	mutation := newConditionMutation(c.config, OpUpdateOne, withCondition(co))
	return &ConditionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConditionClient) UpdateOneID(id int) *ConditionUpdateOne {
	mutation := newConditionMutation(c.config, OpUpdateOne, withConditionID(id))
	return &ConditionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Condition.
func (c *ConditionClient) Delete() *ConditionDelete {
	mutation := newConditionMutation(c.config, OpDelete)
	return &ConditionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConditionClient) DeleteOne(co *Condition) *ConditionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConditionClient) DeleteOneID(id int) *ConditionDeleteOne {
	builder := c.Delete().Where(condition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConditionDeleteOne{builder}
}

// Query returns a query builder for Condition.
func (c *ConditionClient) Query() *ConditionQuery {
	return &ConditionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCondition},
		inters: c.Interceptors(),
	}
}

// Get returns a Condition entity by its id.
func (c *ConditionClient) Get(ctx context.Context, id int) (*Condition, error) {
	return c.Query().Where(condition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConditionClient) GetX(ctx context.Context, id int) *Condition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConditionClient) Hooks() []Hook {
	return c.hooks.Condition
}

// Interceptors returns the client interceptors.
func (c *ConditionClient) Interceptors() []Interceptor {
	return c.inters.Condition
}

func (c *ConditionClient) mutate(ctx context.Context, m *ConditionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConditionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConditionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConditionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConditionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Condition mutation op: %q", m.Op())
	}
}

// DamageClient is a client for the Damage schema.
type DamageClient struct {
	config
}

// NewDamageClient returns a client for the Damage from the given config.
func NewDamageClient(c config) *DamageClient {
	return &DamageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `damage.Hooks(f(g(h())))`.
func (c *DamageClient) Use(hooks ...Hook) {
	c.hooks.Damage = append(c.hooks.Damage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `damage.Intercept(f(g(h())))`.
func (c *DamageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Damage = append(c.inters.Damage, interceptors...)
}

// Create returns a builder for creating a Damage entity.
func (c *DamageClient) Create() *DamageCreate {
	mutation := newDamageMutation(c.config, OpCreate)
	return &DamageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Damage entities.
func (c *DamageClient) CreateBulk(builders ...*DamageCreate) *DamageCreateBulk {
	return &DamageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DamageClient) MapCreateBulk(slice any, setFunc func(*DamageCreate, int)) *DamageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DamageCreateBulk{err: fmt.Errorf("calling to DamageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DamageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DamageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Damage.
func (c *DamageClient) Update() *DamageUpdate {
	mutation := newDamageMutation(c.config, OpUpdate)
	return &DamageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DamageClient) UpdateOne(d *Damage) *DamageUpdateOne {
	mutation := newDamageMutation(c.config, OpUpdateOne, withDamage(d))
	return &DamageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DamageClient) UpdateOneID(id int) *DamageUpdateOne {
	mutation := newDamageMutation(c.config, OpUpdateOne, withDamageID(id))
	return &DamageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Damage.
func (c *DamageClient) Delete() *DamageDelete {
	mutation := newDamageMutation(c.config, OpDelete)
	return &DamageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DamageClient) DeleteOne(d *Damage) *DamageDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DamageClient) DeleteOneID(id int) *DamageDeleteOne {
	builder := c.Delete().Where(damage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DamageDeleteOne{builder}
}

// Query returns a query builder for Damage.
func (c *DamageClient) Query() *DamageQuery {
	return &DamageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDamage},
		inters: c.Interceptors(),
	}
}

// Get returns a Damage entity by its id.
func (c *DamageClient) Get(ctx context.Context, id int) (*Damage, error) {
	return c.Query().Where(damage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DamageClient) GetX(ctx context.Context, id int) *Damage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDamageType queries the damage_type edge of a Damage.
func (c *DamageClient) QueryDamageType(d *Damage) *DamageTypeQuery {
	query := (&DamageTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(damage.Table, damage.FieldID, id),
			sqlgraph.To(damagetype.Table, damagetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, damage.DamageTypeTable, damage.DamageTypeColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DamageClient) Hooks() []Hook {
	return c.hooks.Damage
}

// Interceptors returns the client interceptors.
func (c *DamageClient) Interceptors() []Interceptor {
	return c.inters.Damage
}

func (c *DamageClient) mutate(ctx context.Context, m *DamageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DamageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DamageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DamageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DamageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Damage mutation op: %q", m.Op())
	}
}

// DamageTypeClient is a client for the DamageType schema.
type DamageTypeClient struct {
	config
}

// NewDamageTypeClient returns a client for the DamageType from the given config.
func NewDamageTypeClient(c config) *DamageTypeClient {
	return &DamageTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `damagetype.Hooks(f(g(h())))`.
func (c *DamageTypeClient) Use(hooks ...Hook) {
	c.hooks.DamageType = append(c.hooks.DamageType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `damagetype.Intercept(f(g(h())))`.
func (c *DamageTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.DamageType = append(c.inters.DamageType, interceptors...)
}

// Create returns a builder for creating a DamageType entity.
func (c *DamageTypeClient) Create() *DamageTypeCreate {
	mutation := newDamageTypeMutation(c.config, OpCreate)
	return &DamageTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DamageType entities.
func (c *DamageTypeClient) CreateBulk(builders ...*DamageTypeCreate) *DamageTypeCreateBulk {
	return &DamageTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DamageTypeClient) MapCreateBulk(slice any, setFunc func(*DamageTypeCreate, int)) *DamageTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DamageTypeCreateBulk{err: fmt.Errorf("calling to DamageTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DamageTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DamageTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DamageType.
func (c *DamageTypeClient) Update() *DamageTypeUpdate {
	mutation := newDamageTypeMutation(c.config, OpUpdate)
	return &DamageTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DamageTypeClient) UpdateOne(dt *DamageType) *DamageTypeUpdateOne {
	mutation := newDamageTypeMutation(c.config, OpUpdateOne, withDamageType(dt))
	return &DamageTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DamageTypeClient) UpdateOneID(id int) *DamageTypeUpdateOne {
	mutation := newDamageTypeMutation(c.config, OpUpdateOne, withDamageTypeID(id))
	return &DamageTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DamageType.
func (c *DamageTypeClient) Delete() *DamageTypeDelete {
	mutation := newDamageTypeMutation(c.config, OpDelete)
	return &DamageTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DamageTypeClient) DeleteOne(dt *DamageType) *DamageTypeDeleteOne {
	return c.DeleteOneID(dt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DamageTypeClient) DeleteOneID(id int) *DamageTypeDeleteOne {
	builder := c.Delete().Where(damagetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DamageTypeDeleteOne{builder}
}

// Query returns a query builder for DamageType.
func (c *DamageTypeClient) Query() *DamageTypeQuery {
	return &DamageTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDamageType},
		inters: c.Interceptors(),
	}
}

// Get returns a DamageType entity by its id.
func (c *DamageTypeClient) Get(ctx context.Context, id int) (*DamageType, error) {
	return c.Query().Where(damagetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DamageTypeClient) GetX(ctx context.Context, id int) *DamageType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DamageTypeClient) Hooks() []Hook {
	return c.hooks.DamageType
}

// Interceptors returns the client interceptors.
func (c *DamageTypeClient) Interceptors() []Interceptor {
	return c.inters.DamageType
}

func (c *DamageTypeClient) mutate(ctx context.Context, m *DamageTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DamageTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DamageTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DamageTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DamageTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DamageType mutation op: %q", m.Op())
	}
}

// EquipmentClient is a client for the Equipment schema.
type EquipmentClient struct {
	config
}

// NewEquipmentClient returns a client for the Equipment from the given config.
func NewEquipmentClient(c config) *EquipmentClient {
	return &EquipmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipment.Hooks(f(g(h())))`.
func (c *EquipmentClient) Use(hooks ...Hook) {
	c.hooks.Equipment = append(c.hooks.Equipment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `equipment.Intercept(f(g(h())))`.
func (c *EquipmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Equipment = append(c.inters.Equipment, interceptors...)
}

// Create returns a builder for creating a Equipment entity.
func (c *EquipmentClient) Create() *EquipmentCreate {
	mutation := newEquipmentMutation(c.config, OpCreate)
	return &EquipmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Equipment entities.
func (c *EquipmentClient) CreateBulk(builders ...*EquipmentCreate) *EquipmentCreateBulk {
	return &EquipmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EquipmentClient) MapCreateBulk(slice any, setFunc func(*EquipmentCreate, int)) *EquipmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EquipmentCreateBulk{err: fmt.Errorf("calling to EquipmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EquipmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EquipmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Equipment.
func (c *EquipmentClient) Update() *EquipmentUpdate {
	mutation := newEquipmentMutation(c.config, OpUpdate)
	return &EquipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentClient) UpdateOne(e *Equipment) *EquipmentUpdateOne {
	mutation := newEquipmentMutation(c.config, OpUpdateOne, withEquipment(e))
	return &EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentClient) UpdateOneID(id int) *EquipmentUpdateOne {
	mutation := newEquipmentMutation(c.config, OpUpdateOne, withEquipmentID(id))
	return &EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Equipment.
func (c *EquipmentClient) Delete() *EquipmentDelete {
	mutation := newEquipmentMutation(c.config, OpDelete)
	return &EquipmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EquipmentClient) DeleteOne(e *Equipment) *EquipmentDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EquipmentClient) DeleteOneID(id int) *EquipmentDeleteOne {
	builder := c.Delete().Where(equipment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentDeleteOne{builder}
}

// Query returns a query builder for Equipment.
func (c *EquipmentClient) Query() *EquipmentQuery {
	return &EquipmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEquipment},
		inters: c.Interceptors(),
	}
}

// Get returns a Equipment entity by its id.
func (c *EquipmentClient) Get(ctx context.Context, id int) (*Equipment, error) {
	return c.Query().Where(equipment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentClient) GetX(ctx context.Context, id int) *Equipment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipmentCosts queries the equipment_costs edge of a Equipment.
func (c *EquipmentClient) QueryEquipmentCosts(e *Equipment) *EquipmentCostQuery {
	query := (&EquipmentCostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(equipmentcost.Table, equipmentcost.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.EquipmentCostsTable, equipment.EquipmentCostsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentClient) Hooks() []Hook {
	return c.hooks.Equipment
}

// Interceptors returns the client interceptors.
func (c *EquipmentClient) Interceptors() []Interceptor {
	return c.inters.Equipment
}

func (c *EquipmentClient) mutate(ctx context.Context, m *EquipmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EquipmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EquipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EquipmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Equipment mutation op: %q", m.Op())
	}
}

// EquipmentCostClient is a client for the EquipmentCost schema.
type EquipmentCostClient struct {
	config
}

// NewEquipmentCostClient returns a client for the EquipmentCost from the given config.
func NewEquipmentCostClient(c config) *EquipmentCostClient {
	return &EquipmentCostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentcost.Hooks(f(g(h())))`.
func (c *EquipmentCostClient) Use(hooks ...Hook) {
	c.hooks.EquipmentCost = append(c.hooks.EquipmentCost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `equipmentcost.Intercept(f(g(h())))`.
func (c *EquipmentCostClient) Intercept(interceptors ...Interceptor) {
	c.inters.EquipmentCost = append(c.inters.EquipmentCost, interceptors...)
}

// Create returns a builder for creating a EquipmentCost entity.
func (c *EquipmentCostClient) Create() *EquipmentCostCreate {
	mutation := newEquipmentCostMutation(c.config, OpCreate)
	return &EquipmentCostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentCost entities.
func (c *EquipmentCostClient) CreateBulk(builders ...*EquipmentCostCreate) *EquipmentCostCreateBulk {
	return &EquipmentCostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EquipmentCostClient) MapCreateBulk(slice any, setFunc func(*EquipmentCostCreate, int)) *EquipmentCostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EquipmentCostCreateBulk{err: fmt.Errorf("calling to EquipmentCostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EquipmentCostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EquipmentCostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentCost.
func (c *EquipmentCostClient) Update() *EquipmentCostUpdate {
	mutation := newEquipmentCostMutation(c.config, OpUpdate)
	return &EquipmentCostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentCostClient) UpdateOne(ec *EquipmentCost) *EquipmentCostUpdateOne {
	mutation := newEquipmentCostMutation(c.config, OpUpdateOne, withEquipmentCost(ec))
	return &EquipmentCostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentCostClient) UpdateOneID(id int) *EquipmentCostUpdateOne {
	mutation := newEquipmentCostMutation(c.config, OpUpdateOne, withEquipmentCostID(id))
	return &EquipmentCostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentCost.
func (c *EquipmentCostClient) Delete() *EquipmentCostDelete {
	mutation := newEquipmentCostMutation(c.config, OpDelete)
	return &EquipmentCostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EquipmentCostClient) DeleteOne(ec *EquipmentCost) *EquipmentCostDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EquipmentCostClient) DeleteOneID(id int) *EquipmentCostDeleteOne {
	builder := c.Delete().Where(equipmentcost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentCostDeleteOne{builder}
}

// Query returns a query builder for EquipmentCost.
func (c *EquipmentCostClient) Query() *EquipmentCostQuery {
	return &EquipmentCostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEquipmentCost},
		inters: c.Interceptors(),
	}
}

// Get returns a EquipmentCost entity by its id.
func (c *EquipmentCostClient) Get(ctx context.Context, id int) (*EquipmentCost, error) {
	return c.Query().Where(equipmentcost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentCostClient) GetX(ctx context.Context, id int) *EquipmentCost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCoin queries the coin edge of a EquipmentCost.
func (c *EquipmentCostClient) QueryCoin(ec *EquipmentCost) *CoinQuery {
	query := (&CoinClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentcost.Table, equipmentcost.FieldID, id),
			sqlgraph.To(coin.Table, coin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipmentcost.CoinTable, equipmentcost.CoinColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a EquipmentCost.
func (c *EquipmentCostClient) QueryEquipment(ec *EquipmentCost) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentcost.Table, equipmentcost.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, equipmentcost.EquipmentTable, equipmentcost.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentCostClient) Hooks() []Hook {
	return c.hooks.EquipmentCost
}

// Interceptors returns the client interceptors.
func (c *EquipmentCostClient) Interceptors() []Interceptor {
	return c.inters.EquipmentCost
}

func (c *EquipmentCostClient) mutate(ctx context.Context, m *EquipmentCostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EquipmentCostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EquipmentCostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EquipmentCostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EquipmentCostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EquipmentCost mutation op: %q", m.Op())
	}
}

// FeatClient is a client for the Feat schema.
type FeatClient struct {
	config
}

// NewFeatClient returns a client for the Feat from the given config.
func NewFeatClient(c config) *FeatClient {
	return &FeatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feat.Hooks(f(g(h())))`.
func (c *FeatClient) Use(hooks ...Hook) {
	c.hooks.Feat = append(c.hooks.Feat, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feat.Intercept(f(g(h())))`.
func (c *FeatClient) Intercept(interceptors ...Interceptor) {
	c.inters.Feat = append(c.inters.Feat, interceptors...)
}

// Create returns a builder for creating a Feat entity.
func (c *FeatClient) Create() *FeatCreate {
	mutation := newFeatMutation(c.config, OpCreate)
	return &FeatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feat entities.
func (c *FeatClient) CreateBulk(builders ...*FeatCreate) *FeatCreateBulk {
	return &FeatCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeatClient) MapCreateBulk(slice any, setFunc func(*FeatCreate, int)) *FeatCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeatCreateBulk{err: fmt.Errorf("calling to FeatClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeatCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feat.
func (c *FeatClient) Update() *FeatUpdate {
	mutation := newFeatMutation(c.config, OpUpdate)
	return &FeatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeatClient) UpdateOne(f *Feat) *FeatUpdateOne {
	mutation := newFeatMutation(c.config, OpUpdateOne, withFeat(f))
	return &FeatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeatClient) UpdateOneID(id int) *FeatUpdateOne {
	mutation := newFeatMutation(c.config, OpUpdateOne, withFeatID(id))
	return &FeatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feat.
func (c *FeatClient) Delete() *FeatDelete {
	mutation := newFeatMutation(c.config, OpDelete)
	return &FeatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeatClient) DeleteOne(f *Feat) *FeatDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeatClient) DeleteOneID(id int) *FeatDeleteOne {
	builder := c.Delete().Where(feat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeatDeleteOne{builder}
}

// Query returns a query builder for Feat.
func (c *FeatClient) Query() *FeatQuery {
	return &FeatQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeat},
		inters: c.Interceptors(),
	}
}

// Get returns a Feat entity by its id.
func (c *FeatClient) Get(ctx context.Context, id int) (*Feat, error) {
	return c.Query().Where(feat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeatClient) GetX(ctx context.Context, id int) *Feat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeatClient) Hooks() []Hook {
	return c.hooks.Feat
}

// Interceptors returns the client interceptors.
func (c *FeatClient) Interceptors() []Interceptor {
	return c.inters.Feat
}

func (c *FeatClient) mutate(ctx context.Context, m *FeatMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeatCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeatUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeatDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Feat mutation op: %q", m.Op())
	}
}

// LanguageClient is a client for the Language schema.
type LanguageClient struct {
	config
}

// NewLanguageClient returns a client for the Language from the given config.
func NewLanguageClient(c config) *LanguageClient {
	return &LanguageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `language.Hooks(f(g(h())))`.
func (c *LanguageClient) Use(hooks ...Hook) {
	c.hooks.Language = append(c.hooks.Language, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `language.Intercept(f(g(h())))`.
func (c *LanguageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Language = append(c.inters.Language, interceptors...)
}

// Create returns a builder for creating a Language entity.
func (c *LanguageClient) Create() *LanguageCreate {
	mutation := newLanguageMutation(c.config, OpCreate)
	return &LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Language entities.
func (c *LanguageClient) CreateBulk(builders ...*LanguageCreate) *LanguageCreateBulk {
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LanguageClient) MapCreateBulk(slice any, setFunc func(*LanguageCreate, int)) *LanguageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LanguageCreateBulk{err: fmt.Errorf("calling to LanguageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LanguageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Language.
func (c *LanguageClient) Update() *LanguageUpdate {
	mutation := newLanguageMutation(c.config, OpUpdate)
	return &LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LanguageClient) UpdateOne(l *Language) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguage(l))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LanguageClient) UpdateOneID(id int) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguageID(id))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Language.
func (c *LanguageClient) Delete() *LanguageDelete {
	mutation := newLanguageMutation(c.config, OpDelete)
	return &LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LanguageClient) DeleteOne(l *Language) *LanguageDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LanguageClient) DeleteOneID(id int) *LanguageDeleteOne {
	builder := c.Delete().Where(language.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LanguageDeleteOne{builder}
}

// Query returns a query builder for Language.
func (c *LanguageClient) Query() *LanguageQuery {
	return &LanguageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLanguage},
		inters: c.Interceptors(),
	}
}

// Get returns a Language entity by its id.
func (c *LanguageClient) Get(ctx context.Context, id int) (*Language, error) {
	return c.Query().Where(language.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LanguageClient) GetX(ctx context.Context, id int) *Language {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRaces queries the races edge of a Language.
func (c *LanguageClient) QueryRaces(l *Language) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, language.RacesTable, language.RacesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LanguageClient) Hooks() []Hook {
	return c.hooks.Language
}

// Interceptors returns the client interceptors.
func (c *LanguageClient) Interceptors() []Interceptor {
	return c.inters.Language
}

func (c *LanguageClient) mutate(ctx context.Context, m *LanguageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Language mutation op: %q", m.Op())
	}
}

// MagicSchoolClient is a client for the MagicSchool schema.
type MagicSchoolClient struct {
	config
}

// NewMagicSchoolClient returns a client for the MagicSchool from the given config.
func NewMagicSchoolClient(c config) *MagicSchoolClient {
	return &MagicSchoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `magicschool.Hooks(f(g(h())))`.
func (c *MagicSchoolClient) Use(hooks ...Hook) {
	c.hooks.MagicSchool = append(c.hooks.MagicSchool, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `magicschool.Intercept(f(g(h())))`.
func (c *MagicSchoolClient) Intercept(interceptors ...Interceptor) {
	c.inters.MagicSchool = append(c.inters.MagicSchool, interceptors...)
}

// Create returns a builder for creating a MagicSchool entity.
func (c *MagicSchoolClient) Create() *MagicSchoolCreate {
	mutation := newMagicSchoolMutation(c.config, OpCreate)
	return &MagicSchoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MagicSchool entities.
func (c *MagicSchoolClient) CreateBulk(builders ...*MagicSchoolCreate) *MagicSchoolCreateBulk {
	return &MagicSchoolCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MagicSchoolClient) MapCreateBulk(slice any, setFunc func(*MagicSchoolCreate, int)) *MagicSchoolCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MagicSchoolCreateBulk{err: fmt.Errorf("calling to MagicSchoolClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MagicSchoolCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MagicSchoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MagicSchool.
func (c *MagicSchoolClient) Update() *MagicSchoolUpdate {
	mutation := newMagicSchoolMutation(c.config, OpUpdate)
	return &MagicSchoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MagicSchoolClient) UpdateOne(ms *MagicSchool) *MagicSchoolUpdateOne {
	mutation := newMagicSchoolMutation(c.config, OpUpdateOne, withMagicSchool(ms))
	return &MagicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MagicSchoolClient) UpdateOneID(id int) *MagicSchoolUpdateOne {
	mutation := newMagicSchoolMutation(c.config, OpUpdateOne, withMagicSchoolID(id))
	return &MagicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MagicSchool.
func (c *MagicSchoolClient) Delete() *MagicSchoolDelete {
	mutation := newMagicSchoolMutation(c.config, OpDelete)
	return &MagicSchoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MagicSchoolClient) DeleteOne(ms *MagicSchool) *MagicSchoolDeleteOne {
	return c.DeleteOneID(ms.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MagicSchoolClient) DeleteOneID(id int) *MagicSchoolDeleteOne {
	builder := c.Delete().Where(magicschool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MagicSchoolDeleteOne{builder}
}

// Query returns a query builder for MagicSchool.
func (c *MagicSchoolClient) Query() *MagicSchoolQuery {
	return &MagicSchoolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMagicSchool},
		inters: c.Interceptors(),
	}
}

// Get returns a MagicSchool entity by its id.
func (c *MagicSchoolClient) Get(ctx context.Context, id int) (*MagicSchool, error) {
	return c.Query().Where(magicschool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MagicSchoolClient) GetX(ctx context.Context, id int) *MagicSchool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MagicSchoolClient) Hooks() []Hook {
	return c.hooks.MagicSchool
}

// Interceptors returns the client interceptors.
func (c *MagicSchoolClient) Interceptors() []Interceptor {
	return c.inters.MagicSchool
}

func (c *MagicSchoolClient) mutate(ctx context.Context, m *MagicSchoolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MagicSchoolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MagicSchoolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MagicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MagicSchoolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MagicSchool mutation op: %q", m.Op())
	}
}

// PropertyClient is a client for the Property schema.
type PropertyClient struct {
	config
}

// NewPropertyClient returns a client for the Property from the given config.
func NewPropertyClient(c config) *PropertyClient {
	return &PropertyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `property.Hooks(f(g(h())))`.
func (c *PropertyClient) Use(hooks ...Hook) {
	c.hooks.Property = append(c.hooks.Property, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `property.Intercept(f(g(h())))`.
func (c *PropertyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Property = append(c.inters.Property, interceptors...)
}

// Create returns a builder for creating a Property entity.
func (c *PropertyClient) Create() *PropertyCreate {
	mutation := newPropertyMutation(c.config, OpCreate)
	return &PropertyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Property entities.
func (c *PropertyClient) CreateBulk(builders ...*PropertyCreate) *PropertyCreateBulk {
	return &PropertyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PropertyClient) MapCreateBulk(slice any, setFunc func(*PropertyCreate, int)) *PropertyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PropertyCreateBulk{err: fmt.Errorf("calling to PropertyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PropertyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PropertyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Property.
func (c *PropertyClient) Update() *PropertyUpdate {
	mutation := newPropertyMutation(c.config, OpUpdate)
	return &PropertyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PropertyClient) UpdateOne(pr *Property) *PropertyUpdateOne {
	mutation := newPropertyMutation(c.config, OpUpdateOne, withProperty(pr))
	return &PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PropertyClient) UpdateOneID(id int) *PropertyUpdateOne {
	mutation := newPropertyMutation(c.config, OpUpdateOne, withPropertyID(id))
	return &PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Property.
func (c *PropertyClient) Delete() *PropertyDelete {
	mutation := newPropertyMutation(c.config, OpDelete)
	return &PropertyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PropertyClient) DeleteOne(pr *Property) *PropertyDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PropertyClient) DeleteOneID(id int) *PropertyDeleteOne {
	builder := c.Delete().Where(property.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PropertyDeleteOne{builder}
}

// Query returns a query builder for Property.
func (c *PropertyClient) Query() *PropertyQuery {
	return &PropertyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProperty},
		inters: c.Interceptors(),
	}
}

// Get returns a Property entity by its id.
func (c *PropertyClient) Get(ctx context.Context, id int) (*Property, error) {
	return c.Query().Where(property.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PropertyClient) GetX(ctx context.Context, id int) *Property {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWeapons queries the weapons edge of a Property.
func (c *PropertyClient) QueryWeapons(pr *Property) *WeaponQuery {
	query := (&WeaponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(weapon.Table, weapon.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, property.WeaponsTable, property.WeaponsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PropertyClient) Hooks() []Hook {
	return c.hooks.Property
}

// Interceptors returns the client interceptors.
func (c *PropertyClient) Interceptors() []Interceptor {
	return c.inters.Property
}

func (c *PropertyClient) mutate(ctx context.Context, m *PropertyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PropertyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PropertyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PropertyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Property mutation op: %q", m.Op())
	}
}

// RaceClient is a client for the Race schema.
type RaceClient struct {
	config
}

// NewRaceClient returns a client for the Race from the given config.
func NewRaceClient(c config) *RaceClient {
	return &RaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `race.Hooks(f(g(h())))`.
func (c *RaceClient) Use(hooks ...Hook) {
	c.hooks.Race = append(c.hooks.Race, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `race.Intercept(f(g(h())))`.
func (c *RaceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Race = append(c.inters.Race, interceptors...)
}

// Create returns a builder for creating a Race entity.
func (c *RaceClient) Create() *RaceCreate {
	mutation := newRaceMutation(c.config, OpCreate)
	return &RaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Race entities.
func (c *RaceClient) CreateBulk(builders ...*RaceCreate) *RaceCreateBulk {
	return &RaceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RaceClient) MapCreateBulk(slice any, setFunc func(*RaceCreate, int)) *RaceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RaceCreateBulk{err: fmt.Errorf("calling to RaceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RaceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Race.
func (c *RaceClient) Update() *RaceUpdate {
	mutation := newRaceMutation(c.config, OpUpdate)
	return &RaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RaceClient) UpdateOne(r *Race) *RaceUpdateOne {
	mutation := newRaceMutation(c.config, OpUpdateOne, withRace(r))
	return &RaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RaceClient) UpdateOneID(id int) *RaceUpdateOne {
	mutation := newRaceMutation(c.config, OpUpdateOne, withRaceID(id))
	return &RaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Race.
func (c *RaceClient) Delete() *RaceDelete {
	mutation := newRaceMutation(c.config, OpDelete)
	return &RaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RaceClient) DeleteOne(r *Race) *RaceDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RaceClient) DeleteOneID(id int) *RaceDeleteOne {
	builder := c.Delete().Where(race.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RaceDeleteOne{builder}
}

// Query returns a query builder for Race.
func (c *RaceClient) Query() *RaceQuery {
	return &RaceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRace},
		inters: c.Interceptors(),
	}
}

// Get returns a Race entity by its id.
func (c *RaceClient) Get(ctx context.Context, id int) (*Race, error) {
	return c.Query().Where(race.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RaceClient) GetX(ctx context.Context, id int) *Race {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAbilityBonuses queries the ability_bonuses edge of a Race.
func (c *RaceClient) QueryAbilityBonuses(r *Race) *AbilityBonusQuery {
	query := (&AbilityBonusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(abilitybonus.Table, abilitybonus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, race.AbilityBonusesTable, race.AbilityBonusesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguages queries the languages edge of a Race.
func (c *RaceClient) QueryLanguages(r *Race) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, race.LanguagesTable, race.LanguagesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RaceClient) Hooks() []Hook {
	return c.hooks.Race
}

// Interceptors returns the client interceptors.
func (c *RaceClient) Interceptors() []Interceptor {
	return c.inters.Race
}

func (c *RaceClient) mutate(ctx context.Context, m *RaceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RaceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RaceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RaceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Race mutation op: %q", m.Op())
	}
}

// RuleClient is a client for the Rule schema.
type RuleClient struct {
	config
}

// NewRuleClient returns a client for the Rule from the given config.
func NewRuleClient(c config) *RuleClient {
	return &RuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rule.Hooks(f(g(h())))`.
func (c *RuleClient) Use(hooks ...Hook) {
	c.hooks.Rule = append(c.hooks.Rule, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rule.Intercept(f(g(h())))`.
func (c *RuleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rule = append(c.inters.Rule, interceptors...)
}

// Create returns a builder for creating a Rule entity.
func (c *RuleClient) Create() *RuleCreate {
	mutation := newRuleMutation(c.config, OpCreate)
	return &RuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rule entities.
func (c *RuleClient) CreateBulk(builders ...*RuleCreate) *RuleCreateBulk {
	return &RuleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RuleClient) MapCreateBulk(slice any, setFunc func(*RuleCreate, int)) *RuleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RuleCreateBulk{err: fmt.Errorf("calling to RuleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RuleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rule.
func (c *RuleClient) Update() *RuleUpdate {
	mutation := newRuleMutation(c.config, OpUpdate)
	return &RuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RuleClient) UpdateOne(r *Rule) *RuleUpdateOne {
	mutation := newRuleMutation(c.config, OpUpdateOne, withRule(r))
	return &RuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RuleClient) UpdateOneID(id int) *RuleUpdateOne {
	mutation := newRuleMutation(c.config, OpUpdateOne, withRuleID(id))
	return &RuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rule.
func (c *RuleClient) Delete() *RuleDelete {
	mutation := newRuleMutation(c.config, OpDelete)
	return &RuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RuleClient) DeleteOne(r *Rule) *RuleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RuleClient) DeleteOneID(id int) *RuleDeleteOne {
	builder := c.Delete().Where(rule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RuleDeleteOne{builder}
}

// Query returns a query builder for Rule.
func (c *RuleClient) Query() *RuleQuery {
	return &RuleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRule},
		inters: c.Interceptors(),
	}
}

// Get returns a Rule entity by its id.
func (c *RuleClient) Get(ctx context.Context, id int) (*Rule, error) {
	return c.Query().Where(rule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RuleClient) GetX(ctx context.Context, id int) *Rule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySections queries the sections edge of a Rule.
func (c *RuleClient) QuerySections(r *Rule) *RuleSectionQuery {
	query := (&RuleSectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rule.Table, rule.FieldID, id),
			sqlgraph.To(rulesection.Table, rulesection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rule.SectionsTable, rule.SectionsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RuleClient) Hooks() []Hook {
	return c.hooks.Rule
}

// Interceptors returns the client interceptors.
func (c *RuleClient) Interceptors() []Interceptor {
	return c.inters.Rule
}

func (c *RuleClient) mutate(ctx context.Context, m *RuleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RuleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RuleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RuleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rule mutation op: %q", m.Op())
	}
}

// RuleSectionClient is a client for the RuleSection schema.
type RuleSectionClient struct {
	config
}

// NewRuleSectionClient returns a client for the RuleSection from the given config.
func NewRuleSectionClient(c config) *RuleSectionClient {
	return &RuleSectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rulesection.Hooks(f(g(h())))`.
func (c *RuleSectionClient) Use(hooks ...Hook) {
	c.hooks.RuleSection = append(c.hooks.RuleSection, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rulesection.Intercept(f(g(h())))`.
func (c *RuleSectionClient) Intercept(interceptors ...Interceptor) {
	c.inters.RuleSection = append(c.inters.RuleSection, interceptors...)
}

// Create returns a builder for creating a RuleSection entity.
func (c *RuleSectionClient) Create() *RuleSectionCreate {
	mutation := newRuleSectionMutation(c.config, OpCreate)
	return &RuleSectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RuleSection entities.
func (c *RuleSectionClient) CreateBulk(builders ...*RuleSectionCreate) *RuleSectionCreateBulk {
	return &RuleSectionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RuleSectionClient) MapCreateBulk(slice any, setFunc func(*RuleSectionCreate, int)) *RuleSectionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RuleSectionCreateBulk{err: fmt.Errorf("calling to RuleSectionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RuleSectionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RuleSectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RuleSection.
func (c *RuleSectionClient) Update() *RuleSectionUpdate {
	mutation := newRuleSectionMutation(c.config, OpUpdate)
	return &RuleSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RuleSectionClient) UpdateOne(rs *RuleSection) *RuleSectionUpdateOne {
	mutation := newRuleSectionMutation(c.config, OpUpdateOne, withRuleSection(rs))
	return &RuleSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RuleSectionClient) UpdateOneID(id int) *RuleSectionUpdateOne {
	mutation := newRuleSectionMutation(c.config, OpUpdateOne, withRuleSectionID(id))
	return &RuleSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RuleSection.
func (c *RuleSectionClient) Delete() *RuleSectionDelete {
	mutation := newRuleSectionMutation(c.config, OpDelete)
	return &RuleSectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RuleSectionClient) DeleteOne(rs *RuleSection) *RuleSectionDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RuleSectionClient) DeleteOneID(id int) *RuleSectionDeleteOne {
	builder := c.Delete().Where(rulesection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RuleSectionDeleteOne{builder}
}

// Query returns a query builder for RuleSection.
func (c *RuleSectionClient) Query() *RuleSectionQuery {
	return &RuleSectionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRuleSection},
		inters: c.Interceptors(),
	}
}

// Get returns a RuleSection entity by its id.
func (c *RuleSectionClient) Get(ctx context.Context, id int) (*RuleSection, error) {
	return c.Query().Where(rulesection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RuleSectionClient) GetX(ctx context.Context, id int) *RuleSection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRule queries the rule edge of a RuleSection.
func (c *RuleSectionClient) QueryRule(rs *RuleSection) *RuleQuery {
	query := (&RuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rulesection.Table, rulesection.FieldID, id),
			sqlgraph.To(rule.Table, rule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rulesection.RuleTable, rulesection.RuleColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RuleSectionClient) Hooks() []Hook {
	return c.hooks.RuleSection
}

// Interceptors returns the client interceptors.
func (c *RuleSectionClient) Interceptors() []Interceptor {
	return c.inters.RuleSection
}

func (c *RuleSectionClient) mutate(ctx context.Context, m *RuleSectionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RuleSectionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RuleSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RuleSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RuleSectionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RuleSection mutation op: %q", m.Op())
	}
}

// SkillClient is a client for the Skill schema.
type SkillClient struct {
	config
}

// NewSkillClient returns a client for the Skill from the given config.
func NewSkillClient(c config) *SkillClient {
	return &SkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skill.Hooks(f(g(h())))`.
func (c *SkillClient) Use(hooks ...Hook) {
	c.hooks.Skill = append(c.hooks.Skill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `skill.Intercept(f(g(h())))`.
func (c *SkillClient) Intercept(interceptors ...Interceptor) {
	c.inters.Skill = append(c.inters.Skill, interceptors...)
}

// Create returns a builder for creating a Skill entity.
func (c *SkillClient) Create() *SkillCreate {
	mutation := newSkillMutation(c.config, OpCreate)
	return &SkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Skill entities.
func (c *SkillClient) CreateBulk(builders ...*SkillCreate) *SkillCreateBulk {
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SkillClient) MapCreateBulk(slice any, setFunc func(*SkillCreate, int)) *SkillCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SkillCreateBulk{err: fmt.Errorf("calling to SkillClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SkillCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Skill.
func (c *SkillClient) Update() *SkillUpdate {
	mutation := newSkillMutation(c.config, OpUpdate)
	return &SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillClient) UpdateOne(s *Skill) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkill(s))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillClient) UpdateOneID(id int) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkillID(id))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Skill.
func (c *SkillClient) Delete() *SkillDelete {
	mutation := newSkillMutation(c.config, OpDelete)
	return &SkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SkillClient) DeleteOne(s *Skill) *SkillDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SkillClient) DeleteOneID(id int) *SkillDeleteOne {
	builder := c.Delete().Where(skill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillDeleteOne{builder}
}

// Query returns a query builder for Skill.
func (c *SkillClient) Query() *SkillQuery {
	return &SkillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSkill},
		inters: c.Interceptors(),
	}
}

// Get returns a Skill entity by its id.
func (c *SkillClient) Get(ctx context.Context, id int) (*Skill, error) {
	return c.Query().Where(skill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillClient) GetX(ctx context.Context, id int) *Skill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAbilityScore queries the ability_score edge of a Skill.
func (c *SkillClient) QueryAbilityScore(s *Skill) *AbilityScoreQuery {
	query := (&AbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(abilityscore.Table, abilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, skill.AbilityScoreTable, skill.AbilityScoreColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkillClient) Hooks() []Hook {
	return c.hooks.Skill
}

// Interceptors returns the client interceptors.
func (c *SkillClient) Interceptors() []Interceptor {
	return c.inters.Skill
}

func (c *SkillClient) mutate(ctx context.Context, m *SkillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SkillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SkillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Skill mutation op: %q", m.Op())
	}
}

// WeaponClient is a client for the Weapon schema.
type WeaponClient struct {
	config
}

// NewWeaponClient returns a client for the Weapon from the given config.
func NewWeaponClient(c config) *WeaponClient {
	return &WeaponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `weapon.Hooks(f(g(h())))`.
func (c *WeaponClient) Use(hooks ...Hook) {
	c.hooks.Weapon = append(c.hooks.Weapon, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `weapon.Intercept(f(g(h())))`.
func (c *WeaponClient) Intercept(interceptors ...Interceptor) {
	c.inters.Weapon = append(c.inters.Weapon, interceptors...)
}

// Create returns a builder for creating a Weapon entity.
func (c *WeaponClient) Create() *WeaponCreate {
	mutation := newWeaponMutation(c.config, OpCreate)
	return &WeaponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Weapon entities.
func (c *WeaponClient) CreateBulk(builders ...*WeaponCreate) *WeaponCreateBulk {
	return &WeaponCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WeaponClient) MapCreateBulk(slice any, setFunc func(*WeaponCreate, int)) *WeaponCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WeaponCreateBulk{err: fmt.Errorf("calling to WeaponClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WeaponCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WeaponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Weapon.
func (c *WeaponClient) Update() *WeaponUpdate {
	mutation := newWeaponMutation(c.config, OpUpdate)
	return &WeaponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WeaponClient) UpdateOne(w *Weapon) *WeaponUpdateOne {
	mutation := newWeaponMutation(c.config, OpUpdateOne, withWeapon(w))
	return &WeaponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WeaponClient) UpdateOneID(id int) *WeaponUpdateOne {
	mutation := newWeaponMutation(c.config, OpUpdateOne, withWeaponID(id))
	return &WeaponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Weapon.
func (c *WeaponClient) Delete() *WeaponDelete {
	mutation := newWeaponMutation(c.config, OpDelete)
	return &WeaponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WeaponClient) DeleteOne(w *Weapon) *WeaponDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WeaponClient) DeleteOneID(id int) *WeaponDeleteOne {
	builder := c.Delete().Where(weapon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WeaponDeleteOne{builder}
}

// Query returns a query builder for Weapon.
func (c *WeaponClient) Query() *WeaponQuery {
	return &WeaponQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWeapon},
		inters: c.Interceptors(),
	}
}

// Get returns a Weapon entity by its id.
func (c *WeaponClient) Get(ctx context.Context, id int) (*Weapon, error) {
	return c.Query().Where(weapon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WeaponClient) GetX(ctx context.Context, id int) *Weapon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDamage queries the damage edge of a Weapon.
func (c *WeaponClient) QueryDamage(w *Weapon) *DamageQuery {
	query := (&DamageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(weapon.Table, weapon.FieldID, id),
			sqlgraph.To(damage.Table, damage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, weapon.DamageTable, weapon.DamageColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProperties queries the properties edge of a Weapon.
func (c *WeaponClient) QueryProperties(w *Weapon) *PropertyQuery {
	query := (&PropertyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(weapon.Table, weapon.FieldID, id),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, weapon.PropertiesTable, weapon.PropertiesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a Weapon.
func (c *WeaponClient) QueryEquipment(w *Weapon) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(weapon.Table, weapon.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, weapon.EquipmentTable, weapon.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWeaponRange queries the weapon_range edge of a Weapon.
func (c *WeaponClient) QueryWeaponRange(w *Weapon) *WeaponRangeQuery {
	query := (&WeaponRangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(weapon.Table, weapon.FieldID, id),
			sqlgraph.To(weaponrange.Table, weaponrange.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, weapon.WeaponRangeTable, weapon.WeaponRangeColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WeaponClient) Hooks() []Hook {
	return c.hooks.Weapon
}

// Interceptors returns the client interceptors.
func (c *WeaponClient) Interceptors() []Interceptor {
	return c.inters.Weapon
}

func (c *WeaponClient) mutate(ctx context.Context, m *WeaponMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WeaponCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WeaponUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WeaponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WeaponDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Weapon mutation op: %q", m.Op())
	}
}

// WeaponRangeClient is a client for the WeaponRange schema.
type WeaponRangeClient struct {
	config
}

// NewWeaponRangeClient returns a client for the WeaponRange from the given config.
func NewWeaponRangeClient(c config) *WeaponRangeClient {
	return &WeaponRangeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `weaponrange.Hooks(f(g(h())))`.
func (c *WeaponRangeClient) Use(hooks ...Hook) {
	c.hooks.WeaponRange = append(c.hooks.WeaponRange, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `weaponrange.Intercept(f(g(h())))`.
func (c *WeaponRangeClient) Intercept(interceptors ...Interceptor) {
	c.inters.WeaponRange = append(c.inters.WeaponRange, interceptors...)
}

// Create returns a builder for creating a WeaponRange entity.
func (c *WeaponRangeClient) Create() *WeaponRangeCreate {
	mutation := newWeaponRangeMutation(c.config, OpCreate)
	return &WeaponRangeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WeaponRange entities.
func (c *WeaponRangeClient) CreateBulk(builders ...*WeaponRangeCreate) *WeaponRangeCreateBulk {
	return &WeaponRangeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WeaponRangeClient) MapCreateBulk(slice any, setFunc func(*WeaponRangeCreate, int)) *WeaponRangeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WeaponRangeCreateBulk{err: fmt.Errorf("calling to WeaponRangeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WeaponRangeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WeaponRangeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WeaponRange.
func (c *WeaponRangeClient) Update() *WeaponRangeUpdate {
	mutation := newWeaponRangeMutation(c.config, OpUpdate)
	return &WeaponRangeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WeaponRangeClient) UpdateOne(wr *WeaponRange) *WeaponRangeUpdateOne {
	mutation := newWeaponRangeMutation(c.config, OpUpdateOne, withWeaponRange(wr))
	return &WeaponRangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WeaponRangeClient) UpdateOneID(id int) *WeaponRangeUpdateOne {
	mutation := newWeaponRangeMutation(c.config, OpUpdateOne, withWeaponRangeID(id))
	return &WeaponRangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WeaponRange.
func (c *WeaponRangeClient) Delete() *WeaponRangeDelete {
	mutation := newWeaponRangeMutation(c.config, OpDelete)
	return &WeaponRangeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WeaponRangeClient) DeleteOne(wr *WeaponRange) *WeaponRangeDeleteOne {
	return c.DeleteOneID(wr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WeaponRangeClient) DeleteOneID(id int) *WeaponRangeDeleteOne {
	builder := c.Delete().Where(weaponrange.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WeaponRangeDeleteOne{builder}
}

// Query returns a query builder for WeaponRange.
func (c *WeaponRangeClient) Query() *WeaponRangeQuery {
	return &WeaponRangeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWeaponRange},
		inters: c.Interceptors(),
	}
}

// Get returns a WeaponRange entity by its id.
func (c *WeaponRangeClient) Get(ctx context.Context, id int) (*WeaponRange, error) {
	return c.Query().Where(weaponrange.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WeaponRangeClient) GetX(ctx context.Context, id int) *WeaponRange {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WeaponRangeClient) Hooks() []Hook {
	return c.hooks.WeaponRange
}

// Interceptors returns the client interceptors.
func (c *WeaponRangeClient) Interceptors() []Interceptor {
	return c.inters.WeaponRange
}

func (c *WeaponRangeClient) mutate(ctx context.Context, m *WeaponRangeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WeaponRangeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WeaponRangeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WeaponRangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WeaponRangeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WeaponRange mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AbilityBonus, AbilityScore, Alignment, Coin, Condition, Damage, DamageType,
		Equipment, EquipmentCost, Feat, Language, MagicSchool, Property, Race, Rule,
		RuleSection, Skill, Weapon, WeaponRange []ent.Hook
	}
	inters struct {
		AbilityBonus, AbilityScore, Alignment, Coin, Condition, Damage, DamageType,
		Equipment, EquipmentCost, Feat, Language, MagicSchool, Property, Race, Rule,
		RuleSection, Skill, Weapon, WeaponRange []ent.Interceptor
	}
)
