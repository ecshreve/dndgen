// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/ecshreve/dndgen/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/abilitybonus"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/condition"
	"github.com/ecshreve/dndgen/ent/damagetype"
	"github.com/ecshreve/dndgen/ent/language"
	"github.com/ecshreve/dndgen/ent/magicschool"
	"github.com/ecshreve/dndgen/ent/prerequisite"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/skill"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AbilityBonus is the client for interacting with the AbilityBonus builders.
	AbilityBonus *AbilityBonusClient
	// AbilityScore is the client for interacting with the AbilityScore builders.
	AbilityScore *AbilityScoreClient
	// Class is the client for interacting with the Class builders.
	Class *ClassClient
	// Condition is the client for interacting with the Condition builders.
	Condition *ConditionClient
	// DamageType is the client for interacting with the DamageType builders.
	DamageType *DamageTypeClient
	// Language is the client for interacting with the Language builders.
	Language *LanguageClient
	// MagicSchool is the client for interacting with the MagicSchool builders.
	MagicSchool *MagicSchoolClient
	// Prerequisite is the client for interacting with the Prerequisite builders.
	Prerequisite *PrerequisiteClient
	// Proficiency is the client for interacting with the Proficiency builders.
	Proficiency *ProficiencyClient
	// Race is the client for interacting with the Race builders.
	Race *RaceClient
	// Skill is the client for interacting with the Skill builders.
	Skill *SkillClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AbilityBonus = NewAbilityBonusClient(c.config)
	c.AbilityScore = NewAbilityScoreClient(c.config)
	c.Class = NewClassClient(c.config)
	c.Condition = NewConditionClient(c.config)
	c.DamageType = NewDamageTypeClient(c.config)
	c.Language = NewLanguageClient(c.config)
	c.MagicSchool = NewMagicSchoolClient(c.config)
	c.Prerequisite = NewPrerequisiteClient(c.config)
	c.Proficiency = NewProficiencyClient(c.config)
	c.Race = NewRaceClient(c.config)
	c.Skill = NewSkillClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		AbilityBonus: NewAbilityBonusClient(cfg),
		AbilityScore: NewAbilityScoreClient(cfg),
		Class:        NewClassClient(cfg),
		Condition:    NewConditionClient(cfg),
		DamageType:   NewDamageTypeClient(cfg),
		Language:     NewLanguageClient(cfg),
		MagicSchool:  NewMagicSchoolClient(cfg),
		Prerequisite: NewPrerequisiteClient(cfg),
		Proficiency:  NewProficiencyClient(cfg),
		Race:         NewRaceClient(cfg),
		Skill:        NewSkillClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		AbilityBonus: NewAbilityBonusClient(cfg),
		AbilityScore: NewAbilityScoreClient(cfg),
		Class:        NewClassClient(cfg),
		Condition:    NewConditionClient(cfg),
		DamageType:   NewDamageTypeClient(cfg),
		Language:     NewLanguageClient(cfg),
		MagicSchool:  NewMagicSchoolClient(cfg),
		Prerequisite: NewPrerequisiteClient(cfg),
		Proficiency:  NewProficiencyClient(cfg),
		Race:         NewRaceClient(cfg),
		Skill:        NewSkillClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AbilityBonus.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AbilityBonus, c.AbilityScore, c.Class, c.Condition, c.DamageType, c.Language,
		c.MagicSchool, c.Prerequisite, c.Proficiency, c.Race, c.Skill,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AbilityBonus, c.AbilityScore, c.Class, c.Condition, c.DamageType, c.Language,
		c.MagicSchool, c.Prerequisite, c.Proficiency, c.Race, c.Skill,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AbilityBonusMutation:
		return c.AbilityBonus.mutate(ctx, m)
	case *AbilityScoreMutation:
		return c.AbilityScore.mutate(ctx, m)
	case *ClassMutation:
		return c.Class.mutate(ctx, m)
	case *ConditionMutation:
		return c.Condition.mutate(ctx, m)
	case *DamageTypeMutation:
		return c.DamageType.mutate(ctx, m)
	case *LanguageMutation:
		return c.Language.mutate(ctx, m)
	case *MagicSchoolMutation:
		return c.MagicSchool.mutate(ctx, m)
	case *PrerequisiteMutation:
		return c.Prerequisite.mutate(ctx, m)
	case *ProficiencyMutation:
		return c.Proficiency.mutate(ctx, m)
	case *RaceMutation:
		return c.Race.mutate(ctx, m)
	case *SkillMutation:
		return c.Skill.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AbilityBonusClient is a client for the AbilityBonus schema.
type AbilityBonusClient struct {
	config
}

// NewAbilityBonusClient returns a client for the AbilityBonus from the given config.
func NewAbilityBonusClient(c config) *AbilityBonusClient {
	return &AbilityBonusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abilitybonus.Hooks(f(g(h())))`.
func (c *AbilityBonusClient) Use(hooks ...Hook) {
	c.hooks.AbilityBonus = append(c.hooks.AbilityBonus, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `abilitybonus.Intercept(f(g(h())))`.
func (c *AbilityBonusClient) Intercept(interceptors ...Interceptor) {
	c.inters.AbilityBonus = append(c.inters.AbilityBonus, interceptors...)
}

// Create returns a builder for creating a AbilityBonus entity.
func (c *AbilityBonusClient) Create() *AbilityBonusCreate {
	mutation := newAbilityBonusMutation(c.config, OpCreate)
	return &AbilityBonusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AbilityBonus entities.
func (c *AbilityBonusClient) CreateBulk(builders ...*AbilityBonusCreate) *AbilityBonusCreateBulk {
	return &AbilityBonusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AbilityBonus.
func (c *AbilityBonusClient) Update() *AbilityBonusUpdate {
	mutation := newAbilityBonusMutation(c.config, OpUpdate)
	return &AbilityBonusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbilityBonusClient) UpdateOne(ab *AbilityBonus) *AbilityBonusUpdateOne {
	mutation := newAbilityBonusMutation(c.config, OpUpdateOne, withAbilityBonus(ab))
	return &AbilityBonusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbilityBonusClient) UpdateOneID(id int) *AbilityBonusUpdateOne {
	mutation := newAbilityBonusMutation(c.config, OpUpdateOne, withAbilityBonusID(id))
	return &AbilityBonusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AbilityBonus.
func (c *AbilityBonusClient) Delete() *AbilityBonusDelete {
	mutation := newAbilityBonusMutation(c.config, OpDelete)
	return &AbilityBonusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AbilityBonusClient) DeleteOne(ab *AbilityBonus) *AbilityBonusDeleteOne {
	return c.DeleteOneID(ab.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AbilityBonusClient) DeleteOneID(id int) *AbilityBonusDeleteOne {
	builder := c.Delete().Where(abilitybonus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbilityBonusDeleteOne{builder}
}

// Query returns a query builder for AbilityBonus.
func (c *AbilityBonusClient) Query() *AbilityBonusQuery {
	return &AbilityBonusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAbilityBonus},
		inters: c.Interceptors(),
	}
}

// Get returns a AbilityBonus entity by its id.
func (c *AbilityBonusClient) Get(ctx context.Context, id int) (*AbilityBonus, error) {
	return c.Query().Where(abilitybonus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbilityBonusClient) GetX(ctx context.Context, id int) *AbilityBonus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAbilityScore queries the ability_score edge of a AbilityBonus.
func (c *AbilityBonusClient) QueryAbilityScore(ab *AbilityBonus) *AbilityScoreQuery {
	query := (&AbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ab.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilitybonus.Table, abilitybonus.FieldID, id),
			sqlgraph.To(abilityscore.Table, abilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, abilitybonus.AbilityScoreTable, abilitybonus.AbilityScoreColumn),
		)
		fromV = sqlgraph.Neighbors(ab.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRace queries the race edge of a AbilityBonus.
func (c *AbilityBonusClient) QueryRace(ab *AbilityBonus) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ab.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilitybonus.Table, abilitybonus.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, abilitybonus.RaceTable, abilitybonus.RacePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ab.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AbilityBonusClient) Hooks() []Hook {
	return c.hooks.AbilityBonus
}

// Interceptors returns the client interceptors.
func (c *AbilityBonusClient) Interceptors() []Interceptor {
	return c.inters.AbilityBonus
}

func (c *AbilityBonusClient) mutate(ctx context.Context, m *AbilityBonusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AbilityBonusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AbilityBonusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AbilityBonusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AbilityBonusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AbilityBonus mutation op: %q", m.Op())
	}
}

// AbilityScoreClient is a client for the AbilityScore schema.
type AbilityScoreClient struct {
	config
}

// NewAbilityScoreClient returns a client for the AbilityScore from the given config.
func NewAbilityScoreClient(c config) *AbilityScoreClient {
	return &AbilityScoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abilityscore.Hooks(f(g(h())))`.
func (c *AbilityScoreClient) Use(hooks ...Hook) {
	c.hooks.AbilityScore = append(c.hooks.AbilityScore, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `abilityscore.Intercept(f(g(h())))`.
func (c *AbilityScoreClient) Intercept(interceptors ...Interceptor) {
	c.inters.AbilityScore = append(c.inters.AbilityScore, interceptors...)
}

// Create returns a builder for creating a AbilityScore entity.
func (c *AbilityScoreClient) Create() *AbilityScoreCreate {
	mutation := newAbilityScoreMutation(c.config, OpCreate)
	return &AbilityScoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AbilityScore entities.
func (c *AbilityScoreClient) CreateBulk(builders ...*AbilityScoreCreate) *AbilityScoreCreateBulk {
	return &AbilityScoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AbilityScore.
func (c *AbilityScoreClient) Update() *AbilityScoreUpdate {
	mutation := newAbilityScoreMutation(c.config, OpUpdate)
	return &AbilityScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbilityScoreClient) UpdateOne(as *AbilityScore) *AbilityScoreUpdateOne {
	mutation := newAbilityScoreMutation(c.config, OpUpdateOne, withAbilityScore(as))
	return &AbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbilityScoreClient) UpdateOneID(id int) *AbilityScoreUpdateOne {
	mutation := newAbilityScoreMutation(c.config, OpUpdateOne, withAbilityScoreID(id))
	return &AbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AbilityScore.
func (c *AbilityScoreClient) Delete() *AbilityScoreDelete {
	mutation := newAbilityScoreMutation(c.config, OpDelete)
	return &AbilityScoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AbilityScoreClient) DeleteOne(as *AbilityScore) *AbilityScoreDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AbilityScoreClient) DeleteOneID(id int) *AbilityScoreDeleteOne {
	builder := c.Delete().Where(abilityscore.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbilityScoreDeleteOne{builder}
}

// Query returns a query builder for AbilityScore.
func (c *AbilityScoreClient) Query() *AbilityScoreQuery {
	return &AbilityScoreQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAbilityScore},
		inters: c.Interceptors(),
	}
}

// Get returns a AbilityScore entity by its id.
func (c *AbilityScoreClient) Get(ctx context.Context, id int) (*AbilityScore, error) {
	return c.Query().Where(abilityscore.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbilityScoreClient) GetX(ctx context.Context, id int) *AbilityScore {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySkills queries the skills edge of a AbilityScore.
func (c *AbilityScoreClient) QuerySkills(as *AbilityScore) *SkillQuery {
	query := (&SkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilityscore.Table, abilityscore.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, abilityscore.SkillsTable, abilityscore.SkillsColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AbilityScoreClient) Hooks() []Hook {
	return c.hooks.AbilityScore
}

// Interceptors returns the client interceptors.
func (c *AbilityScoreClient) Interceptors() []Interceptor {
	return c.inters.AbilityScore
}

func (c *AbilityScoreClient) mutate(ctx context.Context, m *AbilityScoreMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AbilityScoreCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AbilityScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AbilityScoreDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AbilityScore mutation op: %q", m.Op())
	}
}

// ClassClient is a client for the Class schema.
type ClassClient struct {
	config
}

// NewClassClient returns a client for the Class from the given config.
func NewClassClient(c config) *ClassClient {
	return &ClassClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `class.Hooks(f(g(h())))`.
func (c *ClassClient) Use(hooks ...Hook) {
	c.hooks.Class = append(c.hooks.Class, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `class.Intercept(f(g(h())))`.
func (c *ClassClient) Intercept(interceptors ...Interceptor) {
	c.inters.Class = append(c.inters.Class, interceptors...)
}

// Create returns a builder for creating a Class entity.
func (c *ClassClient) Create() *ClassCreate {
	mutation := newClassMutation(c.config, OpCreate)
	return &ClassCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Class entities.
func (c *ClassClient) CreateBulk(builders ...*ClassCreate) *ClassCreateBulk {
	return &ClassCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Class.
func (c *ClassClient) Update() *ClassUpdate {
	mutation := newClassMutation(c.config, OpUpdate)
	return &ClassUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClassClient) UpdateOne(cl *Class) *ClassUpdateOne {
	mutation := newClassMutation(c.config, OpUpdateOne, withClass(cl))
	return &ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClassClient) UpdateOneID(id int) *ClassUpdateOne {
	mutation := newClassMutation(c.config, OpUpdateOne, withClassID(id))
	return &ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Class.
func (c *ClassClient) Delete() *ClassDelete {
	mutation := newClassMutation(c.config, OpDelete)
	return &ClassDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClassClient) DeleteOne(cl *Class) *ClassDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClassClient) DeleteOneID(id int) *ClassDeleteOne {
	builder := c.Delete().Where(class.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClassDeleteOne{builder}
}

// Query returns a query builder for Class.
func (c *ClassClient) Query() *ClassQuery {
	return &ClassQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClass},
		inters: c.Interceptors(),
	}
}

// Get returns a Class entity by its id.
func (c *ClassClient) Get(ctx context.Context, id int) (*Class, error) {
	return c.Query().Where(class.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClassClient) GetX(ctx context.Context, id int) *Class {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStartingProficiencies queries the starting_proficiencies edge of a Class.
func (c *ClassClient) QueryStartingProficiencies(cl *Class) *ProficiencyQuery {
	query := (&ProficiencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(proficiency.Table, proficiency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, class.StartingProficienciesTable, class.StartingProficienciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClassClient) Hooks() []Hook {
	return c.hooks.Class
}

// Interceptors returns the client interceptors.
func (c *ClassClient) Interceptors() []Interceptor {
	return c.inters.Class
}

func (c *ClassClient) mutate(ctx context.Context, m *ClassMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClassCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClassUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClassDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Class mutation op: %q", m.Op())
	}
}

// ConditionClient is a client for the Condition schema.
type ConditionClient struct {
	config
}

// NewConditionClient returns a client for the Condition from the given config.
func NewConditionClient(c config) *ConditionClient {
	return &ConditionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `condition.Hooks(f(g(h())))`.
func (c *ConditionClient) Use(hooks ...Hook) {
	c.hooks.Condition = append(c.hooks.Condition, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `condition.Intercept(f(g(h())))`.
func (c *ConditionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Condition = append(c.inters.Condition, interceptors...)
}

// Create returns a builder for creating a Condition entity.
func (c *ConditionClient) Create() *ConditionCreate {
	mutation := newConditionMutation(c.config, OpCreate)
	return &ConditionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Condition entities.
func (c *ConditionClient) CreateBulk(builders ...*ConditionCreate) *ConditionCreateBulk {
	return &ConditionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Condition.
func (c *ConditionClient) Update() *ConditionUpdate {
	mutation := newConditionMutation(c.config, OpUpdate)
	return &ConditionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConditionClient) UpdateOne(co *Condition) *ConditionUpdateOne {
	mutation := newConditionMutation(c.config, OpUpdateOne, withCondition(co))
	return &ConditionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConditionClient) UpdateOneID(id int) *ConditionUpdateOne {
	mutation := newConditionMutation(c.config, OpUpdateOne, withConditionID(id))
	return &ConditionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Condition.
func (c *ConditionClient) Delete() *ConditionDelete {
	mutation := newConditionMutation(c.config, OpDelete)
	return &ConditionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConditionClient) DeleteOne(co *Condition) *ConditionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConditionClient) DeleteOneID(id int) *ConditionDeleteOne {
	builder := c.Delete().Where(condition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConditionDeleteOne{builder}
}

// Query returns a query builder for Condition.
func (c *ConditionClient) Query() *ConditionQuery {
	return &ConditionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCondition},
		inters: c.Interceptors(),
	}
}

// Get returns a Condition entity by its id.
func (c *ConditionClient) Get(ctx context.Context, id int) (*Condition, error) {
	return c.Query().Where(condition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConditionClient) GetX(ctx context.Context, id int) *Condition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConditionClient) Hooks() []Hook {
	return c.hooks.Condition
}

// Interceptors returns the client interceptors.
func (c *ConditionClient) Interceptors() []Interceptor {
	return c.inters.Condition
}

func (c *ConditionClient) mutate(ctx context.Context, m *ConditionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConditionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConditionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConditionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConditionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Condition mutation op: %q", m.Op())
	}
}

// DamageTypeClient is a client for the DamageType schema.
type DamageTypeClient struct {
	config
}

// NewDamageTypeClient returns a client for the DamageType from the given config.
func NewDamageTypeClient(c config) *DamageTypeClient {
	return &DamageTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `damagetype.Hooks(f(g(h())))`.
func (c *DamageTypeClient) Use(hooks ...Hook) {
	c.hooks.DamageType = append(c.hooks.DamageType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `damagetype.Intercept(f(g(h())))`.
func (c *DamageTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.DamageType = append(c.inters.DamageType, interceptors...)
}

// Create returns a builder for creating a DamageType entity.
func (c *DamageTypeClient) Create() *DamageTypeCreate {
	mutation := newDamageTypeMutation(c.config, OpCreate)
	return &DamageTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DamageType entities.
func (c *DamageTypeClient) CreateBulk(builders ...*DamageTypeCreate) *DamageTypeCreateBulk {
	return &DamageTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DamageType.
func (c *DamageTypeClient) Update() *DamageTypeUpdate {
	mutation := newDamageTypeMutation(c.config, OpUpdate)
	return &DamageTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DamageTypeClient) UpdateOne(dt *DamageType) *DamageTypeUpdateOne {
	mutation := newDamageTypeMutation(c.config, OpUpdateOne, withDamageType(dt))
	return &DamageTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DamageTypeClient) UpdateOneID(id int) *DamageTypeUpdateOne {
	mutation := newDamageTypeMutation(c.config, OpUpdateOne, withDamageTypeID(id))
	return &DamageTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DamageType.
func (c *DamageTypeClient) Delete() *DamageTypeDelete {
	mutation := newDamageTypeMutation(c.config, OpDelete)
	return &DamageTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DamageTypeClient) DeleteOne(dt *DamageType) *DamageTypeDeleteOne {
	return c.DeleteOneID(dt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DamageTypeClient) DeleteOneID(id int) *DamageTypeDeleteOne {
	builder := c.Delete().Where(damagetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DamageTypeDeleteOne{builder}
}

// Query returns a query builder for DamageType.
func (c *DamageTypeClient) Query() *DamageTypeQuery {
	return &DamageTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDamageType},
		inters: c.Interceptors(),
	}
}

// Get returns a DamageType entity by its id.
func (c *DamageTypeClient) Get(ctx context.Context, id int) (*DamageType, error) {
	return c.Query().Where(damagetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DamageTypeClient) GetX(ctx context.Context, id int) *DamageType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DamageTypeClient) Hooks() []Hook {
	return c.hooks.DamageType
}

// Interceptors returns the client interceptors.
func (c *DamageTypeClient) Interceptors() []Interceptor {
	return c.inters.DamageType
}

func (c *DamageTypeClient) mutate(ctx context.Context, m *DamageTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DamageTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DamageTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DamageTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DamageTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DamageType mutation op: %q", m.Op())
	}
}

// LanguageClient is a client for the Language schema.
type LanguageClient struct {
	config
}

// NewLanguageClient returns a client for the Language from the given config.
func NewLanguageClient(c config) *LanguageClient {
	return &LanguageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `language.Hooks(f(g(h())))`.
func (c *LanguageClient) Use(hooks ...Hook) {
	c.hooks.Language = append(c.hooks.Language, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `language.Intercept(f(g(h())))`.
func (c *LanguageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Language = append(c.inters.Language, interceptors...)
}

// Create returns a builder for creating a Language entity.
func (c *LanguageClient) Create() *LanguageCreate {
	mutation := newLanguageMutation(c.config, OpCreate)
	return &LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Language entities.
func (c *LanguageClient) CreateBulk(builders ...*LanguageCreate) *LanguageCreateBulk {
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Language.
func (c *LanguageClient) Update() *LanguageUpdate {
	mutation := newLanguageMutation(c.config, OpUpdate)
	return &LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LanguageClient) UpdateOne(l *Language) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguage(l))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LanguageClient) UpdateOneID(id int) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguageID(id))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Language.
func (c *LanguageClient) Delete() *LanguageDelete {
	mutation := newLanguageMutation(c.config, OpDelete)
	return &LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LanguageClient) DeleteOne(l *Language) *LanguageDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LanguageClient) DeleteOneID(id int) *LanguageDeleteOne {
	builder := c.Delete().Where(language.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LanguageDeleteOne{builder}
}

// Query returns a query builder for Language.
func (c *LanguageClient) Query() *LanguageQuery {
	return &LanguageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLanguage},
		inters: c.Interceptors(),
	}
}

// Get returns a Language entity by its id.
func (c *LanguageClient) Get(ctx context.Context, id int) (*Language, error) {
	return c.Query().Where(language.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LanguageClient) GetX(ctx context.Context, id int) *Language {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpeakers queries the speakers edge of a Language.
func (c *LanguageClient) QuerySpeakers(l *Language) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, language.SpeakersTable, language.SpeakersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LanguageClient) Hooks() []Hook {
	return c.hooks.Language
}

// Interceptors returns the client interceptors.
func (c *LanguageClient) Interceptors() []Interceptor {
	return c.inters.Language
}

func (c *LanguageClient) mutate(ctx context.Context, m *LanguageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Language mutation op: %q", m.Op())
	}
}

// MagicSchoolClient is a client for the MagicSchool schema.
type MagicSchoolClient struct {
	config
}

// NewMagicSchoolClient returns a client for the MagicSchool from the given config.
func NewMagicSchoolClient(c config) *MagicSchoolClient {
	return &MagicSchoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `magicschool.Hooks(f(g(h())))`.
func (c *MagicSchoolClient) Use(hooks ...Hook) {
	c.hooks.MagicSchool = append(c.hooks.MagicSchool, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `magicschool.Intercept(f(g(h())))`.
func (c *MagicSchoolClient) Intercept(interceptors ...Interceptor) {
	c.inters.MagicSchool = append(c.inters.MagicSchool, interceptors...)
}

// Create returns a builder for creating a MagicSchool entity.
func (c *MagicSchoolClient) Create() *MagicSchoolCreate {
	mutation := newMagicSchoolMutation(c.config, OpCreate)
	return &MagicSchoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MagicSchool entities.
func (c *MagicSchoolClient) CreateBulk(builders ...*MagicSchoolCreate) *MagicSchoolCreateBulk {
	return &MagicSchoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MagicSchool.
func (c *MagicSchoolClient) Update() *MagicSchoolUpdate {
	mutation := newMagicSchoolMutation(c.config, OpUpdate)
	return &MagicSchoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MagicSchoolClient) UpdateOne(ms *MagicSchool) *MagicSchoolUpdateOne {
	mutation := newMagicSchoolMutation(c.config, OpUpdateOne, withMagicSchool(ms))
	return &MagicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MagicSchoolClient) UpdateOneID(id int) *MagicSchoolUpdateOne {
	mutation := newMagicSchoolMutation(c.config, OpUpdateOne, withMagicSchoolID(id))
	return &MagicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MagicSchool.
func (c *MagicSchoolClient) Delete() *MagicSchoolDelete {
	mutation := newMagicSchoolMutation(c.config, OpDelete)
	return &MagicSchoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MagicSchoolClient) DeleteOne(ms *MagicSchool) *MagicSchoolDeleteOne {
	return c.DeleteOneID(ms.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MagicSchoolClient) DeleteOneID(id int) *MagicSchoolDeleteOne {
	builder := c.Delete().Where(magicschool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MagicSchoolDeleteOne{builder}
}

// Query returns a query builder for MagicSchool.
func (c *MagicSchoolClient) Query() *MagicSchoolQuery {
	return &MagicSchoolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMagicSchool},
		inters: c.Interceptors(),
	}
}

// Get returns a MagicSchool entity by its id.
func (c *MagicSchoolClient) Get(ctx context.Context, id int) (*MagicSchool, error) {
	return c.Query().Where(magicschool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MagicSchoolClient) GetX(ctx context.Context, id int) *MagicSchool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MagicSchoolClient) Hooks() []Hook {
	return c.hooks.MagicSchool
}

// Interceptors returns the client interceptors.
func (c *MagicSchoolClient) Interceptors() []Interceptor {
	return c.inters.MagicSchool
}

func (c *MagicSchoolClient) mutate(ctx context.Context, m *MagicSchoolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MagicSchoolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MagicSchoolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MagicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MagicSchoolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MagicSchool mutation op: %q", m.Op())
	}
}

// PrerequisiteClient is a client for the Prerequisite schema.
type PrerequisiteClient struct {
	config
}

// NewPrerequisiteClient returns a client for the Prerequisite from the given config.
func NewPrerequisiteClient(c config) *PrerequisiteClient {
	return &PrerequisiteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prerequisite.Hooks(f(g(h())))`.
func (c *PrerequisiteClient) Use(hooks ...Hook) {
	c.hooks.Prerequisite = append(c.hooks.Prerequisite, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `prerequisite.Intercept(f(g(h())))`.
func (c *PrerequisiteClient) Intercept(interceptors ...Interceptor) {
	c.inters.Prerequisite = append(c.inters.Prerequisite, interceptors...)
}

// Create returns a builder for creating a Prerequisite entity.
func (c *PrerequisiteClient) Create() *PrerequisiteCreate {
	mutation := newPrerequisiteMutation(c.config, OpCreate)
	return &PrerequisiteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Prerequisite entities.
func (c *PrerequisiteClient) CreateBulk(builders ...*PrerequisiteCreate) *PrerequisiteCreateBulk {
	return &PrerequisiteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Prerequisite.
func (c *PrerequisiteClient) Update() *PrerequisiteUpdate {
	mutation := newPrerequisiteMutation(c.config, OpUpdate)
	return &PrerequisiteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrerequisiteClient) UpdateOne(pr *Prerequisite) *PrerequisiteUpdateOne {
	mutation := newPrerequisiteMutation(c.config, OpUpdateOne, withPrerequisite(pr))
	return &PrerequisiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrerequisiteClient) UpdateOneID(id int) *PrerequisiteUpdateOne {
	mutation := newPrerequisiteMutation(c.config, OpUpdateOne, withPrerequisiteID(id))
	return &PrerequisiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Prerequisite.
func (c *PrerequisiteClient) Delete() *PrerequisiteDelete {
	mutation := newPrerequisiteMutation(c.config, OpDelete)
	return &PrerequisiteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PrerequisiteClient) DeleteOne(pr *Prerequisite) *PrerequisiteDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PrerequisiteClient) DeleteOneID(id int) *PrerequisiteDeleteOne {
	builder := c.Delete().Where(prerequisite.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrerequisiteDeleteOne{builder}
}

// Query returns a query builder for Prerequisite.
func (c *PrerequisiteClient) Query() *PrerequisiteQuery {
	return &PrerequisiteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrerequisite},
		inters: c.Interceptors(),
	}
}

// Get returns a Prerequisite entity by its id.
func (c *PrerequisiteClient) Get(ctx context.Context, id int) (*Prerequisite, error) {
	return c.Query().Where(prerequisite.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrerequisiteClient) GetX(ctx context.Context, id int) *Prerequisite {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAbilityScore queries the ability_score edge of a Prerequisite.
func (c *PrerequisiteClient) QueryAbilityScore(pr *Prerequisite) *AbilityScoreQuery {
	query := (&AbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prerequisite.Table, prerequisite.FieldID, id),
			sqlgraph.To(abilityscore.Table, abilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, prerequisite.AbilityScoreTable, prerequisite.AbilityScoreColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrerequisiteClient) Hooks() []Hook {
	return c.hooks.Prerequisite
}

// Interceptors returns the client interceptors.
func (c *PrerequisiteClient) Interceptors() []Interceptor {
	return c.inters.Prerequisite
}

func (c *PrerequisiteClient) mutate(ctx context.Context, m *PrerequisiteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PrerequisiteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PrerequisiteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PrerequisiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PrerequisiteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Prerequisite mutation op: %q", m.Op())
	}
}

// ProficiencyClient is a client for the Proficiency schema.
type ProficiencyClient struct {
	config
}

// NewProficiencyClient returns a client for the Proficiency from the given config.
func NewProficiencyClient(c config) *ProficiencyClient {
	return &ProficiencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `proficiency.Hooks(f(g(h())))`.
func (c *ProficiencyClient) Use(hooks ...Hook) {
	c.hooks.Proficiency = append(c.hooks.Proficiency, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `proficiency.Intercept(f(g(h())))`.
func (c *ProficiencyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Proficiency = append(c.inters.Proficiency, interceptors...)
}

// Create returns a builder for creating a Proficiency entity.
func (c *ProficiencyClient) Create() *ProficiencyCreate {
	mutation := newProficiencyMutation(c.config, OpCreate)
	return &ProficiencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Proficiency entities.
func (c *ProficiencyClient) CreateBulk(builders ...*ProficiencyCreate) *ProficiencyCreateBulk {
	return &ProficiencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Proficiency.
func (c *ProficiencyClient) Update() *ProficiencyUpdate {
	mutation := newProficiencyMutation(c.config, OpUpdate)
	return &ProficiencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProficiencyClient) UpdateOne(pr *Proficiency) *ProficiencyUpdateOne {
	mutation := newProficiencyMutation(c.config, OpUpdateOne, withProficiency(pr))
	return &ProficiencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProficiencyClient) UpdateOneID(id int) *ProficiencyUpdateOne {
	mutation := newProficiencyMutation(c.config, OpUpdateOne, withProficiencyID(id))
	return &ProficiencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Proficiency.
func (c *ProficiencyClient) Delete() *ProficiencyDelete {
	mutation := newProficiencyMutation(c.config, OpDelete)
	return &ProficiencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProficiencyClient) DeleteOne(pr *Proficiency) *ProficiencyDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProficiencyClient) DeleteOneID(id int) *ProficiencyDeleteOne {
	builder := c.Delete().Where(proficiency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProficiencyDeleteOne{builder}
}

// Query returns a query builder for Proficiency.
func (c *ProficiencyClient) Query() *ProficiencyQuery {
	return &ProficiencyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProficiency},
		inters: c.Interceptors(),
	}
}

// Get returns a Proficiency entity by its id.
func (c *ProficiencyClient) Get(ctx context.Context, id int) (*Proficiency, error) {
	return c.Query().Where(proficiency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProficiencyClient) GetX(ctx context.Context, id int) *Proficiency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRaces queries the races edge of a Proficiency.
func (c *ProficiencyClient) QueryRaces(pr *Proficiency) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiency.Table, proficiency.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, proficiency.RacesTable, proficiency.RacesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClasses queries the classes edge of a Proficiency.
func (c *ProficiencyClient) QueryClasses(pr *Proficiency) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiency.Table, proficiency.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, proficiency.ClassesTable, proficiency.ClassesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProficiencyClient) Hooks() []Hook {
	return c.hooks.Proficiency
}

// Interceptors returns the client interceptors.
func (c *ProficiencyClient) Interceptors() []Interceptor {
	return c.inters.Proficiency
}

func (c *ProficiencyClient) mutate(ctx context.Context, m *ProficiencyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProficiencyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProficiencyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProficiencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProficiencyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Proficiency mutation op: %q", m.Op())
	}
}

// RaceClient is a client for the Race schema.
type RaceClient struct {
	config
}

// NewRaceClient returns a client for the Race from the given config.
func NewRaceClient(c config) *RaceClient {
	return &RaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `race.Hooks(f(g(h())))`.
func (c *RaceClient) Use(hooks ...Hook) {
	c.hooks.Race = append(c.hooks.Race, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `race.Intercept(f(g(h())))`.
func (c *RaceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Race = append(c.inters.Race, interceptors...)
}

// Create returns a builder for creating a Race entity.
func (c *RaceClient) Create() *RaceCreate {
	mutation := newRaceMutation(c.config, OpCreate)
	return &RaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Race entities.
func (c *RaceClient) CreateBulk(builders ...*RaceCreate) *RaceCreateBulk {
	return &RaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Race.
func (c *RaceClient) Update() *RaceUpdate {
	mutation := newRaceMutation(c.config, OpUpdate)
	return &RaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RaceClient) UpdateOne(r *Race) *RaceUpdateOne {
	mutation := newRaceMutation(c.config, OpUpdateOne, withRace(r))
	return &RaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RaceClient) UpdateOneID(id int) *RaceUpdateOne {
	mutation := newRaceMutation(c.config, OpUpdateOne, withRaceID(id))
	return &RaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Race.
func (c *RaceClient) Delete() *RaceDelete {
	mutation := newRaceMutation(c.config, OpDelete)
	return &RaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RaceClient) DeleteOne(r *Race) *RaceDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RaceClient) DeleteOneID(id int) *RaceDeleteOne {
	builder := c.Delete().Where(race.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RaceDeleteOne{builder}
}

// Query returns a query builder for Race.
func (c *RaceClient) Query() *RaceQuery {
	return &RaceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRace},
		inters: c.Interceptors(),
	}
}

// Get returns a Race entity by its id.
func (c *RaceClient) Get(ctx context.Context, id int) (*Race, error) {
	return c.Query().Where(race.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RaceClient) GetX(ctx context.Context, id int) *Race {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLanguages queries the languages edge of a Race.
func (c *RaceClient) QueryLanguages(r *Race) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, race.LanguagesTable, race.LanguagesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAbilityBonuses queries the ability_bonuses edge of a Race.
func (c *RaceClient) QueryAbilityBonuses(r *Race) *AbilityBonusQuery {
	query := (&AbilityBonusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(abilitybonus.Table, abilitybonus.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, race.AbilityBonusesTable, race.AbilityBonusesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStartingProficiencies queries the starting_proficiencies edge of a Race.
func (c *RaceClient) QueryStartingProficiencies(r *Race) *ProficiencyQuery {
	query := (&ProficiencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(proficiency.Table, proficiency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, race.StartingProficienciesTable, race.StartingProficienciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RaceClient) Hooks() []Hook {
	return c.hooks.Race
}

// Interceptors returns the client interceptors.
func (c *RaceClient) Interceptors() []Interceptor {
	return c.inters.Race
}

func (c *RaceClient) mutate(ctx context.Context, m *RaceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RaceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RaceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RaceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Race mutation op: %q", m.Op())
	}
}

// SkillClient is a client for the Skill schema.
type SkillClient struct {
	config
}

// NewSkillClient returns a client for the Skill from the given config.
func NewSkillClient(c config) *SkillClient {
	return &SkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skill.Hooks(f(g(h())))`.
func (c *SkillClient) Use(hooks ...Hook) {
	c.hooks.Skill = append(c.hooks.Skill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `skill.Intercept(f(g(h())))`.
func (c *SkillClient) Intercept(interceptors ...Interceptor) {
	c.inters.Skill = append(c.inters.Skill, interceptors...)
}

// Create returns a builder for creating a Skill entity.
func (c *SkillClient) Create() *SkillCreate {
	mutation := newSkillMutation(c.config, OpCreate)
	return &SkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Skill entities.
func (c *SkillClient) CreateBulk(builders ...*SkillCreate) *SkillCreateBulk {
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Skill.
func (c *SkillClient) Update() *SkillUpdate {
	mutation := newSkillMutation(c.config, OpUpdate)
	return &SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillClient) UpdateOne(s *Skill) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkill(s))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillClient) UpdateOneID(id int) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkillID(id))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Skill.
func (c *SkillClient) Delete() *SkillDelete {
	mutation := newSkillMutation(c.config, OpDelete)
	return &SkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SkillClient) DeleteOne(s *Skill) *SkillDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SkillClient) DeleteOneID(id int) *SkillDeleteOne {
	builder := c.Delete().Where(skill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillDeleteOne{builder}
}

// Query returns a query builder for Skill.
func (c *SkillClient) Query() *SkillQuery {
	return &SkillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSkill},
		inters: c.Interceptors(),
	}
}

// Get returns a Skill entity by its id.
func (c *SkillClient) Get(ctx context.Context, id int) (*Skill, error) {
	return c.Query().Where(skill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillClient) GetX(ctx context.Context, id int) *Skill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAbilityScore queries the ability_score edge of a Skill.
func (c *SkillClient) QueryAbilityScore(s *Skill) *AbilityScoreQuery {
	query := (&AbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(abilityscore.Table, abilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, skill.AbilityScoreTable, skill.AbilityScoreColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkillClient) Hooks() []Hook {
	return c.hooks.Skill
}

// Interceptors returns the client interceptors.
func (c *SkillClient) Interceptors() []Interceptor {
	return c.inters.Skill
}

func (c *SkillClient) mutate(ctx context.Context, m *SkillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SkillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SkillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Skill mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AbilityBonus, AbilityScore, Class, Condition, DamageType, Language, MagicSchool,
		Prerequisite, Proficiency, Race, Skill []ent.Hook
	}
	inters struct {
		AbilityBonus, AbilityScore, Class, Condition, DamageType, Language, MagicSchool,
		Prerequisite, Proficiency, Race, Skill []ent.Interceptor
	}
)
