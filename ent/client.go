// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/ecshreve/dndgen/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/abilitybonus"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/armor"
	"github.com/ecshreve/dndgen/ent/armorclass"
	"github.com/ecshreve/dndgen/ent/choice"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/cost"
	"github.com/ecshreve/dndgen/ent/damagetype"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/equipmentchoice"
	"github.com/ecshreve/dndgen/ent/gear"
	"github.com/ecshreve/dndgen/ent/language"
	"github.com/ecshreve/dndgen/ent/magicschool"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/rule"
	"github.com/ecshreve/dndgen/ent/rulesection"
	"github.com/ecshreve/dndgen/ent/skill"
	"github.com/ecshreve/dndgen/ent/startingequipment"
	"github.com/ecshreve/dndgen/ent/subrace"
	"github.com/ecshreve/dndgen/ent/tool"
	"github.com/ecshreve/dndgen/ent/trait"
	"github.com/ecshreve/dndgen/ent/vehicle"
	"github.com/ecshreve/dndgen/ent/weapon"
	"github.com/ecshreve/dndgen/ent/weapondamage"
	"github.com/ecshreve/dndgen/ent/weaponproperty"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AbilityBonus is the client for interacting with the AbilityBonus builders.
	AbilityBonus *AbilityBonusClient
	// AbilityScore is the client for interacting with the AbilityScore builders.
	AbilityScore *AbilityScoreClient
	// Armor is the client for interacting with the Armor builders.
	Armor *ArmorClient
	// ArmorClass is the client for interacting with the ArmorClass builders.
	ArmorClass *ArmorClassClient
	// Choice is the client for interacting with the Choice builders.
	Choice *ChoiceClient
	// Class is the client for interacting with the Class builders.
	Class *ClassClient
	// Cost is the client for interacting with the Cost builders.
	Cost *CostClient
	// DamageType is the client for interacting with the DamageType builders.
	DamageType *DamageTypeClient
	// Equipment is the client for interacting with the Equipment builders.
	Equipment *EquipmentClient
	// EquipmentChoice is the client for interacting with the EquipmentChoice builders.
	EquipmentChoice *EquipmentChoiceClient
	// Gear is the client for interacting with the Gear builders.
	Gear *GearClient
	// Language is the client for interacting with the Language builders.
	Language *LanguageClient
	// MagicSchool is the client for interacting with the MagicSchool builders.
	MagicSchool *MagicSchoolClient
	// Proficiency is the client for interacting with the Proficiency builders.
	Proficiency *ProficiencyClient
	// Race is the client for interacting with the Race builders.
	Race *RaceClient
	// Rule is the client for interacting with the Rule builders.
	Rule *RuleClient
	// RuleSection is the client for interacting with the RuleSection builders.
	RuleSection *RuleSectionClient
	// Skill is the client for interacting with the Skill builders.
	Skill *SkillClient
	// StartingEquipment is the client for interacting with the StartingEquipment builders.
	StartingEquipment *StartingEquipmentClient
	// Subrace is the client for interacting with the Subrace builders.
	Subrace *SubraceClient
	// Tool is the client for interacting with the Tool builders.
	Tool *ToolClient
	// Trait is the client for interacting with the Trait builders.
	Trait *TraitClient
	// Vehicle is the client for interacting with the Vehicle builders.
	Vehicle *VehicleClient
	// Weapon is the client for interacting with the Weapon builders.
	Weapon *WeaponClient
	// WeaponDamage is the client for interacting with the WeaponDamage builders.
	WeaponDamage *WeaponDamageClient
	// WeaponProperty is the client for interacting with the WeaponProperty builders.
	WeaponProperty *WeaponPropertyClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AbilityBonus = NewAbilityBonusClient(c.config)
	c.AbilityScore = NewAbilityScoreClient(c.config)
	c.Armor = NewArmorClient(c.config)
	c.ArmorClass = NewArmorClassClient(c.config)
	c.Choice = NewChoiceClient(c.config)
	c.Class = NewClassClient(c.config)
	c.Cost = NewCostClient(c.config)
	c.DamageType = NewDamageTypeClient(c.config)
	c.Equipment = NewEquipmentClient(c.config)
	c.EquipmentChoice = NewEquipmentChoiceClient(c.config)
	c.Gear = NewGearClient(c.config)
	c.Language = NewLanguageClient(c.config)
	c.MagicSchool = NewMagicSchoolClient(c.config)
	c.Proficiency = NewProficiencyClient(c.config)
	c.Race = NewRaceClient(c.config)
	c.Rule = NewRuleClient(c.config)
	c.RuleSection = NewRuleSectionClient(c.config)
	c.Skill = NewSkillClient(c.config)
	c.StartingEquipment = NewStartingEquipmentClient(c.config)
	c.Subrace = NewSubraceClient(c.config)
	c.Tool = NewToolClient(c.config)
	c.Trait = NewTraitClient(c.config)
	c.Vehicle = NewVehicleClient(c.config)
	c.Weapon = NewWeaponClient(c.config)
	c.WeaponDamage = NewWeaponDamageClient(c.config)
	c.WeaponProperty = NewWeaponPropertyClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		AbilityBonus:      NewAbilityBonusClient(cfg),
		AbilityScore:      NewAbilityScoreClient(cfg),
		Armor:             NewArmorClient(cfg),
		ArmorClass:        NewArmorClassClient(cfg),
		Choice:            NewChoiceClient(cfg),
		Class:             NewClassClient(cfg),
		Cost:              NewCostClient(cfg),
		DamageType:        NewDamageTypeClient(cfg),
		Equipment:         NewEquipmentClient(cfg),
		EquipmentChoice:   NewEquipmentChoiceClient(cfg),
		Gear:              NewGearClient(cfg),
		Language:          NewLanguageClient(cfg),
		MagicSchool:       NewMagicSchoolClient(cfg),
		Proficiency:       NewProficiencyClient(cfg),
		Race:              NewRaceClient(cfg),
		Rule:              NewRuleClient(cfg),
		RuleSection:       NewRuleSectionClient(cfg),
		Skill:             NewSkillClient(cfg),
		StartingEquipment: NewStartingEquipmentClient(cfg),
		Subrace:           NewSubraceClient(cfg),
		Tool:              NewToolClient(cfg),
		Trait:             NewTraitClient(cfg),
		Vehicle:           NewVehicleClient(cfg),
		Weapon:            NewWeaponClient(cfg),
		WeaponDamage:      NewWeaponDamageClient(cfg),
		WeaponProperty:    NewWeaponPropertyClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		AbilityBonus:      NewAbilityBonusClient(cfg),
		AbilityScore:      NewAbilityScoreClient(cfg),
		Armor:             NewArmorClient(cfg),
		ArmorClass:        NewArmorClassClient(cfg),
		Choice:            NewChoiceClient(cfg),
		Class:             NewClassClient(cfg),
		Cost:              NewCostClient(cfg),
		DamageType:        NewDamageTypeClient(cfg),
		Equipment:         NewEquipmentClient(cfg),
		EquipmentChoice:   NewEquipmentChoiceClient(cfg),
		Gear:              NewGearClient(cfg),
		Language:          NewLanguageClient(cfg),
		MagicSchool:       NewMagicSchoolClient(cfg),
		Proficiency:       NewProficiencyClient(cfg),
		Race:              NewRaceClient(cfg),
		Rule:              NewRuleClient(cfg),
		RuleSection:       NewRuleSectionClient(cfg),
		Skill:             NewSkillClient(cfg),
		StartingEquipment: NewStartingEquipmentClient(cfg),
		Subrace:           NewSubraceClient(cfg),
		Tool:              NewToolClient(cfg),
		Trait:             NewTraitClient(cfg),
		Vehicle:           NewVehicleClient(cfg),
		Weapon:            NewWeaponClient(cfg),
		WeaponDamage:      NewWeaponDamageClient(cfg),
		WeaponProperty:    NewWeaponPropertyClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AbilityBonus.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AbilityBonus, c.AbilityScore, c.Armor, c.ArmorClass, c.Choice, c.Class,
		c.Cost, c.DamageType, c.Equipment, c.EquipmentChoice, c.Gear, c.Language,
		c.MagicSchool, c.Proficiency, c.Race, c.Rule, c.RuleSection, c.Skill,
		c.StartingEquipment, c.Subrace, c.Tool, c.Trait, c.Vehicle, c.Weapon,
		c.WeaponDamage, c.WeaponProperty,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AbilityBonus, c.AbilityScore, c.Armor, c.ArmorClass, c.Choice, c.Class,
		c.Cost, c.DamageType, c.Equipment, c.EquipmentChoice, c.Gear, c.Language,
		c.MagicSchool, c.Proficiency, c.Race, c.Rule, c.RuleSection, c.Skill,
		c.StartingEquipment, c.Subrace, c.Tool, c.Trait, c.Vehicle, c.Weapon,
		c.WeaponDamage, c.WeaponProperty,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AbilityBonusMutation:
		return c.AbilityBonus.mutate(ctx, m)
	case *AbilityScoreMutation:
		return c.AbilityScore.mutate(ctx, m)
	case *ArmorMutation:
		return c.Armor.mutate(ctx, m)
	case *ArmorClassMutation:
		return c.ArmorClass.mutate(ctx, m)
	case *ChoiceMutation:
		return c.Choice.mutate(ctx, m)
	case *ClassMutation:
		return c.Class.mutate(ctx, m)
	case *CostMutation:
		return c.Cost.mutate(ctx, m)
	case *DamageTypeMutation:
		return c.DamageType.mutate(ctx, m)
	case *EquipmentMutation:
		return c.Equipment.mutate(ctx, m)
	case *EquipmentChoiceMutation:
		return c.EquipmentChoice.mutate(ctx, m)
	case *GearMutation:
		return c.Gear.mutate(ctx, m)
	case *LanguageMutation:
		return c.Language.mutate(ctx, m)
	case *MagicSchoolMutation:
		return c.MagicSchool.mutate(ctx, m)
	case *ProficiencyMutation:
		return c.Proficiency.mutate(ctx, m)
	case *RaceMutation:
		return c.Race.mutate(ctx, m)
	case *RuleMutation:
		return c.Rule.mutate(ctx, m)
	case *RuleSectionMutation:
		return c.RuleSection.mutate(ctx, m)
	case *SkillMutation:
		return c.Skill.mutate(ctx, m)
	case *StartingEquipmentMutation:
		return c.StartingEquipment.mutate(ctx, m)
	case *SubraceMutation:
		return c.Subrace.mutate(ctx, m)
	case *ToolMutation:
		return c.Tool.mutate(ctx, m)
	case *TraitMutation:
		return c.Trait.mutate(ctx, m)
	case *VehicleMutation:
		return c.Vehicle.mutate(ctx, m)
	case *WeaponMutation:
		return c.Weapon.mutate(ctx, m)
	case *WeaponDamageMutation:
		return c.WeaponDamage.mutate(ctx, m)
	case *WeaponPropertyMutation:
		return c.WeaponProperty.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AbilityBonusClient is a client for the AbilityBonus schema.
type AbilityBonusClient struct {
	config
}

// NewAbilityBonusClient returns a client for the AbilityBonus from the given config.
func NewAbilityBonusClient(c config) *AbilityBonusClient {
	return &AbilityBonusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abilitybonus.Hooks(f(g(h())))`.
func (c *AbilityBonusClient) Use(hooks ...Hook) {
	c.hooks.AbilityBonus = append(c.hooks.AbilityBonus, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `abilitybonus.Intercept(f(g(h())))`.
func (c *AbilityBonusClient) Intercept(interceptors ...Interceptor) {
	c.inters.AbilityBonus = append(c.inters.AbilityBonus, interceptors...)
}

// Create returns a builder for creating a AbilityBonus entity.
func (c *AbilityBonusClient) Create() *AbilityBonusCreate {
	mutation := newAbilityBonusMutation(c.config, OpCreate)
	return &AbilityBonusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AbilityBonus entities.
func (c *AbilityBonusClient) CreateBulk(builders ...*AbilityBonusCreate) *AbilityBonusCreateBulk {
	return &AbilityBonusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AbilityBonus.
func (c *AbilityBonusClient) Update() *AbilityBonusUpdate {
	mutation := newAbilityBonusMutation(c.config, OpUpdate)
	return &AbilityBonusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbilityBonusClient) UpdateOne(ab *AbilityBonus) *AbilityBonusUpdateOne {
	mutation := newAbilityBonusMutation(c.config, OpUpdateOne, withAbilityBonus(ab))
	return &AbilityBonusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbilityBonusClient) UpdateOneID(id int) *AbilityBonusUpdateOne {
	mutation := newAbilityBonusMutation(c.config, OpUpdateOne, withAbilityBonusID(id))
	return &AbilityBonusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AbilityBonus.
func (c *AbilityBonusClient) Delete() *AbilityBonusDelete {
	mutation := newAbilityBonusMutation(c.config, OpDelete)
	return &AbilityBonusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AbilityBonusClient) DeleteOne(ab *AbilityBonus) *AbilityBonusDeleteOne {
	return c.DeleteOneID(ab.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AbilityBonusClient) DeleteOneID(id int) *AbilityBonusDeleteOne {
	builder := c.Delete().Where(abilitybonus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbilityBonusDeleteOne{builder}
}

// Query returns a query builder for AbilityBonus.
func (c *AbilityBonusClient) Query() *AbilityBonusQuery {
	return &AbilityBonusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAbilityBonus},
		inters: c.Interceptors(),
	}
}

// Get returns a AbilityBonus entity by its id.
func (c *AbilityBonusClient) Get(ctx context.Context, id int) (*AbilityBonus, error) {
	return c.Query().Where(abilitybonus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbilityBonusClient) GetX(ctx context.Context, id int) *AbilityBonus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAbilityScore queries the ability_score edge of a AbilityBonus.
func (c *AbilityBonusClient) QueryAbilityScore(ab *AbilityBonus) *AbilityScoreQuery {
	query := (&AbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ab.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilitybonus.Table, abilitybonus.FieldID, id),
			sqlgraph.To(abilityscore.Table, abilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, abilitybonus.AbilityScoreTable, abilitybonus.AbilityScoreColumn),
		)
		fromV = sqlgraph.Neighbors(ab.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRace queries the race edge of a AbilityBonus.
func (c *AbilityBonusClient) QueryRace(ab *AbilityBonus) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ab.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilitybonus.Table, abilitybonus.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, abilitybonus.RaceTable, abilitybonus.RaceColumn),
		)
		fromV = sqlgraph.Neighbors(ab.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubrace queries the subrace edge of a AbilityBonus.
func (c *AbilityBonusClient) QuerySubrace(ab *AbilityBonus) *SubraceQuery {
	query := (&SubraceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ab.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilitybonus.Table, abilitybonus.FieldID, id),
			sqlgraph.To(subrace.Table, subrace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, abilitybonus.SubraceTable, abilitybonus.SubraceColumn),
		)
		fromV = sqlgraph.Neighbors(ab.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AbilityBonusClient) Hooks() []Hook {
	return c.hooks.AbilityBonus
}

// Interceptors returns the client interceptors.
func (c *AbilityBonusClient) Interceptors() []Interceptor {
	return c.inters.AbilityBonus
}

func (c *AbilityBonusClient) mutate(ctx context.Context, m *AbilityBonusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AbilityBonusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AbilityBonusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AbilityBonusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AbilityBonusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AbilityBonus mutation op: %q", m.Op())
	}
}

// AbilityScoreClient is a client for the AbilityScore schema.
type AbilityScoreClient struct {
	config
}

// NewAbilityScoreClient returns a client for the AbilityScore from the given config.
func NewAbilityScoreClient(c config) *AbilityScoreClient {
	return &AbilityScoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abilityscore.Hooks(f(g(h())))`.
func (c *AbilityScoreClient) Use(hooks ...Hook) {
	c.hooks.AbilityScore = append(c.hooks.AbilityScore, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `abilityscore.Intercept(f(g(h())))`.
func (c *AbilityScoreClient) Intercept(interceptors ...Interceptor) {
	c.inters.AbilityScore = append(c.inters.AbilityScore, interceptors...)
}

// Create returns a builder for creating a AbilityScore entity.
func (c *AbilityScoreClient) Create() *AbilityScoreCreate {
	mutation := newAbilityScoreMutation(c.config, OpCreate)
	return &AbilityScoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AbilityScore entities.
func (c *AbilityScoreClient) CreateBulk(builders ...*AbilityScoreCreate) *AbilityScoreCreateBulk {
	return &AbilityScoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AbilityScore.
func (c *AbilityScoreClient) Update() *AbilityScoreUpdate {
	mutation := newAbilityScoreMutation(c.config, OpUpdate)
	return &AbilityScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbilityScoreClient) UpdateOne(as *AbilityScore) *AbilityScoreUpdateOne {
	mutation := newAbilityScoreMutation(c.config, OpUpdateOne, withAbilityScore(as))
	return &AbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbilityScoreClient) UpdateOneID(id int) *AbilityScoreUpdateOne {
	mutation := newAbilityScoreMutation(c.config, OpUpdateOne, withAbilityScoreID(id))
	return &AbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AbilityScore.
func (c *AbilityScoreClient) Delete() *AbilityScoreDelete {
	mutation := newAbilityScoreMutation(c.config, OpDelete)
	return &AbilityScoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AbilityScoreClient) DeleteOne(as *AbilityScore) *AbilityScoreDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AbilityScoreClient) DeleteOneID(id int) *AbilityScoreDeleteOne {
	builder := c.Delete().Where(abilityscore.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbilityScoreDeleteOne{builder}
}

// Query returns a query builder for AbilityScore.
func (c *AbilityScoreClient) Query() *AbilityScoreQuery {
	return &AbilityScoreQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAbilityScore},
		inters: c.Interceptors(),
	}
}

// Get returns a AbilityScore entity by its id.
func (c *AbilityScoreClient) Get(ctx context.Context, id int) (*AbilityScore, error) {
	return c.Query().Where(abilityscore.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbilityScoreClient) GetX(ctx context.Context, id int) *AbilityScore {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySkills queries the skills edge of a AbilityScore.
func (c *AbilityScoreClient) QuerySkills(as *AbilityScore) *SkillQuery {
	query := (&SkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilityscore.Table, abilityscore.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, abilityscore.SkillsTable, abilityscore.SkillsColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAbilityBonuses queries the ability_bonuses edge of a AbilityScore.
func (c *AbilityScoreClient) QueryAbilityBonuses(as *AbilityScore) *AbilityBonusQuery {
	query := (&AbilityBonusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilityscore.Table, abilityscore.FieldID, id),
			sqlgraph.To(abilitybonus.Table, abilitybonus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, abilityscore.AbilityBonusesTable, abilityscore.AbilityBonusesColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AbilityScoreClient) Hooks() []Hook {
	return c.hooks.AbilityScore
}

// Interceptors returns the client interceptors.
func (c *AbilityScoreClient) Interceptors() []Interceptor {
	return c.inters.AbilityScore
}

func (c *AbilityScoreClient) mutate(ctx context.Context, m *AbilityScoreMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AbilityScoreCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AbilityScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AbilityScoreDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AbilityScore mutation op: %q", m.Op())
	}
}

// ArmorClient is a client for the Armor schema.
type ArmorClient struct {
	config
}

// NewArmorClient returns a client for the Armor from the given config.
func NewArmorClient(c config) *ArmorClient {
	return &ArmorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `armor.Hooks(f(g(h())))`.
func (c *ArmorClient) Use(hooks ...Hook) {
	c.hooks.Armor = append(c.hooks.Armor, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `armor.Intercept(f(g(h())))`.
func (c *ArmorClient) Intercept(interceptors ...Interceptor) {
	c.inters.Armor = append(c.inters.Armor, interceptors...)
}

// Create returns a builder for creating a Armor entity.
func (c *ArmorClient) Create() *ArmorCreate {
	mutation := newArmorMutation(c.config, OpCreate)
	return &ArmorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Armor entities.
func (c *ArmorClient) CreateBulk(builders ...*ArmorCreate) *ArmorCreateBulk {
	return &ArmorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Armor.
func (c *ArmorClient) Update() *ArmorUpdate {
	mutation := newArmorMutation(c.config, OpUpdate)
	return &ArmorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArmorClient) UpdateOne(a *Armor) *ArmorUpdateOne {
	mutation := newArmorMutation(c.config, OpUpdateOne, withArmor(a))
	return &ArmorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArmorClient) UpdateOneID(id int) *ArmorUpdateOne {
	mutation := newArmorMutation(c.config, OpUpdateOne, withArmorID(id))
	return &ArmorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Armor.
func (c *ArmorClient) Delete() *ArmorDelete {
	mutation := newArmorMutation(c.config, OpDelete)
	return &ArmorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArmorClient) DeleteOne(a *Armor) *ArmorDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArmorClient) DeleteOneID(id int) *ArmorDeleteOne {
	builder := c.Delete().Where(armor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArmorDeleteOne{builder}
}

// Query returns a query builder for Armor.
func (c *ArmorClient) Query() *ArmorQuery {
	return &ArmorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArmor},
		inters: c.Interceptors(),
	}
}

// Get returns a Armor entity by its id.
func (c *ArmorClient) Get(ctx context.Context, id int) (*Armor, error) {
	return c.Query().Where(armor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArmorClient) GetX(ctx context.Context, id int) *Armor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a Armor.
func (c *ArmorClient) QueryEquipment(a *Armor) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(armor.Table, armor.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, armor.EquipmentTable, armor.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArmorClass queries the armor_class edge of a Armor.
func (c *ArmorClient) QueryArmorClass(a *Armor) *ArmorClassQuery {
	query := (&ArmorClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(armor.Table, armor.FieldID, id),
			sqlgraph.To(armorclass.Table, armorclass.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, armor.ArmorClassTable, armor.ArmorClassColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArmorClient) Hooks() []Hook {
	return c.hooks.Armor
}

// Interceptors returns the client interceptors.
func (c *ArmorClient) Interceptors() []Interceptor {
	return c.inters.Armor
}

func (c *ArmorClient) mutate(ctx context.Context, m *ArmorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArmorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArmorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArmorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArmorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Armor mutation op: %q", m.Op())
	}
}

// ArmorClassClient is a client for the ArmorClass schema.
type ArmorClassClient struct {
	config
}

// NewArmorClassClient returns a client for the ArmorClass from the given config.
func NewArmorClassClient(c config) *ArmorClassClient {
	return &ArmorClassClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `armorclass.Hooks(f(g(h())))`.
func (c *ArmorClassClient) Use(hooks ...Hook) {
	c.hooks.ArmorClass = append(c.hooks.ArmorClass, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `armorclass.Intercept(f(g(h())))`.
func (c *ArmorClassClient) Intercept(interceptors ...Interceptor) {
	c.inters.ArmorClass = append(c.inters.ArmorClass, interceptors...)
}

// Create returns a builder for creating a ArmorClass entity.
func (c *ArmorClassClient) Create() *ArmorClassCreate {
	mutation := newArmorClassMutation(c.config, OpCreate)
	return &ArmorClassCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArmorClass entities.
func (c *ArmorClassClient) CreateBulk(builders ...*ArmorClassCreate) *ArmorClassCreateBulk {
	return &ArmorClassCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArmorClass.
func (c *ArmorClassClient) Update() *ArmorClassUpdate {
	mutation := newArmorClassMutation(c.config, OpUpdate)
	return &ArmorClassUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArmorClassClient) UpdateOne(ac *ArmorClass) *ArmorClassUpdateOne {
	mutation := newArmorClassMutation(c.config, OpUpdateOne, withArmorClass(ac))
	return &ArmorClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArmorClassClient) UpdateOneID(id int) *ArmorClassUpdateOne {
	mutation := newArmorClassMutation(c.config, OpUpdateOne, withArmorClassID(id))
	return &ArmorClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArmorClass.
func (c *ArmorClassClient) Delete() *ArmorClassDelete {
	mutation := newArmorClassMutation(c.config, OpDelete)
	return &ArmorClassDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArmorClassClient) DeleteOne(ac *ArmorClass) *ArmorClassDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArmorClassClient) DeleteOneID(id int) *ArmorClassDeleteOne {
	builder := c.Delete().Where(armorclass.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArmorClassDeleteOne{builder}
}

// Query returns a query builder for ArmorClass.
func (c *ArmorClassClient) Query() *ArmorClassQuery {
	return &ArmorClassQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArmorClass},
		inters: c.Interceptors(),
	}
}

// Get returns a ArmorClass entity by its id.
func (c *ArmorClassClient) Get(ctx context.Context, id int) (*ArmorClass, error) {
	return c.Query().Where(armorclass.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArmorClassClient) GetX(ctx context.Context, id int) *ArmorClass {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ArmorClassClient) Hooks() []Hook {
	return c.hooks.ArmorClass
}

// Interceptors returns the client interceptors.
func (c *ArmorClassClient) Interceptors() []Interceptor {
	return c.inters.ArmorClass
}

func (c *ArmorClassClient) mutate(ctx context.Context, m *ArmorClassMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArmorClassCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArmorClassUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArmorClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArmorClassDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ArmorClass mutation op: %q", m.Op())
	}
}

// ChoiceClient is a client for the Choice schema.
type ChoiceClient struct {
	config
}

// NewChoiceClient returns a client for the Choice from the given config.
func NewChoiceClient(c config) *ChoiceClient {
	return &ChoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `choice.Hooks(f(g(h())))`.
func (c *ChoiceClient) Use(hooks ...Hook) {
	c.hooks.Choice = append(c.hooks.Choice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `choice.Intercept(f(g(h())))`.
func (c *ChoiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Choice = append(c.inters.Choice, interceptors...)
}

// Create returns a builder for creating a Choice entity.
func (c *ChoiceClient) Create() *ChoiceCreate {
	mutation := newChoiceMutation(c.config, OpCreate)
	return &ChoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Choice entities.
func (c *ChoiceClient) CreateBulk(builders ...*ChoiceCreate) *ChoiceCreateBulk {
	return &ChoiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Choice.
func (c *ChoiceClient) Update() *ChoiceUpdate {
	mutation := newChoiceMutation(c.config, OpUpdate)
	return &ChoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChoiceClient) UpdateOne(ch *Choice) *ChoiceUpdateOne {
	mutation := newChoiceMutation(c.config, OpUpdateOne, withChoice(ch))
	return &ChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChoiceClient) UpdateOneID(id int) *ChoiceUpdateOne {
	mutation := newChoiceMutation(c.config, OpUpdateOne, withChoiceID(id))
	return &ChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Choice.
func (c *ChoiceClient) Delete() *ChoiceDelete {
	mutation := newChoiceMutation(c.config, OpDelete)
	return &ChoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChoiceClient) DeleteOne(ch *Choice) *ChoiceDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChoiceClient) DeleteOneID(id int) *ChoiceDeleteOne {
	builder := c.Delete().Where(choice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChoiceDeleteOne{builder}
}

// Query returns a query builder for Choice.
func (c *ChoiceClient) Query() *ChoiceQuery {
	return &ChoiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChoice},
		inters: c.Interceptors(),
	}
}

// Get returns a Choice entity by its id.
func (c *ChoiceClient) Get(ctx context.Context, id int) (*Choice, error) {
	return c.Query().Where(choice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChoiceClient) GetX(ctx context.Context, id int) *Choice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParentChoice queries the parent_choice edge of a Choice.
func (c *ChoiceClient) QueryParentChoice(ch *Choice) *ChoiceQuery {
	query := (&ChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(choice.Table, choice.FieldID, id),
			sqlgraph.To(choice.Table, choice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, choice.ParentChoiceTable, choice.ParentChoiceColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChoices queries the choices edge of a Choice.
func (c *ChoiceClient) QueryChoices(ch *Choice) *ChoiceQuery {
	query := (&ChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(choice.Table, choice.FieldID, id),
			sqlgraph.To(choice.Table, choice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, choice.ChoicesTable, choice.ChoicesColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProficiencyOptions queries the proficiency_options edge of a Choice.
func (c *ChoiceClient) QueryProficiencyOptions(ch *Choice) *ProficiencyQuery {
	query := (&ProficiencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(choice.Table, choice.FieldID, id),
			sqlgraph.To(proficiency.Table, proficiency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, choice.ProficiencyOptionsTable, choice.ProficiencyOptionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClass queries the class edge of a Choice.
func (c *ChoiceClient) QueryClass(ch *Choice) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(choice.Table, choice.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, choice.ClassTable, choice.ClassPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRace queries the race edge of a Choice.
func (c *ChoiceClient) QueryRace(ch *Choice) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(choice.Table, choice.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, choice.RaceTable, choice.RaceColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChoiceClient) Hooks() []Hook {
	return c.hooks.Choice
}

// Interceptors returns the client interceptors.
func (c *ChoiceClient) Interceptors() []Interceptor {
	return c.inters.Choice
}

func (c *ChoiceClient) mutate(ctx context.Context, m *ChoiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChoiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChoiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Choice mutation op: %q", m.Op())
	}
}

// ClassClient is a client for the Class schema.
type ClassClient struct {
	config
}

// NewClassClient returns a client for the Class from the given config.
func NewClassClient(c config) *ClassClient {
	return &ClassClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `class.Hooks(f(g(h())))`.
func (c *ClassClient) Use(hooks ...Hook) {
	c.hooks.Class = append(c.hooks.Class, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `class.Intercept(f(g(h())))`.
func (c *ClassClient) Intercept(interceptors ...Interceptor) {
	c.inters.Class = append(c.inters.Class, interceptors...)
}

// Create returns a builder for creating a Class entity.
func (c *ClassClient) Create() *ClassCreate {
	mutation := newClassMutation(c.config, OpCreate)
	return &ClassCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Class entities.
func (c *ClassClient) CreateBulk(builders ...*ClassCreate) *ClassCreateBulk {
	return &ClassCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Class.
func (c *ClassClient) Update() *ClassUpdate {
	mutation := newClassMutation(c.config, OpUpdate)
	return &ClassUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClassClient) UpdateOne(cl *Class) *ClassUpdateOne {
	mutation := newClassMutation(c.config, OpUpdateOne, withClass(cl))
	return &ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClassClient) UpdateOneID(id int) *ClassUpdateOne {
	mutation := newClassMutation(c.config, OpUpdateOne, withClassID(id))
	return &ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Class.
func (c *ClassClient) Delete() *ClassDelete {
	mutation := newClassMutation(c.config, OpDelete)
	return &ClassDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClassClient) DeleteOne(cl *Class) *ClassDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClassClient) DeleteOneID(id int) *ClassDeleteOne {
	builder := c.Delete().Where(class.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClassDeleteOne{builder}
}

// Query returns a query builder for Class.
func (c *ClassClient) Query() *ClassQuery {
	return &ClassQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClass},
		inters: c.Interceptors(),
	}
}

// Get returns a Class entity by its id.
func (c *ClassClient) Get(ctx context.Context, id int) (*Class, error) {
	return c.Query().Where(class.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClassClient) GetX(ctx context.Context, id int) *Class {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProficiencies queries the proficiencies edge of a Class.
func (c *ClassClient) QueryProficiencies(cl *Class) *ProficiencyQuery {
	query := (&ProficiencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(proficiency.Table, proficiency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, class.ProficienciesTable, class.ProficienciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProficiencyChoices queries the proficiency_choices edge of a Class.
func (c *ClassClient) QueryProficiencyChoices(cl *Class) *ChoiceQuery {
	query := (&ChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(choice.Table, choice.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, class.ProficiencyChoicesTable, class.ProficiencyChoicesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStartingEquipment queries the starting_equipment edge of a Class.
func (c *ClassClient) QueryStartingEquipment(cl *Class) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, class.StartingEquipmentTable, class.StartingEquipmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentChoice queries the equipment_choice edge of a Class.
func (c *ClassClient) QueryEquipmentChoice(cl *Class) *EquipmentChoiceQuery {
	query := (&EquipmentChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(equipmentchoice.Table, equipmentchoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, class.EquipmentChoiceTable, class.EquipmentChoiceColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClassStartingEquipment queries the class_starting_equipment edge of a Class.
func (c *ClassClient) QueryClassStartingEquipment(cl *Class) *StartingEquipmentQuery {
	query := (&StartingEquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(startingequipment.Table, startingequipment.ClassColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, class.ClassStartingEquipmentTable, class.ClassStartingEquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClassClient) Hooks() []Hook {
	return c.hooks.Class
}

// Interceptors returns the client interceptors.
func (c *ClassClient) Interceptors() []Interceptor {
	return c.inters.Class
}

func (c *ClassClient) mutate(ctx context.Context, m *ClassMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClassCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClassUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClassDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Class mutation op: %q", m.Op())
	}
}

// CostClient is a client for the Cost schema.
type CostClient struct {
	config
}

// NewCostClient returns a client for the Cost from the given config.
func NewCostClient(c config) *CostClient {
	return &CostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cost.Hooks(f(g(h())))`.
func (c *CostClient) Use(hooks ...Hook) {
	c.hooks.Cost = append(c.hooks.Cost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cost.Intercept(f(g(h())))`.
func (c *CostClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cost = append(c.inters.Cost, interceptors...)
}

// Create returns a builder for creating a Cost entity.
func (c *CostClient) Create() *CostCreate {
	mutation := newCostMutation(c.config, OpCreate)
	return &CostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cost entities.
func (c *CostClient) CreateBulk(builders ...*CostCreate) *CostCreateBulk {
	return &CostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cost.
func (c *CostClient) Update() *CostUpdate {
	mutation := newCostMutation(c.config, OpUpdate)
	return &CostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CostClient) UpdateOne(co *Cost) *CostUpdateOne {
	mutation := newCostMutation(c.config, OpUpdateOne, withCost(co))
	return &CostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CostClient) UpdateOneID(id int) *CostUpdateOne {
	mutation := newCostMutation(c.config, OpUpdateOne, withCostID(id))
	return &CostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cost.
func (c *CostClient) Delete() *CostDelete {
	mutation := newCostMutation(c.config, OpDelete)
	return &CostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CostClient) DeleteOne(co *Cost) *CostDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CostClient) DeleteOneID(id int) *CostDeleteOne {
	builder := c.Delete().Where(cost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CostDeleteOne{builder}
}

// Query returns a query builder for Cost.
func (c *CostClient) Query() *CostQuery {
	return &CostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCost},
		inters: c.Interceptors(),
	}
}

// Get returns a Cost entity by its id.
func (c *CostClient) Get(ctx context.Context, id int) (*Cost, error) {
	return c.Query().Where(cost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CostClient) GetX(ctx context.Context, id int) *Cost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CostClient) Hooks() []Hook {
	return c.hooks.Cost
}

// Interceptors returns the client interceptors.
func (c *CostClient) Interceptors() []Interceptor {
	return c.inters.Cost
}

func (c *CostClient) mutate(ctx context.Context, m *CostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cost mutation op: %q", m.Op())
	}
}

// DamageTypeClient is a client for the DamageType schema.
type DamageTypeClient struct {
	config
}

// NewDamageTypeClient returns a client for the DamageType from the given config.
func NewDamageTypeClient(c config) *DamageTypeClient {
	return &DamageTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `damagetype.Hooks(f(g(h())))`.
func (c *DamageTypeClient) Use(hooks ...Hook) {
	c.hooks.DamageType = append(c.hooks.DamageType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `damagetype.Intercept(f(g(h())))`.
func (c *DamageTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.DamageType = append(c.inters.DamageType, interceptors...)
}

// Create returns a builder for creating a DamageType entity.
func (c *DamageTypeClient) Create() *DamageTypeCreate {
	mutation := newDamageTypeMutation(c.config, OpCreate)
	return &DamageTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DamageType entities.
func (c *DamageTypeClient) CreateBulk(builders ...*DamageTypeCreate) *DamageTypeCreateBulk {
	return &DamageTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DamageType.
func (c *DamageTypeClient) Update() *DamageTypeUpdate {
	mutation := newDamageTypeMutation(c.config, OpUpdate)
	return &DamageTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DamageTypeClient) UpdateOne(dt *DamageType) *DamageTypeUpdateOne {
	mutation := newDamageTypeMutation(c.config, OpUpdateOne, withDamageType(dt))
	return &DamageTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DamageTypeClient) UpdateOneID(id int) *DamageTypeUpdateOne {
	mutation := newDamageTypeMutation(c.config, OpUpdateOne, withDamageTypeID(id))
	return &DamageTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DamageType.
func (c *DamageTypeClient) Delete() *DamageTypeDelete {
	mutation := newDamageTypeMutation(c.config, OpDelete)
	return &DamageTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DamageTypeClient) DeleteOne(dt *DamageType) *DamageTypeDeleteOne {
	return c.DeleteOneID(dt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DamageTypeClient) DeleteOneID(id int) *DamageTypeDeleteOne {
	builder := c.Delete().Where(damagetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DamageTypeDeleteOne{builder}
}

// Query returns a query builder for DamageType.
func (c *DamageTypeClient) Query() *DamageTypeQuery {
	return &DamageTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDamageType},
		inters: c.Interceptors(),
	}
}

// Get returns a DamageType entity by its id.
func (c *DamageTypeClient) Get(ctx context.Context, id int) (*DamageType, error) {
	return c.Query().Where(damagetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DamageTypeClient) GetX(ctx context.Context, id int) *DamageType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWeaponDamage queries the weapon_damage edge of a DamageType.
func (c *DamageTypeClient) QueryWeaponDamage(dt *DamageType) *WeaponDamageQuery {
	query := (&WeaponDamageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(damagetype.Table, damagetype.FieldID, id),
			sqlgraph.To(weapondamage.Table, weapondamage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, damagetype.WeaponDamageTable, damagetype.WeaponDamageColumn),
		)
		fromV = sqlgraph.Neighbors(dt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DamageTypeClient) Hooks() []Hook {
	return c.hooks.DamageType
}

// Interceptors returns the client interceptors.
func (c *DamageTypeClient) Interceptors() []Interceptor {
	return c.inters.DamageType
}

func (c *DamageTypeClient) mutate(ctx context.Context, m *DamageTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DamageTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DamageTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DamageTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DamageTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DamageType mutation op: %q", m.Op())
	}
}

// EquipmentClient is a client for the Equipment schema.
type EquipmentClient struct {
	config
}

// NewEquipmentClient returns a client for the Equipment from the given config.
func NewEquipmentClient(c config) *EquipmentClient {
	return &EquipmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipment.Hooks(f(g(h())))`.
func (c *EquipmentClient) Use(hooks ...Hook) {
	c.hooks.Equipment = append(c.hooks.Equipment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `equipment.Intercept(f(g(h())))`.
func (c *EquipmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Equipment = append(c.inters.Equipment, interceptors...)
}

// Create returns a builder for creating a Equipment entity.
func (c *EquipmentClient) Create() *EquipmentCreate {
	mutation := newEquipmentMutation(c.config, OpCreate)
	return &EquipmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Equipment entities.
func (c *EquipmentClient) CreateBulk(builders ...*EquipmentCreate) *EquipmentCreateBulk {
	return &EquipmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Equipment.
func (c *EquipmentClient) Update() *EquipmentUpdate {
	mutation := newEquipmentMutation(c.config, OpUpdate)
	return &EquipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentClient) UpdateOne(e *Equipment) *EquipmentUpdateOne {
	mutation := newEquipmentMutation(c.config, OpUpdateOne, withEquipment(e))
	return &EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentClient) UpdateOneID(id int) *EquipmentUpdateOne {
	mutation := newEquipmentMutation(c.config, OpUpdateOne, withEquipmentID(id))
	return &EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Equipment.
func (c *EquipmentClient) Delete() *EquipmentDelete {
	mutation := newEquipmentMutation(c.config, OpDelete)
	return &EquipmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EquipmentClient) DeleteOne(e *Equipment) *EquipmentDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EquipmentClient) DeleteOneID(id int) *EquipmentDeleteOne {
	builder := c.Delete().Where(equipment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentDeleteOne{builder}
}

// Query returns a query builder for Equipment.
func (c *EquipmentClient) Query() *EquipmentQuery {
	return &EquipmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEquipment},
		inters: c.Interceptors(),
	}
}

// Get returns a Equipment entity by its id.
func (c *EquipmentClient) Get(ctx context.Context, id int) (*Equipment, error) {
	return c.Query().Where(equipment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentClient) GetX(ctx context.Context, id int) *Equipment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCost queries the cost edge of a Equipment.
func (c *EquipmentClient) QueryCost(e *Equipment) *CostQuery {
	query := (&CostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(cost.Table, cost.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipment.CostTable, equipment.CostColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWeapon queries the weapon edge of a Equipment.
func (c *EquipmentClient) QueryWeapon(e *Equipment) *WeaponQuery {
	query := (&WeaponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(weapon.Table, weapon.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.WeaponTable, equipment.WeaponColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArmor queries the armor edge of a Equipment.
func (c *EquipmentClient) QueryArmor(e *Equipment) *ArmorQuery {
	query := (&ArmorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(armor.Table, armor.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.ArmorTable, equipment.ArmorColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGear queries the gear edge of a Equipment.
func (c *EquipmentClient) QueryGear(e *Equipment) *GearQuery {
	query := (&GearClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(gear.Table, gear.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.GearTable, equipment.GearColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTool queries the tool edge of a Equipment.
func (c *EquipmentClient) QueryTool(e *Equipment) *ToolQuery {
	query := (&ToolClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(tool.Table, tool.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.ToolTable, equipment.ToolColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVehicle queries the vehicle edge of a Equipment.
func (c *EquipmentClient) QueryVehicle(e *Equipment) *VehicleQuery {
	query := (&VehicleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(vehicle.Table, vehicle.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.VehicleTable, equipment.VehicleColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClassEquipment queries the class_equipment edge of a Equipment.
func (c *EquipmentClient) QueryClassEquipment(e *Equipment) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, equipment.ClassEquipmentTable, equipment.ClassEquipmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChoice queries the choice edge of a Equipment.
func (c *EquipmentClient) QueryChoice(e *Equipment) *EquipmentChoiceQuery {
	query := (&EquipmentChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(equipmentchoice.Table, equipmentchoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, equipment.ChoiceTable, equipment.ChoicePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClassStartingEquipment queries the class_starting_equipment edge of a Equipment.
func (c *EquipmentClient) QueryClassStartingEquipment(e *Equipment) *StartingEquipmentQuery {
	query := (&StartingEquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(startingequipment.Table, startingequipment.EquipmentColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, equipment.ClassStartingEquipmentTable, equipment.ClassStartingEquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentClient) Hooks() []Hook {
	return c.hooks.Equipment
}

// Interceptors returns the client interceptors.
func (c *EquipmentClient) Interceptors() []Interceptor {
	return c.inters.Equipment
}

func (c *EquipmentClient) mutate(ctx context.Context, m *EquipmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EquipmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EquipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EquipmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Equipment mutation op: %q", m.Op())
	}
}

// EquipmentChoiceClient is a client for the EquipmentChoice schema.
type EquipmentChoiceClient struct {
	config
}

// NewEquipmentChoiceClient returns a client for the EquipmentChoice from the given config.
func NewEquipmentChoiceClient(c config) *EquipmentChoiceClient {
	return &EquipmentChoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentchoice.Hooks(f(g(h())))`.
func (c *EquipmentChoiceClient) Use(hooks ...Hook) {
	c.hooks.EquipmentChoice = append(c.hooks.EquipmentChoice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `equipmentchoice.Intercept(f(g(h())))`.
func (c *EquipmentChoiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.EquipmentChoice = append(c.inters.EquipmentChoice, interceptors...)
}

// Create returns a builder for creating a EquipmentChoice entity.
func (c *EquipmentChoiceClient) Create() *EquipmentChoiceCreate {
	mutation := newEquipmentChoiceMutation(c.config, OpCreate)
	return &EquipmentChoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentChoice entities.
func (c *EquipmentChoiceClient) CreateBulk(builders ...*EquipmentChoiceCreate) *EquipmentChoiceCreateBulk {
	return &EquipmentChoiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentChoice.
func (c *EquipmentChoiceClient) Update() *EquipmentChoiceUpdate {
	mutation := newEquipmentChoiceMutation(c.config, OpUpdate)
	return &EquipmentChoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentChoiceClient) UpdateOne(ec *EquipmentChoice) *EquipmentChoiceUpdateOne {
	mutation := newEquipmentChoiceMutation(c.config, OpUpdateOne, withEquipmentChoice(ec))
	return &EquipmentChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentChoiceClient) UpdateOneID(id int) *EquipmentChoiceUpdateOne {
	mutation := newEquipmentChoiceMutation(c.config, OpUpdateOne, withEquipmentChoiceID(id))
	return &EquipmentChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentChoice.
func (c *EquipmentChoiceClient) Delete() *EquipmentChoiceDelete {
	mutation := newEquipmentChoiceMutation(c.config, OpDelete)
	return &EquipmentChoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EquipmentChoiceClient) DeleteOne(ec *EquipmentChoice) *EquipmentChoiceDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EquipmentChoiceClient) DeleteOneID(id int) *EquipmentChoiceDeleteOne {
	builder := c.Delete().Where(equipmentchoice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentChoiceDeleteOne{builder}
}

// Query returns a query builder for EquipmentChoice.
func (c *EquipmentChoiceClient) Query() *EquipmentChoiceQuery {
	return &EquipmentChoiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEquipmentChoice},
		inters: c.Interceptors(),
	}
}

// Get returns a EquipmentChoice entity by its id.
func (c *EquipmentChoiceClient) Get(ctx context.Context, id int) (*EquipmentChoice, error) {
	return c.Query().Where(equipmentchoice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentChoiceClient) GetX(ctx context.Context, id int) *EquipmentChoice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClass queries the class edge of a EquipmentChoice.
func (c *EquipmentChoiceClient) QueryClass(ec *EquipmentChoice) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentchoice.Table, equipmentchoice.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipmentchoice.ClassTable, equipmentchoice.ClassColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a EquipmentChoice.
func (c *EquipmentChoiceClient) QueryEquipment(ec *EquipmentChoice) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentchoice.Table, equipmentchoice.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, equipmentchoice.EquipmentTable, equipmentchoice.EquipmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentChoiceClient) Hooks() []Hook {
	return c.hooks.EquipmentChoice
}

// Interceptors returns the client interceptors.
func (c *EquipmentChoiceClient) Interceptors() []Interceptor {
	return c.inters.EquipmentChoice
}

func (c *EquipmentChoiceClient) mutate(ctx context.Context, m *EquipmentChoiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EquipmentChoiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EquipmentChoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EquipmentChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EquipmentChoiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EquipmentChoice mutation op: %q", m.Op())
	}
}

// GearClient is a client for the Gear schema.
type GearClient struct {
	config
}

// NewGearClient returns a client for the Gear from the given config.
func NewGearClient(c config) *GearClient {
	return &GearClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gear.Hooks(f(g(h())))`.
func (c *GearClient) Use(hooks ...Hook) {
	c.hooks.Gear = append(c.hooks.Gear, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gear.Intercept(f(g(h())))`.
func (c *GearClient) Intercept(interceptors ...Interceptor) {
	c.inters.Gear = append(c.inters.Gear, interceptors...)
}

// Create returns a builder for creating a Gear entity.
func (c *GearClient) Create() *GearCreate {
	mutation := newGearMutation(c.config, OpCreate)
	return &GearCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Gear entities.
func (c *GearClient) CreateBulk(builders ...*GearCreate) *GearCreateBulk {
	return &GearCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Gear.
func (c *GearClient) Update() *GearUpdate {
	mutation := newGearMutation(c.config, OpUpdate)
	return &GearUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GearClient) UpdateOne(ge *Gear) *GearUpdateOne {
	mutation := newGearMutation(c.config, OpUpdateOne, withGear(ge))
	return &GearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GearClient) UpdateOneID(id int) *GearUpdateOne {
	mutation := newGearMutation(c.config, OpUpdateOne, withGearID(id))
	return &GearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Gear.
func (c *GearClient) Delete() *GearDelete {
	mutation := newGearMutation(c.config, OpDelete)
	return &GearDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GearClient) DeleteOne(ge *Gear) *GearDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GearClient) DeleteOneID(id int) *GearDeleteOne {
	builder := c.Delete().Where(gear.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GearDeleteOne{builder}
}

// Query returns a query builder for Gear.
func (c *GearClient) Query() *GearQuery {
	return &GearQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGear},
		inters: c.Interceptors(),
	}
}

// Get returns a Gear entity by its id.
func (c *GearClient) Get(ctx context.Context, id int) (*Gear, error) {
	return c.Query().Where(gear.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GearClient) GetX(ctx context.Context, id int) *Gear {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a Gear.
func (c *GearClient) QueryEquipment(ge *Gear) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gear.Table, gear.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, gear.EquipmentTable, gear.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GearClient) Hooks() []Hook {
	return c.hooks.Gear
}

// Interceptors returns the client interceptors.
func (c *GearClient) Interceptors() []Interceptor {
	return c.inters.Gear
}

func (c *GearClient) mutate(ctx context.Context, m *GearMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GearCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GearUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GearDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Gear mutation op: %q", m.Op())
	}
}

// LanguageClient is a client for the Language schema.
type LanguageClient struct {
	config
}

// NewLanguageClient returns a client for the Language from the given config.
func NewLanguageClient(c config) *LanguageClient {
	return &LanguageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `language.Hooks(f(g(h())))`.
func (c *LanguageClient) Use(hooks ...Hook) {
	c.hooks.Language = append(c.hooks.Language, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `language.Intercept(f(g(h())))`.
func (c *LanguageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Language = append(c.inters.Language, interceptors...)
}

// Create returns a builder for creating a Language entity.
func (c *LanguageClient) Create() *LanguageCreate {
	mutation := newLanguageMutation(c.config, OpCreate)
	return &LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Language entities.
func (c *LanguageClient) CreateBulk(builders ...*LanguageCreate) *LanguageCreateBulk {
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Language.
func (c *LanguageClient) Update() *LanguageUpdate {
	mutation := newLanguageMutation(c.config, OpUpdate)
	return &LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LanguageClient) UpdateOne(l *Language) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguage(l))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LanguageClient) UpdateOneID(id int) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguageID(id))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Language.
func (c *LanguageClient) Delete() *LanguageDelete {
	mutation := newLanguageMutation(c.config, OpDelete)
	return &LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LanguageClient) DeleteOne(l *Language) *LanguageDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LanguageClient) DeleteOneID(id int) *LanguageDeleteOne {
	builder := c.Delete().Where(language.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LanguageDeleteOne{builder}
}

// Query returns a query builder for Language.
func (c *LanguageClient) Query() *LanguageQuery {
	return &LanguageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLanguage},
		inters: c.Interceptors(),
	}
}

// Get returns a Language entity by its id.
func (c *LanguageClient) Get(ctx context.Context, id int) (*Language, error) {
	return c.Query().Where(language.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LanguageClient) GetX(ctx context.Context, id int) *Language {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRaceSpeakers queries the race_speakers edge of a Language.
func (c *LanguageClient) QueryRaceSpeakers(l *Language) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, language.RaceSpeakersTable, language.RaceSpeakersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LanguageClient) Hooks() []Hook {
	return c.hooks.Language
}

// Interceptors returns the client interceptors.
func (c *LanguageClient) Interceptors() []Interceptor {
	return c.inters.Language
}

func (c *LanguageClient) mutate(ctx context.Context, m *LanguageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Language mutation op: %q", m.Op())
	}
}

// MagicSchoolClient is a client for the MagicSchool schema.
type MagicSchoolClient struct {
	config
}

// NewMagicSchoolClient returns a client for the MagicSchool from the given config.
func NewMagicSchoolClient(c config) *MagicSchoolClient {
	return &MagicSchoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `magicschool.Hooks(f(g(h())))`.
func (c *MagicSchoolClient) Use(hooks ...Hook) {
	c.hooks.MagicSchool = append(c.hooks.MagicSchool, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `magicschool.Intercept(f(g(h())))`.
func (c *MagicSchoolClient) Intercept(interceptors ...Interceptor) {
	c.inters.MagicSchool = append(c.inters.MagicSchool, interceptors...)
}

// Create returns a builder for creating a MagicSchool entity.
func (c *MagicSchoolClient) Create() *MagicSchoolCreate {
	mutation := newMagicSchoolMutation(c.config, OpCreate)
	return &MagicSchoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MagicSchool entities.
func (c *MagicSchoolClient) CreateBulk(builders ...*MagicSchoolCreate) *MagicSchoolCreateBulk {
	return &MagicSchoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MagicSchool.
func (c *MagicSchoolClient) Update() *MagicSchoolUpdate {
	mutation := newMagicSchoolMutation(c.config, OpUpdate)
	return &MagicSchoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MagicSchoolClient) UpdateOne(ms *MagicSchool) *MagicSchoolUpdateOne {
	mutation := newMagicSchoolMutation(c.config, OpUpdateOne, withMagicSchool(ms))
	return &MagicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MagicSchoolClient) UpdateOneID(id int) *MagicSchoolUpdateOne {
	mutation := newMagicSchoolMutation(c.config, OpUpdateOne, withMagicSchoolID(id))
	return &MagicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MagicSchool.
func (c *MagicSchoolClient) Delete() *MagicSchoolDelete {
	mutation := newMagicSchoolMutation(c.config, OpDelete)
	return &MagicSchoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MagicSchoolClient) DeleteOne(ms *MagicSchool) *MagicSchoolDeleteOne {
	return c.DeleteOneID(ms.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MagicSchoolClient) DeleteOneID(id int) *MagicSchoolDeleteOne {
	builder := c.Delete().Where(magicschool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MagicSchoolDeleteOne{builder}
}

// Query returns a query builder for MagicSchool.
func (c *MagicSchoolClient) Query() *MagicSchoolQuery {
	return &MagicSchoolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMagicSchool},
		inters: c.Interceptors(),
	}
}

// Get returns a MagicSchool entity by its id.
func (c *MagicSchoolClient) Get(ctx context.Context, id int) (*MagicSchool, error) {
	return c.Query().Where(magicschool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MagicSchoolClient) GetX(ctx context.Context, id int) *MagicSchool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MagicSchoolClient) Hooks() []Hook {
	return c.hooks.MagicSchool
}

// Interceptors returns the client interceptors.
func (c *MagicSchoolClient) Interceptors() []Interceptor {
	return c.inters.MagicSchool
}

func (c *MagicSchoolClient) mutate(ctx context.Context, m *MagicSchoolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MagicSchoolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MagicSchoolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MagicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MagicSchoolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MagicSchool mutation op: %q", m.Op())
	}
}

// ProficiencyClient is a client for the Proficiency schema.
type ProficiencyClient struct {
	config
}

// NewProficiencyClient returns a client for the Proficiency from the given config.
func NewProficiencyClient(c config) *ProficiencyClient {
	return &ProficiencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `proficiency.Hooks(f(g(h())))`.
func (c *ProficiencyClient) Use(hooks ...Hook) {
	c.hooks.Proficiency = append(c.hooks.Proficiency, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `proficiency.Intercept(f(g(h())))`.
func (c *ProficiencyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Proficiency = append(c.inters.Proficiency, interceptors...)
}

// Create returns a builder for creating a Proficiency entity.
func (c *ProficiencyClient) Create() *ProficiencyCreate {
	mutation := newProficiencyMutation(c.config, OpCreate)
	return &ProficiencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Proficiency entities.
func (c *ProficiencyClient) CreateBulk(builders ...*ProficiencyCreate) *ProficiencyCreateBulk {
	return &ProficiencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Proficiency.
func (c *ProficiencyClient) Update() *ProficiencyUpdate {
	mutation := newProficiencyMutation(c.config, OpUpdate)
	return &ProficiencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProficiencyClient) UpdateOne(pr *Proficiency) *ProficiencyUpdateOne {
	mutation := newProficiencyMutation(c.config, OpUpdateOne, withProficiency(pr))
	return &ProficiencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProficiencyClient) UpdateOneID(id int) *ProficiencyUpdateOne {
	mutation := newProficiencyMutation(c.config, OpUpdateOne, withProficiencyID(id))
	return &ProficiencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Proficiency.
func (c *ProficiencyClient) Delete() *ProficiencyDelete {
	mutation := newProficiencyMutation(c.config, OpDelete)
	return &ProficiencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProficiencyClient) DeleteOne(pr *Proficiency) *ProficiencyDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProficiencyClient) DeleteOneID(id int) *ProficiencyDeleteOne {
	builder := c.Delete().Where(proficiency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProficiencyDeleteOne{builder}
}

// Query returns a query builder for Proficiency.
func (c *ProficiencyClient) Query() *ProficiencyQuery {
	return &ProficiencyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProficiency},
		inters: c.Interceptors(),
	}
}

// Get returns a Proficiency entity by its id.
func (c *ProficiencyClient) Get(ctx context.Context, id int) (*Proficiency, error) {
	return c.Query().Where(proficiency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProficiencyClient) GetX(ctx context.Context, id int) *Proficiency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClasses queries the classes edge of a Proficiency.
func (c *ProficiencyClient) QueryClasses(pr *Proficiency) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiency.Table, proficiency.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, proficiency.ClassesTable, proficiency.ClassesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRaces queries the races edge of a Proficiency.
func (c *ProficiencyClient) QueryRaces(pr *Proficiency) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiency.Table, proficiency.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, proficiency.RacesTable, proficiency.RacesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubraces queries the subraces edge of a Proficiency.
func (c *ProficiencyClient) QuerySubraces(pr *Proficiency) *SubraceQuery {
	query := (&SubraceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiency.Table, proficiency.FieldID, id),
			sqlgraph.To(subrace.Table, subrace.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, proficiency.SubracesTable, proficiency.SubracesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChoice queries the choice edge of a Proficiency.
func (c *ProficiencyClient) QueryChoice(pr *Proficiency) *ChoiceQuery {
	query := (&ChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiency.Table, proficiency.FieldID, id),
			sqlgraph.To(choice.Table, choice.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, proficiency.ChoiceTable, proficiency.ChoicePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySkill queries the skill edge of a Proficiency.
func (c *ProficiencyClient) QuerySkill(pr *Proficiency) *SkillQuery {
	query := (&SkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiency.Table, proficiency.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, proficiency.SkillTable, proficiency.SkillColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a Proficiency.
func (c *ProficiencyClient) QueryEquipment(pr *Proficiency) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiency.Table, proficiency.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, proficiency.EquipmentTable, proficiency.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySavingThrow queries the saving_throw edge of a Proficiency.
func (c *ProficiencyClient) QuerySavingThrow(pr *Proficiency) *AbilityScoreQuery {
	query := (&AbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiency.Table, proficiency.FieldID, id),
			sqlgraph.To(abilityscore.Table, abilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, proficiency.SavingThrowTable, proficiency.SavingThrowColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProficiencyClient) Hooks() []Hook {
	return c.hooks.Proficiency
}

// Interceptors returns the client interceptors.
func (c *ProficiencyClient) Interceptors() []Interceptor {
	return c.inters.Proficiency
}

func (c *ProficiencyClient) mutate(ctx context.Context, m *ProficiencyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProficiencyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProficiencyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProficiencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProficiencyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Proficiency mutation op: %q", m.Op())
	}
}

// RaceClient is a client for the Race schema.
type RaceClient struct {
	config
}

// NewRaceClient returns a client for the Race from the given config.
func NewRaceClient(c config) *RaceClient {
	return &RaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `race.Hooks(f(g(h())))`.
func (c *RaceClient) Use(hooks ...Hook) {
	c.hooks.Race = append(c.hooks.Race, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `race.Intercept(f(g(h())))`.
func (c *RaceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Race = append(c.inters.Race, interceptors...)
}

// Create returns a builder for creating a Race entity.
func (c *RaceClient) Create() *RaceCreate {
	mutation := newRaceMutation(c.config, OpCreate)
	return &RaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Race entities.
func (c *RaceClient) CreateBulk(builders ...*RaceCreate) *RaceCreateBulk {
	return &RaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Race.
func (c *RaceClient) Update() *RaceUpdate {
	mutation := newRaceMutation(c.config, OpUpdate)
	return &RaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RaceClient) UpdateOne(r *Race) *RaceUpdateOne {
	mutation := newRaceMutation(c.config, OpUpdateOne, withRace(r))
	return &RaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RaceClient) UpdateOneID(id int) *RaceUpdateOne {
	mutation := newRaceMutation(c.config, OpUpdateOne, withRaceID(id))
	return &RaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Race.
func (c *RaceClient) Delete() *RaceDelete {
	mutation := newRaceMutation(c.config, OpDelete)
	return &RaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RaceClient) DeleteOne(r *Race) *RaceDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RaceClient) DeleteOneID(id int) *RaceDeleteOne {
	builder := c.Delete().Where(race.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RaceDeleteOne{builder}
}

// Query returns a query builder for Race.
func (c *RaceClient) Query() *RaceQuery {
	return &RaceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRace},
		inters: c.Interceptors(),
	}
}

// Get returns a Race entity by its id.
func (c *RaceClient) Get(ctx context.Context, id int) (*Race, error) {
	return c.Query().Where(race.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RaceClient) GetX(ctx context.Context, id int) *Race {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLanguages queries the languages edge of a Race.
func (c *RaceClient) QueryLanguages(r *Race) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, race.LanguagesTable, race.LanguagesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProficiencies queries the proficiencies edge of a Race.
func (c *RaceClient) QueryProficiencies(r *Race) *ProficiencyQuery {
	query := (&ProficiencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(proficiency.Table, proficiency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, race.ProficienciesTable, race.ProficienciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubrace queries the subrace edge of a Race.
func (c *RaceClient) QuerySubrace(r *Race) *SubraceQuery {
	query := (&SubraceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(subrace.Table, subrace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, race.SubraceTable, race.SubraceColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTraits queries the traits edge of a Race.
func (c *RaceClient) QueryTraits(r *Race) *TraitQuery {
	query := (&TraitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(trait.Table, trait.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, race.TraitsTable, race.TraitsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAbilityBonuses queries the ability_bonuses edge of a Race.
func (c *RaceClient) QueryAbilityBonuses(r *Race) *AbilityBonusQuery {
	query := (&AbilityBonusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(abilitybonus.Table, abilitybonus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, race.AbilityBonusesTable, race.AbilityBonusesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStartingProficiencyOptions queries the starting_proficiency_options edge of a Race.
func (c *RaceClient) QueryStartingProficiencyOptions(r *Race) *ChoiceQuery {
	query := (&ChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(choice.Table, choice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, race.StartingProficiencyOptionsTable, race.StartingProficiencyOptionsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RaceClient) Hooks() []Hook {
	return c.hooks.Race
}

// Interceptors returns the client interceptors.
func (c *RaceClient) Interceptors() []Interceptor {
	return c.inters.Race
}

func (c *RaceClient) mutate(ctx context.Context, m *RaceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RaceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RaceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RaceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Race mutation op: %q", m.Op())
	}
}

// RuleClient is a client for the Rule schema.
type RuleClient struct {
	config
}

// NewRuleClient returns a client for the Rule from the given config.
func NewRuleClient(c config) *RuleClient {
	return &RuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rule.Hooks(f(g(h())))`.
func (c *RuleClient) Use(hooks ...Hook) {
	c.hooks.Rule = append(c.hooks.Rule, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rule.Intercept(f(g(h())))`.
func (c *RuleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rule = append(c.inters.Rule, interceptors...)
}

// Create returns a builder for creating a Rule entity.
func (c *RuleClient) Create() *RuleCreate {
	mutation := newRuleMutation(c.config, OpCreate)
	return &RuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rule entities.
func (c *RuleClient) CreateBulk(builders ...*RuleCreate) *RuleCreateBulk {
	return &RuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rule.
func (c *RuleClient) Update() *RuleUpdate {
	mutation := newRuleMutation(c.config, OpUpdate)
	return &RuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RuleClient) UpdateOne(r *Rule) *RuleUpdateOne {
	mutation := newRuleMutation(c.config, OpUpdateOne, withRule(r))
	return &RuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RuleClient) UpdateOneID(id int) *RuleUpdateOne {
	mutation := newRuleMutation(c.config, OpUpdateOne, withRuleID(id))
	return &RuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rule.
func (c *RuleClient) Delete() *RuleDelete {
	mutation := newRuleMutation(c.config, OpDelete)
	return &RuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RuleClient) DeleteOne(r *Rule) *RuleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RuleClient) DeleteOneID(id int) *RuleDeleteOne {
	builder := c.Delete().Where(rule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RuleDeleteOne{builder}
}

// Query returns a query builder for Rule.
func (c *RuleClient) Query() *RuleQuery {
	return &RuleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRule},
		inters: c.Interceptors(),
	}
}

// Get returns a Rule entity by its id.
func (c *RuleClient) Get(ctx context.Context, id int) (*Rule, error) {
	return c.Query().Where(rule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RuleClient) GetX(ctx context.Context, id int) *Rule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRuleSections queries the rule_sections edge of a Rule.
func (c *RuleClient) QueryRuleSections(r *Rule) *RuleSectionQuery {
	query := (&RuleSectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rule.Table, rule.FieldID, id),
			sqlgraph.To(rulesection.Table, rulesection.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rule.RuleSectionsTable, rule.RuleSectionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RuleClient) Hooks() []Hook {
	return c.hooks.Rule
}

// Interceptors returns the client interceptors.
func (c *RuleClient) Interceptors() []Interceptor {
	return c.inters.Rule
}

func (c *RuleClient) mutate(ctx context.Context, m *RuleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RuleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RuleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RuleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rule mutation op: %q", m.Op())
	}
}

// RuleSectionClient is a client for the RuleSection schema.
type RuleSectionClient struct {
	config
}

// NewRuleSectionClient returns a client for the RuleSection from the given config.
func NewRuleSectionClient(c config) *RuleSectionClient {
	return &RuleSectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rulesection.Hooks(f(g(h())))`.
func (c *RuleSectionClient) Use(hooks ...Hook) {
	c.hooks.RuleSection = append(c.hooks.RuleSection, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rulesection.Intercept(f(g(h())))`.
func (c *RuleSectionClient) Intercept(interceptors ...Interceptor) {
	c.inters.RuleSection = append(c.inters.RuleSection, interceptors...)
}

// Create returns a builder for creating a RuleSection entity.
func (c *RuleSectionClient) Create() *RuleSectionCreate {
	mutation := newRuleSectionMutation(c.config, OpCreate)
	return &RuleSectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RuleSection entities.
func (c *RuleSectionClient) CreateBulk(builders ...*RuleSectionCreate) *RuleSectionCreateBulk {
	return &RuleSectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RuleSection.
func (c *RuleSectionClient) Update() *RuleSectionUpdate {
	mutation := newRuleSectionMutation(c.config, OpUpdate)
	return &RuleSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RuleSectionClient) UpdateOne(rs *RuleSection) *RuleSectionUpdateOne {
	mutation := newRuleSectionMutation(c.config, OpUpdateOne, withRuleSection(rs))
	return &RuleSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RuleSectionClient) UpdateOneID(id int) *RuleSectionUpdateOne {
	mutation := newRuleSectionMutation(c.config, OpUpdateOne, withRuleSectionID(id))
	return &RuleSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RuleSection.
func (c *RuleSectionClient) Delete() *RuleSectionDelete {
	mutation := newRuleSectionMutation(c.config, OpDelete)
	return &RuleSectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RuleSectionClient) DeleteOne(rs *RuleSection) *RuleSectionDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RuleSectionClient) DeleteOneID(id int) *RuleSectionDeleteOne {
	builder := c.Delete().Where(rulesection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RuleSectionDeleteOne{builder}
}

// Query returns a query builder for RuleSection.
func (c *RuleSectionClient) Query() *RuleSectionQuery {
	return &RuleSectionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRuleSection},
		inters: c.Interceptors(),
	}
}

// Get returns a RuleSection entity by its id.
func (c *RuleSectionClient) Get(ctx context.Context, id int) (*RuleSection, error) {
	return c.Query().Where(rulesection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RuleSectionClient) GetX(ctx context.Context, id int) *RuleSection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRules queries the rules edge of a RuleSection.
func (c *RuleSectionClient) QueryRules(rs *RuleSection) *RuleQuery {
	query := (&RuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rulesection.Table, rulesection.FieldID, id),
			sqlgraph.To(rule.Table, rule.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rulesection.RulesTable, rulesection.RulesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RuleSectionClient) Hooks() []Hook {
	return c.hooks.RuleSection
}

// Interceptors returns the client interceptors.
func (c *RuleSectionClient) Interceptors() []Interceptor {
	return c.inters.RuleSection
}

func (c *RuleSectionClient) mutate(ctx context.Context, m *RuleSectionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RuleSectionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RuleSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RuleSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RuleSectionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RuleSection mutation op: %q", m.Op())
	}
}

// SkillClient is a client for the Skill schema.
type SkillClient struct {
	config
}

// NewSkillClient returns a client for the Skill from the given config.
func NewSkillClient(c config) *SkillClient {
	return &SkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skill.Hooks(f(g(h())))`.
func (c *SkillClient) Use(hooks ...Hook) {
	c.hooks.Skill = append(c.hooks.Skill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `skill.Intercept(f(g(h())))`.
func (c *SkillClient) Intercept(interceptors ...Interceptor) {
	c.inters.Skill = append(c.inters.Skill, interceptors...)
}

// Create returns a builder for creating a Skill entity.
func (c *SkillClient) Create() *SkillCreate {
	mutation := newSkillMutation(c.config, OpCreate)
	return &SkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Skill entities.
func (c *SkillClient) CreateBulk(builders ...*SkillCreate) *SkillCreateBulk {
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Skill.
func (c *SkillClient) Update() *SkillUpdate {
	mutation := newSkillMutation(c.config, OpUpdate)
	return &SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillClient) UpdateOne(s *Skill) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkill(s))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillClient) UpdateOneID(id int) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkillID(id))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Skill.
func (c *SkillClient) Delete() *SkillDelete {
	mutation := newSkillMutation(c.config, OpDelete)
	return &SkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SkillClient) DeleteOne(s *Skill) *SkillDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SkillClient) DeleteOneID(id int) *SkillDeleteOne {
	builder := c.Delete().Where(skill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillDeleteOne{builder}
}

// Query returns a query builder for Skill.
func (c *SkillClient) Query() *SkillQuery {
	return &SkillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSkill},
		inters: c.Interceptors(),
	}
}

// Get returns a Skill entity by its id.
func (c *SkillClient) Get(ctx context.Context, id int) (*Skill, error) {
	return c.Query().Where(skill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillClient) GetX(ctx context.Context, id int) *Skill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAbilityScore queries the ability_score edge of a Skill.
func (c *SkillClient) QueryAbilityScore(s *Skill) *AbilityScoreQuery {
	query := (&AbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(abilityscore.Table, abilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, skill.AbilityScoreTable, skill.AbilityScoreColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkillClient) Hooks() []Hook {
	return c.hooks.Skill
}

// Interceptors returns the client interceptors.
func (c *SkillClient) Interceptors() []Interceptor {
	return c.inters.Skill
}

func (c *SkillClient) mutate(ctx context.Context, m *SkillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SkillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SkillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Skill mutation op: %q", m.Op())
	}
}

// StartingEquipmentClient is a client for the StartingEquipment schema.
type StartingEquipmentClient struct {
	config
}

// NewStartingEquipmentClient returns a client for the StartingEquipment from the given config.
func NewStartingEquipmentClient(c config) *StartingEquipmentClient {
	return &StartingEquipmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `startingequipment.Hooks(f(g(h())))`.
func (c *StartingEquipmentClient) Use(hooks ...Hook) {
	c.hooks.StartingEquipment = append(c.hooks.StartingEquipment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `startingequipment.Intercept(f(g(h())))`.
func (c *StartingEquipmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.StartingEquipment = append(c.inters.StartingEquipment, interceptors...)
}

// Create returns a builder for creating a StartingEquipment entity.
func (c *StartingEquipmentClient) Create() *StartingEquipmentCreate {
	mutation := newStartingEquipmentMutation(c.config, OpCreate)
	return &StartingEquipmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StartingEquipment entities.
func (c *StartingEquipmentClient) CreateBulk(builders ...*StartingEquipmentCreate) *StartingEquipmentCreateBulk {
	return &StartingEquipmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StartingEquipment.
func (c *StartingEquipmentClient) Update() *StartingEquipmentUpdate {
	mutation := newStartingEquipmentMutation(c.config, OpUpdate)
	return &StartingEquipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StartingEquipmentClient) UpdateOne(se *StartingEquipment) *StartingEquipmentUpdateOne {
	mutation := newStartingEquipmentMutation(c.config, OpUpdateOne)
	mutation.class = &se.ClassID
	mutation.equipment = &se.EquipmentID
	return &StartingEquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StartingEquipment.
func (c *StartingEquipmentClient) Delete() *StartingEquipmentDelete {
	mutation := newStartingEquipmentMutation(c.config, OpDelete)
	return &StartingEquipmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for StartingEquipment.
func (c *StartingEquipmentClient) Query() *StartingEquipmentQuery {
	return &StartingEquipmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStartingEquipment},
		inters: c.Interceptors(),
	}
}

// QueryClass queries the class edge of a StartingEquipment.
func (c *StartingEquipmentClient) QueryClass(se *StartingEquipment) *ClassQuery {
	return c.Query().
		Where(startingequipment.ClassID(se.ClassID), startingequipment.EquipmentID(se.EquipmentID)).
		QueryClass()
}

// QueryEquipment queries the equipment edge of a StartingEquipment.
func (c *StartingEquipmentClient) QueryEquipment(se *StartingEquipment) *EquipmentQuery {
	return c.Query().
		Where(startingequipment.ClassID(se.ClassID), startingequipment.EquipmentID(se.EquipmentID)).
		QueryEquipment()
}

// Hooks returns the client hooks.
func (c *StartingEquipmentClient) Hooks() []Hook {
	return c.hooks.StartingEquipment
}

// Interceptors returns the client interceptors.
func (c *StartingEquipmentClient) Interceptors() []Interceptor {
	return c.inters.StartingEquipment
}

func (c *StartingEquipmentClient) mutate(ctx context.Context, m *StartingEquipmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StartingEquipmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StartingEquipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StartingEquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StartingEquipmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StartingEquipment mutation op: %q", m.Op())
	}
}

// SubraceClient is a client for the Subrace schema.
type SubraceClient struct {
	config
}

// NewSubraceClient returns a client for the Subrace from the given config.
func NewSubraceClient(c config) *SubraceClient {
	return &SubraceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subrace.Hooks(f(g(h())))`.
func (c *SubraceClient) Use(hooks ...Hook) {
	c.hooks.Subrace = append(c.hooks.Subrace, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subrace.Intercept(f(g(h())))`.
func (c *SubraceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Subrace = append(c.inters.Subrace, interceptors...)
}

// Create returns a builder for creating a Subrace entity.
func (c *SubraceClient) Create() *SubraceCreate {
	mutation := newSubraceMutation(c.config, OpCreate)
	return &SubraceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subrace entities.
func (c *SubraceClient) CreateBulk(builders ...*SubraceCreate) *SubraceCreateBulk {
	return &SubraceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subrace.
func (c *SubraceClient) Update() *SubraceUpdate {
	mutation := newSubraceMutation(c.config, OpUpdate)
	return &SubraceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubraceClient) UpdateOne(s *Subrace) *SubraceUpdateOne {
	mutation := newSubraceMutation(c.config, OpUpdateOne, withSubrace(s))
	return &SubraceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubraceClient) UpdateOneID(id int) *SubraceUpdateOne {
	mutation := newSubraceMutation(c.config, OpUpdateOne, withSubraceID(id))
	return &SubraceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subrace.
func (c *SubraceClient) Delete() *SubraceDelete {
	mutation := newSubraceMutation(c.config, OpDelete)
	return &SubraceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubraceClient) DeleteOne(s *Subrace) *SubraceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubraceClient) DeleteOneID(id int) *SubraceDeleteOne {
	builder := c.Delete().Where(subrace.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubraceDeleteOne{builder}
}

// Query returns a query builder for Subrace.
func (c *SubraceClient) Query() *SubraceQuery {
	return &SubraceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubrace},
		inters: c.Interceptors(),
	}
}

// Get returns a Subrace entity by its id.
func (c *SubraceClient) Get(ctx context.Context, id int) (*Subrace, error) {
	return c.Query().Where(subrace.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubraceClient) GetX(ctx context.Context, id int) *Subrace {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRace queries the race edge of a Subrace.
func (c *SubraceClient) QueryRace(s *Subrace) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subrace.Table, subrace.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subrace.RaceTable, subrace.RaceColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProficiencies queries the proficiencies edge of a Subrace.
func (c *SubraceClient) QueryProficiencies(s *Subrace) *ProficiencyQuery {
	query := (&ProficiencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subrace.Table, subrace.FieldID, id),
			sqlgraph.To(proficiency.Table, proficiency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, subrace.ProficienciesTable, subrace.ProficienciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTraits queries the traits edge of a Subrace.
func (c *SubraceClient) QueryTraits(s *Subrace) *TraitQuery {
	query := (&TraitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subrace.Table, subrace.FieldID, id),
			sqlgraph.To(trait.Table, trait.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, subrace.TraitsTable, subrace.TraitsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAbilityBonuses queries the ability_bonuses edge of a Subrace.
func (c *SubraceClient) QueryAbilityBonuses(s *Subrace) *AbilityBonusQuery {
	query := (&AbilityBonusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subrace.Table, subrace.FieldID, id),
			sqlgraph.To(abilitybonus.Table, abilitybonus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subrace.AbilityBonusesTable, subrace.AbilityBonusesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubraceClient) Hooks() []Hook {
	return c.hooks.Subrace
}

// Interceptors returns the client interceptors.
func (c *SubraceClient) Interceptors() []Interceptor {
	return c.inters.Subrace
}

func (c *SubraceClient) mutate(ctx context.Context, m *SubraceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubraceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubraceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubraceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubraceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Subrace mutation op: %q", m.Op())
	}
}

// ToolClient is a client for the Tool schema.
type ToolClient struct {
	config
}

// NewToolClient returns a client for the Tool from the given config.
func NewToolClient(c config) *ToolClient {
	return &ToolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tool.Hooks(f(g(h())))`.
func (c *ToolClient) Use(hooks ...Hook) {
	c.hooks.Tool = append(c.hooks.Tool, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tool.Intercept(f(g(h())))`.
func (c *ToolClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tool = append(c.inters.Tool, interceptors...)
}

// Create returns a builder for creating a Tool entity.
func (c *ToolClient) Create() *ToolCreate {
	mutation := newToolMutation(c.config, OpCreate)
	return &ToolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tool entities.
func (c *ToolClient) CreateBulk(builders ...*ToolCreate) *ToolCreateBulk {
	return &ToolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tool.
func (c *ToolClient) Update() *ToolUpdate {
	mutation := newToolMutation(c.config, OpUpdate)
	return &ToolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ToolClient) UpdateOne(t *Tool) *ToolUpdateOne {
	mutation := newToolMutation(c.config, OpUpdateOne, withTool(t))
	return &ToolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ToolClient) UpdateOneID(id int) *ToolUpdateOne {
	mutation := newToolMutation(c.config, OpUpdateOne, withToolID(id))
	return &ToolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tool.
func (c *ToolClient) Delete() *ToolDelete {
	mutation := newToolMutation(c.config, OpDelete)
	return &ToolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ToolClient) DeleteOne(t *Tool) *ToolDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ToolClient) DeleteOneID(id int) *ToolDeleteOne {
	builder := c.Delete().Where(tool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ToolDeleteOne{builder}
}

// Query returns a query builder for Tool.
func (c *ToolClient) Query() *ToolQuery {
	return &ToolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTool},
		inters: c.Interceptors(),
	}
}

// Get returns a Tool entity by its id.
func (c *ToolClient) Get(ctx context.Context, id int) (*Tool, error) {
	return c.Query().Where(tool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ToolClient) GetX(ctx context.Context, id int) *Tool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a Tool.
func (c *ToolClient) QueryEquipment(t *Tool) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tool.Table, tool.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, tool.EquipmentTable, tool.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ToolClient) Hooks() []Hook {
	return c.hooks.Tool
}

// Interceptors returns the client interceptors.
func (c *ToolClient) Interceptors() []Interceptor {
	return c.inters.Tool
}

func (c *ToolClient) mutate(ctx context.Context, m *ToolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ToolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ToolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ToolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ToolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tool mutation op: %q", m.Op())
	}
}

// TraitClient is a client for the Trait schema.
type TraitClient struct {
	config
}

// NewTraitClient returns a client for the Trait from the given config.
func NewTraitClient(c config) *TraitClient {
	return &TraitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trait.Hooks(f(g(h())))`.
func (c *TraitClient) Use(hooks ...Hook) {
	c.hooks.Trait = append(c.hooks.Trait, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `trait.Intercept(f(g(h())))`.
func (c *TraitClient) Intercept(interceptors ...Interceptor) {
	c.inters.Trait = append(c.inters.Trait, interceptors...)
}

// Create returns a builder for creating a Trait entity.
func (c *TraitClient) Create() *TraitCreate {
	mutation := newTraitMutation(c.config, OpCreate)
	return &TraitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Trait entities.
func (c *TraitClient) CreateBulk(builders ...*TraitCreate) *TraitCreateBulk {
	return &TraitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Trait.
func (c *TraitClient) Update() *TraitUpdate {
	mutation := newTraitMutation(c.config, OpUpdate)
	return &TraitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TraitClient) UpdateOne(t *Trait) *TraitUpdateOne {
	mutation := newTraitMutation(c.config, OpUpdateOne, withTrait(t))
	return &TraitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TraitClient) UpdateOneID(id int) *TraitUpdateOne {
	mutation := newTraitMutation(c.config, OpUpdateOne, withTraitID(id))
	return &TraitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Trait.
func (c *TraitClient) Delete() *TraitDelete {
	mutation := newTraitMutation(c.config, OpDelete)
	return &TraitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TraitClient) DeleteOne(t *Trait) *TraitDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TraitClient) DeleteOneID(id int) *TraitDeleteOne {
	builder := c.Delete().Where(trait.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TraitDeleteOne{builder}
}

// Query returns a query builder for Trait.
func (c *TraitClient) Query() *TraitQuery {
	return &TraitQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTrait},
		inters: c.Interceptors(),
	}
}

// Get returns a Trait entity by its id.
func (c *TraitClient) Get(ctx context.Context, id int) (*Trait, error) {
	return c.Query().Where(trait.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TraitClient) GetX(ctx context.Context, id int) *Trait {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRaces queries the races edge of a Trait.
func (c *TraitClient) QueryRaces(t *Trait) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trait.Table, trait.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, trait.RacesTable, trait.RacesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubraces queries the subraces edge of a Trait.
func (c *TraitClient) QuerySubraces(t *Trait) *SubraceQuery {
	query := (&SubraceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trait.Table, trait.FieldID, id),
			sqlgraph.To(subrace.Table, subrace.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, trait.SubracesTable, trait.SubracesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TraitClient) Hooks() []Hook {
	return c.hooks.Trait
}

// Interceptors returns the client interceptors.
func (c *TraitClient) Interceptors() []Interceptor {
	return c.inters.Trait
}

func (c *TraitClient) mutate(ctx context.Context, m *TraitMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TraitCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TraitUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TraitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TraitDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Trait mutation op: %q", m.Op())
	}
}

// VehicleClient is a client for the Vehicle schema.
type VehicleClient struct {
	config
}

// NewVehicleClient returns a client for the Vehicle from the given config.
func NewVehicleClient(c config) *VehicleClient {
	return &VehicleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vehicle.Hooks(f(g(h())))`.
func (c *VehicleClient) Use(hooks ...Hook) {
	c.hooks.Vehicle = append(c.hooks.Vehicle, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vehicle.Intercept(f(g(h())))`.
func (c *VehicleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Vehicle = append(c.inters.Vehicle, interceptors...)
}

// Create returns a builder for creating a Vehicle entity.
func (c *VehicleClient) Create() *VehicleCreate {
	mutation := newVehicleMutation(c.config, OpCreate)
	return &VehicleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vehicle entities.
func (c *VehicleClient) CreateBulk(builders ...*VehicleCreate) *VehicleCreateBulk {
	return &VehicleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vehicle.
func (c *VehicleClient) Update() *VehicleUpdate {
	mutation := newVehicleMutation(c.config, OpUpdate)
	return &VehicleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VehicleClient) UpdateOne(v *Vehicle) *VehicleUpdateOne {
	mutation := newVehicleMutation(c.config, OpUpdateOne, withVehicle(v))
	return &VehicleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VehicleClient) UpdateOneID(id int) *VehicleUpdateOne {
	mutation := newVehicleMutation(c.config, OpUpdateOne, withVehicleID(id))
	return &VehicleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vehicle.
func (c *VehicleClient) Delete() *VehicleDelete {
	mutation := newVehicleMutation(c.config, OpDelete)
	return &VehicleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VehicleClient) DeleteOne(v *Vehicle) *VehicleDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VehicleClient) DeleteOneID(id int) *VehicleDeleteOne {
	builder := c.Delete().Where(vehicle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VehicleDeleteOne{builder}
}

// Query returns a query builder for Vehicle.
func (c *VehicleClient) Query() *VehicleQuery {
	return &VehicleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVehicle},
		inters: c.Interceptors(),
	}
}

// Get returns a Vehicle entity by its id.
func (c *VehicleClient) Get(ctx context.Context, id int) (*Vehicle, error) {
	return c.Query().Where(vehicle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VehicleClient) GetX(ctx context.Context, id int) *Vehicle {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a Vehicle.
func (c *VehicleClient) QueryEquipment(v *Vehicle) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicle.Table, vehicle.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, vehicle.EquipmentTable, vehicle.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VehicleClient) Hooks() []Hook {
	return c.hooks.Vehicle
}

// Interceptors returns the client interceptors.
func (c *VehicleClient) Interceptors() []Interceptor {
	return c.inters.Vehicle
}

func (c *VehicleClient) mutate(ctx context.Context, m *VehicleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VehicleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VehicleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VehicleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VehicleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Vehicle mutation op: %q", m.Op())
	}
}

// WeaponClient is a client for the Weapon schema.
type WeaponClient struct {
	config
}

// NewWeaponClient returns a client for the Weapon from the given config.
func NewWeaponClient(c config) *WeaponClient {
	return &WeaponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `weapon.Hooks(f(g(h())))`.
func (c *WeaponClient) Use(hooks ...Hook) {
	c.hooks.Weapon = append(c.hooks.Weapon, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `weapon.Intercept(f(g(h())))`.
func (c *WeaponClient) Intercept(interceptors ...Interceptor) {
	c.inters.Weapon = append(c.inters.Weapon, interceptors...)
}

// Create returns a builder for creating a Weapon entity.
func (c *WeaponClient) Create() *WeaponCreate {
	mutation := newWeaponMutation(c.config, OpCreate)
	return &WeaponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Weapon entities.
func (c *WeaponClient) CreateBulk(builders ...*WeaponCreate) *WeaponCreateBulk {
	return &WeaponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Weapon.
func (c *WeaponClient) Update() *WeaponUpdate {
	mutation := newWeaponMutation(c.config, OpUpdate)
	return &WeaponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WeaponClient) UpdateOne(w *Weapon) *WeaponUpdateOne {
	mutation := newWeaponMutation(c.config, OpUpdateOne, withWeapon(w))
	return &WeaponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WeaponClient) UpdateOneID(id int) *WeaponUpdateOne {
	mutation := newWeaponMutation(c.config, OpUpdateOne, withWeaponID(id))
	return &WeaponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Weapon.
func (c *WeaponClient) Delete() *WeaponDelete {
	mutation := newWeaponMutation(c.config, OpDelete)
	return &WeaponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WeaponClient) DeleteOne(w *Weapon) *WeaponDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WeaponClient) DeleteOneID(id int) *WeaponDeleteOne {
	builder := c.Delete().Where(weapon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WeaponDeleteOne{builder}
}

// Query returns a query builder for Weapon.
func (c *WeaponClient) Query() *WeaponQuery {
	return &WeaponQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWeapon},
		inters: c.Interceptors(),
	}
}

// Get returns a Weapon entity by its id.
func (c *WeaponClient) Get(ctx context.Context, id int) (*Weapon, error) {
	return c.Query().Where(weapon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WeaponClient) GetX(ctx context.Context, id int) *Weapon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a Weapon.
func (c *WeaponClient) QueryEquipment(w *Weapon) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(weapon.Table, weapon.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, weapon.EquipmentTable, weapon.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWeaponDamage queries the weapon_damage edge of a Weapon.
func (c *WeaponClient) QueryWeaponDamage(w *Weapon) *WeaponDamageQuery {
	query := (&WeaponDamageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(weapon.Table, weapon.FieldID, id),
			sqlgraph.To(weapondamage.Table, weapondamage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, weapon.WeaponDamageTable, weapon.WeaponDamageColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWeaponProperties queries the weapon_properties edge of a Weapon.
func (c *WeaponClient) QueryWeaponProperties(w *Weapon) *WeaponPropertyQuery {
	query := (&WeaponPropertyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(weapon.Table, weapon.FieldID, id),
			sqlgraph.To(weaponproperty.Table, weaponproperty.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, weapon.WeaponPropertiesTable, weapon.WeaponPropertiesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WeaponClient) Hooks() []Hook {
	return c.hooks.Weapon
}

// Interceptors returns the client interceptors.
func (c *WeaponClient) Interceptors() []Interceptor {
	return c.inters.Weapon
}

func (c *WeaponClient) mutate(ctx context.Context, m *WeaponMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WeaponCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WeaponUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WeaponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WeaponDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Weapon mutation op: %q", m.Op())
	}
}

// WeaponDamageClient is a client for the WeaponDamage schema.
type WeaponDamageClient struct {
	config
}

// NewWeaponDamageClient returns a client for the WeaponDamage from the given config.
func NewWeaponDamageClient(c config) *WeaponDamageClient {
	return &WeaponDamageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `weapondamage.Hooks(f(g(h())))`.
func (c *WeaponDamageClient) Use(hooks ...Hook) {
	c.hooks.WeaponDamage = append(c.hooks.WeaponDamage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `weapondamage.Intercept(f(g(h())))`.
func (c *WeaponDamageClient) Intercept(interceptors ...Interceptor) {
	c.inters.WeaponDamage = append(c.inters.WeaponDamage, interceptors...)
}

// Create returns a builder for creating a WeaponDamage entity.
func (c *WeaponDamageClient) Create() *WeaponDamageCreate {
	mutation := newWeaponDamageMutation(c.config, OpCreate)
	return &WeaponDamageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WeaponDamage entities.
func (c *WeaponDamageClient) CreateBulk(builders ...*WeaponDamageCreate) *WeaponDamageCreateBulk {
	return &WeaponDamageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WeaponDamage.
func (c *WeaponDamageClient) Update() *WeaponDamageUpdate {
	mutation := newWeaponDamageMutation(c.config, OpUpdate)
	return &WeaponDamageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WeaponDamageClient) UpdateOne(wd *WeaponDamage) *WeaponDamageUpdateOne {
	mutation := newWeaponDamageMutation(c.config, OpUpdateOne, withWeaponDamage(wd))
	return &WeaponDamageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WeaponDamageClient) UpdateOneID(id int) *WeaponDamageUpdateOne {
	mutation := newWeaponDamageMutation(c.config, OpUpdateOne, withWeaponDamageID(id))
	return &WeaponDamageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WeaponDamage.
func (c *WeaponDamageClient) Delete() *WeaponDamageDelete {
	mutation := newWeaponDamageMutation(c.config, OpDelete)
	return &WeaponDamageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WeaponDamageClient) DeleteOne(wd *WeaponDamage) *WeaponDamageDeleteOne {
	return c.DeleteOneID(wd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WeaponDamageClient) DeleteOneID(id int) *WeaponDamageDeleteOne {
	builder := c.Delete().Where(weapondamage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WeaponDamageDeleteOne{builder}
}

// Query returns a query builder for WeaponDamage.
func (c *WeaponDamageClient) Query() *WeaponDamageQuery {
	return &WeaponDamageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWeaponDamage},
		inters: c.Interceptors(),
	}
}

// Get returns a WeaponDamage entity by its id.
func (c *WeaponDamageClient) Get(ctx context.Context, id int) (*WeaponDamage, error) {
	return c.Query().Where(weapondamage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WeaponDamageClient) GetX(ctx context.Context, id int) *WeaponDamage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWeapon queries the weapon edge of a WeaponDamage.
func (c *WeaponDamageClient) QueryWeapon(wd *WeaponDamage) *WeaponQuery {
	query := (&WeaponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(weapondamage.Table, weapondamage.FieldID, id),
			sqlgraph.To(weapon.Table, weapon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, weapondamage.WeaponTable, weapondamage.WeaponColumn),
		)
		fromV = sqlgraph.Neighbors(wd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDamageType queries the damage_type edge of a WeaponDamage.
func (c *WeaponDamageClient) QueryDamageType(wd *WeaponDamage) *DamageTypeQuery {
	query := (&DamageTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(weapondamage.Table, weapondamage.FieldID, id),
			sqlgraph.To(damagetype.Table, damagetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, weapondamage.DamageTypeTable, weapondamage.DamageTypeColumn),
		)
		fromV = sqlgraph.Neighbors(wd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WeaponDamageClient) Hooks() []Hook {
	return c.hooks.WeaponDamage
}

// Interceptors returns the client interceptors.
func (c *WeaponDamageClient) Interceptors() []Interceptor {
	return c.inters.WeaponDamage
}

func (c *WeaponDamageClient) mutate(ctx context.Context, m *WeaponDamageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WeaponDamageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WeaponDamageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WeaponDamageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WeaponDamageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WeaponDamage mutation op: %q", m.Op())
	}
}

// WeaponPropertyClient is a client for the WeaponProperty schema.
type WeaponPropertyClient struct {
	config
}

// NewWeaponPropertyClient returns a client for the WeaponProperty from the given config.
func NewWeaponPropertyClient(c config) *WeaponPropertyClient {
	return &WeaponPropertyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `weaponproperty.Hooks(f(g(h())))`.
func (c *WeaponPropertyClient) Use(hooks ...Hook) {
	c.hooks.WeaponProperty = append(c.hooks.WeaponProperty, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `weaponproperty.Intercept(f(g(h())))`.
func (c *WeaponPropertyClient) Intercept(interceptors ...Interceptor) {
	c.inters.WeaponProperty = append(c.inters.WeaponProperty, interceptors...)
}

// Create returns a builder for creating a WeaponProperty entity.
func (c *WeaponPropertyClient) Create() *WeaponPropertyCreate {
	mutation := newWeaponPropertyMutation(c.config, OpCreate)
	return &WeaponPropertyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WeaponProperty entities.
func (c *WeaponPropertyClient) CreateBulk(builders ...*WeaponPropertyCreate) *WeaponPropertyCreateBulk {
	return &WeaponPropertyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WeaponProperty.
func (c *WeaponPropertyClient) Update() *WeaponPropertyUpdate {
	mutation := newWeaponPropertyMutation(c.config, OpUpdate)
	return &WeaponPropertyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WeaponPropertyClient) UpdateOne(wp *WeaponProperty) *WeaponPropertyUpdateOne {
	mutation := newWeaponPropertyMutation(c.config, OpUpdateOne, withWeaponProperty(wp))
	return &WeaponPropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WeaponPropertyClient) UpdateOneID(id int) *WeaponPropertyUpdateOne {
	mutation := newWeaponPropertyMutation(c.config, OpUpdateOne, withWeaponPropertyID(id))
	return &WeaponPropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WeaponProperty.
func (c *WeaponPropertyClient) Delete() *WeaponPropertyDelete {
	mutation := newWeaponPropertyMutation(c.config, OpDelete)
	return &WeaponPropertyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WeaponPropertyClient) DeleteOne(wp *WeaponProperty) *WeaponPropertyDeleteOne {
	return c.DeleteOneID(wp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WeaponPropertyClient) DeleteOneID(id int) *WeaponPropertyDeleteOne {
	builder := c.Delete().Where(weaponproperty.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WeaponPropertyDeleteOne{builder}
}

// Query returns a query builder for WeaponProperty.
func (c *WeaponPropertyClient) Query() *WeaponPropertyQuery {
	return &WeaponPropertyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWeaponProperty},
		inters: c.Interceptors(),
	}
}

// Get returns a WeaponProperty entity by its id.
func (c *WeaponPropertyClient) Get(ctx context.Context, id int) (*WeaponProperty, error) {
	return c.Query().Where(weaponproperty.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WeaponPropertyClient) GetX(ctx context.Context, id int) *WeaponProperty {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWeapons queries the weapons edge of a WeaponProperty.
func (c *WeaponPropertyClient) QueryWeapons(wp *WeaponProperty) *WeaponQuery {
	query := (&WeaponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(weaponproperty.Table, weaponproperty.FieldID, id),
			sqlgraph.To(weapon.Table, weapon.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, weaponproperty.WeaponsTable, weaponproperty.WeaponsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(wp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WeaponPropertyClient) Hooks() []Hook {
	return c.hooks.WeaponProperty
}

// Interceptors returns the client interceptors.
func (c *WeaponPropertyClient) Interceptors() []Interceptor {
	return c.inters.WeaponProperty
}

func (c *WeaponPropertyClient) mutate(ctx context.Context, m *WeaponPropertyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WeaponPropertyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WeaponPropertyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WeaponPropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WeaponPropertyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WeaponProperty mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AbilityBonus, AbilityScore, Armor, ArmorClass, Choice, Class, Cost, DamageType,
		Equipment, EquipmentChoice, Gear, Language, MagicSchool, Proficiency, Race,
		Rule, RuleSection, Skill, StartingEquipment, Subrace, Tool, Trait, Vehicle,
		Weapon, WeaponDamage, WeaponProperty []ent.Hook
	}
	inters struct {
		AbilityBonus, AbilityScore, Armor, ArmorClass, Choice, Class, Cost, DamageType,
		Equipment, EquipmentChoice, Gear, Language, MagicSchool, Proficiency, Race,
		Rule, RuleSection, Skill, StartingEquipment, Subrace, Tool, Trait, Vehicle,
		Weapon, WeaponDamage, WeaponProperty []ent.Interceptor
	}
)
