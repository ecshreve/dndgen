// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/ecshreve/dndgen/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/abilitybonus"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/alignment"
	"github.com/ecshreve/dndgen/ent/armor"
	"github.com/ecshreve/dndgen/ent/character"
	"github.com/ecshreve/dndgen/ent/characterabilityscore"
	"github.com/ecshreve/dndgen/ent/characterproficiency"
	"github.com/ecshreve/dndgen/ent/characterskill"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/coin"
	"github.com/ecshreve/dndgen/ent/condition"
	"github.com/ecshreve/dndgen/ent/cost"
	"github.com/ecshreve/dndgen/ent/damagetype"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/equipmententry"
	"github.com/ecshreve/dndgen/ent/feat"
	"github.com/ecshreve/dndgen/ent/feature"
	"github.com/ecshreve/dndgen/ent/gear"
	"github.com/ecshreve/dndgen/ent/language"
	"github.com/ecshreve/dndgen/ent/languagechoice"
	"github.com/ecshreve/dndgen/ent/magicschool"
	"github.com/ecshreve/dndgen/ent/prerequisite"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/proficiencychoice"
	"github.com/ecshreve/dndgen/ent/property"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/rule"
	"github.com/ecshreve/dndgen/ent/rulesection"
	"github.com/ecshreve/dndgen/ent/skill"
	"github.com/ecshreve/dndgen/ent/tool"
	"github.com/ecshreve/dndgen/ent/trait"
	"github.com/ecshreve/dndgen/ent/vehicle"
	"github.com/ecshreve/dndgen/ent/weapon"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AbilityBonus is the client for interacting with the AbilityBonus builders.
	AbilityBonus *AbilityBonusClient
	// AbilityScore is the client for interacting with the AbilityScore builders.
	AbilityScore *AbilityScoreClient
	// Alignment is the client for interacting with the Alignment builders.
	Alignment *AlignmentClient
	// Armor is the client for interacting with the Armor builders.
	Armor *ArmorClient
	// Character is the client for interacting with the Character builders.
	Character *CharacterClient
	// CharacterAbilityScore is the client for interacting with the CharacterAbilityScore builders.
	CharacterAbilityScore *CharacterAbilityScoreClient
	// CharacterProficiency is the client for interacting with the CharacterProficiency builders.
	CharacterProficiency *CharacterProficiencyClient
	// CharacterSkill is the client for interacting with the CharacterSkill builders.
	CharacterSkill *CharacterSkillClient
	// Class is the client for interacting with the Class builders.
	Class *ClassClient
	// Coin is the client for interacting with the Coin builders.
	Coin *CoinClient
	// Condition is the client for interacting with the Condition builders.
	Condition *ConditionClient
	// Cost is the client for interacting with the Cost builders.
	Cost *CostClient
	// DamageType is the client for interacting with the DamageType builders.
	DamageType *DamageTypeClient
	// Equipment is the client for interacting with the Equipment builders.
	Equipment *EquipmentClient
	// EquipmentEntry is the client for interacting with the EquipmentEntry builders.
	EquipmentEntry *EquipmentEntryClient
	// Feat is the client for interacting with the Feat builders.
	Feat *FeatClient
	// Feature is the client for interacting with the Feature builders.
	Feature *FeatureClient
	// Gear is the client for interacting with the Gear builders.
	Gear *GearClient
	// Language is the client for interacting with the Language builders.
	Language *LanguageClient
	// LanguageChoice is the client for interacting with the LanguageChoice builders.
	LanguageChoice *LanguageChoiceClient
	// MagicSchool is the client for interacting with the MagicSchool builders.
	MagicSchool *MagicSchoolClient
	// Prerequisite is the client for interacting with the Prerequisite builders.
	Prerequisite *PrerequisiteClient
	// Proficiency is the client for interacting with the Proficiency builders.
	Proficiency *ProficiencyClient
	// ProficiencyChoice is the client for interacting with the ProficiencyChoice builders.
	ProficiencyChoice *ProficiencyChoiceClient
	// Property is the client for interacting with the Property builders.
	Property *PropertyClient
	// Race is the client for interacting with the Race builders.
	Race *RaceClient
	// Rule is the client for interacting with the Rule builders.
	Rule *RuleClient
	// RuleSection is the client for interacting with the RuleSection builders.
	RuleSection *RuleSectionClient
	// Skill is the client for interacting with the Skill builders.
	Skill *SkillClient
	// Tool is the client for interacting with the Tool builders.
	Tool *ToolClient
	// Trait is the client for interacting with the Trait builders.
	Trait *TraitClient
	// Vehicle is the client for interacting with the Vehicle builders.
	Vehicle *VehicleClient
	// Weapon is the client for interacting with the Weapon builders.
	Weapon *WeaponClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AbilityBonus = NewAbilityBonusClient(c.config)
	c.AbilityScore = NewAbilityScoreClient(c.config)
	c.Alignment = NewAlignmentClient(c.config)
	c.Armor = NewArmorClient(c.config)
	c.Character = NewCharacterClient(c.config)
	c.CharacterAbilityScore = NewCharacterAbilityScoreClient(c.config)
	c.CharacterProficiency = NewCharacterProficiencyClient(c.config)
	c.CharacterSkill = NewCharacterSkillClient(c.config)
	c.Class = NewClassClient(c.config)
	c.Coin = NewCoinClient(c.config)
	c.Condition = NewConditionClient(c.config)
	c.Cost = NewCostClient(c.config)
	c.DamageType = NewDamageTypeClient(c.config)
	c.Equipment = NewEquipmentClient(c.config)
	c.EquipmentEntry = NewEquipmentEntryClient(c.config)
	c.Feat = NewFeatClient(c.config)
	c.Feature = NewFeatureClient(c.config)
	c.Gear = NewGearClient(c.config)
	c.Language = NewLanguageClient(c.config)
	c.LanguageChoice = NewLanguageChoiceClient(c.config)
	c.MagicSchool = NewMagicSchoolClient(c.config)
	c.Prerequisite = NewPrerequisiteClient(c.config)
	c.Proficiency = NewProficiencyClient(c.config)
	c.ProficiencyChoice = NewProficiencyChoiceClient(c.config)
	c.Property = NewPropertyClient(c.config)
	c.Race = NewRaceClient(c.config)
	c.Rule = NewRuleClient(c.config)
	c.RuleSection = NewRuleSectionClient(c.config)
	c.Skill = NewSkillClient(c.config)
	c.Tool = NewToolClient(c.config)
	c.Trait = NewTraitClient(c.config)
	c.Vehicle = NewVehicleClient(c.config)
	c.Weapon = NewWeaponClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		AbilityBonus:          NewAbilityBonusClient(cfg),
		AbilityScore:          NewAbilityScoreClient(cfg),
		Alignment:             NewAlignmentClient(cfg),
		Armor:                 NewArmorClient(cfg),
		Character:             NewCharacterClient(cfg),
		CharacterAbilityScore: NewCharacterAbilityScoreClient(cfg),
		CharacterProficiency:  NewCharacterProficiencyClient(cfg),
		CharacterSkill:        NewCharacterSkillClient(cfg),
		Class:                 NewClassClient(cfg),
		Coin:                  NewCoinClient(cfg),
		Condition:             NewConditionClient(cfg),
		Cost:                  NewCostClient(cfg),
		DamageType:            NewDamageTypeClient(cfg),
		Equipment:             NewEquipmentClient(cfg),
		EquipmentEntry:        NewEquipmentEntryClient(cfg),
		Feat:                  NewFeatClient(cfg),
		Feature:               NewFeatureClient(cfg),
		Gear:                  NewGearClient(cfg),
		Language:              NewLanguageClient(cfg),
		LanguageChoice:        NewLanguageChoiceClient(cfg),
		MagicSchool:           NewMagicSchoolClient(cfg),
		Prerequisite:          NewPrerequisiteClient(cfg),
		Proficiency:           NewProficiencyClient(cfg),
		ProficiencyChoice:     NewProficiencyChoiceClient(cfg),
		Property:              NewPropertyClient(cfg),
		Race:                  NewRaceClient(cfg),
		Rule:                  NewRuleClient(cfg),
		RuleSection:           NewRuleSectionClient(cfg),
		Skill:                 NewSkillClient(cfg),
		Tool:                  NewToolClient(cfg),
		Trait:                 NewTraitClient(cfg),
		Vehicle:               NewVehicleClient(cfg),
		Weapon:                NewWeaponClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		AbilityBonus:          NewAbilityBonusClient(cfg),
		AbilityScore:          NewAbilityScoreClient(cfg),
		Alignment:             NewAlignmentClient(cfg),
		Armor:                 NewArmorClient(cfg),
		Character:             NewCharacterClient(cfg),
		CharacterAbilityScore: NewCharacterAbilityScoreClient(cfg),
		CharacterProficiency:  NewCharacterProficiencyClient(cfg),
		CharacterSkill:        NewCharacterSkillClient(cfg),
		Class:                 NewClassClient(cfg),
		Coin:                  NewCoinClient(cfg),
		Condition:             NewConditionClient(cfg),
		Cost:                  NewCostClient(cfg),
		DamageType:            NewDamageTypeClient(cfg),
		Equipment:             NewEquipmentClient(cfg),
		EquipmentEntry:        NewEquipmentEntryClient(cfg),
		Feat:                  NewFeatClient(cfg),
		Feature:               NewFeatureClient(cfg),
		Gear:                  NewGearClient(cfg),
		Language:              NewLanguageClient(cfg),
		LanguageChoice:        NewLanguageChoiceClient(cfg),
		MagicSchool:           NewMagicSchoolClient(cfg),
		Prerequisite:          NewPrerequisiteClient(cfg),
		Proficiency:           NewProficiencyClient(cfg),
		ProficiencyChoice:     NewProficiencyChoiceClient(cfg),
		Property:              NewPropertyClient(cfg),
		Race:                  NewRaceClient(cfg),
		Rule:                  NewRuleClient(cfg),
		RuleSection:           NewRuleSectionClient(cfg),
		Skill:                 NewSkillClient(cfg),
		Tool:                  NewToolClient(cfg),
		Trait:                 NewTraitClient(cfg),
		Vehicle:               NewVehicleClient(cfg),
		Weapon:                NewWeaponClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AbilityBonus.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AbilityBonus, c.AbilityScore, c.Alignment, c.Armor, c.Character,
		c.CharacterAbilityScore, c.CharacterProficiency, c.CharacterSkill, c.Class,
		c.Coin, c.Condition, c.Cost, c.DamageType, c.Equipment, c.EquipmentEntry,
		c.Feat, c.Feature, c.Gear, c.Language, c.LanguageChoice, c.MagicSchool,
		c.Prerequisite, c.Proficiency, c.ProficiencyChoice, c.Property, c.Race, c.Rule,
		c.RuleSection, c.Skill, c.Tool, c.Trait, c.Vehicle, c.Weapon,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AbilityBonus, c.AbilityScore, c.Alignment, c.Armor, c.Character,
		c.CharacterAbilityScore, c.CharacterProficiency, c.CharacterSkill, c.Class,
		c.Coin, c.Condition, c.Cost, c.DamageType, c.Equipment, c.EquipmentEntry,
		c.Feat, c.Feature, c.Gear, c.Language, c.LanguageChoice, c.MagicSchool,
		c.Prerequisite, c.Proficiency, c.ProficiencyChoice, c.Property, c.Race, c.Rule,
		c.RuleSection, c.Skill, c.Tool, c.Trait, c.Vehicle, c.Weapon,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AbilityBonusMutation:
		return c.AbilityBonus.mutate(ctx, m)
	case *AbilityScoreMutation:
		return c.AbilityScore.mutate(ctx, m)
	case *AlignmentMutation:
		return c.Alignment.mutate(ctx, m)
	case *ArmorMutation:
		return c.Armor.mutate(ctx, m)
	case *CharacterMutation:
		return c.Character.mutate(ctx, m)
	case *CharacterAbilityScoreMutation:
		return c.CharacterAbilityScore.mutate(ctx, m)
	case *CharacterProficiencyMutation:
		return c.CharacterProficiency.mutate(ctx, m)
	case *CharacterSkillMutation:
		return c.CharacterSkill.mutate(ctx, m)
	case *ClassMutation:
		return c.Class.mutate(ctx, m)
	case *CoinMutation:
		return c.Coin.mutate(ctx, m)
	case *ConditionMutation:
		return c.Condition.mutate(ctx, m)
	case *CostMutation:
		return c.Cost.mutate(ctx, m)
	case *DamageTypeMutation:
		return c.DamageType.mutate(ctx, m)
	case *EquipmentMutation:
		return c.Equipment.mutate(ctx, m)
	case *EquipmentEntryMutation:
		return c.EquipmentEntry.mutate(ctx, m)
	case *FeatMutation:
		return c.Feat.mutate(ctx, m)
	case *FeatureMutation:
		return c.Feature.mutate(ctx, m)
	case *GearMutation:
		return c.Gear.mutate(ctx, m)
	case *LanguageMutation:
		return c.Language.mutate(ctx, m)
	case *LanguageChoiceMutation:
		return c.LanguageChoice.mutate(ctx, m)
	case *MagicSchoolMutation:
		return c.MagicSchool.mutate(ctx, m)
	case *PrerequisiteMutation:
		return c.Prerequisite.mutate(ctx, m)
	case *ProficiencyMutation:
		return c.Proficiency.mutate(ctx, m)
	case *ProficiencyChoiceMutation:
		return c.ProficiencyChoice.mutate(ctx, m)
	case *PropertyMutation:
		return c.Property.mutate(ctx, m)
	case *RaceMutation:
		return c.Race.mutate(ctx, m)
	case *RuleMutation:
		return c.Rule.mutate(ctx, m)
	case *RuleSectionMutation:
		return c.RuleSection.mutate(ctx, m)
	case *SkillMutation:
		return c.Skill.mutate(ctx, m)
	case *ToolMutation:
		return c.Tool.mutate(ctx, m)
	case *TraitMutation:
		return c.Trait.mutate(ctx, m)
	case *VehicleMutation:
		return c.Vehicle.mutate(ctx, m)
	case *WeaponMutation:
		return c.Weapon.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AbilityBonusClient is a client for the AbilityBonus schema.
type AbilityBonusClient struct {
	config
}

// NewAbilityBonusClient returns a client for the AbilityBonus from the given config.
func NewAbilityBonusClient(c config) *AbilityBonusClient {
	return &AbilityBonusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abilitybonus.Hooks(f(g(h())))`.
func (c *AbilityBonusClient) Use(hooks ...Hook) {
	c.hooks.AbilityBonus = append(c.hooks.AbilityBonus, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `abilitybonus.Intercept(f(g(h())))`.
func (c *AbilityBonusClient) Intercept(interceptors ...Interceptor) {
	c.inters.AbilityBonus = append(c.inters.AbilityBonus, interceptors...)
}

// Create returns a builder for creating a AbilityBonus entity.
func (c *AbilityBonusClient) Create() *AbilityBonusCreate {
	mutation := newAbilityBonusMutation(c.config, OpCreate)
	return &AbilityBonusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AbilityBonus entities.
func (c *AbilityBonusClient) CreateBulk(builders ...*AbilityBonusCreate) *AbilityBonusCreateBulk {
	return &AbilityBonusCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AbilityBonusClient) MapCreateBulk(slice any, setFunc func(*AbilityBonusCreate, int)) *AbilityBonusCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AbilityBonusCreateBulk{err: fmt.Errorf("calling to AbilityBonusClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AbilityBonusCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AbilityBonusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AbilityBonus.
func (c *AbilityBonusClient) Update() *AbilityBonusUpdate {
	mutation := newAbilityBonusMutation(c.config, OpUpdate)
	return &AbilityBonusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbilityBonusClient) UpdateOne(ab *AbilityBonus) *AbilityBonusUpdateOne {
	mutation := newAbilityBonusMutation(c.config, OpUpdateOne)
	mutation.race = &ab.RaceID
	mutation.ability_score = &ab.AbilityScoreID
	return &AbilityBonusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AbilityBonus.
func (c *AbilityBonusClient) Delete() *AbilityBonusDelete {
	mutation := newAbilityBonusMutation(c.config, OpDelete)
	return &AbilityBonusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for AbilityBonus.
func (c *AbilityBonusClient) Query() *AbilityBonusQuery {
	return &AbilityBonusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAbilityBonus},
		inters: c.Interceptors(),
	}
}

// QueryRace queries the race edge of a AbilityBonus.
func (c *AbilityBonusClient) QueryRace(ab *AbilityBonus) *RaceQuery {
	return c.Query().
		Where(abilitybonus.RaceID(ab.RaceID), abilitybonus.AbilityScoreID(ab.AbilityScoreID)).
		QueryRace()
}

// QueryAbilityScore queries the ability_score edge of a AbilityBonus.
func (c *AbilityBonusClient) QueryAbilityScore(ab *AbilityBonus) *AbilityScoreQuery {
	return c.Query().
		Where(abilitybonus.RaceID(ab.RaceID), abilitybonus.AbilityScoreID(ab.AbilityScoreID)).
		QueryAbilityScore()
}

// Hooks returns the client hooks.
func (c *AbilityBonusClient) Hooks() []Hook {
	return c.hooks.AbilityBonus
}

// Interceptors returns the client interceptors.
func (c *AbilityBonusClient) Interceptors() []Interceptor {
	return c.inters.AbilityBonus
}

func (c *AbilityBonusClient) mutate(ctx context.Context, m *AbilityBonusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AbilityBonusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AbilityBonusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AbilityBonusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AbilityBonusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AbilityBonus mutation op: %q", m.Op())
	}
}

// AbilityScoreClient is a client for the AbilityScore schema.
type AbilityScoreClient struct {
	config
}

// NewAbilityScoreClient returns a client for the AbilityScore from the given config.
func NewAbilityScoreClient(c config) *AbilityScoreClient {
	return &AbilityScoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abilityscore.Hooks(f(g(h())))`.
func (c *AbilityScoreClient) Use(hooks ...Hook) {
	c.hooks.AbilityScore = append(c.hooks.AbilityScore, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `abilityscore.Intercept(f(g(h())))`.
func (c *AbilityScoreClient) Intercept(interceptors ...Interceptor) {
	c.inters.AbilityScore = append(c.inters.AbilityScore, interceptors...)
}

// Create returns a builder for creating a AbilityScore entity.
func (c *AbilityScoreClient) Create() *AbilityScoreCreate {
	mutation := newAbilityScoreMutation(c.config, OpCreate)
	return &AbilityScoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AbilityScore entities.
func (c *AbilityScoreClient) CreateBulk(builders ...*AbilityScoreCreate) *AbilityScoreCreateBulk {
	return &AbilityScoreCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AbilityScoreClient) MapCreateBulk(slice any, setFunc func(*AbilityScoreCreate, int)) *AbilityScoreCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AbilityScoreCreateBulk{err: fmt.Errorf("calling to AbilityScoreClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AbilityScoreCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AbilityScoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AbilityScore.
func (c *AbilityScoreClient) Update() *AbilityScoreUpdate {
	mutation := newAbilityScoreMutation(c.config, OpUpdate)
	return &AbilityScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbilityScoreClient) UpdateOne(as *AbilityScore) *AbilityScoreUpdateOne {
	mutation := newAbilityScoreMutation(c.config, OpUpdateOne, withAbilityScore(as))
	return &AbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbilityScoreClient) UpdateOneID(id int) *AbilityScoreUpdateOne {
	mutation := newAbilityScoreMutation(c.config, OpUpdateOne, withAbilityScoreID(id))
	return &AbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AbilityScore.
func (c *AbilityScoreClient) Delete() *AbilityScoreDelete {
	mutation := newAbilityScoreMutation(c.config, OpDelete)
	return &AbilityScoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AbilityScoreClient) DeleteOne(as *AbilityScore) *AbilityScoreDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AbilityScoreClient) DeleteOneID(id int) *AbilityScoreDeleteOne {
	builder := c.Delete().Where(abilityscore.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbilityScoreDeleteOne{builder}
}

// Query returns a query builder for AbilityScore.
func (c *AbilityScoreClient) Query() *AbilityScoreQuery {
	return &AbilityScoreQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAbilityScore},
		inters: c.Interceptors(),
	}
}

// Get returns a AbilityScore entity by its id.
func (c *AbilityScoreClient) Get(ctx context.Context, id int) (*AbilityScore, error) {
	return c.Query().Where(abilityscore.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbilityScoreClient) GetX(ctx context.Context, id int) *AbilityScore {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySkills queries the skills edge of a AbilityScore.
func (c *AbilityScoreClient) QuerySkills(as *AbilityScore) *SkillQuery {
	query := (&SkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilityscore.Table, abilityscore.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, abilityscore.SkillsTable, abilityscore.SkillsColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCharacterAbilityScore queries the character_ability_score edge of a AbilityScore.
func (c *AbilityScoreClient) QueryCharacterAbilityScore(as *AbilityScore) *CharacterAbilityScoreQuery {
	query := (&CharacterAbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilityscore.Table, abilityscore.FieldID, id),
			sqlgraph.To(characterabilityscore.Table, characterabilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, abilityscore.CharacterAbilityScoreTable, abilityscore.CharacterAbilityScoreColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClasses queries the classes edge of a AbilityScore.
func (c *AbilityScoreClient) QueryClasses(as *AbilityScore) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilityscore.Table, abilityscore.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, abilityscore.ClassesTable, abilityscore.ClassesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRace queries the race edge of a AbilityScore.
func (c *AbilityScoreClient) QueryRace(as *AbilityScore) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilityscore.Table, abilityscore.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, abilityscore.RaceTable, abilityscore.RacePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRaceAbilityBonuses queries the race_ability_bonuses edge of a AbilityScore.
func (c *AbilityScoreClient) QueryRaceAbilityBonuses(as *AbilityScore) *AbilityBonusQuery {
	query := (&AbilityBonusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilityscore.Table, abilityscore.FieldID, id),
			sqlgraph.To(abilitybonus.Table, abilitybonus.AbilityScoreColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, abilityscore.RaceAbilityBonusesTable, abilityscore.RaceAbilityBonusesColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AbilityScoreClient) Hooks() []Hook {
	return c.hooks.AbilityScore
}

// Interceptors returns the client interceptors.
func (c *AbilityScoreClient) Interceptors() []Interceptor {
	return c.inters.AbilityScore
}

func (c *AbilityScoreClient) mutate(ctx context.Context, m *AbilityScoreMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AbilityScoreCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AbilityScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AbilityScoreDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AbilityScore mutation op: %q", m.Op())
	}
}

// AlignmentClient is a client for the Alignment schema.
type AlignmentClient struct {
	config
}

// NewAlignmentClient returns a client for the Alignment from the given config.
func NewAlignmentClient(c config) *AlignmentClient {
	return &AlignmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `alignment.Hooks(f(g(h())))`.
func (c *AlignmentClient) Use(hooks ...Hook) {
	c.hooks.Alignment = append(c.hooks.Alignment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `alignment.Intercept(f(g(h())))`.
func (c *AlignmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Alignment = append(c.inters.Alignment, interceptors...)
}

// Create returns a builder for creating a Alignment entity.
func (c *AlignmentClient) Create() *AlignmentCreate {
	mutation := newAlignmentMutation(c.config, OpCreate)
	return &AlignmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Alignment entities.
func (c *AlignmentClient) CreateBulk(builders ...*AlignmentCreate) *AlignmentCreateBulk {
	return &AlignmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AlignmentClient) MapCreateBulk(slice any, setFunc func(*AlignmentCreate, int)) *AlignmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AlignmentCreateBulk{err: fmt.Errorf("calling to AlignmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AlignmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AlignmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Alignment.
func (c *AlignmentClient) Update() *AlignmentUpdate {
	mutation := newAlignmentMutation(c.config, OpUpdate)
	return &AlignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AlignmentClient) UpdateOne(a *Alignment) *AlignmentUpdateOne {
	mutation := newAlignmentMutation(c.config, OpUpdateOne, withAlignment(a))
	return &AlignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AlignmentClient) UpdateOneID(id int) *AlignmentUpdateOne {
	mutation := newAlignmentMutation(c.config, OpUpdateOne, withAlignmentID(id))
	return &AlignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Alignment.
func (c *AlignmentClient) Delete() *AlignmentDelete {
	mutation := newAlignmentMutation(c.config, OpDelete)
	return &AlignmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AlignmentClient) DeleteOne(a *Alignment) *AlignmentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AlignmentClient) DeleteOneID(id int) *AlignmentDeleteOne {
	builder := c.Delete().Where(alignment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AlignmentDeleteOne{builder}
}

// Query returns a query builder for Alignment.
func (c *AlignmentClient) Query() *AlignmentQuery {
	return &AlignmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAlignment},
		inters: c.Interceptors(),
	}
}

// Get returns a Alignment entity by its id.
func (c *AlignmentClient) Get(ctx context.Context, id int) (*Alignment, error) {
	return c.Query().Where(alignment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AlignmentClient) GetX(ctx context.Context, id int) *Alignment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AlignmentClient) Hooks() []Hook {
	return c.hooks.Alignment
}

// Interceptors returns the client interceptors.
func (c *AlignmentClient) Interceptors() []Interceptor {
	return c.inters.Alignment
}

func (c *AlignmentClient) mutate(ctx context.Context, m *AlignmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AlignmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AlignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AlignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AlignmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Alignment mutation op: %q", m.Op())
	}
}

// ArmorClient is a client for the Armor schema.
type ArmorClient struct {
	config
}

// NewArmorClient returns a client for the Armor from the given config.
func NewArmorClient(c config) *ArmorClient {
	return &ArmorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `armor.Hooks(f(g(h())))`.
func (c *ArmorClient) Use(hooks ...Hook) {
	c.hooks.Armor = append(c.hooks.Armor, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `armor.Intercept(f(g(h())))`.
func (c *ArmorClient) Intercept(interceptors ...Interceptor) {
	c.inters.Armor = append(c.inters.Armor, interceptors...)
}

// Create returns a builder for creating a Armor entity.
func (c *ArmorClient) Create() *ArmorCreate {
	mutation := newArmorMutation(c.config, OpCreate)
	return &ArmorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Armor entities.
func (c *ArmorClient) CreateBulk(builders ...*ArmorCreate) *ArmorCreateBulk {
	return &ArmorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ArmorClient) MapCreateBulk(slice any, setFunc func(*ArmorCreate, int)) *ArmorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ArmorCreateBulk{err: fmt.Errorf("calling to ArmorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ArmorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ArmorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Armor.
func (c *ArmorClient) Update() *ArmorUpdate {
	mutation := newArmorMutation(c.config, OpUpdate)
	return &ArmorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArmorClient) UpdateOne(a *Armor) *ArmorUpdateOne {
	mutation := newArmorMutation(c.config, OpUpdateOne, withArmor(a))
	return &ArmorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArmorClient) UpdateOneID(id int) *ArmorUpdateOne {
	mutation := newArmorMutation(c.config, OpUpdateOne, withArmorID(id))
	return &ArmorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Armor.
func (c *ArmorClient) Delete() *ArmorDelete {
	mutation := newArmorMutation(c.config, OpDelete)
	return &ArmorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArmorClient) DeleteOne(a *Armor) *ArmorDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArmorClient) DeleteOneID(id int) *ArmorDeleteOne {
	builder := c.Delete().Where(armor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArmorDeleteOne{builder}
}

// Query returns a query builder for Armor.
func (c *ArmorClient) Query() *ArmorQuery {
	return &ArmorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArmor},
		inters: c.Interceptors(),
	}
}

// Get returns a Armor entity by its id.
func (c *ArmorClient) Get(ctx context.Context, id int) (*Armor, error) {
	return c.Query().Where(armor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArmorClient) GetX(ctx context.Context, id int) *Armor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a Armor.
func (c *ArmorClient) QueryEquipment(a *Armor) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(armor.Table, armor.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, armor.EquipmentTable, armor.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArmorClient) Hooks() []Hook {
	return c.hooks.Armor
}

// Interceptors returns the client interceptors.
func (c *ArmorClient) Interceptors() []Interceptor {
	return c.inters.Armor
}

func (c *ArmorClient) mutate(ctx context.Context, m *ArmorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArmorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArmorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArmorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArmorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Armor mutation op: %q", m.Op())
	}
}

// CharacterClient is a client for the Character schema.
type CharacterClient struct {
	config
}

// NewCharacterClient returns a client for the Character from the given config.
func NewCharacterClient(c config) *CharacterClient {
	return &CharacterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `character.Hooks(f(g(h())))`.
func (c *CharacterClient) Use(hooks ...Hook) {
	c.hooks.Character = append(c.hooks.Character, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `character.Intercept(f(g(h())))`.
func (c *CharacterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Character = append(c.inters.Character, interceptors...)
}

// Create returns a builder for creating a Character entity.
func (c *CharacterClient) Create() *CharacterCreate {
	mutation := newCharacterMutation(c.config, OpCreate)
	return &CharacterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Character entities.
func (c *CharacterClient) CreateBulk(builders ...*CharacterCreate) *CharacterCreateBulk {
	return &CharacterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CharacterClient) MapCreateBulk(slice any, setFunc func(*CharacterCreate, int)) *CharacterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CharacterCreateBulk{err: fmt.Errorf("calling to CharacterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CharacterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CharacterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Character.
func (c *CharacterClient) Update() *CharacterUpdate {
	mutation := newCharacterMutation(c.config, OpUpdate)
	return &CharacterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CharacterClient) UpdateOne(ch *Character) *CharacterUpdateOne {
	mutation := newCharacterMutation(c.config, OpUpdateOne, withCharacter(ch))
	return &CharacterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CharacterClient) UpdateOneID(id int) *CharacterUpdateOne {
	mutation := newCharacterMutation(c.config, OpUpdateOne, withCharacterID(id))
	return &CharacterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Character.
func (c *CharacterClient) Delete() *CharacterDelete {
	mutation := newCharacterMutation(c.config, OpDelete)
	return &CharacterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CharacterClient) DeleteOne(ch *Character) *CharacterDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CharacterClient) DeleteOneID(id int) *CharacterDeleteOne {
	builder := c.Delete().Where(character.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CharacterDeleteOne{builder}
}

// Query returns a query builder for Character.
func (c *CharacterClient) Query() *CharacterQuery {
	return &CharacterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCharacter},
		inters: c.Interceptors(),
	}
}

// Get returns a Character entity by its id.
func (c *CharacterClient) Get(ctx context.Context, id int) (*Character, error) {
	return c.Query().Where(character.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CharacterClient) GetX(ctx context.Context, id int) *Character {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRace queries the race edge of a Character.
func (c *CharacterClient) QueryRace(ch *Character) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(character.Table, character.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, character.RaceTable, character.RaceColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClass queries the class edge of a Character.
func (c *CharacterClient) QueryClass(ch *Character) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(character.Table, character.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, character.ClassTable, character.ClassColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAlignment queries the alignment edge of a Character.
func (c *CharacterClient) QueryAlignment(ch *Character) *AlignmentQuery {
	query := (&AlignmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(character.Table, character.FieldID, id),
			sqlgraph.To(alignment.Table, alignment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, character.AlignmentTable, character.AlignmentColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCharacterAbilityScores queries the character_ability_scores edge of a Character.
func (c *CharacterClient) QueryCharacterAbilityScores(ch *Character) *CharacterAbilityScoreQuery {
	query := (&CharacterAbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(character.Table, character.FieldID, id),
			sqlgraph.To(characterabilityscore.Table, characterabilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, character.CharacterAbilityScoresTable, character.CharacterAbilityScoresColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCharacterSkills queries the character_skills edge of a Character.
func (c *CharacterClient) QueryCharacterSkills(ch *Character) *CharacterSkillQuery {
	query := (&CharacterSkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(character.Table, character.FieldID, id),
			sqlgraph.To(characterskill.Table, characterskill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, character.CharacterSkillsTable, character.CharacterSkillsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCharacterProficiencies queries the character_proficiencies edge of a Character.
func (c *CharacterClient) QueryCharacterProficiencies(ch *Character) *CharacterProficiencyQuery {
	query := (&CharacterProficiencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(character.Table, character.FieldID, id),
			sqlgraph.To(characterproficiency.Table, characterproficiency.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, character.CharacterProficienciesTable, character.CharacterProficienciesColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CharacterClient) Hooks() []Hook {
	hooks := c.hooks.Character
	return append(hooks[:len(hooks):len(hooks)], character.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CharacterClient) Interceptors() []Interceptor {
	return c.inters.Character
}

func (c *CharacterClient) mutate(ctx context.Context, m *CharacterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CharacterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CharacterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CharacterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CharacterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Character mutation op: %q", m.Op())
	}
}

// CharacterAbilityScoreClient is a client for the CharacterAbilityScore schema.
type CharacterAbilityScoreClient struct {
	config
}

// NewCharacterAbilityScoreClient returns a client for the CharacterAbilityScore from the given config.
func NewCharacterAbilityScoreClient(c config) *CharacterAbilityScoreClient {
	return &CharacterAbilityScoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `characterabilityscore.Hooks(f(g(h())))`.
func (c *CharacterAbilityScoreClient) Use(hooks ...Hook) {
	c.hooks.CharacterAbilityScore = append(c.hooks.CharacterAbilityScore, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `characterabilityscore.Intercept(f(g(h())))`.
func (c *CharacterAbilityScoreClient) Intercept(interceptors ...Interceptor) {
	c.inters.CharacterAbilityScore = append(c.inters.CharacterAbilityScore, interceptors...)
}

// Create returns a builder for creating a CharacterAbilityScore entity.
func (c *CharacterAbilityScoreClient) Create() *CharacterAbilityScoreCreate {
	mutation := newCharacterAbilityScoreMutation(c.config, OpCreate)
	return &CharacterAbilityScoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CharacterAbilityScore entities.
func (c *CharacterAbilityScoreClient) CreateBulk(builders ...*CharacterAbilityScoreCreate) *CharacterAbilityScoreCreateBulk {
	return &CharacterAbilityScoreCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CharacterAbilityScoreClient) MapCreateBulk(slice any, setFunc func(*CharacterAbilityScoreCreate, int)) *CharacterAbilityScoreCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CharacterAbilityScoreCreateBulk{err: fmt.Errorf("calling to CharacterAbilityScoreClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CharacterAbilityScoreCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CharacterAbilityScoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CharacterAbilityScore.
func (c *CharacterAbilityScoreClient) Update() *CharacterAbilityScoreUpdate {
	mutation := newCharacterAbilityScoreMutation(c.config, OpUpdate)
	return &CharacterAbilityScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CharacterAbilityScoreClient) UpdateOne(cas *CharacterAbilityScore) *CharacterAbilityScoreUpdateOne {
	mutation := newCharacterAbilityScoreMutation(c.config, OpUpdateOne, withCharacterAbilityScore(cas))
	return &CharacterAbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CharacterAbilityScoreClient) UpdateOneID(id int) *CharacterAbilityScoreUpdateOne {
	mutation := newCharacterAbilityScoreMutation(c.config, OpUpdateOne, withCharacterAbilityScoreID(id))
	return &CharacterAbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CharacterAbilityScore.
func (c *CharacterAbilityScoreClient) Delete() *CharacterAbilityScoreDelete {
	mutation := newCharacterAbilityScoreMutation(c.config, OpDelete)
	return &CharacterAbilityScoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CharacterAbilityScoreClient) DeleteOne(cas *CharacterAbilityScore) *CharacterAbilityScoreDeleteOne {
	return c.DeleteOneID(cas.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CharacterAbilityScoreClient) DeleteOneID(id int) *CharacterAbilityScoreDeleteOne {
	builder := c.Delete().Where(characterabilityscore.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CharacterAbilityScoreDeleteOne{builder}
}

// Query returns a query builder for CharacterAbilityScore.
func (c *CharacterAbilityScoreClient) Query() *CharacterAbilityScoreQuery {
	return &CharacterAbilityScoreQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCharacterAbilityScore},
		inters: c.Interceptors(),
	}
}

// Get returns a CharacterAbilityScore entity by its id.
func (c *CharacterAbilityScoreClient) Get(ctx context.Context, id int) (*CharacterAbilityScore, error) {
	return c.Query().Where(characterabilityscore.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CharacterAbilityScoreClient) GetX(ctx context.Context, id int) *CharacterAbilityScore {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCharacter queries the character edge of a CharacterAbilityScore.
func (c *CharacterAbilityScoreClient) QueryCharacter(cas *CharacterAbilityScore) *CharacterQuery {
	query := (&CharacterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cas.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(characterabilityscore.Table, characterabilityscore.FieldID, id),
			sqlgraph.To(character.Table, character.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, characterabilityscore.CharacterTable, characterabilityscore.CharacterColumn),
		)
		fromV = sqlgraph.Neighbors(cas.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAbilityScore queries the ability_score edge of a CharacterAbilityScore.
func (c *CharacterAbilityScoreClient) QueryAbilityScore(cas *CharacterAbilityScore) *AbilityScoreQuery {
	query := (&AbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cas.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(characterabilityscore.Table, characterabilityscore.FieldID, id),
			sqlgraph.To(abilityscore.Table, abilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, characterabilityscore.AbilityScoreTable, characterabilityscore.AbilityScoreColumn),
		)
		fromV = sqlgraph.Neighbors(cas.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCharacterSkills queries the character_skills edge of a CharacterAbilityScore.
func (c *CharacterAbilityScoreClient) QueryCharacterSkills(cas *CharacterAbilityScore) *CharacterSkillQuery {
	query := (&CharacterSkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cas.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(characterabilityscore.Table, characterabilityscore.FieldID, id),
			sqlgraph.To(characterskill.Table, characterskill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, characterabilityscore.CharacterSkillsTable, characterabilityscore.CharacterSkillsColumn),
		)
		fromV = sqlgraph.Neighbors(cas.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CharacterAbilityScoreClient) Hooks() []Hook {
	hooks := c.hooks.CharacterAbilityScore
	return append(hooks[:len(hooks):len(hooks)], characterabilityscore.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CharacterAbilityScoreClient) Interceptors() []Interceptor {
	return c.inters.CharacterAbilityScore
}

func (c *CharacterAbilityScoreClient) mutate(ctx context.Context, m *CharacterAbilityScoreMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CharacterAbilityScoreCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CharacterAbilityScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CharacterAbilityScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CharacterAbilityScoreDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CharacterAbilityScore mutation op: %q", m.Op())
	}
}

// CharacterProficiencyClient is a client for the CharacterProficiency schema.
type CharacterProficiencyClient struct {
	config
}

// NewCharacterProficiencyClient returns a client for the CharacterProficiency from the given config.
func NewCharacterProficiencyClient(c config) *CharacterProficiencyClient {
	return &CharacterProficiencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `characterproficiency.Hooks(f(g(h())))`.
func (c *CharacterProficiencyClient) Use(hooks ...Hook) {
	c.hooks.CharacterProficiency = append(c.hooks.CharacterProficiency, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `characterproficiency.Intercept(f(g(h())))`.
func (c *CharacterProficiencyClient) Intercept(interceptors ...Interceptor) {
	c.inters.CharacterProficiency = append(c.inters.CharacterProficiency, interceptors...)
}

// Create returns a builder for creating a CharacterProficiency entity.
func (c *CharacterProficiencyClient) Create() *CharacterProficiencyCreate {
	mutation := newCharacterProficiencyMutation(c.config, OpCreate)
	return &CharacterProficiencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CharacterProficiency entities.
func (c *CharacterProficiencyClient) CreateBulk(builders ...*CharacterProficiencyCreate) *CharacterProficiencyCreateBulk {
	return &CharacterProficiencyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CharacterProficiencyClient) MapCreateBulk(slice any, setFunc func(*CharacterProficiencyCreate, int)) *CharacterProficiencyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CharacterProficiencyCreateBulk{err: fmt.Errorf("calling to CharacterProficiencyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CharacterProficiencyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CharacterProficiencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CharacterProficiency.
func (c *CharacterProficiencyClient) Update() *CharacterProficiencyUpdate {
	mutation := newCharacterProficiencyMutation(c.config, OpUpdate)
	return &CharacterProficiencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CharacterProficiencyClient) UpdateOne(cp *CharacterProficiency) *CharacterProficiencyUpdateOne {
	mutation := newCharacterProficiencyMutation(c.config, OpUpdateOne, withCharacterProficiency(cp))
	return &CharacterProficiencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CharacterProficiencyClient) UpdateOneID(id int) *CharacterProficiencyUpdateOne {
	mutation := newCharacterProficiencyMutation(c.config, OpUpdateOne, withCharacterProficiencyID(id))
	return &CharacterProficiencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CharacterProficiency.
func (c *CharacterProficiencyClient) Delete() *CharacterProficiencyDelete {
	mutation := newCharacterProficiencyMutation(c.config, OpDelete)
	return &CharacterProficiencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CharacterProficiencyClient) DeleteOne(cp *CharacterProficiency) *CharacterProficiencyDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CharacterProficiencyClient) DeleteOneID(id int) *CharacterProficiencyDeleteOne {
	builder := c.Delete().Where(characterproficiency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CharacterProficiencyDeleteOne{builder}
}

// Query returns a query builder for CharacterProficiency.
func (c *CharacterProficiencyClient) Query() *CharacterProficiencyQuery {
	return &CharacterProficiencyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCharacterProficiency},
		inters: c.Interceptors(),
	}
}

// Get returns a CharacterProficiency entity by its id.
func (c *CharacterProficiencyClient) Get(ctx context.Context, id int) (*CharacterProficiency, error) {
	return c.Query().Where(characterproficiency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CharacterProficiencyClient) GetX(ctx context.Context, id int) *CharacterProficiency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCharacter queries the character edge of a CharacterProficiency.
func (c *CharacterProficiencyClient) QueryCharacter(cp *CharacterProficiency) *CharacterQuery {
	query := (&CharacterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(characterproficiency.Table, characterproficiency.FieldID, id),
			sqlgraph.To(character.Table, character.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, characterproficiency.CharacterTable, characterproficiency.CharacterColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProficiency queries the proficiency edge of a CharacterProficiency.
func (c *CharacterProficiencyClient) QueryProficiency(cp *CharacterProficiency) *ProficiencyQuery {
	query := (&ProficiencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(characterproficiency.Table, characterproficiency.FieldID, id),
			sqlgraph.To(proficiency.Table, proficiency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, characterproficiency.ProficiencyTable, characterproficiency.ProficiencyColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCharacterSkill queries the character_skill edge of a CharacterProficiency.
func (c *CharacterProficiencyClient) QueryCharacterSkill(cp *CharacterProficiency) *CharacterSkillQuery {
	query := (&CharacterSkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(characterproficiency.Table, characterproficiency.FieldID, id),
			sqlgraph.To(characterskill.Table, characterskill.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, characterproficiency.CharacterSkillTable, characterproficiency.CharacterSkillColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CharacterProficiencyClient) Hooks() []Hook {
	return c.hooks.CharacterProficiency
}

// Interceptors returns the client interceptors.
func (c *CharacterProficiencyClient) Interceptors() []Interceptor {
	return c.inters.CharacterProficiency
}

func (c *CharacterProficiencyClient) mutate(ctx context.Context, m *CharacterProficiencyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CharacterProficiencyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CharacterProficiencyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CharacterProficiencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CharacterProficiencyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CharacterProficiency mutation op: %q", m.Op())
	}
}

// CharacterSkillClient is a client for the CharacterSkill schema.
type CharacterSkillClient struct {
	config
}

// NewCharacterSkillClient returns a client for the CharacterSkill from the given config.
func NewCharacterSkillClient(c config) *CharacterSkillClient {
	return &CharacterSkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `characterskill.Hooks(f(g(h())))`.
func (c *CharacterSkillClient) Use(hooks ...Hook) {
	c.hooks.CharacterSkill = append(c.hooks.CharacterSkill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `characterskill.Intercept(f(g(h())))`.
func (c *CharacterSkillClient) Intercept(interceptors ...Interceptor) {
	c.inters.CharacterSkill = append(c.inters.CharacterSkill, interceptors...)
}

// Create returns a builder for creating a CharacterSkill entity.
func (c *CharacterSkillClient) Create() *CharacterSkillCreate {
	mutation := newCharacterSkillMutation(c.config, OpCreate)
	return &CharacterSkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CharacterSkill entities.
func (c *CharacterSkillClient) CreateBulk(builders ...*CharacterSkillCreate) *CharacterSkillCreateBulk {
	return &CharacterSkillCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CharacterSkillClient) MapCreateBulk(slice any, setFunc func(*CharacterSkillCreate, int)) *CharacterSkillCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CharacterSkillCreateBulk{err: fmt.Errorf("calling to CharacterSkillClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CharacterSkillCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CharacterSkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CharacterSkill.
func (c *CharacterSkillClient) Update() *CharacterSkillUpdate {
	mutation := newCharacterSkillMutation(c.config, OpUpdate)
	return &CharacterSkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CharacterSkillClient) UpdateOne(cs *CharacterSkill) *CharacterSkillUpdateOne {
	mutation := newCharacterSkillMutation(c.config, OpUpdateOne, withCharacterSkill(cs))
	return &CharacterSkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CharacterSkillClient) UpdateOneID(id int) *CharacterSkillUpdateOne {
	mutation := newCharacterSkillMutation(c.config, OpUpdateOne, withCharacterSkillID(id))
	return &CharacterSkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CharacterSkill.
func (c *CharacterSkillClient) Delete() *CharacterSkillDelete {
	mutation := newCharacterSkillMutation(c.config, OpDelete)
	return &CharacterSkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CharacterSkillClient) DeleteOne(cs *CharacterSkill) *CharacterSkillDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CharacterSkillClient) DeleteOneID(id int) *CharacterSkillDeleteOne {
	builder := c.Delete().Where(characterskill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CharacterSkillDeleteOne{builder}
}

// Query returns a query builder for CharacterSkill.
func (c *CharacterSkillClient) Query() *CharacterSkillQuery {
	return &CharacterSkillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCharacterSkill},
		inters: c.Interceptors(),
	}
}

// Get returns a CharacterSkill entity by its id.
func (c *CharacterSkillClient) Get(ctx context.Context, id int) (*CharacterSkill, error) {
	return c.Query().Where(characterskill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CharacterSkillClient) GetX(ctx context.Context, id int) *CharacterSkill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCharacter queries the character edge of a CharacterSkill.
func (c *CharacterSkillClient) QueryCharacter(cs *CharacterSkill) *CharacterQuery {
	query := (&CharacterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(characterskill.Table, characterskill.FieldID, id),
			sqlgraph.To(character.Table, character.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, characterskill.CharacterTable, characterskill.CharacterColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySkill queries the skill edge of a CharacterSkill.
func (c *CharacterSkillClient) QuerySkill(cs *CharacterSkill) *SkillQuery {
	query := (&SkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(characterskill.Table, characterskill.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, characterskill.SkillTable, characterskill.SkillColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCharacterAbilityScore queries the character_ability_score edge of a CharacterSkill.
func (c *CharacterSkillClient) QueryCharacterAbilityScore(cs *CharacterSkill) *CharacterAbilityScoreQuery {
	query := (&CharacterAbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(characterskill.Table, characterskill.FieldID, id),
			sqlgraph.To(characterabilityscore.Table, characterabilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, characterskill.CharacterAbilityScoreTable, characterskill.CharacterAbilityScoreColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCharacterProficiency queries the character_proficiency edge of a CharacterSkill.
func (c *CharacterSkillClient) QueryCharacterProficiency(cs *CharacterSkill) *CharacterProficiencyQuery {
	query := (&CharacterProficiencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(characterskill.Table, characterskill.FieldID, id),
			sqlgraph.To(characterproficiency.Table, characterproficiency.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, characterskill.CharacterProficiencyTable, characterskill.CharacterProficiencyColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CharacterSkillClient) Hooks() []Hook {
	hooks := c.hooks.CharacterSkill
	return append(hooks[:len(hooks):len(hooks)], characterskill.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CharacterSkillClient) Interceptors() []Interceptor {
	return c.inters.CharacterSkill
}

func (c *CharacterSkillClient) mutate(ctx context.Context, m *CharacterSkillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CharacterSkillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CharacterSkillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CharacterSkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CharacterSkillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CharacterSkill mutation op: %q", m.Op())
	}
}

// ClassClient is a client for the Class schema.
type ClassClient struct {
	config
}

// NewClassClient returns a client for the Class from the given config.
func NewClassClient(c config) *ClassClient {
	return &ClassClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `class.Hooks(f(g(h())))`.
func (c *ClassClient) Use(hooks ...Hook) {
	c.hooks.Class = append(c.hooks.Class, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `class.Intercept(f(g(h())))`.
func (c *ClassClient) Intercept(interceptors ...Interceptor) {
	c.inters.Class = append(c.inters.Class, interceptors...)
}

// Create returns a builder for creating a Class entity.
func (c *ClassClient) Create() *ClassCreate {
	mutation := newClassMutation(c.config, OpCreate)
	return &ClassCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Class entities.
func (c *ClassClient) CreateBulk(builders ...*ClassCreate) *ClassCreateBulk {
	return &ClassCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ClassClient) MapCreateBulk(slice any, setFunc func(*ClassCreate, int)) *ClassCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ClassCreateBulk{err: fmt.Errorf("calling to ClassClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ClassCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ClassCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Class.
func (c *ClassClient) Update() *ClassUpdate {
	mutation := newClassMutation(c.config, OpUpdate)
	return &ClassUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClassClient) UpdateOne(cl *Class) *ClassUpdateOne {
	mutation := newClassMutation(c.config, OpUpdateOne, withClass(cl))
	return &ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClassClient) UpdateOneID(id int) *ClassUpdateOne {
	mutation := newClassMutation(c.config, OpUpdateOne, withClassID(id))
	return &ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Class.
func (c *ClassClient) Delete() *ClassDelete {
	mutation := newClassMutation(c.config, OpDelete)
	return &ClassDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClassClient) DeleteOne(cl *Class) *ClassDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClassClient) DeleteOneID(id int) *ClassDeleteOne {
	builder := c.Delete().Where(class.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClassDeleteOne{builder}
}

// Query returns a query builder for Class.
func (c *ClassClient) Query() *ClassQuery {
	return &ClassQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClass},
		inters: c.Interceptors(),
	}
}

// Get returns a Class entity by its id.
func (c *ClassClient) Get(ctx context.Context, id int) (*Class, error) {
	return c.Query().Where(class.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClassClient) GetX(ctx context.Context, id int) *Class {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProficiencies queries the proficiencies edge of a Class.
func (c *ClassClient) QueryProficiencies(cl *Class) *ProficiencyQuery {
	query := (&ProficiencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(proficiency.Table, proficiency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, class.ProficienciesTable, class.ProficienciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProficiencyOptions queries the proficiency_options edge of a Class.
func (c *ClassClient) QueryProficiencyOptions(cl *Class) *ProficiencyChoiceQuery {
	query := (&ProficiencyChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(proficiencychoice.Table, proficiencychoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, class.ProficiencyOptionsTable, class.ProficiencyOptionsColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStartingEquipment queries the starting_equipment edge of a Class.
func (c *ClassClient) QueryStartingEquipment(cl *Class) *EquipmentEntryQuery {
	query := (&EquipmentEntryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(equipmententry.Table, equipmententry.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, class.StartingEquipmentTable, class.StartingEquipmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySavingThrows queries the saving_throws edge of a Class.
func (c *ClassClient) QuerySavingThrows(cl *Class) *AbilityScoreQuery {
	query := (&AbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(abilityscore.Table, abilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, class.SavingThrowsTable, class.SavingThrowsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCharacters queries the characters edge of a Class.
func (c *ClassClient) QueryCharacters(cl *Class) *CharacterQuery {
	query := (&CharacterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(character.Table, character.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, class.CharactersTable, class.CharactersColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClassClient) Hooks() []Hook {
	return c.hooks.Class
}

// Interceptors returns the client interceptors.
func (c *ClassClient) Interceptors() []Interceptor {
	return c.inters.Class
}

func (c *ClassClient) mutate(ctx context.Context, m *ClassMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClassCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClassUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClassDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Class mutation op: %q", m.Op())
	}
}

// CoinClient is a client for the Coin schema.
type CoinClient struct {
	config
}

// NewCoinClient returns a client for the Coin from the given config.
func NewCoinClient(c config) *CoinClient {
	return &CoinClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coin.Hooks(f(g(h())))`.
func (c *CoinClient) Use(hooks ...Hook) {
	c.hooks.Coin = append(c.hooks.Coin, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coin.Intercept(f(g(h())))`.
func (c *CoinClient) Intercept(interceptors ...Interceptor) {
	c.inters.Coin = append(c.inters.Coin, interceptors...)
}

// Create returns a builder for creating a Coin entity.
func (c *CoinClient) Create() *CoinCreate {
	mutation := newCoinMutation(c.config, OpCreate)
	return &CoinCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Coin entities.
func (c *CoinClient) CreateBulk(builders ...*CoinCreate) *CoinCreateBulk {
	return &CoinCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CoinClient) MapCreateBulk(slice any, setFunc func(*CoinCreate, int)) *CoinCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CoinCreateBulk{err: fmt.Errorf("calling to CoinClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CoinCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CoinCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Coin.
func (c *CoinClient) Update() *CoinUpdate {
	mutation := newCoinMutation(c.config, OpUpdate)
	return &CoinUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinClient) UpdateOne(co *Coin) *CoinUpdateOne {
	mutation := newCoinMutation(c.config, OpUpdateOne, withCoin(co))
	return &CoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinClient) UpdateOneID(id int) *CoinUpdateOne {
	mutation := newCoinMutation(c.config, OpUpdateOne, withCoinID(id))
	return &CoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Coin.
func (c *CoinClient) Delete() *CoinDelete {
	mutation := newCoinMutation(c.config, OpDelete)
	return &CoinDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinClient) DeleteOne(co *Coin) *CoinDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CoinClient) DeleteOneID(id int) *CoinDeleteOne {
	builder := c.Delete().Where(coin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinDeleteOne{builder}
}

// Query returns a query builder for Coin.
func (c *CoinClient) Query() *CoinQuery {
	return &CoinQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoin},
		inters: c.Interceptors(),
	}
}

// Get returns a Coin entity by its id.
func (c *CoinClient) Get(ctx context.Context, id int) (*Coin, error) {
	return c.Query().Where(coin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinClient) GetX(ctx context.Context, id int) *Coin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCosts queries the costs edge of a Coin.
func (c *CoinClient) QueryCosts(co *Coin) *CostQuery {
	query := (&CostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coin.Table, coin.FieldID, id),
			sqlgraph.To(cost.Table, cost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, coin.CostsTable, coin.CostsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CoinClient) Hooks() []Hook {
	return c.hooks.Coin
}

// Interceptors returns the client interceptors.
func (c *CoinClient) Interceptors() []Interceptor {
	return c.inters.Coin
}

func (c *CoinClient) mutate(ctx context.Context, m *CoinMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CoinCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CoinUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CoinDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Coin mutation op: %q", m.Op())
	}
}

// ConditionClient is a client for the Condition schema.
type ConditionClient struct {
	config
}

// NewConditionClient returns a client for the Condition from the given config.
func NewConditionClient(c config) *ConditionClient {
	return &ConditionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `condition.Hooks(f(g(h())))`.
func (c *ConditionClient) Use(hooks ...Hook) {
	c.hooks.Condition = append(c.hooks.Condition, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `condition.Intercept(f(g(h())))`.
func (c *ConditionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Condition = append(c.inters.Condition, interceptors...)
}

// Create returns a builder for creating a Condition entity.
func (c *ConditionClient) Create() *ConditionCreate {
	mutation := newConditionMutation(c.config, OpCreate)
	return &ConditionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Condition entities.
func (c *ConditionClient) CreateBulk(builders ...*ConditionCreate) *ConditionCreateBulk {
	return &ConditionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConditionClient) MapCreateBulk(slice any, setFunc func(*ConditionCreate, int)) *ConditionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConditionCreateBulk{err: fmt.Errorf("calling to ConditionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConditionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConditionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Condition.
func (c *ConditionClient) Update() *ConditionUpdate {
	mutation := newConditionMutation(c.config, OpUpdate)
	return &ConditionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConditionClient) UpdateOne(co *Condition) *ConditionUpdateOne {
	mutation := newConditionMutation(c.config, OpUpdateOne, withCondition(co))
	return &ConditionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConditionClient) UpdateOneID(id int) *ConditionUpdateOne {
	mutation := newConditionMutation(c.config, OpUpdateOne, withConditionID(id))
	return &ConditionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Condition.
func (c *ConditionClient) Delete() *ConditionDelete {
	mutation := newConditionMutation(c.config, OpDelete)
	return &ConditionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConditionClient) DeleteOne(co *Condition) *ConditionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConditionClient) DeleteOneID(id int) *ConditionDeleteOne {
	builder := c.Delete().Where(condition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConditionDeleteOne{builder}
}

// Query returns a query builder for Condition.
func (c *ConditionClient) Query() *ConditionQuery {
	return &ConditionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCondition},
		inters: c.Interceptors(),
	}
}

// Get returns a Condition entity by its id.
func (c *ConditionClient) Get(ctx context.Context, id int) (*Condition, error) {
	return c.Query().Where(condition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConditionClient) GetX(ctx context.Context, id int) *Condition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConditionClient) Hooks() []Hook {
	return c.hooks.Condition
}

// Interceptors returns the client interceptors.
func (c *ConditionClient) Interceptors() []Interceptor {
	return c.inters.Condition
}

func (c *ConditionClient) mutate(ctx context.Context, m *ConditionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConditionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConditionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConditionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConditionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Condition mutation op: %q", m.Op())
	}
}

// CostClient is a client for the Cost schema.
type CostClient struct {
	config
}

// NewCostClient returns a client for the Cost from the given config.
func NewCostClient(c config) *CostClient {
	return &CostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cost.Hooks(f(g(h())))`.
func (c *CostClient) Use(hooks ...Hook) {
	c.hooks.Cost = append(c.hooks.Cost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cost.Intercept(f(g(h())))`.
func (c *CostClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cost = append(c.inters.Cost, interceptors...)
}

// Create returns a builder for creating a Cost entity.
func (c *CostClient) Create() *CostCreate {
	mutation := newCostMutation(c.config, OpCreate)
	return &CostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cost entities.
func (c *CostClient) CreateBulk(builders ...*CostCreate) *CostCreateBulk {
	return &CostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CostClient) MapCreateBulk(slice any, setFunc func(*CostCreate, int)) *CostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CostCreateBulk{err: fmt.Errorf("calling to CostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cost.
func (c *CostClient) Update() *CostUpdate {
	mutation := newCostMutation(c.config, OpUpdate)
	return &CostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CostClient) UpdateOne(co *Cost) *CostUpdateOne {
	mutation := newCostMutation(c.config, OpUpdateOne, withCost(co))
	return &CostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CostClient) UpdateOneID(id int) *CostUpdateOne {
	mutation := newCostMutation(c.config, OpUpdateOne, withCostID(id))
	return &CostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cost.
func (c *CostClient) Delete() *CostDelete {
	mutation := newCostMutation(c.config, OpDelete)
	return &CostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CostClient) DeleteOne(co *Cost) *CostDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CostClient) DeleteOneID(id int) *CostDeleteOne {
	builder := c.Delete().Where(cost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CostDeleteOne{builder}
}

// Query returns a query builder for Cost.
func (c *CostClient) Query() *CostQuery {
	return &CostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCost},
		inters: c.Interceptors(),
	}
}

// Get returns a Cost entity by its id.
func (c *CostClient) Get(ctx context.Context, id int) (*Cost, error) {
	return c.Query().Where(cost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CostClient) GetX(ctx context.Context, id int) *Cost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCoin queries the coin edge of a Cost.
func (c *CostClient) QueryCoin(co *Cost) *CoinQuery {
	query := (&CoinClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cost.Table, cost.FieldID, id),
			sqlgraph.To(coin.Table, coin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, cost.CoinTable, cost.CoinColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a Cost.
func (c *CostClient) QueryEquipment(co *Cost) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cost.Table, cost.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, cost.EquipmentTable, cost.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CostClient) Hooks() []Hook {
	return c.hooks.Cost
}

// Interceptors returns the client interceptors.
func (c *CostClient) Interceptors() []Interceptor {
	return c.inters.Cost
}

func (c *CostClient) mutate(ctx context.Context, m *CostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cost mutation op: %q", m.Op())
	}
}

// DamageTypeClient is a client for the DamageType schema.
type DamageTypeClient struct {
	config
}

// NewDamageTypeClient returns a client for the DamageType from the given config.
func NewDamageTypeClient(c config) *DamageTypeClient {
	return &DamageTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `damagetype.Hooks(f(g(h())))`.
func (c *DamageTypeClient) Use(hooks ...Hook) {
	c.hooks.DamageType = append(c.hooks.DamageType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `damagetype.Intercept(f(g(h())))`.
func (c *DamageTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.DamageType = append(c.inters.DamageType, interceptors...)
}

// Create returns a builder for creating a DamageType entity.
func (c *DamageTypeClient) Create() *DamageTypeCreate {
	mutation := newDamageTypeMutation(c.config, OpCreate)
	return &DamageTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DamageType entities.
func (c *DamageTypeClient) CreateBulk(builders ...*DamageTypeCreate) *DamageTypeCreateBulk {
	return &DamageTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DamageTypeClient) MapCreateBulk(slice any, setFunc func(*DamageTypeCreate, int)) *DamageTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DamageTypeCreateBulk{err: fmt.Errorf("calling to DamageTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DamageTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DamageTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DamageType.
func (c *DamageTypeClient) Update() *DamageTypeUpdate {
	mutation := newDamageTypeMutation(c.config, OpUpdate)
	return &DamageTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DamageTypeClient) UpdateOne(dt *DamageType) *DamageTypeUpdateOne {
	mutation := newDamageTypeMutation(c.config, OpUpdateOne, withDamageType(dt))
	return &DamageTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DamageTypeClient) UpdateOneID(id int) *DamageTypeUpdateOne {
	mutation := newDamageTypeMutation(c.config, OpUpdateOne, withDamageTypeID(id))
	return &DamageTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DamageType.
func (c *DamageTypeClient) Delete() *DamageTypeDelete {
	mutation := newDamageTypeMutation(c.config, OpDelete)
	return &DamageTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DamageTypeClient) DeleteOne(dt *DamageType) *DamageTypeDeleteOne {
	return c.DeleteOneID(dt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DamageTypeClient) DeleteOneID(id int) *DamageTypeDeleteOne {
	builder := c.Delete().Where(damagetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DamageTypeDeleteOne{builder}
}

// Query returns a query builder for DamageType.
func (c *DamageTypeClient) Query() *DamageTypeQuery {
	return &DamageTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDamageType},
		inters: c.Interceptors(),
	}
}

// Get returns a DamageType entity by its id.
func (c *DamageTypeClient) Get(ctx context.Context, id int) (*DamageType, error) {
	return c.Query().Where(damagetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DamageTypeClient) GetX(ctx context.Context, id int) *DamageType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWeapons queries the weapons edge of a DamageType.
func (c *DamageTypeClient) QueryWeapons(dt *DamageType) *WeaponQuery {
	query := (&WeaponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(damagetype.Table, damagetype.FieldID, id),
			sqlgraph.To(weapon.Table, weapon.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, damagetype.WeaponsTable, damagetype.WeaponsColumn),
		)
		fromV = sqlgraph.Neighbors(dt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DamageTypeClient) Hooks() []Hook {
	return c.hooks.DamageType
}

// Interceptors returns the client interceptors.
func (c *DamageTypeClient) Interceptors() []Interceptor {
	return c.inters.DamageType
}

func (c *DamageTypeClient) mutate(ctx context.Context, m *DamageTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DamageTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DamageTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DamageTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DamageTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DamageType mutation op: %q", m.Op())
	}
}

// EquipmentClient is a client for the Equipment schema.
type EquipmentClient struct {
	config
}

// NewEquipmentClient returns a client for the Equipment from the given config.
func NewEquipmentClient(c config) *EquipmentClient {
	return &EquipmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipment.Hooks(f(g(h())))`.
func (c *EquipmentClient) Use(hooks ...Hook) {
	c.hooks.Equipment = append(c.hooks.Equipment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `equipment.Intercept(f(g(h())))`.
func (c *EquipmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Equipment = append(c.inters.Equipment, interceptors...)
}

// Create returns a builder for creating a Equipment entity.
func (c *EquipmentClient) Create() *EquipmentCreate {
	mutation := newEquipmentMutation(c.config, OpCreate)
	return &EquipmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Equipment entities.
func (c *EquipmentClient) CreateBulk(builders ...*EquipmentCreate) *EquipmentCreateBulk {
	return &EquipmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EquipmentClient) MapCreateBulk(slice any, setFunc func(*EquipmentCreate, int)) *EquipmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EquipmentCreateBulk{err: fmt.Errorf("calling to EquipmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EquipmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EquipmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Equipment.
func (c *EquipmentClient) Update() *EquipmentUpdate {
	mutation := newEquipmentMutation(c.config, OpUpdate)
	return &EquipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentClient) UpdateOne(e *Equipment) *EquipmentUpdateOne {
	mutation := newEquipmentMutation(c.config, OpUpdateOne, withEquipment(e))
	return &EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentClient) UpdateOneID(id int) *EquipmentUpdateOne {
	mutation := newEquipmentMutation(c.config, OpUpdateOne, withEquipmentID(id))
	return &EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Equipment.
func (c *EquipmentClient) Delete() *EquipmentDelete {
	mutation := newEquipmentMutation(c.config, OpDelete)
	return &EquipmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EquipmentClient) DeleteOne(e *Equipment) *EquipmentDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EquipmentClient) DeleteOneID(id int) *EquipmentDeleteOne {
	builder := c.Delete().Where(equipment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentDeleteOne{builder}
}

// Query returns a query builder for Equipment.
func (c *EquipmentClient) Query() *EquipmentQuery {
	return &EquipmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEquipment},
		inters: c.Interceptors(),
	}
}

// Get returns a Equipment entity by its id.
func (c *EquipmentClient) Get(ctx context.Context, id int) (*Equipment, error) {
	return c.Query().Where(equipment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentClient) GetX(ctx context.Context, id int) *Equipment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCost queries the cost edge of a Equipment.
func (c *EquipmentClient) QueryCost(e *Equipment) *CostQuery {
	query := (&CostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(cost.Table, cost.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.CostTable, equipment.CostColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGear queries the gear edge of a Equipment.
func (c *EquipmentClient) QueryGear(e *Equipment) *GearQuery {
	query := (&GearClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(gear.Table, gear.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.GearTable, equipment.GearColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTool queries the tool edge of a Equipment.
func (c *EquipmentClient) QueryTool(e *Equipment) *ToolQuery {
	query := (&ToolClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(tool.Table, tool.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.ToolTable, equipment.ToolColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWeapon queries the weapon edge of a Equipment.
func (c *EquipmentClient) QueryWeapon(e *Equipment) *WeaponQuery {
	query := (&WeaponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(weapon.Table, weapon.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.WeaponTable, equipment.WeaponColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVehicle queries the vehicle edge of a Equipment.
func (c *EquipmentClient) QueryVehicle(e *Equipment) *VehicleQuery {
	query := (&VehicleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(vehicle.Table, vehicle.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.VehicleTable, equipment.VehicleColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArmor queries the armor edge of a Equipment.
func (c *EquipmentClient) QueryArmor(e *Equipment) *ArmorQuery {
	query := (&ArmorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(armor.Table, armor.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.ArmorTable, equipment.ArmorColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentEntries queries the equipment_entries edge of a Equipment.
func (c *EquipmentClient) QueryEquipmentEntries(e *Equipment) *EquipmentEntryQuery {
	query := (&EquipmentEntryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(equipmententry.Table, equipmententry.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, equipment.EquipmentEntriesTable, equipment.EquipmentEntriesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentClient) Hooks() []Hook {
	return c.hooks.Equipment
}

// Interceptors returns the client interceptors.
func (c *EquipmentClient) Interceptors() []Interceptor {
	return c.inters.Equipment
}

func (c *EquipmentClient) mutate(ctx context.Context, m *EquipmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EquipmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EquipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EquipmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Equipment mutation op: %q", m.Op())
	}
}

// EquipmentEntryClient is a client for the EquipmentEntry schema.
type EquipmentEntryClient struct {
	config
}

// NewEquipmentEntryClient returns a client for the EquipmentEntry from the given config.
func NewEquipmentEntryClient(c config) *EquipmentEntryClient {
	return &EquipmentEntryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmententry.Hooks(f(g(h())))`.
func (c *EquipmentEntryClient) Use(hooks ...Hook) {
	c.hooks.EquipmentEntry = append(c.hooks.EquipmentEntry, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `equipmententry.Intercept(f(g(h())))`.
func (c *EquipmentEntryClient) Intercept(interceptors ...Interceptor) {
	c.inters.EquipmentEntry = append(c.inters.EquipmentEntry, interceptors...)
}

// Create returns a builder for creating a EquipmentEntry entity.
func (c *EquipmentEntryClient) Create() *EquipmentEntryCreate {
	mutation := newEquipmentEntryMutation(c.config, OpCreate)
	return &EquipmentEntryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentEntry entities.
func (c *EquipmentEntryClient) CreateBulk(builders ...*EquipmentEntryCreate) *EquipmentEntryCreateBulk {
	return &EquipmentEntryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EquipmentEntryClient) MapCreateBulk(slice any, setFunc func(*EquipmentEntryCreate, int)) *EquipmentEntryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EquipmentEntryCreateBulk{err: fmt.Errorf("calling to EquipmentEntryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EquipmentEntryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EquipmentEntryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentEntry.
func (c *EquipmentEntryClient) Update() *EquipmentEntryUpdate {
	mutation := newEquipmentEntryMutation(c.config, OpUpdate)
	return &EquipmentEntryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentEntryClient) UpdateOne(ee *EquipmentEntry) *EquipmentEntryUpdateOne {
	mutation := newEquipmentEntryMutation(c.config, OpUpdateOne, withEquipmentEntry(ee))
	return &EquipmentEntryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentEntryClient) UpdateOneID(id int) *EquipmentEntryUpdateOne {
	mutation := newEquipmentEntryMutation(c.config, OpUpdateOne, withEquipmentEntryID(id))
	return &EquipmentEntryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentEntry.
func (c *EquipmentEntryClient) Delete() *EquipmentEntryDelete {
	mutation := newEquipmentEntryMutation(c.config, OpDelete)
	return &EquipmentEntryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EquipmentEntryClient) DeleteOne(ee *EquipmentEntry) *EquipmentEntryDeleteOne {
	return c.DeleteOneID(ee.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EquipmentEntryClient) DeleteOneID(id int) *EquipmentEntryDeleteOne {
	builder := c.Delete().Where(equipmententry.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentEntryDeleteOne{builder}
}

// Query returns a query builder for EquipmentEntry.
func (c *EquipmentEntryClient) Query() *EquipmentEntryQuery {
	return &EquipmentEntryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEquipmentEntry},
		inters: c.Interceptors(),
	}
}

// Get returns a EquipmentEntry entity by its id.
func (c *EquipmentEntryClient) Get(ctx context.Context, id int) (*EquipmentEntry, error) {
	return c.Query().Where(equipmententry.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentEntryClient) GetX(ctx context.Context, id int) *EquipmentEntry {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClass queries the class edge of a EquipmentEntry.
func (c *EquipmentEntryClient) QueryClass(ee *EquipmentEntry) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ee.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmententry.Table, equipmententry.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, equipmententry.ClassTable, equipmententry.ClassPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ee.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a EquipmentEntry.
func (c *EquipmentEntryClient) QueryEquipment(ee *EquipmentEntry) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ee.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmententry.Table, equipmententry.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipmententry.EquipmentTable, equipmententry.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(ee.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentEntryClient) Hooks() []Hook {
	return c.hooks.EquipmentEntry
}

// Interceptors returns the client interceptors.
func (c *EquipmentEntryClient) Interceptors() []Interceptor {
	return c.inters.EquipmentEntry
}

func (c *EquipmentEntryClient) mutate(ctx context.Context, m *EquipmentEntryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EquipmentEntryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EquipmentEntryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EquipmentEntryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EquipmentEntryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EquipmentEntry mutation op: %q", m.Op())
	}
}

// FeatClient is a client for the Feat schema.
type FeatClient struct {
	config
}

// NewFeatClient returns a client for the Feat from the given config.
func NewFeatClient(c config) *FeatClient {
	return &FeatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feat.Hooks(f(g(h())))`.
func (c *FeatClient) Use(hooks ...Hook) {
	c.hooks.Feat = append(c.hooks.Feat, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feat.Intercept(f(g(h())))`.
func (c *FeatClient) Intercept(interceptors ...Interceptor) {
	c.inters.Feat = append(c.inters.Feat, interceptors...)
}

// Create returns a builder for creating a Feat entity.
func (c *FeatClient) Create() *FeatCreate {
	mutation := newFeatMutation(c.config, OpCreate)
	return &FeatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feat entities.
func (c *FeatClient) CreateBulk(builders ...*FeatCreate) *FeatCreateBulk {
	return &FeatCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeatClient) MapCreateBulk(slice any, setFunc func(*FeatCreate, int)) *FeatCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeatCreateBulk{err: fmt.Errorf("calling to FeatClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeatCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feat.
func (c *FeatClient) Update() *FeatUpdate {
	mutation := newFeatMutation(c.config, OpUpdate)
	return &FeatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeatClient) UpdateOne(f *Feat) *FeatUpdateOne {
	mutation := newFeatMutation(c.config, OpUpdateOne, withFeat(f))
	return &FeatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeatClient) UpdateOneID(id int) *FeatUpdateOne {
	mutation := newFeatMutation(c.config, OpUpdateOne, withFeatID(id))
	return &FeatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feat.
func (c *FeatClient) Delete() *FeatDelete {
	mutation := newFeatMutation(c.config, OpDelete)
	return &FeatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeatClient) DeleteOne(f *Feat) *FeatDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeatClient) DeleteOneID(id int) *FeatDeleteOne {
	builder := c.Delete().Where(feat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeatDeleteOne{builder}
}

// Query returns a query builder for Feat.
func (c *FeatClient) Query() *FeatQuery {
	return &FeatQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeat},
		inters: c.Interceptors(),
	}
}

// Get returns a Feat entity by its id.
func (c *FeatClient) Get(ctx context.Context, id int) (*Feat, error) {
	return c.Query().Where(feat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeatClient) GetX(ctx context.Context, id int) *Feat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeatClient) Hooks() []Hook {
	return c.hooks.Feat
}

// Interceptors returns the client interceptors.
func (c *FeatClient) Interceptors() []Interceptor {
	return c.inters.Feat
}

func (c *FeatClient) mutate(ctx context.Context, m *FeatMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeatCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeatUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeatDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Feat mutation op: %q", m.Op())
	}
}

// FeatureClient is a client for the Feature schema.
type FeatureClient struct {
	config
}

// NewFeatureClient returns a client for the Feature from the given config.
func NewFeatureClient(c config) *FeatureClient {
	return &FeatureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feature.Hooks(f(g(h())))`.
func (c *FeatureClient) Use(hooks ...Hook) {
	c.hooks.Feature = append(c.hooks.Feature, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feature.Intercept(f(g(h())))`.
func (c *FeatureClient) Intercept(interceptors ...Interceptor) {
	c.inters.Feature = append(c.inters.Feature, interceptors...)
}

// Create returns a builder for creating a Feature entity.
func (c *FeatureClient) Create() *FeatureCreate {
	mutation := newFeatureMutation(c.config, OpCreate)
	return &FeatureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feature entities.
func (c *FeatureClient) CreateBulk(builders ...*FeatureCreate) *FeatureCreateBulk {
	return &FeatureCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeatureClient) MapCreateBulk(slice any, setFunc func(*FeatureCreate, int)) *FeatureCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeatureCreateBulk{err: fmt.Errorf("calling to FeatureClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeatureCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeatureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feature.
func (c *FeatureClient) Update() *FeatureUpdate {
	mutation := newFeatureMutation(c.config, OpUpdate)
	return &FeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeatureClient) UpdateOne(f *Feature) *FeatureUpdateOne {
	mutation := newFeatureMutation(c.config, OpUpdateOne, withFeature(f))
	return &FeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeatureClient) UpdateOneID(id int) *FeatureUpdateOne {
	mutation := newFeatureMutation(c.config, OpUpdateOne, withFeatureID(id))
	return &FeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feature.
func (c *FeatureClient) Delete() *FeatureDelete {
	mutation := newFeatureMutation(c.config, OpDelete)
	return &FeatureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeatureClient) DeleteOne(f *Feature) *FeatureDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeatureClient) DeleteOneID(id int) *FeatureDeleteOne {
	builder := c.Delete().Where(feature.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeatureDeleteOne{builder}
}

// Query returns a query builder for Feature.
func (c *FeatureClient) Query() *FeatureQuery {
	return &FeatureQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeature},
		inters: c.Interceptors(),
	}
}

// Get returns a Feature entity by its id.
func (c *FeatureClient) Get(ctx context.Context, id int) (*Feature, error) {
	return c.Query().Where(feature.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeatureClient) GetX(ctx context.Context, id int) *Feature {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPrerequisites queries the prerequisites edge of a Feature.
func (c *FeatureClient) QueryPrerequisites(f *Feature) *PrerequisiteQuery {
	query := (&PrerequisiteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, id),
			sqlgraph.To(prerequisite.Table, prerequisite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, feature.PrerequisitesTable, feature.PrerequisitesColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeatureClient) Hooks() []Hook {
	return c.hooks.Feature
}

// Interceptors returns the client interceptors.
func (c *FeatureClient) Interceptors() []Interceptor {
	return c.inters.Feature
}

func (c *FeatureClient) mutate(ctx context.Context, m *FeatureMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeatureCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeatureDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Feature mutation op: %q", m.Op())
	}
}

// GearClient is a client for the Gear schema.
type GearClient struct {
	config
}

// NewGearClient returns a client for the Gear from the given config.
func NewGearClient(c config) *GearClient {
	return &GearClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gear.Hooks(f(g(h())))`.
func (c *GearClient) Use(hooks ...Hook) {
	c.hooks.Gear = append(c.hooks.Gear, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gear.Intercept(f(g(h())))`.
func (c *GearClient) Intercept(interceptors ...Interceptor) {
	c.inters.Gear = append(c.inters.Gear, interceptors...)
}

// Create returns a builder for creating a Gear entity.
func (c *GearClient) Create() *GearCreate {
	mutation := newGearMutation(c.config, OpCreate)
	return &GearCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Gear entities.
func (c *GearClient) CreateBulk(builders ...*GearCreate) *GearCreateBulk {
	return &GearCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GearClient) MapCreateBulk(slice any, setFunc func(*GearCreate, int)) *GearCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GearCreateBulk{err: fmt.Errorf("calling to GearClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GearCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GearCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Gear.
func (c *GearClient) Update() *GearUpdate {
	mutation := newGearMutation(c.config, OpUpdate)
	return &GearUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GearClient) UpdateOne(ge *Gear) *GearUpdateOne {
	mutation := newGearMutation(c.config, OpUpdateOne, withGear(ge))
	return &GearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GearClient) UpdateOneID(id int) *GearUpdateOne {
	mutation := newGearMutation(c.config, OpUpdateOne, withGearID(id))
	return &GearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Gear.
func (c *GearClient) Delete() *GearDelete {
	mutation := newGearMutation(c.config, OpDelete)
	return &GearDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GearClient) DeleteOne(ge *Gear) *GearDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GearClient) DeleteOneID(id int) *GearDeleteOne {
	builder := c.Delete().Where(gear.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GearDeleteOne{builder}
}

// Query returns a query builder for Gear.
func (c *GearClient) Query() *GearQuery {
	return &GearQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGear},
		inters: c.Interceptors(),
	}
}

// Get returns a Gear entity by its id.
func (c *GearClient) Get(ctx context.Context, id int) (*Gear, error) {
	return c.Query().Where(gear.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GearClient) GetX(ctx context.Context, id int) *Gear {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a Gear.
func (c *GearClient) QueryEquipment(ge *Gear) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gear.Table, gear.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, gear.EquipmentTable, gear.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GearClient) Hooks() []Hook {
	return c.hooks.Gear
}

// Interceptors returns the client interceptors.
func (c *GearClient) Interceptors() []Interceptor {
	return c.inters.Gear
}

func (c *GearClient) mutate(ctx context.Context, m *GearMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GearCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GearUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GearDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Gear mutation op: %q", m.Op())
	}
}

// LanguageClient is a client for the Language schema.
type LanguageClient struct {
	config
}

// NewLanguageClient returns a client for the Language from the given config.
func NewLanguageClient(c config) *LanguageClient {
	return &LanguageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `language.Hooks(f(g(h())))`.
func (c *LanguageClient) Use(hooks ...Hook) {
	c.hooks.Language = append(c.hooks.Language, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `language.Intercept(f(g(h())))`.
func (c *LanguageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Language = append(c.inters.Language, interceptors...)
}

// Create returns a builder for creating a Language entity.
func (c *LanguageClient) Create() *LanguageCreate {
	mutation := newLanguageMutation(c.config, OpCreate)
	return &LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Language entities.
func (c *LanguageClient) CreateBulk(builders ...*LanguageCreate) *LanguageCreateBulk {
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LanguageClient) MapCreateBulk(slice any, setFunc func(*LanguageCreate, int)) *LanguageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LanguageCreateBulk{err: fmt.Errorf("calling to LanguageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LanguageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Language.
func (c *LanguageClient) Update() *LanguageUpdate {
	mutation := newLanguageMutation(c.config, OpUpdate)
	return &LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LanguageClient) UpdateOne(l *Language) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguage(l))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LanguageClient) UpdateOneID(id int) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguageID(id))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Language.
func (c *LanguageClient) Delete() *LanguageDelete {
	mutation := newLanguageMutation(c.config, OpDelete)
	return &LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LanguageClient) DeleteOne(l *Language) *LanguageDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LanguageClient) DeleteOneID(id int) *LanguageDeleteOne {
	builder := c.Delete().Where(language.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LanguageDeleteOne{builder}
}

// Query returns a query builder for Language.
func (c *LanguageClient) Query() *LanguageQuery {
	return &LanguageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLanguage},
		inters: c.Interceptors(),
	}
}

// Get returns a Language entity by its id.
func (c *LanguageClient) Get(ctx context.Context, id int) (*Language, error) {
	return c.Query().Where(language.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LanguageClient) GetX(ctx context.Context, id int) *Language {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRace queries the race edge of a Language.
func (c *LanguageClient) QueryRace(l *Language) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, language.RaceTable, language.RacePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOptions queries the options edge of a Language.
func (c *LanguageClient) QueryOptions(l *Language) *LanguageChoiceQuery {
	query := (&LanguageChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(languagechoice.Table, languagechoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, language.OptionsTable, language.OptionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LanguageClient) Hooks() []Hook {
	return c.hooks.Language
}

// Interceptors returns the client interceptors.
func (c *LanguageClient) Interceptors() []Interceptor {
	return c.inters.Language
}

func (c *LanguageClient) mutate(ctx context.Context, m *LanguageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Language mutation op: %q", m.Op())
	}
}

// LanguageChoiceClient is a client for the LanguageChoice schema.
type LanguageChoiceClient struct {
	config
}

// NewLanguageChoiceClient returns a client for the LanguageChoice from the given config.
func NewLanguageChoiceClient(c config) *LanguageChoiceClient {
	return &LanguageChoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `languagechoice.Hooks(f(g(h())))`.
func (c *LanguageChoiceClient) Use(hooks ...Hook) {
	c.hooks.LanguageChoice = append(c.hooks.LanguageChoice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `languagechoice.Intercept(f(g(h())))`.
func (c *LanguageChoiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.LanguageChoice = append(c.inters.LanguageChoice, interceptors...)
}

// Create returns a builder for creating a LanguageChoice entity.
func (c *LanguageChoiceClient) Create() *LanguageChoiceCreate {
	mutation := newLanguageChoiceMutation(c.config, OpCreate)
	return &LanguageChoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LanguageChoice entities.
func (c *LanguageChoiceClient) CreateBulk(builders ...*LanguageChoiceCreate) *LanguageChoiceCreateBulk {
	return &LanguageChoiceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LanguageChoiceClient) MapCreateBulk(slice any, setFunc func(*LanguageChoiceCreate, int)) *LanguageChoiceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LanguageChoiceCreateBulk{err: fmt.Errorf("calling to LanguageChoiceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LanguageChoiceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LanguageChoiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LanguageChoice.
func (c *LanguageChoiceClient) Update() *LanguageChoiceUpdate {
	mutation := newLanguageChoiceMutation(c.config, OpUpdate)
	return &LanguageChoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LanguageChoiceClient) UpdateOne(lc *LanguageChoice) *LanguageChoiceUpdateOne {
	mutation := newLanguageChoiceMutation(c.config, OpUpdateOne, withLanguageChoice(lc))
	return &LanguageChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LanguageChoiceClient) UpdateOneID(id int) *LanguageChoiceUpdateOne {
	mutation := newLanguageChoiceMutation(c.config, OpUpdateOne, withLanguageChoiceID(id))
	return &LanguageChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LanguageChoice.
func (c *LanguageChoiceClient) Delete() *LanguageChoiceDelete {
	mutation := newLanguageChoiceMutation(c.config, OpDelete)
	return &LanguageChoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LanguageChoiceClient) DeleteOne(lc *LanguageChoice) *LanguageChoiceDeleteOne {
	return c.DeleteOneID(lc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LanguageChoiceClient) DeleteOneID(id int) *LanguageChoiceDeleteOne {
	builder := c.Delete().Where(languagechoice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LanguageChoiceDeleteOne{builder}
}

// Query returns a query builder for LanguageChoice.
func (c *LanguageChoiceClient) Query() *LanguageChoiceQuery {
	return &LanguageChoiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLanguageChoice},
		inters: c.Interceptors(),
	}
}

// Get returns a LanguageChoice entity by its id.
func (c *LanguageChoiceClient) Get(ctx context.Context, id int) (*LanguageChoice, error) {
	return c.Query().Where(languagechoice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LanguageChoiceClient) GetX(ctx context.Context, id int) *LanguageChoice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLanguages queries the languages edge of a LanguageChoice.
func (c *LanguageChoiceClient) QueryLanguages(lc *LanguageChoice) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(languagechoice.Table, languagechoice.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, languagechoice.LanguagesTable, languagechoice.LanguagesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(lc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRace queries the race edge of a LanguageChoice.
func (c *LanguageChoiceClient) QueryRace(lc *LanguageChoice) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(languagechoice.Table, languagechoice.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, languagechoice.RaceTable, languagechoice.RaceColumn),
		)
		fromV = sqlgraph.Neighbors(lc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LanguageChoiceClient) Hooks() []Hook {
	return c.hooks.LanguageChoice
}

// Interceptors returns the client interceptors.
func (c *LanguageChoiceClient) Interceptors() []Interceptor {
	return c.inters.LanguageChoice
}

func (c *LanguageChoiceClient) mutate(ctx context.Context, m *LanguageChoiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LanguageChoiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LanguageChoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LanguageChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LanguageChoiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LanguageChoice mutation op: %q", m.Op())
	}
}

// MagicSchoolClient is a client for the MagicSchool schema.
type MagicSchoolClient struct {
	config
}

// NewMagicSchoolClient returns a client for the MagicSchool from the given config.
func NewMagicSchoolClient(c config) *MagicSchoolClient {
	return &MagicSchoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `magicschool.Hooks(f(g(h())))`.
func (c *MagicSchoolClient) Use(hooks ...Hook) {
	c.hooks.MagicSchool = append(c.hooks.MagicSchool, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `magicschool.Intercept(f(g(h())))`.
func (c *MagicSchoolClient) Intercept(interceptors ...Interceptor) {
	c.inters.MagicSchool = append(c.inters.MagicSchool, interceptors...)
}

// Create returns a builder for creating a MagicSchool entity.
func (c *MagicSchoolClient) Create() *MagicSchoolCreate {
	mutation := newMagicSchoolMutation(c.config, OpCreate)
	return &MagicSchoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MagicSchool entities.
func (c *MagicSchoolClient) CreateBulk(builders ...*MagicSchoolCreate) *MagicSchoolCreateBulk {
	return &MagicSchoolCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MagicSchoolClient) MapCreateBulk(slice any, setFunc func(*MagicSchoolCreate, int)) *MagicSchoolCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MagicSchoolCreateBulk{err: fmt.Errorf("calling to MagicSchoolClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MagicSchoolCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MagicSchoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MagicSchool.
func (c *MagicSchoolClient) Update() *MagicSchoolUpdate {
	mutation := newMagicSchoolMutation(c.config, OpUpdate)
	return &MagicSchoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MagicSchoolClient) UpdateOne(ms *MagicSchool) *MagicSchoolUpdateOne {
	mutation := newMagicSchoolMutation(c.config, OpUpdateOne, withMagicSchool(ms))
	return &MagicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MagicSchoolClient) UpdateOneID(id int) *MagicSchoolUpdateOne {
	mutation := newMagicSchoolMutation(c.config, OpUpdateOne, withMagicSchoolID(id))
	return &MagicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MagicSchool.
func (c *MagicSchoolClient) Delete() *MagicSchoolDelete {
	mutation := newMagicSchoolMutation(c.config, OpDelete)
	return &MagicSchoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MagicSchoolClient) DeleteOne(ms *MagicSchool) *MagicSchoolDeleteOne {
	return c.DeleteOneID(ms.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MagicSchoolClient) DeleteOneID(id int) *MagicSchoolDeleteOne {
	builder := c.Delete().Where(magicschool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MagicSchoolDeleteOne{builder}
}

// Query returns a query builder for MagicSchool.
func (c *MagicSchoolClient) Query() *MagicSchoolQuery {
	return &MagicSchoolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMagicSchool},
		inters: c.Interceptors(),
	}
}

// Get returns a MagicSchool entity by its id.
func (c *MagicSchoolClient) Get(ctx context.Context, id int) (*MagicSchool, error) {
	return c.Query().Where(magicschool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MagicSchoolClient) GetX(ctx context.Context, id int) *MagicSchool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MagicSchoolClient) Hooks() []Hook {
	return c.hooks.MagicSchool
}

// Interceptors returns the client interceptors.
func (c *MagicSchoolClient) Interceptors() []Interceptor {
	return c.inters.MagicSchool
}

func (c *MagicSchoolClient) mutate(ctx context.Context, m *MagicSchoolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MagicSchoolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MagicSchoolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MagicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MagicSchoolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MagicSchool mutation op: %q", m.Op())
	}
}

// PrerequisiteClient is a client for the Prerequisite schema.
type PrerequisiteClient struct {
	config
}

// NewPrerequisiteClient returns a client for the Prerequisite from the given config.
func NewPrerequisiteClient(c config) *PrerequisiteClient {
	return &PrerequisiteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prerequisite.Hooks(f(g(h())))`.
func (c *PrerequisiteClient) Use(hooks ...Hook) {
	c.hooks.Prerequisite = append(c.hooks.Prerequisite, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `prerequisite.Intercept(f(g(h())))`.
func (c *PrerequisiteClient) Intercept(interceptors ...Interceptor) {
	c.inters.Prerequisite = append(c.inters.Prerequisite, interceptors...)
}

// Create returns a builder for creating a Prerequisite entity.
func (c *PrerequisiteClient) Create() *PrerequisiteCreate {
	mutation := newPrerequisiteMutation(c.config, OpCreate)
	return &PrerequisiteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Prerequisite entities.
func (c *PrerequisiteClient) CreateBulk(builders ...*PrerequisiteCreate) *PrerequisiteCreateBulk {
	return &PrerequisiteCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PrerequisiteClient) MapCreateBulk(slice any, setFunc func(*PrerequisiteCreate, int)) *PrerequisiteCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PrerequisiteCreateBulk{err: fmt.Errorf("calling to PrerequisiteClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PrerequisiteCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PrerequisiteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Prerequisite.
func (c *PrerequisiteClient) Update() *PrerequisiteUpdate {
	mutation := newPrerequisiteMutation(c.config, OpUpdate)
	return &PrerequisiteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrerequisiteClient) UpdateOne(pr *Prerequisite) *PrerequisiteUpdateOne {
	mutation := newPrerequisiteMutation(c.config, OpUpdateOne, withPrerequisite(pr))
	return &PrerequisiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrerequisiteClient) UpdateOneID(id int) *PrerequisiteUpdateOne {
	mutation := newPrerequisiteMutation(c.config, OpUpdateOne, withPrerequisiteID(id))
	return &PrerequisiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Prerequisite.
func (c *PrerequisiteClient) Delete() *PrerequisiteDelete {
	mutation := newPrerequisiteMutation(c.config, OpDelete)
	return &PrerequisiteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PrerequisiteClient) DeleteOne(pr *Prerequisite) *PrerequisiteDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PrerequisiteClient) DeleteOneID(id int) *PrerequisiteDeleteOne {
	builder := c.Delete().Where(prerequisite.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrerequisiteDeleteOne{builder}
}

// Query returns a query builder for Prerequisite.
func (c *PrerequisiteClient) Query() *PrerequisiteQuery {
	return &PrerequisiteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrerequisite},
		inters: c.Interceptors(),
	}
}

// Get returns a Prerequisite entity by its id.
func (c *PrerequisiteClient) Get(ctx context.Context, id int) (*Prerequisite, error) {
	return c.Query().Where(prerequisite.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrerequisiteClient) GetX(ctx context.Context, id int) *Prerequisite {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFeature queries the feature edge of a Prerequisite.
func (c *PrerequisiteClient) QueryFeature(pr *Prerequisite) *FeatureQuery {
	query := (&FeatureClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prerequisite.Table, prerequisite.FieldID, id),
			sqlgraph.To(feature.Table, feature.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prerequisite.FeatureTable, prerequisite.FeatureColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrerequisiteClient) Hooks() []Hook {
	return c.hooks.Prerequisite
}

// Interceptors returns the client interceptors.
func (c *PrerequisiteClient) Interceptors() []Interceptor {
	return c.inters.Prerequisite
}

func (c *PrerequisiteClient) mutate(ctx context.Context, m *PrerequisiteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PrerequisiteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PrerequisiteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PrerequisiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PrerequisiteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Prerequisite mutation op: %q", m.Op())
	}
}

// ProficiencyClient is a client for the Proficiency schema.
type ProficiencyClient struct {
	config
}

// NewProficiencyClient returns a client for the Proficiency from the given config.
func NewProficiencyClient(c config) *ProficiencyClient {
	return &ProficiencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `proficiency.Hooks(f(g(h())))`.
func (c *ProficiencyClient) Use(hooks ...Hook) {
	c.hooks.Proficiency = append(c.hooks.Proficiency, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `proficiency.Intercept(f(g(h())))`.
func (c *ProficiencyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Proficiency = append(c.inters.Proficiency, interceptors...)
}

// Create returns a builder for creating a Proficiency entity.
func (c *ProficiencyClient) Create() *ProficiencyCreate {
	mutation := newProficiencyMutation(c.config, OpCreate)
	return &ProficiencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Proficiency entities.
func (c *ProficiencyClient) CreateBulk(builders ...*ProficiencyCreate) *ProficiencyCreateBulk {
	return &ProficiencyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProficiencyClient) MapCreateBulk(slice any, setFunc func(*ProficiencyCreate, int)) *ProficiencyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProficiencyCreateBulk{err: fmt.Errorf("calling to ProficiencyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProficiencyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProficiencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Proficiency.
func (c *ProficiencyClient) Update() *ProficiencyUpdate {
	mutation := newProficiencyMutation(c.config, OpUpdate)
	return &ProficiencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProficiencyClient) UpdateOne(pr *Proficiency) *ProficiencyUpdateOne {
	mutation := newProficiencyMutation(c.config, OpUpdateOne, withProficiency(pr))
	return &ProficiencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProficiencyClient) UpdateOneID(id int) *ProficiencyUpdateOne {
	mutation := newProficiencyMutation(c.config, OpUpdateOne, withProficiencyID(id))
	return &ProficiencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Proficiency.
func (c *ProficiencyClient) Delete() *ProficiencyDelete {
	mutation := newProficiencyMutation(c.config, OpDelete)
	return &ProficiencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProficiencyClient) DeleteOne(pr *Proficiency) *ProficiencyDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProficiencyClient) DeleteOneID(id int) *ProficiencyDeleteOne {
	builder := c.Delete().Where(proficiency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProficiencyDeleteOne{builder}
}

// Query returns a query builder for Proficiency.
func (c *ProficiencyClient) Query() *ProficiencyQuery {
	return &ProficiencyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProficiency},
		inters: c.Interceptors(),
	}
}

// Get returns a Proficiency entity by its id.
func (c *ProficiencyClient) Get(ctx context.Context, id int) (*Proficiency, error) {
	return c.Query().Where(proficiency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProficiencyClient) GetX(ctx context.Context, id int) *Proficiency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRace queries the race edge of a Proficiency.
func (c *ProficiencyClient) QueryRace(pr *Proficiency) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiency.Table, proficiency.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, proficiency.RaceTable, proficiency.RacePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOptions queries the options edge of a Proficiency.
func (c *ProficiencyClient) QueryOptions(pr *Proficiency) *ProficiencyChoiceQuery {
	query := (&ProficiencyChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiency.Table, proficiency.FieldID, id),
			sqlgraph.To(proficiencychoice.Table, proficiencychoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, proficiency.OptionsTable, proficiency.OptionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClass queries the class edge of a Proficiency.
func (c *ProficiencyClient) QueryClass(pr *Proficiency) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiency.Table, proficiency.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, proficiency.ClassTable, proficiency.ClassPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCharacterProficiencies queries the character_proficiencies edge of a Proficiency.
func (c *ProficiencyClient) QueryCharacterProficiencies(pr *Proficiency) *CharacterProficiencyQuery {
	query := (&CharacterProficiencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiency.Table, proficiency.FieldID, id),
			sqlgraph.To(characterproficiency.Table, characterproficiency.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, proficiency.CharacterProficienciesTable, proficiency.CharacterProficienciesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProficiencyClient) Hooks() []Hook {
	return c.hooks.Proficiency
}

// Interceptors returns the client interceptors.
func (c *ProficiencyClient) Interceptors() []Interceptor {
	return c.inters.Proficiency
}

func (c *ProficiencyClient) mutate(ctx context.Context, m *ProficiencyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProficiencyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProficiencyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProficiencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProficiencyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Proficiency mutation op: %q", m.Op())
	}
}

// ProficiencyChoiceClient is a client for the ProficiencyChoice schema.
type ProficiencyChoiceClient struct {
	config
}

// NewProficiencyChoiceClient returns a client for the ProficiencyChoice from the given config.
func NewProficiencyChoiceClient(c config) *ProficiencyChoiceClient {
	return &ProficiencyChoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `proficiencychoice.Hooks(f(g(h())))`.
func (c *ProficiencyChoiceClient) Use(hooks ...Hook) {
	c.hooks.ProficiencyChoice = append(c.hooks.ProficiencyChoice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `proficiencychoice.Intercept(f(g(h())))`.
func (c *ProficiencyChoiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProficiencyChoice = append(c.inters.ProficiencyChoice, interceptors...)
}

// Create returns a builder for creating a ProficiencyChoice entity.
func (c *ProficiencyChoiceClient) Create() *ProficiencyChoiceCreate {
	mutation := newProficiencyChoiceMutation(c.config, OpCreate)
	return &ProficiencyChoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProficiencyChoice entities.
func (c *ProficiencyChoiceClient) CreateBulk(builders ...*ProficiencyChoiceCreate) *ProficiencyChoiceCreateBulk {
	return &ProficiencyChoiceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProficiencyChoiceClient) MapCreateBulk(slice any, setFunc func(*ProficiencyChoiceCreate, int)) *ProficiencyChoiceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProficiencyChoiceCreateBulk{err: fmt.Errorf("calling to ProficiencyChoiceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProficiencyChoiceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProficiencyChoiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProficiencyChoice.
func (c *ProficiencyChoiceClient) Update() *ProficiencyChoiceUpdate {
	mutation := newProficiencyChoiceMutation(c.config, OpUpdate)
	return &ProficiencyChoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProficiencyChoiceClient) UpdateOne(pc *ProficiencyChoice) *ProficiencyChoiceUpdateOne {
	mutation := newProficiencyChoiceMutation(c.config, OpUpdateOne, withProficiencyChoice(pc))
	return &ProficiencyChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProficiencyChoiceClient) UpdateOneID(id int) *ProficiencyChoiceUpdateOne {
	mutation := newProficiencyChoiceMutation(c.config, OpUpdateOne, withProficiencyChoiceID(id))
	return &ProficiencyChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProficiencyChoice.
func (c *ProficiencyChoiceClient) Delete() *ProficiencyChoiceDelete {
	mutation := newProficiencyChoiceMutation(c.config, OpDelete)
	return &ProficiencyChoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProficiencyChoiceClient) DeleteOne(pc *ProficiencyChoice) *ProficiencyChoiceDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProficiencyChoiceClient) DeleteOneID(id int) *ProficiencyChoiceDeleteOne {
	builder := c.Delete().Where(proficiencychoice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProficiencyChoiceDeleteOne{builder}
}

// Query returns a query builder for ProficiencyChoice.
func (c *ProficiencyChoiceClient) Query() *ProficiencyChoiceQuery {
	return &ProficiencyChoiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProficiencyChoice},
		inters: c.Interceptors(),
	}
}

// Get returns a ProficiencyChoice entity by its id.
func (c *ProficiencyChoiceClient) Get(ctx context.Context, id int) (*ProficiencyChoice, error) {
	return c.Query().Where(proficiencychoice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProficiencyChoiceClient) GetX(ctx context.Context, id int) *ProficiencyChoice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProficiencies queries the proficiencies edge of a ProficiencyChoice.
func (c *ProficiencyChoiceClient) QueryProficiencies(pc *ProficiencyChoice) *ProficiencyQuery {
	query := (&ProficiencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiencychoice.Table, proficiencychoice.FieldID, id),
			sqlgraph.To(proficiency.Table, proficiency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, proficiencychoice.ProficienciesTable, proficiencychoice.ProficienciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRace queries the race edge of a ProficiencyChoice.
func (c *ProficiencyChoiceClient) QueryRace(pc *ProficiencyChoice) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiencychoice.Table, proficiencychoice.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, proficiencychoice.RaceTable, proficiencychoice.RaceColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClass queries the class edge of a ProficiencyChoice.
func (c *ProficiencyChoiceClient) QueryClass(pc *ProficiencyChoice) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proficiencychoice.Table, proficiencychoice.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, proficiencychoice.ClassTable, proficiencychoice.ClassColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProficiencyChoiceClient) Hooks() []Hook {
	return c.hooks.ProficiencyChoice
}

// Interceptors returns the client interceptors.
func (c *ProficiencyChoiceClient) Interceptors() []Interceptor {
	return c.inters.ProficiencyChoice
}

func (c *ProficiencyChoiceClient) mutate(ctx context.Context, m *ProficiencyChoiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProficiencyChoiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProficiencyChoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProficiencyChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProficiencyChoiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProficiencyChoice mutation op: %q", m.Op())
	}
}

// PropertyClient is a client for the Property schema.
type PropertyClient struct {
	config
}

// NewPropertyClient returns a client for the Property from the given config.
func NewPropertyClient(c config) *PropertyClient {
	return &PropertyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `property.Hooks(f(g(h())))`.
func (c *PropertyClient) Use(hooks ...Hook) {
	c.hooks.Property = append(c.hooks.Property, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `property.Intercept(f(g(h())))`.
func (c *PropertyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Property = append(c.inters.Property, interceptors...)
}

// Create returns a builder for creating a Property entity.
func (c *PropertyClient) Create() *PropertyCreate {
	mutation := newPropertyMutation(c.config, OpCreate)
	return &PropertyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Property entities.
func (c *PropertyClient) CreateBulk(builders ...*PropertyCreate) *PropertyCreateBulk {
	return &PropertyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PropertyClient) MapCreateBulk(slice any, setFunc func(*PropertyCreate, int)) *PropertyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PropertyCreateBulk{err: fmt.Errorf("calling to PropertyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PropertyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PropertyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Property.
func (c *PropertyClient) Update() *PropertyUpdate {
	mutation := newPropertyMutation(c.config, OpUpdate)
	return &PropertyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PropertyClient) UpdateOne(pr *Property) *PropertyUpdateOne {
	mutation := newPropertyMutation(c.config, OpUpdateOne, withProperty(pr))
	return &PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PropertyClient) UpdateOneID(id int) *PropertyUpdateOne {
	mutation := newPropertyMutation(c.config, OpUpdateOne, withPropertyID(id))
	return &PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Property.
func (c *PropertyClient) Delete() *PropertyDelete {
	mutation := newPropertyMutation(c.config, OpDelete)
	return &PropertyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PropertyClient) DeleteOne(pr *Property) *PropertyDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PropertyClient) DeleteOneID(id int) *PropertyDeleteOne {
	builder := c.Delete().Where(property.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PropertyDeleteOne{builder}
}

// Query returns a query builder for Property.
func (c *PropertyClient) Query() *PropertyQuery {
	return &PropertyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProperty},
		inters: c.Interceptors(),
	}
}

// Get returns a Property entity by its id.
func (c *PropertyClient) Get(ctx context.Context, id int) (*Property, error) {
	return c.Query().Where(property.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PropertyClient) GetX(ctx context.Context, id int) *Property {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWeapons queries the weapons edge of a Property.
func (c *PropertyClient) QueryWeapons(pr *Property) *WeaponQuery {
	query := (&WeaponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(weapon.Table, weapon.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, property.WeaponsTable, property.WeaponsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PropertyClient) Hooks() []Hook {
	return c.hooks.Property
}

// Interceptors returns the client interceptors.
func (c *PropertyClient) Interceptors() []Interceptor {
	return c.inters.Property
}

func (c *PropertyClient) mutate(ctx context.Context, m *PropertyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PropertyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PropertyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PropertyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Property mutation op: %q", m.Op())
	}
}

// RaceClient is a client for the Race schema.
type RaceClient struct {
	config
}

// NewRaceClient returns a client for the Race from the given config.
func NewRaceClient(c config) *RaceClient {
	return &RaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `race.Hooks(f(g(h())))`.
func (c *RaceClient) Use(hooks ...Hook) {
	c.hooks.Race = append(c.hooks.Race, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `race.Intercept(f(g(h())))`.
func (c *RaceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Race = append(c.inters.Race, interceptors...)
}

// Create returns a builder for creating a Race entity.
func (c *RaceClient) Create() *RaceCreate {
	mutation := newRaceMutation(c.config, OpCreate)
	return &RaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Race entities.
func (c *RaceClient) CreateBulk(builders ...*RaceCreate) *RaceCreateBulk {
	return &RaceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RaceClient) MapCreateBulk(slice any, setFunc func(*RaceCreate, int)) *RaceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RaceCreateBulk{err: fmt.Errorf("calling to RaceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RaceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Race.
func (c *RaceClient) Update() *RaceUpdate {
	mutation := newRaceMutation(c.config, OpUpdate)
	return &RaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RaceClient) UpdateOne(r *Race) *RaceUpdateOne {
	mutation := newRaceMutation(c.config, OpUpdateOne, withRace(r))
	return &RaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RaceClient) UpdateOneID(id int) *RaceUpdateOne {
	mutation := newRaceMutation(c.config, OpUpdateOne, withRaceID(id))
	return &RaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Race.
func (c *RaceClient) Delete() *RaceDelete {
	mutation := newRaceMutation(c.config, OpDelete)
	return &RaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RaceClient) DeleteOne(r *Race) *RaceDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RaceClient) DeleteOneID(id int) *RaceDeleteOne {
	builder := c.Delete().Where(race.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RaceDeleteOne{builder}
}

// Query returns a query builder for Race.
func (c *RaceClient) Query() *RaceQuery {
	return &RaceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRace},
		inters: c.Interceptors(),
	}
}

// Get returns a Race entity by its id.
func (c *RaceClient) Get(ctx context.Context, id int) (*Race, error) {
	return c.Query().Where(race.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RaceClient) GetX(ctx context.Context, id int) *Race {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTraits queries the traits edge of a Race.
func (c *RaceClient) QueryTraits(r *Race) *TraitQuery {
	query := (&TraitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(trait.Table, trait.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, race.TraitsTable, race.TraitsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStartingProficiencies queries the starting_proficiencies edge of a Race.
func (c *RaceClient) QueryStartingProficiencies(r *Race) *ProficiencyQuery {
	query := (&ProficiencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(proficiency.Table, proficiency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, race.StartingProficienciesTable, race.StartingProficienciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStartingProficiencyOptions queries the starting_proficiency_options edge of a Race.
func (c *RaceClient) QueryStartingProficiencyOptions(r *Race) *ProficiencyChoiceQuery {
	query := (&ProficiencyChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(proficiencychoice.Table, proficiencychoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, race.StartingProficiencyOptionsTable, race.StartingProficiencyOptionsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAbilityBonuses queries the ability_bonuses edge of a Race.
func (c *RaceClient) QueryAbilityBonuses(r *Race) *AbilityScoreQuery {
	query := (&AbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(abilityscore.Table, abilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, race.AbilityBonusesTable, race.AbilityBonusesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguages queries the languages edge of a Race.
func (c *RaceClient) QueryLanguages(r *Race) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, race.LanguagesTable, race.LanguagesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguageOptions queries the language_options edge of a Race.
func (c *RaceClient) QueryLanguageOptions(r *Race) *LanguageChoiceQuery {
	query := (&LanguageChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(languagechoice.Table, languagechoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, race.LanguageOptionsTable, race.LanguageOptionsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCharacters queries the characters edge of a Race.
func (c *RaceClient) QueryCharacters(r *Race) *CharacterQuery {
	query := (&CharacterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(character.Table, character.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, race.CharactersTable, race.CharactersColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRaceAbilityBonuses queries the race_ability_bonuses edge of a Race.
func (c *RaceClient) QueryRaceAbilityBonuses(r *Race) *AbilityBonusQuery {
	query := (&AbilityBonusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(abilitybonus.Table, abilitybonus.RaceColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, race.RaceAbilityBonusesTable, race.RaceAbilityBonusesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RaceClient) Hooks() []Hook {
	return c.hooks.Race
}

// Interceptors returns the client interceptors.
func (c *RaceClient) Interceptors() []Interceptor {
	return c.inters.Race
}

func (c *RaceClient) mutate(ctx context.Context, m *RaceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RaceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RaceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RaceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Race mutation op: %q", m.Op())
	}
}

// RuleClient is a client for the Rule schema.
type RuleClient struct {
	config
}

// NewRuleClient returns a client for the Rule from the given config.
func NewRuleClient(c config) *RuleClient {
	return &RuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rule.Hooks(f(g(h())))`.
func (c *RuleClient) Use(hooks ...Hook) {
	c.hooks.Rule = append(c.hooks.Rule, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rule.Intercept(f(g(h())))`.
func (c *RuleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rule = append(c.inters.Rule, interceptors...)
}

// Create returns a builder for creating a Rule entity.
func (c *RuleClient) Create() *RuleCreate {
	mutation := newRuleMutation(c.config, OpCreate)
	return &RuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rule entities.
func (c *RuleClient) CreateBulk(builders ...*RuleCreate) *RuleCreateBulk {
	return &RuleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RuleClient) MapCreateBulk(slice any, setFunc func(*RuleCreate, int)) *RuleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RuleCreateBulk{err: fmt.Errorf("calling to RuleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RuleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rule.
func (c *RuleClient) Update() *RuleUpdate {
	mutation := newRuleMutation(c.config, OpUpdate)
	return &RuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RuleClient) UpdateOne(r *Rule) *RuleUpdateOne {
	mutation := newRuleMutation(c.config, OpUpdateOne, withRule(r))
	return &RuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RuleClient) UpdateOneID(id int) *RuleUpdateOne {
	mutation := newRuleMutation(c.config, OpUpdateOne, withRuleID(id))
	return &RuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rule.
func (c *RuleClient) Delete() *RuleDelete {
	mutation := newRuleMutation(c.config, OpDelete)
	return &RuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RuleClient) DeleteOne(r *Rule) *RuleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RuleClient) DeleteOneID(id int) *RuleDeleteOne {
	builder := c.Delete().Where(rule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RuleDeleteOne{builder}
}

// Query returns a query builder for Rule.
func (c *RuleClient) Query() *RuleQuery {
	return &RuleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRule},
		inters: c.Interceptors(),
	}
}

// Get returns a Rule entity by its id.
func (c *RuleClient) Get(ctx context.Context, id int) (*Rule, error) {
	return c.Query().Where(rule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RuleClient) GetX(ctx context.Context, id int) *Rule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySections queries the sections edge of a Rule.
func (c *RuleClient) QuerySections(r *Rule) *RuleSectionQuery {
	query := (&RuleSectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rule.Table, rule.FieldID, id),
			sqlgraph.To(rulesection.Table, rulesection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rule.SectionsTable, rule.SectionsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RuleClient) Hooks() []Hook {
	return c.hooks.Rule
}

// Interceptors returns the client interceptors.
func (c *RuleClient) Interceptors() []Interceptor {
	return c.inters.Rule
}

func (c *RuleClient) mutate(ctx context.Context, m *RuleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RuleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RuleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RuleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rule mutation op: %q", m.Op())
	}
}

// RuleSectionClient is a client for the RuleSection schema.
type RuleSectionClient struct {
	config
}

// NewRuleSectionClient returns a client for the RuleSection from the given config.
func NewRuleSectionClient(c config) *RuleSectionClient {
	return &RuleSectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rulesection.Hooks(f(g(h())))`.
func (c *RuleSectionClient) Use(hooks ...Hook) {
	c.hooks.RuleSection = append(c.hooks.RuleSection, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rulesection.Intercept(f(g(h())))`.
func (c *RuleSectionClient) Intercept(interceptors ...Interceptor) {
	c.inters.RuleSection = append(c.inters.RuleSection, interceptors...)
}

// Create returns a builder for creating a RuleSection entity.
func (c *RuleSectionClient) Create() *RuleSectionCreate {
	mutation := newRuleSectionMutation(c.config, OpCreate)
	return &RuleSectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RuleSection entities.
func (c *RuleSectionClient) CreateBulk(builders ...*RuleSectionCreate) *RuleSectionCreateBulk {
	return &RuleSectionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RuleSectionClient) MapCreateBulk(slice any, setFunc func(*RuleSectionCreate, int)) *RuleSectionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RuleSectionCreateBulk{err: fmt.Errorf("calling to RuleSectionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RuleSectionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RuleSectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RuleSection.
func (c *RuleSectionClient) Update() *RuleSectionUpdate {
	mutation := newRuleSectionMutation(c.config, OpUpdate)
	return &RuleSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RuleSectionClient) UpdateOne(rs *RuleSection) *RuleSectionUpdateOne {
	mutation := newRuleSectionMutation(c.config, OpUpdateOne, withRuleSection(rs))
	return &RuleSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RuleSectionClient) UpdateOneID(id int) *RuleSectionUpdateOne {
	mutation := newRuleSectionMutation(c.config, OpUpdateOne, withRuleSectionID(id))
	return &RuleSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RuleSection.
func (c *RuleSectionClient) Delete() *RuleSectionDelete {
	mutation := newRuleSectionMutation(c.config, OpDelete)
	return &RuleSectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RuleSectionClient) DeleteOne(rs *RuleSection) *RuleSectionDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RuleSectionClient) DeleteOneID(id int) *RuleSectionDeleteOne {
	builder := c.Delete().Where(rulesection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RuleSectionDeleteOne{builder}
}

// Query returns a query builder for RuleSection.
func (c *RuleSectionClient) Query() *RuleSectionQuery {
	return &RuleSectionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRuleSection},
		inters: c.Interceptors(),
	}
}

// Get returns a RuleSection entity by its id.
func (c *RuleSectionClient) Get(ctx context.Context, id int) (*RuleSection, error) {
	return c.Query().Where(rulesection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RuleSectionClient) GetX(ctx context.Context, id int) *RuleSection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRule queries the rule edge of a RuleSection.
func (c *RuleSectionClient) QueryRule(rs *RuleSection) *RuleQuery {
	query := (&RuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rulesection.Table, rulesection.FieldID, id),
			sqlgraph.To(rule.Table, rule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rulesection.RuleTable, rulesection.RuleColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RuleSectionClient) Hooks() []Hook {
	return c.hooks.RuleSection
}

// Interceptors returns the client interceptors.
func (c *RuleSectionClient) Interceptors() []Interceptor {
	return c.inters.RuleSection
}

func (c *RuleSectionClient) mutate(ctx context.Context, m *RuleSectionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RuleSectionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RuleSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RuleSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RuleSectionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RuleSection mutation op: %q", m.Op())
	}
}

// SkillClient is a client for the Skill schema.
type SkillClient struct {
	config
}

// NewSkillClient returns a client for the Skill from the given config.
func NewSkillClient(c config) *SkillClient {
	return &SkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skill.Hooks(f(g(h())))`.
func (c *SkillClient) Use(hooks ...Hook) {
	c.hooks.Skill = append(c.hooks.Skill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `skill.Intercept(f(g(h())))`.
func (c *SkillClient) Intercept(interceptors ...Interceptor) {
	c.inters.Skill = append(c.inters.Skill, interceptors...)
}

// Create returns a builder for creating a Skill entity.
func (c *SkillClient) Create() *SkillCreate {
	mutation := newSkillMutation(c.config, OpCreate)
	return &SkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Skill entities.
func (c *SkillClient) CreateBulk(builders ...*SkillCreate) *SkillCreateBulk {
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SkillClient) MapCreateBulk(slice any, setFunc func(*SkillCreate, int)) *SkillCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SkillCreateBulk{err: fmt.Errorf("calling to SkillClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SkillCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Skill.
func (c *SkillClient) Update() *SkillUpdate {
	mutation := newSkillMutation(c.config, OpUpdate)
	return &SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillClient) UpdateOne(s *Skill) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkill(s))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillClient) UpdateOneID(id int) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkillID(id))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Skill.
func (c *SkillClient) Delete() *SkillDelete {
	mutation := newSkillMutation(c.config, OpDelete)
	return &SkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SkillClient) DeleteOne(s *Skill) *SkillDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SkillClient) DeleteOneID(id int) *SkillDeleteOne {
	builder := c.Delete().Where(skill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillDeleteOne{builder}
}

// Query returns a query builder for Skill.
func (c *SkillClient) Query() *SkillQuery {
	return &SkillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSkill},
		inters: c.Interceptors(),
	}
}

// Get returns a Skill entity by its id.
func (c *SkillClient) Get(ctx context.Context, id int) (*Skill, error) {
	return c.Query().Where(skill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillClient) GetX(ctx context.Context, id int) *Skill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAbilityScore queries the ability_score edge of a Skill.
func (c *SkillClient) QueryAbilityScore(s *Skill) *AbilityScoreQuery {
	query := (&AbilityScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(abilityscore.Table, abilityscore.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, skill.AbilityScoreTable, skill.AbilityScoreColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCharacterSkill queries the character_skill edge of a Skill.
func (c *SkillClient) QueryCharacterSkill(s *Skill) *CharacterSkillQuery {
	query := (&CharacterSkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(characterskill.Table, characterskill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, skill.CharacterSkillTable, skill.CharacterSkillColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkillClient) Hooks() []Hook {
	return c.hooks.Skill
}

// Interceptors returns the client interceptors.
func (c *SkillClient) Interceptors() []Interceptor {
	return c.inters.Skill
}

func (c *SkillClient) mutate(ctx context.Context, m *SkillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SkillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SkillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Skill mutation op: %q", m.Op())
	}
}

// ToolClient is a client for the Tool schema.
type ToolClient struct {
	config
}

// NewToolClient returns a client for the Tool from the given config.
func NewToolClient(c config) *ToolClient {
	return &ToolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tool.Hooks(f(g(h())))`.
func (c *ToolClient) Use(hooks ...Hook) {
	c.hooks.Tool = append(c.hooks.Tool, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tool.Intercept(f(g(h())))`.
func (c *ToolClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tool = append(c.inters.Tool, interceptors...)
}

// Create returns a builder for creating a Tool entity.
func (c *ToolClient) Create() *ToolCreate {
	mutation := newToolMutation(c.config, OpCreate)
	return &ToolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tool entities.
func (c *ToolClient) CreateBulk(builders ...*ToolCreate) *ToolCreateBulk {
	return &ToolCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ToolClient) MapCreateBulk(slice any, setFunc func(*ToolCreate, int)) *ToolCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ToolCreateBulk{err: fmt.Errorf("calling to ToolClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ToolCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ToolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tool.
func (c *ToolClient) Update() *ToolUpdate {
	mutation := newToolMutation(c.config, OpUpdate)
	return &ToolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ToolClient) UpdateOne(t *Tool) *ToolUpdateOne {
	mutation := newToolMutation(c.config, OpUpdateOne, withTool(t))
	return &ToolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ToolClient) UpdateOneID(id int) *ToolUpdateOne {
	mutation := newToolMutation(c.config, OpUpdateOne, withToolID(id))
	return &ToolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tool.
func (c *ToolClient) Delete() *ToolDelete {
	mutation := newToolMutation(c.config, OpDelete)
	return &ToolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ToolClient) DeleteOne(t *Tool) *ToolDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ToolClient) DeleteOneID(id int) *ToolDeleteOne {
	builder := c.Delete().Where(tool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ToolDeleteOne{builder}
}

// Query returns a query builder for Tool.
func (c *ToolClient) Query() *ToolQuery {
	return &ToolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTool},
		inters: c.Interceptors(),
	}
}

// Get returns a Tool entity by its id.
func (c *ToolClient) Get(ctx context.Context, id int) (*Tool, error) {
	return c.Query().Where(tool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ToolClient) GetX(ctx context.Context, id int) *Tool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a Tool.
func (c *ToolClient) QueryEquipment(t *Tool) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tool.Table, tool.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, tool.EquipmentTable, tool.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ToolClient) Hooks() []Hook {
	return c.hooks.Tool
}

// Interceptors returns the client interceptors.
func (c *ToolClient) Interceptors() []Interceptor {
	return c.inters.Tool
}

func (c *ToolClient) mutate(ctx context.Context, m *ToolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ToolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ToolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ToolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ToolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tool mutation op: %q", m.Op())
	}
}

// TraitClient is a client for the Trait schema.
type TraitClient struct {
	config
}

// NewTraitClient returns a client for the Trait from the given config.
func NewTraitClient(c config) *TraitClient {
	return &TraitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trait.Hooks(f(g(h())))`.
func (c *TraitClient) Use(hooks ...Hook) {
	c.hooks.Trait = append(c.hooks.Trait, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `trait.Intercept(f(g(h())))`.
func (c *TraitClient) Intercept(interceptors ...Interceptor) {
	c.inters.Trait = append(c.inters.Trait, interceptors...)
}

// Create returns a builder for creating a Trait entity.
func (c *TraitClient) Create() *TraitCreate {
	mutation := newTraitMutation(c.config, OpCreate)
	return &TraitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Trait entities.
func (c *TraitClient) CreateBulk(builders ...*TraitCreate) *TraitCreateBulk {
	return &TraitCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TraitClient) MapCreateBulk(slice any, setFunc func(*TraitCreate, int)) *TraitCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TraitCreateBulk{err: fmt.Errorf("calling to TraitClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TraitCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TraitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Trait.
func (c *TraitClient) Update() *TraitUpdate {
	mutation := newTraitMutation(c.config, OpUpdate)
	return &TraitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TraitClient) UpdateOne(t *Trait) *TraitUpdateOne {
	mutation := newTraitMutation(c.config, OpUpdateOne, withTrait(t))
	return &TraitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TraitClient) UpdateOneID(id int) *TraitUpdateOne {
	mutation := newTraitMutation(c.config, OpUpdateOne, withTraitID(id))
	return &TraitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Trait.
func (c *TraitClient) Delete() *TraitDelete {
	mutation := newTraitMutation(c.config, OpDelete)
	return &TraitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TraitClient) DeleteOne(t *Trait) *TraitDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TraitClient) DeleteOneID(id int) *TraitDeleteOne {
	builder := c.Delete().Where(trait.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TraitDeleteOne{builder}
}

// Query returns a query builder for Trait.
func (c *TraitClient) Query() *TraitQuery {
	return &TraitQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTrait},
		inters: c.Interceptors(),
	}
}

// Get returns a Trait entity by its id.
func (c *TraitClient) Get(ctx context.Context, id int) (*Trait, error) {
	return c.Query().Where(trait.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TraitClient) GetX(ctx context.Context, id int) *Trait {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRace queries the race edge of a Trait.
func (c *TraitClient) QueryRace(t *Trait) *RaceQuery {
	query := (&RaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trait.Table, trait.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, trait.RaceTable, trait.RacePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TraitClient) Hooks() []Hook {
	return c.hooks.Trait
}

// Interceptors returns the client interceptors.
func (c *TraitClient) Interceptors() []Interceptor {
	return c.inters.Trait
}

func (c *TraitClient) mutate(ctx context.Context, m *TraitMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TraitCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TraitUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TraitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TraitDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Trait mutation op: %q", m.Op())
	}
}

// VehicleClient is a client for the Vehicle schema.
type VehicleClient struct {
	config
}

// NewVehicleClient returns a client for the Vehicle from the given config.
func NewVehicleClient(c config) *VehicleClient {
	return &VehicleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vehicle.Hooks(f(g(h())))`.
func (c *VehicleClient) Use(hooks ...Hook) {
	c.hooks.Vehicle = append(c.hooks.Vehicle, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vehicle.Intercept(f(g(h())))`.
func (c *VehicleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Vehicle = append(c.inters.Vehicle, interceptors...)
}

// Create returns a builder for creating a Vehicle entity.
func (c *VehicleClient) Create() *VehicleCreate {
	mutation := newVehicleMutation(c.config, OpCreate)
	return &VehicleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vehicle entities.
func (c *VehicleClient) CreateBulk(builders ...*VehicleCreate) *VehicleCreateBulk {
	return &VehicleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VehicleClient) MapCreateBulk(slice any, setFunc func(*VehicleCreate, int)) *VehicleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VehicleCreateBulk{err: fmt.Errorf("calling to VehicleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VehicleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VehicleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vehicle.
func (c *VehicleClient) Update() *VehicleUpdate {
	mutation := newVehicleMutation(c.config, OpUpdate)
	return &VehicleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VehicleClient) UpdateOne(v *Vehicle) *VehicleUpdateOne {
	mutation := newVehicleMutation(c.config, OpUpdateOne, withVehicle(v))
	return &VehicleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VehicleClient) UpdateOneID(id int) *VehicleUpdateOne {
	mutation := newVehicleMutation(c.config, OpUpdateOne, withVehicleID(id))
	return &VehicleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vehicle.
func (c *VehicleClient) Delete() *VehicleDelete {
	mutation := newVehicleMutation(c.config, OpDelete)
	return &VehicleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VehicleClient) DeleteOne(v *Vehicle) *VehicleDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VehicleClient) DeleteOneID(id int) *VehicleDeleteOne {
	builder := c.Delete().Where(vehicle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VehicleDeleteOne{builder}
}

// Query returns a query builder for Vehicle.
func (c *VehicleClient) Query() *VehicleQuery {
	return &VehicleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVehicle},
		inters: c.Interceptors(),
	}
}

// Get returns a Vehicle entity by its id.
func (c *VehicleClient) Get(ctx context.Context, id int) (*Vehicle, error) {
	return c.Query().Where(vehicle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VehicleClient) GetX(ctx context.Context, id int) *Vehicle {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a Vehicle.
func (c *VehicleClient) QueryEquipment(v *Vehicle) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicle.Table, vehicle.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, vehicle.EquipmentTable, vehicle.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VehicleClient) Hooks() []Hook {
	return c.hooks.Vehicle
}

// Interceptors returns the client interceptors.
func (c *VehicleClient) Interceptors() []Interceptor {
	return c.inters.Vehicle
}

func (c *VehicleClient) mutate(ctx context.Context, m *VehicleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VehicleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VehicleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VehicleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VehicleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Vehicle mutation op: %q", m.Op())
	}
}

// WeaponClient is a client for the Weapon schema.
type WeaponClient struct {
	config
}

// NewWeaponClient returns a client for the Weapon from the given config.
func NewWeaponClient(c config) *WeaponClient {
	return &WeaponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `weapon.Hooks(f(g(h())))`.
func (c *WeaponClient) Use(hooks ...Hook) {
	c.hooks.Weapon = append(c.hooks.Weapon, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `weapon.Intercept(f(g(h())))`.
func (c *WeaponClient) Intercept(interceptors ...Interceptor) {
	c.inters.Weapon = append(c.inters.Weapon, interceptors...)
}

// Create returns a builder for creating a Weapon entity.
func (c *WeaponClient) Create() *WeaponCreate {
	mutation := newWeaponMutation(c.config, OpCreate)
	return &WeaponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Weapon entities.
func (c *WeaponClient) CreateBulk(builders ...*WeaponCreate) *WeaponCreateBulk {
	return &WeaponCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WeaponClient) MapCreateBulk(slice any, setFunc func(*WeaponCreate, int)) *WeaponCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WeaponCreateBulk{err: fmt.Errorf("calling to WeaponClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WeaponCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WeaponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Weapon.
func (c *WeaponClient) Update() *WeaponUpdate {
	mutation := newWeaponMutation(c.config, OpUpdate)
	return &WeaponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WeaponClient) UpdateOne(w *Weapon) *WeaponUpdateOne {
	mutation := newWeaponMutation(c.config, OpUpdateOne, withWeapon(w))
	return &WeaponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WeaponClient) UpdateOneID(id int) *WeaponUpdateOne {
	mutation := newWeaponMutation(c.config, OpUpdateOne, withWeaponID(id))
	return &WeaponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Weapon.
func (c *WeaponClient) Delete() *WeaponDelete {
	mutation := newWeaponMutation(c.config, OpDelete)
	return &WeaponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WeaponClient) DeleteOne(w *Weapon) *WeaponDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WeaponClient) DeleteOneID(id int) *WeaponDeleteOne {
	builder := c.Delete().Where(weapon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WeaponDeleteOne{builder}
}

// Query returns a query builder for Weapon.
func (c *WeaponClient) Query() *WeaponQuery {
	return &WeaponQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWeapon},
		inters: c.Interceptors(),
	}
}

// Get returns a Weapon entity by its id.
func (c *WeaponClient) Get(ctx context.Context, id int) (*Weapon, error) {
	return c.Query().Where(weapon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WeaponClient) GetX(ctx context.Context, id int) *Weapon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProperties queries the properties edge of a Weapon.
func (c *WeaponClient) QueryProperties(w *Weapon) *PropertyQuery {
	query := (&PropertyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(weapon.Table, weapon.FieldID, id),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, weapon.PropertiesTable, weapon.PropertiesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDamageType queries the damage_type edge of a Weapon.
func (c *WeaponClient) QueryDamageType(w *Weapon) *DamageTypeQuery {
	query := (&DamageTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(weapon.Table, weapon.FieldID, id),
			sqlgraph.To(damagetype.Table, damagetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, weapon.DamageTypeTable, weapon.DamageTypeColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a Weapon.
func (c *WeaponClient) QueryEquipment(w *Weapon) *EquipmentQuery {
	query := (&EquipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(weapon.Table, weapon.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, weapon.EquipmentTable, weapon.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WeaponClient) Hooks() []Hook {
	return c.hooks.Weapon
}

// Interceptors returns the client interceptors.
func (c *WeaponClient) Interceptors() []Interceptor {
	return c.inters.Weapon
}

func (c *WeaponClient) mutate(ctx context.Context, m *WeaponMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WeaponCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WeaponUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WeaponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WeaponDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Weapon mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AbilityBonus, AbilityScore, Alignment, Armor, Character, CharacterAbilityScore,
		CharacterProficiency, CharacterSkill, Class, Coin, Condition, Cost, DamageType,
		Equipment, EquipmentEntry, Feat, Feature, Gear, Language, LanguageChoice,
		MagicSchool, Prerequisite, Proficiency, ProficiencyChoice, Property, Race,
		Rule, RuleSection, Skill, Tool, Trait, Vehicle, Weapon []ent.Hook
	}
	inters struct {
		AbilityBonus, AbilityScore, Alignment, Armor, Character, CharacterAbilityScore,
		CharacterProficiency, CharacterSkill, Class, Coin, Condition, Cost, DamageType,
		Equipment, EquipmentEntry, Feat, Feature, Gear, Language, LanguageChoice,
		MagicSchool, Prerequisite, Proficiency, ProficiencyChoice, Property, Race,
		Rule, RuleSection, Skill, Tool, Trait, Vehicle, Weapon []ent.Interceptor
	}
)
