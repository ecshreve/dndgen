// Code generated by ent, DO NOT EDIT.

package property

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the property type in the database.
	Label = "property"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// EdgeWeapons holds the string denoting the weapons edge name in mutations.
	EdgeWeapons = "weapons"
	// Table holds the table name of the property in the database.
	Table = "properties"
	// WeaponsTable is the table that holds the weapons relation/edge. The primary key declared below.
	WeaponsTable = "weapon_weapon_properties"
	// WeaponsInverseTable is the table name for the Weapon entity.
	// It exists in this package in order to avoid circular dependency with the "weapon" package.
	WeaponsInverseTable = "weapons"
)

// Columns holds all SQL columns for property fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldDesc,
}

var (
	// WeaponsPrimaryKey and WeaponsColumn2 are the table columns denoting the
	// primary key for the weapons relation (M2M).
	WeaponsPrimaryKey = []string{"weapon_id", "property_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Property queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByWeaponsCount orders the results by weapons count.
func ByWeaponsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWeaponsStep(), opts...)
	}
}

// ByWeapons orders the results by weapons terms.
func ByWeapons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWeaponsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newWeaponsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WeaponsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, WeaponsTable, WeaponsPrimaryKey...),
	)
}
