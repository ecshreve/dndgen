// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/unitvalue"
)

// UnitValueUpdate is the builder for updating UnitValue entities.
type UnitValueUpdate struct {
	config
	hooks    []Hook
	mutation *UnitValueMutation
}

// Where appends a list predicates to the UnitValueUpdate builder.
func (uvu *UnitValueUpdate) Where(ps ...predicate.UnitValue) *UnitValueUpdate {
	uvu.mutation.Where(ps...)
	return uvu
}

// SetVal sets the "val" field.
func (uvu *UnitValueUpdate) SetVal(i int) *UnitValueUpdate {
	uvu.mutation.ResetVal()
	uvu.mutation.SetVal(i)
	return uvu
}

// AddVal adds i to the "val" field.
func (uvu *UnitValueUpdate) AddVal(i int) *UnitValueUpdate {
	uvu.mutation.AddVal(i)
	return uvu
}

// SetUnit sets the "unit" field.
func (uvu *UnitValueUpdate) SetUnit(s string) *UnitValueUpdate {
	uvu.mutation.SetUnit(s)
	return uvu
}

// Mutation returns the UnitValueMutation object of the builder.
func (uvu *UnitValueUpdate) Mutation() *UnitValueMutation {
	return uvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uvu *UnitValueUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UnitValueMutation](ctx, uvu.sqlSave, uvu.mutation, uvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uvu *UnitValueUpdate) SaveX(ctx context.Context) int {
	affected, err := uvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uvu *UnitValueUpdate) Exec(ctx context.Context) error {
	_, err := uvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvu *UnitValueUpdate) ExecX(ctx context.Context) {
	if err := uvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uvu *UnitValueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(unitvalue.Table, unitvalue.Columns, sqlgraph.NewFieldSpec(unitvalue.FieldID, field.TypeInt))
	if ps := uvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uvu.mutation.Val(); ok {
		_spec.SetField(unitvalue.FieldVal, field.TypeInt, value)
	}
	if value, ok := uvu.mutation.AddedVal(); ok {
		_spec.AddField(unitvalue.FieldVal, field.TypeInt, value)
	}
	if value, ok := uvu.mutation.Unit(); ok {
		_spec.SetField(unitvalue.FieldUnit, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unitvalue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uvu.mutation.done = true
	return n, nil
}

// UnitValueUpdateOne is the builder for updating a single UnitValue entity.
type UnitValueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UnitValueMutation
}

// SetVal sets the "val" field.
func (uvuo *UnitValueUpdateOne) SetVal(i int) *UnitValueUpdateOne {
	uvuo.mutation.ResetVal()
	uvuo.mutation.SetVal(i)
	return uvuo
}

// AddVal adds i to the "val" field.
func (uvuo *UnitValueUpdateOne) AddVal(i int) *UnitValueUpdateOne {
	uvuo.mutation.AddVal(i)
	return uvuo
}

// SetUnit sets the "unit" field.
func (uvuo *UnitValueUpdateOne) SetUnit(s string) *UnitValueUpdateOne {
	uvuo.mutation.SetUnit(s)
	return uvuo
}

// Mutation returns the UnitValueMutation object of the builder.
func (uvuo *UnitValueUpdateOne) Mutation() *UnitValueMutation {
	return uvuo.mutation
}

// Where appends a list predicates to the UnitValueUpdate builder.
func (uvuo *UnitValueUpdateOne) Where(ps ...predicate.UnitValue) *UnitValueUpdateOne {
	uvuo.mutation.Where(ps...)
	return uvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uvuo *UnitValueUpdateOne) Select(field string, fields ...string) *UnitValueUpdateOne {
	uvuo.fields = append([]string{field}, fields...)
	return uvuo
}

// Save executes the query and returns the updated UnitValue entity.
func (uvuo *UnitValueUpdateOne) Save(ctx context.Context) (*UnitValue, error) {
	return withHooks[*UnitValue, UnitValueMutation](ctx, uvuo.sqlSave, uvuo.mutation, uvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uvuo *UnitValueUpdateOne) SaveX(ctx context.Context) *UnitValue {
	node, err := uvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uvuo *UnitValueUpdateOne) Exec(ctx context.Context) error {
	_, err := uvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvuo *UnitValueUpdateOne) ExecX(ctx context.Context) {
	if err := uvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uvuo *UnitValueUpdateOne) sqlSave(ctx context.Context) (_node *UnitValue, err error) {
	_spec := sqlgraph.NewUpdateSpec(unitvalue.Table, unitvalue.Columns, sqlgraph.NewFieldSpec(unitvalue.FieldID, field.TypeInt))
	id, ok := uvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UnitValue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, unitvalue.FieldID)
		for _, f := range fields {
			if !unitvalue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != unitvalue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uvuo.mutation.Val(); ok {
		_spec.SetField(unitvalue.FieldVal, field.TypeInt, value)
	}
	if value, ok := uvuo.mutation.AddedVal(); ok {
		_spec.AddField(unitvalue.FieldVal, field.TypeInt, value)
	}
	if value, ok := uvuo.mutation.Unit(); ok {
		_spec.SetField(unitvalue.FieldUnit, field.TypeString, value)
	}
	_node = &UnitValue{config: uvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unitvalue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uvuo.mutation.done = true
	return _node, nil
}
