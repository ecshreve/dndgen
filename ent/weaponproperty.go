// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/weaponproperty"
)

// WeaponProperty is the model entity for the WeaponProperty schema.
type WeaponProperty struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Indx holds the value of the "indx" field.
	Indx string `json:"index"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc []string `json:"desc,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WeaponPropertyQuery when eager-loading is set.
	Edges        WeaponPropertyEdges `json:"-"`
	selectValues sql.SelectValues
}

// WeaponPropertyEdges holds the relations/edges for other nodes in the graph.
type WeaponPropertyEdges struct {
	// Weapons holds the value of the weapons edge.
	Weapons []*Weapon `json:"weapons,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedWeapons map[string][]*Weapon
}

// WeaponsOrErr returns the Weapons value or an error if the edge
// was not loaded in eager-loading.
func (e WeaponPropertyEdges) WeaponsOrErr() ([]*Weapon, error) {
	if e.loadedTypes[0] {
		return e.Weapons, nil
	}
	return nil, &NotLoadedError{edge: "weapons"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WeaponProperty) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case weaponproperty.FieldDesc:
			values[i] = new([]byte)
		case weaponproperty.FieldID:
			values[i] = new(sql.NullInt64)
		case weaponproperty.FieldIndx, weaponproperty.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WeaponProperty fields.
func (wp *WeaponProperty) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case weaponproperty.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wp.ID = int(value.Int64)
		case weaponproperty.FieldIndx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field indx", values[i])
			} else if value.Valid {
				wp.Indx = value.String
			}
		case weaponproperty.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				wp.Name = value.String
			}
		case weaponproperty.FieldDesc:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &wp.Desc); err != nil {
					return fmt.Errorf("unmarshal field desc: %w", err)
				}
			}
		default:
			wp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WeaponProperty.
// This includes values selected through modifiers, order, etc.
func (wp *WeaponProperty) Value(name string) (ent.Value, error) {
	return wp.selectValues.Get(name)
}

// QueryWeapons queries the "weapons" edge of the WeaponProperty entity.
func (wp *WeaponProperty) QueryWeapons() *WeaponQuery {
	return NewWeaponPropertyClient(wp.config).QueryWeapons(wp)
}

// Update returns a builder for updating this WeaponProperty.
// Note that you need to call WeaponProperty.Unwrap() before calling this method if this WeaponProperty
// was returned from a transaction, and the transaction was committed or rolled back.
func (wp *WeaponProperty) Update() *WeaponPropertyUpdateOne {
	return NewWeaponPropertyClient(wp.config).UpdateOne(wp)
}

// Unwrap unwraps the WeaponProperty entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wp *WeaponProperty) Unwrap() *WeaponProperty {
	_tx, ok := wp.config.driver.(*txDriver)
	if !ok {
		panic("ent: WeaponProperty is not a transactional entity")
	}
	wp.config.driver = _tx.drv
	return wp
}

// String implements the fmt.Stringer.
func (wp *WeaponProperty) String() string {
	var builder strings.Builder
	builder.WriteString("WeaponProperty(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wp.ID))
	builder.WriteString("indx=")
	builder.WriteString(wp.Indx)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(wp.Name)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(fmt.Sprintf("%v", wp.Desc))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
// func (wp *WeaponProperty) MarshalJSON() ([]byte, error) {
// 		type Alias WeaponProperty
// 		return json.Marshal(&struct {
// 				*Alias
// 				WeaponPropertyEdges
// 		}{
// 				Alias: (*Alias)(wp),
// 				WeaponPropertyEdges: wp.Edges,
// 		})
// }

// UnmarshalJSON implements the json.Unmarshaler interface.
func (wp *WeaponProperty) UnmarshalJSON(data []byte) error {
	type Alias WeaponProperty
	aux := &struct {
		*Alias
		WeaponPropertyEdges
	}{
		Alias: (*Alias)(wp),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	wp.Edges = aux.WeaponPropertyEdges
	return nil
}

func (wpc *WeaponPropertyCreate) SetWeaponProperty(input *WeaponProperty) *WeaponPropertyCreate {
	wpc.SetIndx(input.Indx)
	wpc.SetName(input.Name)
	wpc.SetDesc(input.Desc)
	return wpc
}

// NamedWeapons returns the Weapons named value or an error if the edge was not
// loaded in eager-loading with this name.
func (wp *WeaponProperty) NamedWeapons(name string) ([]*Weapon, error) {
	if wp.Edges.namedWeapons == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := wp.Edges.namedWeapons[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (wp *WeaponProperty) appendNamedWeapons(name string, edges ...*Weapon) {
	if wp.Edges.namedWeapons == nil {
		wp.Edges.namedWeapons = make(map[string][]*Weapon)
	}
	if len(edges) == 0 {
		wp.Edges.namedWeapons[name] = []*Weapon{}
	} else {
		wp.Edges.namedWeapons[name] = append(wp.Edges.namedWeapons[name], edges...)
	}
}

// WeaponProperties is a parsable slice of WeaponProperty.
type WeaponProperties []*WeaponProperty
