// Code generated by ent, DO NOT EDIT.

package magicitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldLTE(FieldID, id))
}

// Rarity applies equality check predicate on the "rarity" field. It's identical to RarityEQ.
func Rarity(v string) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldEQ(FieldRarity, v))
}

// RarityEQ applies the EQ predicate on the "rarity" field.
func RarityEQ(v string) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldEQ(FieldRarity, v))
}

// RarityNEQ applies the NEQ predicate on the "rarity" field.
func RarityNEQ(v string) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldNEQ(FieldRarity, v))
}

// RarityIn applies the In predicate on the "rarity" field.
func RarityIn(vs ...string) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldIn(FieldRarity, vs...))
}

// RarityNotIn applies the NotIn predicate on the "rarity" field.
func RarityNotIn(vs ...string) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldNotIn(FieldRarity, vs...))
}

// RarityGT applies the GT predicate on the "rarity" field.
func RarityGT(v string) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldGT(FieldRarity, v))
}

// RarityGTE applies the GTE predicate on the "rarity" field.
func RarityGTE(v string) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldGTE(FieldRarity, v))
}

// RarityLT applies the LT predicate on the "rarity" field.
func RarityLT(v string) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldLT(FieldRarity, v))
}

// RarityLTE applies the LTE predicate on the "rarity" field.
func RarityLTE(v string) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldLTE(FieldRarity, v))
}

// RarityContains applies the Contains predicate on the "rarity" field.
func RarityContains(v string) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldContains(FieldRarity, v))
}

// RarityHasPrefix applies the HasPrefix predicate on the "rarity" field.
func RarityHasPrefix(v string) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldHasPrefix(FieldRarity, v))
}

// RarityHasSuffix applies the HasSuffix predicate on the "rarity" field.
func RarityHasSuffix(v string) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldHasSuffix(FieldRarity, v))
}

// RarityEqualFold applies the EqualFold predicate on the "rarity" field.
func RarityEqualFold(v string) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldEqualFold(FieldRarity, v))
}

// RarityContainsFold applies the ContainsFold predicate on the "rarity" field.
func RarityContainsFold(v string) predicate.MagicItem {
	return predicate.MagicItem(sql.FieldContainsFold(FieldRarity, v))
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.MagicItem {
	return predicate.MagicItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EquipmentTable, EquipmentPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.MagicItem {
	return predicate.MagicItem(func(s *sql.Selector) {
		step := newEquipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MagicItem) predicate.MagicItem {
	return predicate.MagicItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MagicItem) predicate.MagicItem {
	return predicate.MagicItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MagicItem) predicate.MagicItem {
	return predicate.MagicItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
