// Code generated by ent, DO NOT EDIT.

package choice

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the choice type in the database.
	Label = "choice"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChoose holds the string denoting the choose field in the database.
	FieldChoose = "choose"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// EdgeParentChoice holds the string denoting the parent_choice edge name in mutations.
	EdgeParentChoice = "parent_choice"
	// EdgeChoices holds the string denoting the choices edge name in mutations.
	EdgeChoices = "choices"
	// EdgeProficiencyOptions holds the string denoting the proficiency_options edge name in mutations.
	EdgeProficiencyOptions = "proficiency_options"
	// EdgeStartingEquipmentOptions holds the string denoting the starting_equipment_options edge name in mutations.
	EdgeStartingEquipmentOptions = "starting_equipment_options"
	// EdgeClass holds the string denoting the class edge name in mutations.
	EdgeClass = "class"
	// EdgeRace holds the string denoting the race edge name in mutations.
	EdgeRace = "race"
	// Table holds the table name of the choice in the database.
	Table = "choices"
	// ParentChoiceTable is the table that holds the parent_choice relation/edge.
	ParentChoiceTable = "choices"
	// ParentChoiceColumn is the table column denoting the parent_choice relation/edge.
	ParentChoiceColumn = "choice_choices"
	// ChoicesTable is the table that holds the choices relation/edge.
	ChoicesTable = "choices"
	// ChoicesColumn is the table column denoting the choices relation/edge.
	ChoicesColumn = "choice_choices"
	// ProficiencyOptionsTable is the table that holds the proficiency_options relation/edge. The primary key declared below.
	ProficiencyOptionsTable = "choice_proficiency_options"
	// ProficiencyOptionsInverseTable is the table name for the Proficiency entity.
	// It exists in this package in order to avoid circular dependency with the "proficiency" package.
	ProficiencyOptionsInverseTable = "proficiencies"
	// StartingEquipmentOptionsTable is the table that holds the starting_equipment_options relation/edge.
	StartingEquipmentOptionsTable = "equipment"
	// StartingEquipmentOptionsInverseTable is the table name for the Equipment entity.
	// It exists in this package in order to avoid circular dependency with the "equipment" package.
	StartingEquipmentOptionsInverseTable = "equipment"
	// StartingEquipmentOptionsColumn is the table column denoting the starting_equipment_options relation/edge.
	StartingEquipmentOptionsColumn = "choice_starting_equipment_options"
	// ClassTable is the table that holds the class relation/edge. The primary key declared below.
	ClassTable = "class_proficiency_choices"
	// ClassInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	ClassInverseTable = "classes"
	// RaceTable is the table that holds the race relation/edge.
	RaceTable = "races"
	// RaceInverseTable is the table name for the Race entity.
	// It exists in this package in order to avoid circular dependency with the "race" package.
	RaceInverseTable = "races"
	// RaceColumn is the table column denoting the race relation/edge.
	RaceColumn = "race_starting_proficiency_options"
)

// Columns holds all SQL columns for choice fields.
var Columns = []string{
	FieldID,
	FieldChoose,
	FieldDesc,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "choices"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"choice_choices",
}

var (
	// ProficiencyOptionsPrimaryKey and ProficiencyOptionsColumn2 are the table columns denoting the
	// primary key for the proficiency_options relation (M2M).
	ProficiencyOptionsPrimaryKey = []string{"choice_id", "proficiency_id"}
	// ClassPrimaryKey and ClassColumn2 are the table columns denoting the
	// primary key for the class relation (M2M).
	ClassPrimaryKey = []string{"class_id", "choice_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Choice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChoose orders the results by the choose field.
func ByChoose(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChoose, opts...).ToFunc()
}

// ByDesc orders the results by the desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// ByParentChoiceField orders the results by parent_choice field.
func ByParentChoiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentChoiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByChoicesCount orders the results by choices count.
func ByChoicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChoicesStep(), opts...)
	}
}

// ByChoices orders the results by choices terms.
func ByChoices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChoicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProficiencyOptionsCount orders the results by proficiency_options count.
func ByProficiencyOptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProficiencyOptionsStep(), opts...)
	}
}

// ByProficiencyOptions orders the results by proficiency_options terms.
func ByProficiencyOptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProficiencyOptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStartingEquipmentOptionsCount orders the results by starting_equipment_options count.
func ByStartingEquipmentOptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStartingEquipmentOptionsStep(), opts...)
	}
}

// ByStartingEquipmentOptions orders the results by starting_equipment_options terms.
func ByStartingEquipmentOptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStartingEquipmentOptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClassCount orders the results by class count.
func ByClassCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClassStep(), opts...)
	}
}

// ByClass orders the results by class terms.
func ByClass(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRaceCount orders the results by race count.
func ByRaceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRaceStep(), opts...)
	}
}

// ByRace orders the results by race terms.
func ByRace(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRaceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newParentChoiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentChoiceTable, ParentChoiceColumn),
	)
}
func newChoicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChoicesTable, ChoicesColumn),
	)
}
func newProficiencyOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProficiencyOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ProficiencyOptionsTable, ProficiencyOptionsPrimaryKey...),
	)
}
func newStartingEquipmentOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StartingEquipmentOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StartingEquipmentOptionsTable, StartingEquipmentOptionsColumn),
	)
}
func newClassStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ClassTable, ClassPrimaryKey...),
	)
}
func newRaceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RaceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RaceTable, RaceColumn),
	)
}
