// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/character"
	"github.com/ecshreve/dndgen/ent/characterproficiency"
	"github.com/ecshreve/dndgen/ent/characterskill"
	"github.com/ecshreve/dndgen/ent/proficiency"
)

// CharacterProficiency is the model entity for the CharacterProficiency schema.
type CharacterProficiency struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProficiencyType holds the value of the "proficiency_type" field.
	ProficiencyType characterproficiency.ProficiencyType `json:"proficiency_type,omitempty"`
	// ProficiencySource holds the value of the "proficiency_source" field.
	ProficiencySource characterproficiency.ProficiencySource `json:"proficiency_source,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CharacterProficiencyQuery when eager-loading is set.
	Edges                                 CharacterProficiencyEdges `json:"-"`
	character_character_proficiencies     *int
	character_proficiency_proficiency     *int
	character_skill_character_proficiency *int
	selectValues                          sql.SelectValues
}

// CharacterProficiencyEdges holds the relations/edges for other nodes in the graph.
type CharacterProficiencyEdges struct {
	// Character holds the value of the character edge.
	Character *Character `json:"character,omitempty"`
	// Proficiency holds the value of the proficiency edge.
	Proficiency *Proficiency `json:"proficiency,omitempty"`
	// CharacterSkill holds the value of the character_skill edge.
	CharacterSkill *CharacterSkill `json:"character_skill,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// CharacterOrErr returns the Character value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CharacterProficiencyEdges) CharacterOrErr() (*Character, error) {
	if e.Character != nil {
		return e.Character, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: character.Label}
	}
	return nil, &NotLoadedError{edge: "character"}
}

// ProficiencyOrErr returns the Proficiency value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CharacterProficiencyEdges) ProficiencyOrErr() (*Proficiency, error) {
	if e.Proficiency != nil {
		return e.Proficiency, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: proficiency.Label}
	}
	return nil, &NotLoadedError{edge: "proficiency"}
}

// CharacterSkillOrErr returns the CharacterSkill value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CharacterProficiencyEdges) CharacterSkillOrErr() (*CharacterSkill, error) {
	if e.CharacterSkill != nil {
		return e.CharacterSkill, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: characterskill.Label}
	}
	return nil, &NotLoadedError{edge: "character_skill"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CharacterProficiency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case characterproficiency.FieldID:
			values[i] = new(sql.NullInt64)
		case characterproficiency.FieldProficiencyType, characterproficiency.FieldProficiencySource:
			values[i] = new(sql.NullString)
		case characterproficiency.ForeignKeys[0]: // character_character_proficiencies
			values[i] = new(sql.NullInt64)
		case characterproficiency.ForeignKeys[1]: // character_proficiency_proficiency
			values[i] = new(sql.NullInt64)
		case characterproficiency.ForeignKeys[2]: // character_skill_character_proficiency
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CharacterProficiency fields.
func (cp *CharacterProficiency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case characterproficiency.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cp.ID = int(value.Int64)
		case characterproficiency.FieldProficiencyType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field proficiency_type", values[i])
			} else if value.Valid {
				cp.ProficiencyType = characterproficiency.ProficiencyType(value.String)
			}
		case characterproficiency.FieldProficiencySource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field proficiency_source", values[i])
			} else if value.Valid {
				cp.ProficiencySource = characterproficiency.ProficiencySource(value.String)
			}
		case characterproficiency.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field character_character_proficiencies", value)
			} else if value.Valid {
				cp.character_character_proficiencies = new(int)
				*cp.character_character_proficiencies = int(value.Int64)
			}
		case characterproficiency.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field character_proficiency_proficiency", value)
			} else if value.Valid {
				cp.character_proficiency_proficiency = new(int)
				*cp.character_proficiency_proficiency = int(value.Int64)
			}
		case characterproficiency.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field character_skill_character_proficiency", value)
			} else if value.Valid {
				cp.character_skill_character_proficiency = new(int)
				*cp.character_skill_character_proficiency = int(value.Int64)
			}
		default:
			cp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CharacterProficiency.
// This includes values selected through modifiers, order, etc.
func (cp *CharacterProficiency) Value(name string) (ent.Value, error) {
	return cp.selectValues.Get(name)
}

// QueryCharacter queries the "character" edge of the CharacterProficiency entity.
func (cp *CharacterProficiency) QueryCharacter() *CharacterQuery {
	return NewCharacterProficiencyClient(cp.config).QueryCharacter(cp)
}

// QueryProficiency queries the "proficiency" edge of the CharacterProficiency entity.
func (cp *CharacterProficiency) QueryProficiency() *ProficiencyQuery {
	return NewCharacterProficiencyClient(cp.config).QueryProficiency(cp)
}

// QueryCharacterSkill queries the "character_skill" edge of the CharacterProficiency entity.
func (cp *CharacterProficiency) QueryCharacterSkill() *CharacterSkillQuery {
	return NewCharacterProficiencyClient(cp.config).QueryCharacterSkill(cp)
}

// Update returns a builder for updating this CharacterProficiency.
// Note that you need to call CharacterProficiency.Unwrap() before calling this method if this CharacterProficiency
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CharacterProficiency) Update() *CharacterProficiencyUpdateOne {
	return NewCharacterProficiencyClient(cp.config).UpdateOne(cp)
}

// Unwrap unwraps the CharacterProficiency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *CharacterProficiency) Unwrap() *CharacterProficiency {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CharacterProficiency is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CharacterProficiency) String() string {
	var builder strings.Builder
	builder.WriteString("CharacterProficiency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("proficiency_type=")
	builder.WriteString(fmt.Sprintf("%v", cp.ProficiencyType))
	builder.WriteString(", ")
	builder.WriteString("proficiency_source=")
	builder.WriteString(fmt.Sprintf("%v", cp.ProficiencySource))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (cp *CharacterProficiency) MarshalJSON() ([]byte, error) {
	type Alias CharacterProficiency
	return json.Marshal(&struct {
		*Alias
		CharacterProficiencyEdges
	}{
		Alias:                     (*Alias)(cp),
		CharacterProficiencyEdges: cp.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (cp *CharacterProficiency) UnmarshalJSON(data []byte) error {
	type Alias CharacterProficiency
	aux := &struct {
		*Alias
		CharacterProficiencyEdges
	}{
		Alias: (*Alias)(cp),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	cp.Edges = aux.CharacterProficiencyEdges
	return nil
}

func (cpc *CharacterProficiencyCreate) SetCharacterProficiency(input *CharacterProficiency) *CharacterProficiencyCreate {
	cpc.SetProficiencyType(input.ProficiencyType)
	cpc.SetProficiencySource(input.ProficiencySource)
	return cpc
}

// CharacterProficiencies is a parsable slice of CharacterProficiency.
type CharacterProficiencies []*CharacterProficiency
