// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/trait"
)

// Trait is the model entity for the Trait schema.
type Trait struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Indx holds the value of the "indx" field.
	Indx string `json:"index"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc []string `json:"desc,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TraitQuery when eager-loading is set.
	Edges            TraitEdges `json:"-"`
	character_traits *int
	selectValues     sql.SelectValues
}

// TraitEdges holds the relations/edges for other nodes in the graph.
type TraitEdges struct {
	// Race holds the value of the race edge.
	Race []*Race `json:"race,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedRace map[string][]*Race
}

// RaceOrErr returns the Race value or an error if the edge
// was not loaded in eager-loading.
func (e TraitEdges) RaceOrErr() ([]*Race, error) {
	if e.loadedTypes[0] {
		return e.Race, nil
	}
	return nil, &NotLoadedError{edge: "race"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Trait) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trait.FieldDesc:
			values[i] = new([]byte)
		case trait.FieldID:
			values[i] = new(sql.NullInt64)
		case trait.FieldIndx, trait.FieldName:
			values[i] = new(sql.NullString)
		case trait.ForeignKeys[0]: // character_traits
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Trait fields.
func (t *Trait) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trait.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case trait.FieldIndx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field indx", values[i])
			} else if value.Valid {
				t.Indx = value.String
			}
		case trait.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case trait.FieldDesc:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Desc); err != nil {
					return fmt.Errorf("unmarshal field desc: %w", err)
				}
			}
		case trait.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field character_traits", value)
			} else if value.Valid {
				t.character_traits = new(int)
				*t.character_traits = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Trait.
// This includes values selected through modifiers, order, etc.
func (t *Trait) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryRace queries the "race" edge of the Trait entity.
func (t *Trait) QueryRace() *RaceQuery {
	return NewTraitClient(t.config).QueryRace(t)
}

// Update returns a builder for updating this Trait.
// Note that you need to call Trait.Unwrap() before calling this method if this Trait
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Trait) Update() *TraitUpdateOne {
	return NewTraitClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Trait entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Trait) Unwrap() *Trait {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Trait is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Trait) String() string {
	var builder strings.Builder
	builder.WriteString("Trait(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("indx=")
	builder.WriteString(t.Indx)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(fmt.Sprintf("%v", t.Desc))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (t *Trait) MarshalJSON() ([]byte, error) {
	type Alias Trait
	return json.Marshal(&struct {
		*Alias
		TraitEdges
	}{
		Alias:      (*Alias)(t),
		TraitEdges: t.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (t *Trait) UnmarshalJSON(data []byte) error {
	type Alias Trait
	aux := &struct {
		*Alias
		TraitEdges
	}{
		Alias: (*Alias)(t),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	t.Edges = aux.TraitEdges
	return nil
}

func (tc *TraitCreate) SetTrait(input *Trait) *TraitCreate {
	tc.SetIndx(input.Indx)
	tc.SetName(input.Name)
	tc.SetDesc(input.Desc)
	return tc
}

// NamedRace returns the Race named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Trait) NamedRace(name string) ([]*Race, error) {
	if t.Edges.namedRace == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedRace[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Trait) appendNamedRace(name string, edges ...*Race) {
	if t.Edges.namedRace == nil {
		t.Edges.namedRace = make(map[string][]*Race)
	}
	if len(edges) == 0 {
		t.Edges.namedRace[name] = []*Race{}
	} else {
		t.Edges.namedRace[name] = append(t.Edges.namedRace[name], edges...)
	}
}

// Traits is a parsable slice of Trait.
type Traits []*Trait
