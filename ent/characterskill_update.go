// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/character"
	"github.com/ecshreve/dndgen/ent/characterskill"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/skill"
)

// CharacterSkillUpdate is the builder for updating CharacterSkill entities.
type CharacterSkillUpdate struct {
	config
	hooks    []Hook
	mutation *CharacterSkillMutation
}

// Where appends a list predicates to the CharacterSkillUpdate builder.
func (csu *CharacterSkillUpdate) Where(ps ...predicate.CharacterSkill) *CharacterSkillUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetProficient sets the "proficient" field.
func (csu *CharacterSkillUpdate) SetProficient(b bool) *CharacterSkillUpdate {
	csu.mutation.SetProficient(b)
	return csu
}

// SetNillableProficient sets the "proficient" field if the given value is not nil.
func (csu *CharacterSkillUpdate) SetNillableProficient(b *bool) *CharacterSkillUpdate {
	if b != nil {
		csu.SetProficient(*b)
	}
	return csu
}

// SetModifier sets the "modifier" field.
func (csu *CharacterSkillUpdate) SetModifier(i int) *CharacterSkillUpdate {
	csu.mutation.ResetModifier()
	csu.mutation.SetModifier(i)
	return csu
}

// SetNillableModifier sets the "modifier" field if the given value is not nil.
func (csu *CharacterSkillUpdate) SetNillableModifier(i *int) *CharacterSkillUpdate {
	if i != nil {
		csu.SetModifier(*i)
	}
	return csu
}

// AddModifier adds i to the "modifier" field.
func (csu *CharacterSkillUpdate) AddModifier(i int) *CharacterSkillUpdate {
	csu.mutation.AddModifier(i)
	return csu
}

// SetCharacterID sets the "character_id" field.
func (csu *CharacterSkillUpdate) SetCharacterID(i int) *CharacterSkillUpdate {
	csu.mutation.SetCharacterID(i)
	return csu
}

// SetNillableCharacterID sets the "character_id" field if the given value is not nil.
func (csu *CharacterSkillUpdate) SetNillableCharacterID(i *int) *CharacterSkillUpdate {
	if i != nil {
		csu.SetCharacterID(*i)
	}
	return csu
}

// SetSkillID sets the "skill_id" field.
func (csu *CharacterSkillUpdate) SetSkillID(i int) *CharacterSkillUpdate {
	csu.mutation.SetSkillID(i)
	return csu
}

// SetNillableSkillID sets the "skill_id" field if the given value is not nil.
func (csu *CharacterSkillUpdate) SetNillableSkillID(i *int) *CharacterSkillUpdate {
	if i != nil {
		csu.SetSkillID(*i)
	}
	return csu
}

// SetCharacter sets the "character" edge to the Character entity.
func (csu *CharacterSkillUpdate) SetCharacter(c *Character) *CharacterSkillUpdate {
	return csu.SetCharacterID(c.ID)
}

// SetSkill sets the "skill" edge to the Skill entity.
func (csu *CharacterSkillUpdate) SetSkill(s *Skill) *CharacterSkillUpdate {
	return csu.SetSkillID(s.ID)
}

// Mutation returns the CharacterSkillMutation object of the builder.
func (csu *CharacterSkillUpdate) Mutation() *CharacterSkillMutation {
	return csu.mutation
}

// ClearCharacter clears the "character" edge to the Character entity.
func (csu *CharacterSkillUpdate) ClearCharacter() *CharacterSkillUpdate {
	csu.mutation.ClearCharacter()
	return csu
}

// ClearSkill clears the "skill" edge to the Skill entity.
func (csu *CharacterSkillUpdate) ClearSkill() *CharacterSkillUpdate {
	csu.mutation.ClearSkill()
	return csu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CharacterSkillUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CharacterSkillUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CharacterSkillUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CharacterSkillUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *CharacterSkillUpdate) check() error {
	if csu.mutation.CharacterCleared() && len(csu.mutation.CharacterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CharacterSkill.character"`)
	}
	if csu.mutation.SkillCleared() && len(csu.mutation.SkillIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CharacterSkill.skill"`)
	}
	return nil
}

func (csu *CharacterSkillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(characterskill.Table, characterskill.Columns, sqlgraph.NewFieldSpec(characterskill.FieldID, field.TypeInt))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Proficient(); ok {
		_spec.SetField(characterskill.FieldProficient, field.TypeBool, value)
	}
	if value, ok := csu.mutation.Modifier(); ok {
		_spec.SetField(characterskill.FieldModifier, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedModifier(); ok {
		_spec.AddField(characterskill.FieldModifier, field.TypeInt, value)
	}
	if csu.mutation.CharacterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   characterskill.CharacterTable,
			Columns: []string{characterskill.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CharacterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   characterskill.CharacterTable,
			Columns: []string{characterskill.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   characterskill.SkillTable,
			Columns: []string{characterskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   characterskill.SkillTable,
			Columns: []string{characterskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{characterskill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CharacterSkillUpdateOne is the builder for updating a single CharacterSkill entity.
type CharacterSkillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CharacterSkillMutation
}

// SetProficient sets the "proficient" field.
func (csuo *CharacterSkillUpdateOne) SetProficient(b bool) *CharacterSkillUpdateOne {
	csuo.mutation.SetProficient(b)
	return csuo
}

// SetNillableProficient sets the "proficient" field if the given value is not nil.
func (csuo *CharacterSkillUpdateOne) SetNillableProficient(b *bool) *CharacterSkillUpdateOne {
	if b != nil {
		csuo.SetProficient(*b)
	}
	return csuo
}

// SetModifier sets the "modifier" field.
func (csuo *CharacterSkillUpdateOne) SetModifier(i int) *CharacterSkillUpdateOne {
	csuo.mutation.ResetModifier()
	csuo.mutation.SetModifier(i)
	return csuo
}

// SetNillableModifier sets the "modifier" field if the given value is not nil.
func (csuo *CharacterSkillUpdateOne) SetNillableModifier(i *int) *CharacterSkillUpdateOne {
	if i != nil {
		csuo.SetModifier(*i)
	}
	return csuo
}

// AddModifier adds i to the "modifier" field.
func (csuo *CharacterSkillUpdateOne) AddModifier(i int) *CharacterSkillUpdateOne {
	csuo.mutation.AddModifier(i)
	return csuo
}

// SetCharacterID sets the "character_id" field.
func (csuo *CharacterSkillUpdateOne) SetCharacterID(i int) *CharacterSkillUpdateOne {
	csuo.mutation.SetCharacterID(i)
	return csuo
}

// SetNillableCharacterID sets the "character_id" field if the given value is not nil.
func (csuo *CharacterSkillUpdateOne) SetNillableCharacterID(i *int) *CharacterSkillUpdateOne {
	if i != nil {
		csuo.SetCharacterID(*i)
	}
	return csuo
}

// SetSkillID sets the "skill_id" field.
func (csuo *CharacterSkillUpdateOne) SetSkillID(i int) *CharacterSkillUpdateOne {
	csuo.mutation.SetSkillID(i)
	return csuo
}

// SetNillableSkillID sets the "skill_id" field if the given value is not nil.
func (csuo *CharacterSkillUpdateOne) SetNillableSkillID(i *int) *CharacterSkillUpdateOne {
	if i != nil {
		csuo.SetSkillID(*i)
	}
	return csuo
}

// SetCharacter sets the "character" edge to the Character entity.
func (csuo *CharacterSkillUpdateOne) SetCharacter(c *Character) *CharacterSkillUpdateOne {
	return csuo.SetCharacterID(c.ID)
}

// SetSkill sets the "skill" edge to the Skill entity.
func (csuo *CharacterSkillUpdateOne) SetSkill(s *Skill) *CharacterSkillUpdateOne {
	return csuo.SetSkillID(s.ID)
}

// Mutation returns the CharacterSkillMutation object of the builder.
func (csuo *CharacterSkillUpdateOne) Mutation() *CharacterSkillMutation {
	return csuo.mutation
}

// ClearCharacter clears the "character" edge to the Character entity.
func (csuo *CharacterSkillUpdateOne) ClearCharacter() *CharacterSkillUpdateOne {
	csuo.mutation.ClearCharacter()
	return csuo
}

// ClearSkill clears the "skill" edge to the Skill entity.
func (csuo *CharacterSkillUpdateOne) ClearSkill() *CharacterSkillUpdateOne {
	csuo.mutation.ClearSkill()
	return csuo
}

// Where appends a list predicates to the CharacterSkillUpdate builder.
func (csuo *CharacterSkillUpdateOne) Where(ps ...predicate.CharacterSkill) *CharacterSkillUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CharacterSkillUpdateOne) Select(field string, fields ...string) *CharacterSkillUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CharacterSkill entity.
func (csuo *CharacterSkillUpdateOne) Save(ctx context.Context) (*CharacterSkill, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CharacterSkillUpdateOne) SaveX(ctx context.Context) *CharacterSkill {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CharacterSkillUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CharacterSkillUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *CharacterSkillUpdateOne) check() error {
	if csuo.mutation.CharacterCleared() && len(csuo.mutation.CharacterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CharacterSkill.character"`)
	}
	if csuo.mutation.SkillCleared() && len(csuo.mutation.SkillIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CharacterSkill.skill"`)
	}
	return nil
}

func (csuo *CharacterSkillUpdateOne) sqlSave(ctx context.Context) (_node *CharacterSkill, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(characterskill.Table, characterskill.Columns, sqlgraph.NewFieldSpec(characterskill.FieldID, field.TypeInt))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CharacterSkill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, characterskill.FieldID)
		for _, f := range fields {
			if !characterskill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != characterskill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.Proficient(); ok {
		_spec.SetField(characterskill.FieldProficient, field.TypeBool, value)
	}
	if value, ok := csuo.mutation.Modifier(); ok {
		_spec.SetField(characterskill.FieldModifier, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedModifier(); ok {
		_spec.AddField(characterskill.FieldModifier, field.TypeInt, value)
	}
	if csuo.mutation.CharacterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   characterskill.CharacterTable,
			Columns: []string{characterskill.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CharacterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   characterskill.CharacterTable,
			Columns: []string{characterskill.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   characterskill.SkillTable,
			Columns: []string{characterskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   characterskill.SkillTable,
			Columns: []string{characterskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CharacterSkill{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{characterskill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
