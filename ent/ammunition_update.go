// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/ammunition"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// AmmunitionUpdate is the builder for updating Ammunition entities.
type AmmunitionUpdate struct {
	config
	hooks    []Hook
	mutation *AmmunitionMutation
}

// Where appends a list predicates to the AmmunitionUpdate builder.
func (au *AmmunitionUpdate) Where(ps ...predicate.Ammunition) *AmmunitionUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetQuantity sets the "quantity" field.
func (au *AmmunitionUpdate) SetQuantity(i int) *AmmunitionUpdate {
	au.mutation.ResetQuantity()
	au.mutation.SetQuantity(i)
	return au
}

// AddQuantity adds i to the "quantity" field.
func (au *AmmunitionUpdate) AddQuantity(i int) *AmmunitionUpdate {
	au.mutation.AddQuantity(i)
	return au
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (au *AmmunitionUpdate) AddEquipmentIDs(ids ...int) *AmmunitionUpdate {
	au.mutation.AddEquipmentIDs(ids...)
	return au
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (au *AmmunitionUpdate) AddEquipment(e ...*Equipment) *AmmunitionUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEquipmentIDs(ids...)
}

// Mutation returns the AmmunitionMutation object of the builder.
func (au *AmmunitionUpdate) Mutation() *AmmunitionMutation {
	return au.mutation
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (au *AmmunitionUpdate) ClearEquipment() *AmmunitionUpdate {
	au.mutation.ClearEquipment()
	return au
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (au *AmmunitionUpdate) RemoveEquipmentIDs(ids ...int) *AmmunitionUpdate {
	au.mutation.RemoveEquipmentIDs(ids...)
	return au
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (au *AmmunitionUpdate) RemoveEquipment(e ...*Equipment) *AmmunitionUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEquipmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AmmunitionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AmmunitionMutation](ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AmmunitionUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AmmunitionUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AmmunitionUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AmmunitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ammunition.Table, ammunition.Columns, sqlgraph.NewFieldSpec(ammunition.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Quantity(); ok {
		_spec.SetField(ammunition.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedQuantity(); ok {
		_spec.AddField(ammunition.FieldQuantity, field.TypeInt, value)
	}
	if au.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ammunition.EquipmentTable,
			Columns: ammunition.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !au.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ammunition.EquipmentTable,
			Columns: ammunition.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ammunition.EquipmentTable,
			Columns: ammunition.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ammunition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AmmunitionUpdateOne is the builder for updating a single Ammunition entity.
type AmmunitionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AmmunitionMutation
}

// SetQuantity sets the "quantity" field.
func (auo *AmmunitionUpdateOne) SetQuantity(i int) *AmmunitionUpdateOne {
	auo.mutation.ResetQuantity()
	auo.mutation.SetQuantity(i)
	return auo
}

// AddQuantity adds i to the "quantity" field.
func (auo *AmmunitionUpdateOne) AddQuantity(i int) *AmmunitionUpdateOne {
	auo.mutation.AddQuantity(i)
	return auo
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (auo *AmmunitionUpdateOne) AddEquipmentIDs(ids ...int) *AmmunitionUpdateOne {
	auo.mutation.AddEquipmentIDs(ids...)
	return auo
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (auo *AmmunitionUpdateOne) AddEquipment(e ...*Equipment) *AmmunitionUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEquipmentIDs(ids...)
}

// Mutation returns the AmmunitionMutation object of the builder.
func (auo *AmmunitionUpdateOne) Mutation() *AmmunitionMutation {
	return auo.mutation
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (auo *AmmunitionUpdateOne) ClearEquipment() *AmmunitionUpdateOne {
	auo.mutation.ClearEquipment()
	return auo
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (auo *AmmunitionUpdateOne) RemoveEquipmentIDs(ids ...int) *AmmunitionUpdateOne {
	auo.mutation.RemoveEquipmentIDs(ids...)
	return auo
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (auo *AmmunitionUpdateOne) RemoveEquipment(e ...*Equipment) *AmmunitionUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEquipmentIDs(ids...)
}

// Where appends a list predicates to the AmmunitionUpdate builder.
func (auo *AmmunitionUpdateOne) Where(ps ...predicate.Ammunition) *AmmunitionUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AmmunitionUpdateOne) Select(field string, fields ...string) *AmmunitionUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Ammunition entity.
func (auo *AmmunitionUpdateOne) Save(ctx context.Context) (*Ammunition, error) {
	return withHooks[*Ammunition, AmmunitionMutation](ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AmmunitionUpdateOne) SaveX(ctx context.Context) *Ammunition {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AmmunitionUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AmmunitionUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AmmunitionUpdateOne) sqlSave(ctx context.Context) (_node *Ammunition, err error) {
	_spec := sqlgraph.NewUpdateSpec(ammunition.Table, ammunition.Columns, sqlgraph.NewFieldSpec(ammunition.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ammunition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ammunition.FieldID)
		for _, f := range fields {
			if !ammunition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ammunition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Quantity(); ok {
		_spec.SetField(ammunition.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedQuantity(); ok {
		_spec.AddField(ammunition.FieldQuantity, field.TypeInt, value)
	}
	if auo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ammunition.EquipmentTable,
			Columns: ammunition.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !auo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ammunition.EquipmentTable,
			Columns: ammunition.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ammunition.EquipmentTable,
			Columns: ammunition.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ammunition{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ammunition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
