// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/proficiency"
	"github.com/ecshreve/dndgen/ent/proficiencychoice"
	"github.com/ecshreve/dndgen/ent/race"
)

// ProficiencyChoiceUpdate is the builder for updating ProficiencyChoice entities.
type ProficiencyChoiceUpdate struct {
	config
	hooks    []Hook
	mutation *ProficiencyChoiceMutation
}

// Where appends a list predicates to the ProficiencyChoiceUpdate builder.
func (pcu *ProficiencyChoiceUpdate) Where(ps ...predicate.ProficiencyChoice) *ProficiencyChoiceUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetChoose sets the "choose" field.
func (pcu *ProficiencyChoiceUpdate) SetChoose(i int) *ProficiencyChoiceUpdate {
	pcu.mutation.ResetChoose()
	pcu.mutation.SetChoose(i)
	return pcu
}

// SetNillableChoose sets the "choose" field if the given value is not nil.
func (pcu *ProficiencyChoiceUpdate) SetNillableChoose(i *int) *ProficiencyChoiceUpdate {
	if i != nil {
		pcu.SetChoose(*i)
	}
	return pcu
}

// AddChoose adds i to the "choose" field.
func (pcu *ProficiencyChoiceUpdate) AddChoose(i int) *ProficiencyChoiceUpdate {
	pcu.mutation.AddChoose(i)
	return pcu
}

// SetDesc sets the "desc" field.
func (pcu *ProficiencyChoiceUpdate) SetDesc(s []string) *ProficiencyChoiceUpdate {
	pcu.mutation.SetDesc(s)
	return pcu
}

// AppendDesc appends s to the "desc" field.
func (pcu *ProficiencyChoiceUpdate) AppendDesc(s []string) *ProficiencyChoiceUpdate {
	pcu.mutation.AppendDesc(s)
	return pcu
}

// AddProficiencyIDs adds the "proficiencies" edge to the Proficiency entity by IDs.
func (pcu *ProficiencyChoiceUpdate) AddProficiencyIDs(ids ...int) *ProficiencyChoiceUpdate {
	pcu.mutation.AddProficiencyIDs(ids...)
	return pcu
}

// AddProficiencies adds the "proficiencies" edges to the Proficiency entity.
func (pcu *ProficiencyChoiceUpdate) AddProficiencies(p ...*Proficiency) *ProficiencyChoiceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddProficiencyIDs(ids...)
}

// SetRaceID sets the "race" edge to the Race entity by ID.
func (pcu *ProficiencyChoiceUpdate) SetRaceID(id int) *ProficiencyChoiceUpdate {
	pcu.mutation.SetRaceID(id)
	return pcu
}

// SetNillableRaceID sets the "race" edge to the Race entity by ID if the given value is not nil.
func (pcu *ProficiencyChoiceUpdate) SetNillableRaceID(id *int) *ProficiencyChoiceUpdate {
	if id != nil {
		pcu = pcu.SetRaceID(*id)
	}
	return pcu
}

// SetRace sets the "race" edge to the Race entity.
func (pcu *ProficiencyChoiceUpdate) SetRace(r *Race) *ProficiencyChoiceUpdate {
	return pcu.SetRaceID(r.ID)
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (pcu *ProficiencyChoiceUpdate) SetClassID(id int) *ProficiencyChoiceUpdate {
	pcu.mutation.SetClassID(id)
	return pcu
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (pcu *ProficiencyChoiceUpdate) SetNillableClassID(id *int) *ProficiencyChoiceUpdate {
	if id != nil {
		pcu = pcu.SetClassID(*id)
	}
	return pcu
}

// SetClass sets the "class" edge to the Class entity.
func (pcu *ProficiencyChoiceUpdate) SetClass(c *Class) *ProficiencyChoiceUpdate {
	return pcu.SetClassID(c.ID)
}

// Mutation returns the ProficiencyChoiceMutation object of the builder.
func (pcu *ProficiencyChoiceUpdate) Mutation() *ProficiencyChoiceMutation {
	return pcu.mutation
}

// ClearProficiencies clears all "proficiencies" edges to the Proficiency entity.
func (pcu *ProficiencyChoiceUpdate) ClearProficiencies() *ProficiencyChoiceUpdate {
	pcu.mutation.ClearProficiencies()
	return pcu
}

// RemoveProficiencyIDs removes the "proficiencies" edge to Proficiency entities by IDs.
func (pcu *ProficiencyChoiceUpdate) RemoveProficiencyIDs(ids ...int) *ProficiencyChoiceUpdate {
	pcu.mutation.RemoveProficiencyIDs(ids...)
	return pcu
}

// RemoveProficiencies removes "proficiencies" edges to Proficiency entities.
func (pcu *ProficiencyChoiceUpdate) RemoveProficiencies(p ...*Proficiency) *ProficiencyChoiceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemoveProficiencyIDs(ids...)
}

// ClearRace clears the "race" edge to the Race entity.
func (pcu *ProficiencyChoiceUpdate) ClearRace() *ProficiencyChoiceUpdate {
	pcu.mutation.ClearRace()
	return pcu
}

// ClearClass clears the "class" edge to the Class entity.
func (pcu *ProficiencyChoiceUpdate) ClearClass() *ProficiencyChoiceUpdate {
	pcu.mutation.ClearClass()
	return pcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *ProficiencyChoiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *ProficiencyChoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *ProficiencyChoiceUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *ProficiencyChoiceUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *ProficiencyChoiceUpdate) check() error {
	if v, ok := pcu.mutation.Choose(); ok {
		if err := proficiencychoice.ChooseValidator(v); err != nil {
			return &ValidationError{Name: "choose", err: fmt.Errorf(`ent: validator failed for field "ProficiencyChoice.choose": %w`, err)}
		}
	}
	return nil
}

func (pcu *ProficiencyChoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(proficiencychoice.Table, proficiencychoice.Columns, sqlgraph.NewFieldSpec(proficiencychoice.FieldID, field.TypeInt))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.Choose(); ok {
		_spec.SetField(proficiencychoice.FieldChoose, field.TypeInt, value)
	}
	if value, ok := pcu.mutation.AddedChoose(); ok {
		_spec.AddField(proficiencychoice.FieldChoose, field.TypeInt, value)
	}
	if value, ok := pcu.mutation.Desc(); ok {
		_spec.SetField(proficiencychoice.FieldDesc, field.TypeJSON, value)
	}
	if value, ok := pcu.mutation.AppendedDesc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, proficiencychoice.FieldDesc, value)
		})
	}
	if pcu.mutation.ProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiencychoice.ProficienciesTable,
			Columns: proficiencychoice.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedProficienciesIDs(); len(nodes) > 0 && !pcu.mutation.ProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiencychoice.ProficienciesTable,
			Columns: proficiencychoice.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ProficienciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiencychoice.ProficienciesTable,
			Columns: proficiencychoice.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proficiencychoice.RaceTable,
			Columns: []string{proficiencychoice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proficiencychoice.RaceTable,
			Columns: []string{proficiencychoice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proficiencychoice.ClassTable,
			Columns: []string{proficiencychoice.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proficiencychoice.ClassTable,
			Columns: []string{proficiencychoice.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proficiencychoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// ProficiencyChoiceUpdateOne is the builder for updating a single ProficiencyChoice entity.
type ProficiencyChoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProficiencyChoiceMutation
}

// SetChoose sets the "choose" field.
func (pcuo *ProficiencyChoiceUpdateOne) SetChoose(i int) *ProficiencyChoiceUpdateOne {
	pcuo.mutation.ResetChoose()
	pcuo.mutation.SetChoose(i)
	return pcuo
}

// SetNillableChoose sets the "choose" field if the given value is not nil.
func (pcuo *ProficiencyChoiceUpdateOne) SetNillableChoose(i *int) *ProficiencyChoiceUpdateOne {
	if i != nil {
		pcuo.SetChoose(*i)
	}
	return pcuo
}

// AddChoose adds i to the "choose" field.
func (pcuo *ProficiencyChoiceUpdateOne) AddChoose(i int) *ProficiencyChoiceUpdateOne {
	pcuo.mutation.AddChoose(i)
	return pcuo
}

// SetDesc sets the "desc" field.
func (pcuo *ProficiencyChoiceUpdateOne) SetDesc(s []string) *ProficiencyChoiceUpdateOne {
	pcuo.mutation.SetDesc(s)
	return pcuo
}

// AppendDesc appends s to the "desc" field.
func (pcuo *ProficiencyChoiceUpdateOne) AppendDesc(s []string) *ProficiencyChoiceUpdateOne {
	pcuo.mutation.AppendDesc(s)
	return pcuo
}

// AddProficiencyIDs adds the "proficiencies" edge to the Proficiency entity by IDs.
func (pcuo *ProficiencyChoiceUpdateOne) AddProficiencyIDs(ids ...int) *ProficiencyChoiceUpdateOne {
	pcuo.mutation.AddProficiencyIDs(ids...)
	return pcuo
}

// AddProficiencies adds the "proficiencies" edges to the Proficiency entity.
func (pcuo *ProficiencyChoiceUpdateOne) AddProficiencies(p ...*Proficiency) *ProficiencyChoiceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddProficiencyIDs(ids...)
}

// SetRaceID sets the "race" edge to the Race entity by ID.
func (pcuo *ProficiencyChoiceUpdateOne) SetRaceID(id int) *ProficiencyChoiceUpdateOne {
	pcuo.mutation.SetRaceID(id)
	return pcuo
}

// SetNillableRaceID sets the "race" edge to the Race entity by ID if the given value is not nil.
func (pcuo *ProficiencyChoiceUpdateOne) SetNillableRaceID(id *int) *ProficiencyChoiceUpdateOne {
	if id != nil {
		pcuo = pcuo.SetRaceID(*id)
	}
	return pcuo
}

// SetRace sets the "race" edge to the Race entity.
func (pcuo *ProficiencyChoiceUpdateOne) SetRace(r *Race) *ProficiencyChoiceUpdateOne {
	return pcuo.SetRaceID(r.ID)
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (pcuo *ProficiencyChoiceUpdateOne) SetClassID(id int) *ProficiencyChoiceUpdateOne {
	pcuo.mutation.SetClassID(id)
	return pcuo
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (pcuo *ProficiencyChoiceUpdateOne) SetNillableClassID(id *int) *ProficiencyChoiceUpdateOne {
	if id != nil {
		pcuo = pcuo.SetClassID(*id)
	}
	return pcuo
}

// SetClass sets the "class" edge to the Class entity.
func (pcuo *ProficiencyChoiceUpdateOne) SetClass(c *Class) *ProficiencyChoiceUpdateOne {
	return pcuo.SetClassID(c.ID)
}

// Mutation returns the ProficiencyChoiceMutation object of the builder.
func (pcuo *ProficiencyChoiceUpdateOne) Mutation() *ProficiencyChoiceMutation {
	return pcuo.mutation
}

// ClearProficiencies clears all "proficiencies" edges to the Proficiency entity.
func (pcuo *ProficiencyChoiceUpdateOne) ClearProficiencies() *ProficiencyChoiceUpdateOne {
	pcuo.mutation.ClearProficiencies()
	return pcuo
}

// RemoveProficiencyIDs removes the "proficiencies" edge to Proficiency entities by IDs.
func (pcuo *ProficiencyChoiceUpdateOne) RemoveProficiencyIDs(ids ...int) *ProficiencyChoiceUpdateOne {
	pcuo.mutation.RemoveProficiencyIDs(ids...)
	return pcuo
}

// RemoveProficiencies removes "proficiencies" edges to Proficiency entities.
func (pcuo *ProficiencyChoiceUpdateOne) RemoveProficiencies(p ...*Proficiency) *ProficiencyChoiceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemoveProficiencyIDs(ids...)
}

// ClearRace clears the "race" edge to the Race entity.
func (pcuo *ProficiencyChoiceUpdateOne) ClearRace() *ProficiencyChoiceUpdateOne {
	pcuo.mutation.ClearRace()
	return pcuo
}

// ClearClass clears the "class" edge to the Class entity.
func (pcuo *ProficiencyChoiceUpdateOne) ClearClass() *ProficiencyChoiceUpdateOne {
	pcuo.mutation.ClearClass()
	return pcuo
}

// Where appends a list predicates to the ProficiencyChoiceUpdate builder.
func (pcuo *ProficiencyChoiceUpdateOne) Where(ps ...predicate.ProficiencyChoice) *ProficiencyChoiceUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *ProficiencyChoiceUpdateOne) Select(field string, fields ...string) *ProficiencyChoiceUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated ProficiencyChoice entity.
func (pcuo *ProficiencyChoiceUpdateOne) Save(ctx context.Context) (*ProficiencyChoice, error) {
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *ProficiencyChoiceUpdateOne) SaveX(ctx context.Context) *ProficiencyChoice {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *ProficiencyChoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *ProficiencyChoiceUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *ProficiencyChoiceUpdateOne) check() error {
	if v, ok := pcuo.mutation.Choose(); ok {
		if err := proficiencychoice.ChooseValidator(v); err != nil {
			return &ValidationError{Name: "choose", err: fmt.Errorf(`ent: validator failed for field "ProficiencyChoice.choose": %w`, err)}
		}
	}
	return nil
}

func (pcuo *ProficiencyChoiceUpdateOne) sqlSave(ctx context.Context) (_node *ProficiencyChoice, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(proficiencychoice.Table, proficiencychoice.Columns, sqlgraph.NewFieldSpec(proficiencychoice.FieldID, field.TypeInt))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProficiencyChoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, proficiencychoice.FieldID)
		for _, f := range fields {
			if !proficiencychoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != proficiencychoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.Choose(); ok {
		_spec.SetField(proficiencychoice.FieldChoose, field.TypeInt, value)
	}
	if value, ok := pcuo.mutation.AddedChoose(); ok {
		_spec.AddField(proficiencychoice.FieldChoose, field.TypeInt, value)
	}
	if value, ok := pcuo.mutation.Desc(); ok {
		_spec.SetField(proficiencychoice.FieldDesc, field.TypeJSON, value)
	}
	if value, ok := pcuo.mutation.AppendedDesc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, proficiencychoice.FieldDesc, value)
		})
	}
	if pcuo.mutation.ProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiencychoice.ProficienciesTable,
			Columns: proficiencychoice.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedProficienciesIDs(); len(nodes) > 0 && !pcuo.mutation.ProficienciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiencychoice.ProficienciesTable,
			Columns: proficiencychoice.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ProficienciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   proficiencychoice.ProficienciesTable,
			Columns: proficiencychoice.ProficienciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proficiency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proficiencychoice.RaceTable,
			Columns: []string{proficiencychoice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proficiencychoice.RaceTable,
			Columns: []string{proficiencychoice.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proficiencychoice.ClassTable,
			Columns: []string{proficiencychoice.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proficiencychoice.ClassTable,
			Columns: []string{proficiencychoice.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProficiencyChoice{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proficiencychoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
