// Code generated by ent, DO NOT EDIT.

package damage

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Damage {
	return predicate.Damage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Damage {
	return predicate.Damage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Damage {
	return predicate.Damage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Damage {
	return predicate.Damage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Damage {
	return predicate.Damage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Damage {
	return predicate.Damage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Damage {
	return predicate.Damage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Damage {
	return predicate.Damage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Damage {
	return predicate.Damage(sql.FieldLTE(FieldID, id))
}

// DamageDice applies equality check predicate on the "damage_dice" field. It's identical to DamageDiceEQ.
func DamageDice(v string) predicate.Damage {
	return predicate.Damage(sql.FieldEQ(FieldDamageDice, v))
}

// DamageDiceEQ applies the EQ predicate on the "damage_dice" field.
func DamageDiceEQ(v string) predicate.Damage {
	return predicate.Damage(sql.FieldEQ(FieldDamageDice, v))
}

// DamageDiceNEQ applies the NEQ predicate on the "damage_dice" field.
func DamageDiceNEQ(v string) predicate.Damage {
	return predicate.Damage(sql.FieldNEQ(FieldDamageDice, v))
}

// DamageDiceIn applies the In predicate on the "damage_dice" field.
func DamageDiceIn(vs ...string) predicate.Damage {
	return predicate.Damage(sql.FieldIn(FieldDamageDice, vs...))
}

// DamageDiceNotIn applies the NotIn predicate on the "damage_dice" field.
func DamageDiceNotIn(vs ...string) predicate.Damage {
	return predicate.Damage(sql.FieldNotIn(FieldDamageDice, vs...))
}

// DamageDiceGT applies the GT predicate on the "damage_dice" field.
func DamageDiceGT(v string) predicate.Damage {
	return predicate.Damage(sql.FieldGT(FieldDamageDice, v))
}

// DamageDiceGTE applies the GTE predicate on the "damage_dice" field.
func DamageDiceGTE(v string) predicate.Damage {
	return predicate.Damage(sql.FieldGTE(FieldDamageDice, v))
}

// DamageDiceLT applies the LT predicate on the "damage_dice" field.
func DamageDiceLT(v string) predicate.Damage {
	return predicate.Damage(sql.FieldLT(FieldDamageDice, v))
}

// DamageDiceLTE applies the LTE predicate on the "damage_dice" field.
func DamageDiceLTE(v string) predicate.Damage {
	return predicate.Damage(sql.FieldLTE(FieldDamageDice, v))
}

// DamageDiceContains applies the Contains predicate on the "damage_dice" field.
func DamageDiceContains(v string) predicate.Damage {
	return predicate.Damage(sql.FieldContains(FieldDamageDice, v))
}

// DamageDiceHasPrefix applies the HasPrefix predicate on the "damage_dice" field.
func DamageDiceHasPrefix(v string) predicate.Damage {
	return predicate.Damage(sql.FieldHasPrefix(FieldDamageDice, v))
}

// DamageDiceHasSuffix applies the HasSuffix predicate on the "damage_dice" field.
func DamageDiceHasSuffix(v string) predicate.Damage {
	return predicate.Damage(sql.FieldHasSuffix(FieldDamageDice, v))
}

// DamageDiceEqualFold applies the EqualFold predicate on the "damage_dice" field.
func DamageDiceEqualFold(v string) predicate.Damage {
	return predicate.Damage(sql.FieldEqualFold(FieldDamageDice, v))
}

// DamageDiceContainsFold applies the ContainsFold predicate on the "damage_dice" field.
func DamageDiceContainsFold(v string) predicate.Damage {
	return predicate.Damage(sql.FieldContainsFold(FieldDamageDice, v))
}

// HasDamageType applies the HasEdge predicate on the "damage_type" edge.
func HasDamageType() predicate.Damage {
	return predicate.Damage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DamageTypeTable, DamageTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDamageTypeWith applies the HasEdge predicate on the "damage_type" edge with a given conditions (other predicates).
func HasDamageTypeWith(preds ...predicate.DamageType) predicate.Damage {
	return predicate.Damage(func(s *sql.Selector) {
		step := newDamageTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Damage) predicate.Damage {
	return predicate.Damage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Damage) predicate.Damage {
	return predicate.Damage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Damage) predicate.Damage {
	return predicate.Damage(sql.NotPredicates(p))
}
