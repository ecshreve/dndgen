// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/abilitybonuschoice"
)

// AbilityBonusChoice is the model entity for the AbilityBonusChoice schema.
type AbilityBonusChoice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Choose holds the value of the "choose" field.
	Choose int `json:"choose,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AbilityBonusChoiceQuery when eager-loading is set.
	Edges        AbilityBonusChoiceEdges `json:"-"`
	selectValues sql.SelectValues
}

// AbilityBonusChoiceEdges holds the relations/edges for other nodes in the graph.
type AbilityBonusChoiceEdges struct {
	// AbilityBonuses holds the value of the ability_bonuses edge.
	AbilityBonuses []*AbilityBonus `json:"ability_bonuses,omitempty"`
	// Race holds the value of the race edge.
	Race []*Race `json:"race,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedAbilityBonuses map[string][]*AbilityBonus
	namedRace           map[string][]*Race
}

// AbilityBonusesOrErr returns the AbilityBonuses value or an error if the edge
// was not loaded in eager-loading.
func (e AbilityBonusChoiceEdges) AbilityBonusesOrErr() ([]*AbilityBonus, error) {
	if e.loadedTypes[0] {
		return e.AbilityBonuses, nil
	}
	return nil, &NotLoadedError{edge: "ability_bonuses"}
}

// RaceOrErr returns the Race value or an error if the edge
// was not loaded in eager-loading.
func (e AbilityBonusChoiceEdges) RaceOrErr() ([]*Race, error) {
	if e.loadedTypes[1] {
		return e.Race, nil
	}
	return nil, &NotLoadedError{edge: "race"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AbilityBonusChoice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case abilitybonuschoice.FieldID, abilitybonuschoice.FieldChoose:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AbilityBonusChoice fields.
func (abc *AbilityBonusChoice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case abilitybonuschoice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			abc.ID = int(value.Int64)
		case abilitybonuschoice.FieldChoose:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field choose", values[i])
			} else if value.Valid {
				abc.Choose = int(value.Int64)
			}
		default:
			abc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AbilityBonusChoice.
// This includes values selected through modifiers, order, etc.
func (abc *AbilityBonusChoice) Value(name string) (ent.Value, error) {
	return abc.selectValues.Get(name)
}

// QueryAbilityBonuses queries the "ability_bonuses" edge of the AbilityBonusChoice entity.
func (abc *AbilityBonusChoice) QueryAbilityBonuses() *AbilityBonusQuery {
	return NewAbilityBonusChoiceClient(abc.config).QueryAbilityBonuses(abc)
}

// QueryRace queries the "race" edge of the AbilityBonusChoice entity.
func (abc *AbilityBonusChoice) QueryRace() *RaceQuery {
	return NewAbilityBonusChoiceClient(abc.config).QueryRace(abc)
}

// Update returns a builder for updating this AbilityBonusChoice.
// Note that you need to call AbilityBonusChoice.Unwrap() before calling this method if this AbilityBonusChoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (abc *AbilityBonusChoice) Update() *AbilityBonusChoiceUpdateOne {
	return NewAbilityBonusChoiceClient(abc.config).UpdateOne(abc)
}

// Unwrap unwraps the AbilityBonusChoice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (abc *AbilityBonusChoice) Unwrap() *AbilityBonusChoice {
	_tx, ok := abc.config.driver.(*txDriver)
	if !ok {
		panic("ent: AbilityBonusChoice is not a transactional entity")
	}
	abc.config.driver = _tx.drv
	return abc
}

// String implements the fmt.Stringer.
func (abc *AbilityBonusChoice) String() string {
	var builder strings.Builder
	builder.WriteString("AbilityBonusChoice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", abc.ID))
	builder.WriteString("choose=")
	builder.WriteString(fmt.Sprintf("%v", abc.Choose))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (abc *AbilityBonusChoice) MarshalJSON() ([]byte, error) {
	type Alias AbilityBonusChoice
	return json.Marshal(&struct {
		*Alias
		AbilityBonusChoiceEdges
	}{
		Alias:                   (*Alias)(abc),
		AbilityBonusChoiceEdges: abc.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (abc *AbilityBonusChoice) UnmarshalJSON(data []byte) error {
	type Alias AbilityBonusChoice
	aux := &struct {
		*Alias
		AbilityBonusChoiceEdges
	}{
		Alias: (*Alias)(abc),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	abc.Edges = aux.AbilityBonusChoiceEdges
	return nil
}

func (abcc *AbilityBonusChoiceCreate) SetAbilityBonusChoice(input *AbilityBonusChoice) *AbilityBonusChoiceCreate {
	abcc.SetChoose(input.Choose)
	return abcc
}

// NamedAbilityBonuses returns the AbilityBonuses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (abc *AbilityBonusChoice) NamedAbilityBonuses(name string) ([]*AbilityBonus, error) {
	if abc.Edges.namedAbilityBonuses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := abc.Edges.namedAbilityBonuses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (abc *AbilityBonusChoice) appendNamedAbilityBonuses(name string, edges ...*AbilityBonus) {
	if abc.Edges.namedAbilityBonuses == nil {
		abc.Edges.namedAbilityBonuses = make(map[string][]*AbilityBonus)
	}
	if len(edges) == 0 {
		abc.Edges.namedAbilityBonuses[name] = []*AbilityBonus{}
	} else {
		abc.Edges.namedAbilityBonuses[name] = append(abc.Edges.namedAbilityBonuses[name], edges...)
	}
}

// NamedRace returns the Race named value or an error if the edge was not
// loaded in eager-loading with this name.
func (abc *AbilityBonusChoice) NamedRace(name string) ([]*Race, error) {
	if abc.Edges.namedRace == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := abc.Edges.namedRace[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (abc *AbilityBonusChoice) appendNamedRace(name string, edges ...*Race) {
	if abc.Edges.namedRace == nil {
		abc.Edges.namedRace = make(map[string][]*Race)
	}
	if len(edges) == 0 {
		abc.Edges.namedRace[name] = []*Race{}
	} else {
		abc.Edges.namedRace[name] = append(abc.Edges.namedRace[name], edges...)
	}
}

// AbilityBonusChoices is a parsable slice of AbilityBonusChoice.
type AbilityBonusChoices []*AbilityBonusChoice
