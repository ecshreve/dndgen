// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/unitvalue"
)

// UnitValue is the model entity for the UnitValue schema.
type UnitValue struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Val holds the value of the "val" field.
	Val int `json:"val,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit         string `json:"unit,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UnitValue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case unitvalue.FieldID, unitvalue.FieldVal:
			values[i] = new(sql.NullInt64)
		case unitvalue.FieldUnit:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UnitValue fields.
func (uv *UnitValue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case unitvalue.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uv.ID = int(value.Int64)
		case unitvalue.FieldVal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field val", values[i])
			} else if value.Valid {
				uv.Val = int(value.Int64)
			}
		case unitvalue.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				uv.Unit = value.String
			}
		default:
			uv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UnitValue.
// This includes values selected through modifiers, order, etc.
func (uv *UnitValue) Value(name string) (ent.Value, error) {
	return uv.selectValues.Get(name)
}

// Update returns a builder for updating this UnitValue.
// Note that you need to call UnitValue.Unwrap() before calling this method if this UnitValue
// was returned from a transaction, and the transaction was committed or rolled back.
func (uv *UnitValue) Update() *UnitValueUpdateOne {
	return NewUnitValueClient(uv.config).UpdateOne(uv)
}

// Unwrap unwraps the UnitValue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uv *UnitValue) Unwrap() *UnitValue {
	_tx, ok := uv.config.driver.(*txDriver)
	if !ok {
		panic("ent: UnitValue is not a transactional entity")
	}
	uv.config.driver = _tx.drv
	return uv
}

// String implements the fmt.Stringer.
func (uv *UnitValue) String() string {
	var builder strings.Builder
	builder.WriteString("UnitValue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uv.ID))
	builder.WriteString("val=")
	builder.WriteString(fmt.Sprintf("%v", uv.Val))
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(uv.Unit)
	builder.WriteByte(')')
	return builder.String()
}

func (uvc *UnitValueCreate) SetUnitValue(input *UnitValue) *UnitValueCreate {
	uvc.SetVal(input.Val)
	uvc.SetUnit(input.Unit)
	return uvc
}

// UnitValues is a parsable slice of UnitValue.
type UnitValues []*UnitValue
