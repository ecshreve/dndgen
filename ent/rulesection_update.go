// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/rule"
	"github.com/ecshreve/dndgen/ent/rulesection"
)

// RuleSectionUpdate is the builder for updating RuleSection entities.
type RuleSectionUpdate struct {
	config
	hooks    []Hook
	mutation *RuleSectionMutation
}

// Where appends a list predicates to the RuleSectionUpdate builder.
func (rsu *RuleSectionUpdate) Where(ps ...predicate.RuleSection) *RuleSectionUpdate {
	rsu.mutation.Where(ps...)
	return rsu
}

// SetIndx sets the "indx" field.
func (rsu *RuleSectionUpdate) SetIndx(s string) *RuleSectionUpdate {
	rsu.mutation.SetIndx(s)
	return rsu
}

// SetNillableIndx sets the "indx" field if the given value is not nil.
func (rsu *RuleSectionUpdate) SetNillableIndx(s *string) *RuleSectionUpdate {
	if s != nil {
		rsu.SetIndx(*s)
	}
	return rsu
}

// SetName sets the "name" field.
func (rsu *RuleSectionUpdate) SetName(s string) *RuleSectionUpdate {
	rsu.mutation.SetName(s)
	return rsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rsu *RuleSectionUpdate) SetNillableName(s *string) *RuleSectionUpdate {
	if s != nil {
		rsu.SetName(*s)
	}
	return rsu
}

// SetDesc sets the "desc" field.
func (rsu *RuleSectionUpdate) SetDesc(s []string) *RuleSectionUpdate {
	rsu.mutation.SetDesc(s)
	return rsu
}

// AppendDesc appends s to the "desc" field.
func (rsu *RuleSectionUpdate) AppendDesc(s []string) *RuleSectionUpdate {
	rsu.mutation.AppendDesc(s)
	return rsu
}

// ClearDesc clears the value of the "desc" field.
func (rsu *RuleSectionUpdate) ClearDesc() *RuleSectionUpdate {
	rsu.mutation.ClearDesc()
	return rsu
}

// SetRuleID sets the "rule" edge to the Rule entity by ID.
func (rsu *RuleSectionUpdate) SetRuleID(id int) *RuleSectionUpdate {
	rsu.mutation.SetRuleID(id)
	return rsu
}

// SetNillableRuleID sets the "rule" edge to the Rule entity by ID if the given value is not nil.
func (rsu *RuleSectionUpdate) SetNillableRuleID(id *int) *RuleSectionUpdate {
	if id != nil {
		rsu = rsu.SetRuleID(*id)
	}
	return rsu
}

// SetRule sets the "rule" edge to the Rule entity.
func (rsu *RuleSectionUpdate) SetRule(r *Rule) *RuleSectionUpdate {
	return rsu.SetRuleID(r.ID)
}

// Mutation returns the RuleSectionMutation object of the builder.
func (rsu *RuleSectionUpdate) Mutation() *RuleSectionMutation {
	return rsu.mutation
}

// ClearRule clears the "rule" edge to the Rule entity.
func (rsu *RuleSectionUpdate) ClearRule() *RuleSectionUpdate {
	rsu.mutation.ClearRule()
	return rsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsu *RuleSectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rsu.sqlSave, rsu.mutation, rsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsu *RuleSectionUpdate) SaveX(ctx context.Context) int {
	affected, err := rsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsu *RuleSectionUpdate) Exec(ctx context.Context) error {
	_, err := rsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsu *RuleSectionUpdate) ExecX(ctx context.Context) {
	if err := rsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsu *RuleSectionUpdate) check() error {
	if v, ok := rsu.mutation.Indx(); ok {
		if err := rulesection.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "RuleSection.indx": %w`, err)}
		}
	}
	if v, ok := rsu.mutation.Name(); ok {
		if err := rulesection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RuleSection.name": %w`, err)}
		}
	}
	return nil
}

func (rsu *RuleSectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rulesection.Table, rulesection.Columns, sqlgraph.NewFieldSpec(rulesection.FieldID, field.TypeInt))
	if ps := rsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsu.mutation.Indx(); ok {
		_spec.SetField(rulesection.FieldIndx, field.TypeString, value)
	}
	if value, ok := rsu.mutation.Name(); ok {
		_spec.SetField(rulesection.FieldName, field.TypeString, value)
	}
	if value, ok := rsu.mutation.Desc(); ok {
		_spec.SetField(rulesection.FieldDesc, field.TypeJSON, value)
	}
	if value, ok := rsu.mutation.AppendedDesc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, rulesection.FieldDesc, value)
		})
	}
	if rsu.mutation.DescCleared() {
		_spec.ClearField(rulesection.FieldDesc, field.TypeJSON)
	}
	if rsu.mutation.RuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rulesection.RuleTable,
			Columns: []string{rulesection.RuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rule.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.RuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rulesection.RuleTable,
			Columns: []string{rulesection.RuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rulesection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rsu.mutation.done = true
	return n, nil
}

// RuleSectionUpdateOne is the builder for updating a single RuleSection entity.
type RuleSectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RuleSectionMutation
}

// SetIndx sets the "indx" field.
func (rsuo *RuleSectionUpdateOne) SetIndx(s string) *RuleSectionUpdateOne {
	rsuo.mutation.SetIndx(s)
	return rsuo
}

// SetNillableIndx sets the "indx" field if the given value is not nil.
func (rsuo *RuleSectionUpdateOne) SetNillableIndx(s *string) *RuleSectionUpdateOne {
	if s != nil {
		rsuo.SetIndx(*s)
	}
	return rsuo
}

// SetName sets the "name" field.
func (rsuo *RuleSectionUpdateOne) SetName(s string) *RuleSectionUpdateOne {
	rsuo.mutation.SetName(s)
	return rsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rsuo *RuleSectionUpdateOne) SetNillableName(s *string) *RuleSectionUpdateOne {
	if s != nil {
		rsuo.SetName(*s)
	}
	return rsuo
}

// SetDesc sets the "desc" field.
func (rsuo *RuleSectionUpdateOne) SetDesc(s []string) *RuleSectionUpdateOne {
	rsuo.mutation.SetDesc(s)
	return rsuo
}

// AppendDesc appends s to the "desc" field.
func (rsuo *RuleSectionUpdateOne) AppendDesc(s []string) *RuleSectionUpdateOne {
	rsuo.mutation.AppendDesc(s)
	return rsuo
}

// ClearDesc clears the value of the "desc" field.
func (rsuo *RuleSectionUpdateOne) ClearDesc() *RuleSectionUpdateOne {
	rsuo.mutation.ClearDesc()
	return rsuo
}

// SetRuleID sets the "rule" edge to the Rule entity by ID.
func (rsuo *RuleSectionUpdateOne) SetRuleID(id int) *RuleSectionUpdateOne {
	rsuo.mutation.SetRuleID(id)
	return rsuo
}

// SetNillableRuleID sets the "rule" edge to the Rule entity by ID if the given value is not nil.
func (rsuo *RuleSectionUpdateOne) SetNillableRuleID(id *int) *RuleSectionUpdateOne {
	if id != nil {
		rsuo = rsuo.SetRuleID(*id)
	}
	return rsuo
}

// SetRule sets the "rule" edge to the Rule entity.
func (rsuo *RuleSectionUpdateOne) SetRule(r *Rule) *RuleSectionUpdateOne {
	return rsuo.SetRuleID(r.ID)
}

// Mutation returns the RuleSectionMutation object of the builder.
func (rsuo *RuleSectionUpdateOne) Mutation() *RuleSectionMutation {
	return rsuo.mutation
}

// ClearRule clears the "rule" edge to the Rule entity.
func (rsuo *RuleSectionUpdateOne) ClearRule() *RuleSectionUpdateOne {
	rsuo.mutation.ClearRule()
	return rsuo
}

// Where appends a list predicates to the RuleSectionUpdate builder.
func (rsuo *RuleSectionUpdateOne) Where(ps ...predicate.RuleSection) *RuleSectionUpdateOne {
	rsuo.mutation.Where(ps...)
	return rsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rsuo *RuleSectionUpdateOne) Select(field string, fields ...string) *RuleSectionUpdateOne {
	rsuo.fields = append([]string{field}, fields...)
	return rsuo
}

// Save executes the query and returns the updated RuleSection entity.
func (rsuo *RuleSectionUpdateOne) Save(ctx context.Context) (*RuleSection, error) {
	return withHooks(ctx, rsuo.sqlSave, rsuo.mutation, rsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsuo *RuleSectionUpdateOne) SaveX(ctx context.Context) *RuleSection {
	node, err := rsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsuo *RuleSectionUpdateOne) Exec(ctx context.Context) error {
	_, err := rsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsuo *RuleSectionUpdateOne) ExecX(ctx context.Context) {
	if err := rsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsuo *RuleSectionUpdateOne) check() error {
	if v, ok := rsuo.mutation.Indx(); ok {
		if err := rulesection.IndxValidator(v); err != nil {
			return &ValidationError{Name: "indx", err: fmt.Errorf(`ent: validator failed for field "RuleSection.indx": %w`, err)}
		}
	}
	if v, ok := rsuo.mutation.Name(); ok {
		if err := rulesection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RuleSection.name": %w`, err)}
		}
	}
	return nil
}

func (rsuo *RuleSectionUpdateOne) sqlSave(ctx context.Context) (_node *RuleSection, err error) {
	if err := rsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rulesection.Table, rulesection.Columns, sqlgraph.NewFieldSpec(rulesection.FieldID, field.TypeInt))
	id, ok := rsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RuleSection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rulesection.FieldID)
		for _, f := range fields {
			if !rulesection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rulesection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsuo.mutation.Indx(); ok {
		_spec.SetField(rulesection.FieldIndx, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.Name(); ok {
		_spec.SetField(rulesection.FieldName, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.Desc(); ok {
		_spec.SetField(rulesection.FieldDesc, field.TypeJSON, value)
	}
	if value, ok := rsuo.mutation.AppendedDesc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, rulesection.FieldDesc, value)
		})
	}
	if rsuo.mutation.DescCleared() {
		_spec.ClearField(rulesection.FieldDesc, field.TypeJSON)
	}
	if rsuo.mutation.RuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rulesection.RuleTable,
			Columns: []string{rulesection.RuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rule.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.RuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rulesection.RuleTable,
			Columns: []string{rulesection.RuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rule.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RuleSection{config: rsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rulesection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rsuo.mutation.done = true
	return _node, nil
}
