// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/proficiencychoice"
)

// ProficiencyChoice is the model entity for the ProficiencyChoice schema.
type ProficiencyChoice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Choose holds the value of the "choose" field.
	Choose int `json:"choose,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProficiencyChoiceQuery when eager-loading is set.
	Edges                         ProficiencyChoiceEdges `json:"-"`
	proficiency_choice_sub_choice *int
	selectValues                  sql.SelectValues
}

// ProficiencyChoiceEdges holds the relations/edges for other nodes in the graph.
type ProficiencyChoiceEdges struct {
	// Proficiency holds the value of the proficiency edge.
	Proficiency []*Proficiency `json:"proficiency,omitempty"`
	// ParentChoice holds the value of the parent_choice edge.
	ParentChoice *ProficiencyChoice `json:"parent_choice,omitempty"`
	// SubChoice holds the value of the sub_choice edge.
	SubChoice []*ProficiencyChoice `json:"sub_choice,omitempty"`
	// Class holds the value of the class edge.
	Class []*Class `json:"class,omitempty"`
	// Race holds the value of the race edge.
	Race []*Race `json:"race,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedProficiency map[string][]*Proficiency
	namedSubChoice   map[string][]*ProficiencyChoice
	namedClass       map[string][]*Class
	namedRace        map[string][]*Race
}

// ProficiencyOrErr returns the Proficiency value or an error if the edge
// was not loaded in eager-loading.
func (e ProficiencyChoiceEdges) ProficiencyOrErr() ([]*Proficiency, error) {
	if e.loadedTypes[0] {
		return e.Proficiency, nil
	}
	return nil, &NotLoadedError{edge: "proficiency"}
}

// ParentChoiceOrErr returns the ParentChoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProficiencyChoiceEdges) ParentChoiceOrErr() (*ProficiencyChoice, error) {
	if e.loadedTypes[1] {
		if e.ParentChoice == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: proficiencychoice.Label}
		}
		return e.ParentChoice, nil
	}
	return nil, &NotLoadedError{edge: "parent_choice"}
}

// SubChoiceOrErr returns the SubChoice value or an error if the edge
// was not loaded in eager-loading.
func (e ProficiencyChoiceEdges) SubChoiceOrErr() ([]*ProficiencyChoice, error) {
	if e.loadedTypes[2] {
		return e.SubChoice, nil
	}
	return nil, &NotLoadedError{edge: "sub_choice"}
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading.
func (e ProficiencyChoiceEdges) ClassOrErr() ([]*Class, error) {
	if e.loadedTypes[3] {
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// RaceOrErr returns the Race value or an error if the edge
// was not loaded in eager-loading.
func (e ProficiencyChoiceEdges) RaceOrErr() ([]*Race, error) {
	if e.loadedTypes[4] {
		return e.Race, nil
	}
	return nil, &NotLoadedError{edge: "race"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProficiencyChoice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case proficiencychoice.FieldID, proficiencychoice.FieldChoose:
			values[i] = new(sql.NullInt64)
		case proficiencychoice.FieldDesc:
			values[i] = new(sql.NullString)
		case proficiencychoice.ForeignKeys[0]: // proficiency_choice_sub_choice
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProficiencyChoice fields.
func (pc *ProficiencyChoice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case proficiencychoice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pc.ID = int(value.Int64)
		case proficiencychoice.FieldChoose:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field choose", values[i])
			} else if value.Valid {
				pc.Choose = int(value.Int64)
			}
		case proficiencychoice.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				pc.Desc = value.String
			}
		case proficiencychoice.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field proficiency_choice_sub_choice", value)
			} else if value.Valid {
				pc.proficiency_choice_sub_choice = new(int)
				*pc.proficiency_choice_sub_choice = int(value.Int64)
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProficiencyChoice.
// This includes values selected through modifiers, order, etc.
func (pc *ProficiencyChoice) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// QueryProficiency queries the "proficiency" edge of the ProficiencyChoice entity.
func (pc *ProficiencyChoice) QueryProficiency() *ProficiencyQuery {
	return NewProficiencyChoiceClient(pc.config).QueryProficiency(pc)
}

// QueryParentChoice queries the "parent_choice" edge of the ProficiencyChoice entity.
func (pc *ProficiencyChoice) QueryParentChoice() *ProficiencyChoiceQuery {
	return NewProficiencyChoiceClient(pc.config).QueryParentChoice(pc)
}

// QuerySubChoice queries the "sub_choice" edge of the ProficiencyChoice entity.
func (pc *ProficiencyChoice) QuerySubChoice() *ProficiencyChoiceQuery {
	return NewProficiencyChoiceClient(pc.config).QuerySubChoice(pc)
}

// QueryClass queries the "class" edge of the ProficiencyChoice entity.
func (pc *ProficiencyChoice) QueryClass() *ClassQuery {
	return NewProficiencyChoiceClient(pc.config).QueryClass(pc)
}

// QueryRace queries the "race" edge of the ProficiencyChoice entity.
func (pc *ProficiencyChoice) QueryRace() *RaceQuery {
	return NewProficiencyChoiceClient(pc.config).QueryRace(pc)
}

// Update returns a builder for updating this ProficiencyChoice.
// Note that you need to call ProficiencyChoice.Unwrap() before calling this method if this ProficiencyChoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *ProficiencyChoice) Update() *ProficiencyChoiceUpdateOne {
	return NewProficiencyChoiceClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the ProficiencyChoice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *ProficiencyChoice) Unwrap() *ProficiencyChoice {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProficiencyChoice is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *ProficiencyChoice) String() string {
	var builder strings.Builder
	builder.WriteString("ProficiencyChoice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("choose=")
	builder.WriteString(fmt.Sprintf("%v", pc.Choose))
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(pc.Desc)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (pc *ProficiencyChoice) MarshalJSON() ([]byte, error) {
	type Alias ProficiencyChoice
	return json.Marshal(&struct {
		*Alias
		ProficiencyChoiceEdges
	}{
		Alias:                  (*Alias)(pc),
		ProficiencyChoiceEdges: pc.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (pc *ProficiencyChoice) UnmarshalJSON(data []byte) error {
	type Alias ProficiencyChoice
	aux := &struct {
		*Alias
		ProficiencyChoiceEdges
	}{
		Alias: (*Alias)(pc),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	pc.Edges = aux.ProficiencyChoiceEdges
	return nil
}

func (pcc *ProficiencyChoiceCreate) SetProficiencyChoice(input *ProficiencyChoice) *ProficiencyChoiceCreate {
	pcc.SetChoose(input.Choose)
	pcc.SetDesc(input.Desc)
	return pcc
}

// NamedProficiency returns the Proficiency named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pc *ProficiencyChoice) NamedProficiency(name string) ([]*Proficiency, error) {
	if pc.Edges.namedProficiency == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pc.Edges.namedProficiency[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pc *ProficiencyChoice) appendNamedProficiency(name string, edges ...*Proficiency) {
	if pc.Edges.namedProficiency == nil {
		pc.Edges.namedProficiency = make(map[string][]*Proficiency)
	}
	if len(edges) == 0 {
		pc.Edges.namedProficiency[name] = []*Proficiency{}
	} else {
		pc.Edges.namedProficiency[name] = append(pc.Edges.namedProficiency[name], edges...)
	}
}

// NamedSubChoice returns the SubChoice named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pc *ProficiencyChoice) NamedSubChoice(name string) ([]*ProficiencyChoice, error) {
	if pc.Edges.namedSubChoice == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pc.Edges.namedSubChoice[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pc *ProficiencyChoice) appendNamedSubChoice(name string, edges ...*ProficiencyChoice) {
	if pc.Edges.namedSubChoice == nil {
		pc.Edges.namedSubChoice = make(map[string][]*ProficiencyChoice)
	}
	if len(edges) == 0 {
		pc.Edges.namedSubChoice[name] = []*ProficiencyChoice{}
	} else {
		pc.Edges.namedSubChoice[name] = append(pc.Edges.namedSubChoice[name], edges...)
	}
}

// NamedClass returns the Class named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pc *ProficiencyChoice) NamedClass(name string) ([]*Class, error) {
	if pc.Edges.namedClass == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pc.Edges.namedClass[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pc *ProficiencyChoice) appendNamedClass(name string, edges ...*Class) {
	if pc.Edges.namedClass == nil {
		pc.Edges.namedClass = make(map[string][]*Class)
	}
	if len(edges) == 0 {
		pc.Edges.namedClass[name] = []*Class{}
	} else {
		pc.Edges.namedClass[name] = append(pc.Edges.namedClass[name], edges...)
	}
}

// NamedRace returns the Race named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pc *ProficiencyChoice) NamedRace(name string) ([]*Race, error) {
	if pc.Edges.namedRace == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pc.Edges.namedRace[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pc *ProficiencyChoice) appendNamedRace(name string, edges ...*Race) {
	if pc.Edges.namedRace == nil {
		pc.Edges.namedRace = make(map[string][]*Race)
	}
	if len(edges) == 0 {
		pc.Edges.namedRace[name] = []*Race{}
	} else {
		pc.Edges.namedRace[name] = append(pc.Edges.namedRace[name], edges...)
	}
}

// ProficiencyChoices is a parsable slice of ProficiencyChoice.
type ProficiencyChoices []*ProficiencyChoice
