// Code generated by ent, DO NOT EDIT.

package character

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the character type in the database.
	Label = "character"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// EdgeRace holds the string denoting the race edge name in mutations.
	EdgeRace = "race"
	// EdgeClass holds the string denoting the class edge name in mutations.
	EdgeClass = "class"
	// EdgeAlignment holds the string denoting the alignment edge name in mutations.
	EdgeAlignment = "alignment"
	// EdgeProficiencies holds the string denoting the proficiencies edge name in mutations.
	EdgeProficiencies = "proficiencies"
	// EdgeAbilityScores holds the string denoting the ability_scores edge name in mutations.
	EdgeAbilityScores = "ability_scores"
	// EdgeSkills holds the string denoting the skills edge name in mutations.
	EdgeSkills = "skills"
	// EdgeCharacterProficiencies holds the string denoting the character_proficiencies edge name in mutations.
	EdgeCharacterProficiencies = "character_proficiencies"
	// EdgeCharacterAbilityScores holds the string denoting the character_ability_scores edge name in mutations.
	EdgeCharacterAbilityScores = "character_ability_scores"
	// EdgeCharacterSkills holds the string denoting the character_skills edge name in mutations.
	EdgeCharacterSkills = "character_skills"
	// Table holds the table name of the character in the database.
	Table = "characters"
	// RaceTable is the table that holds the race relation/edge.
	RaceTable = "characters"
	// RaceInverseTable is the table name for the Race entity.
	// It exists in this package in order to avoid circular dependency with the "race" package.
	RaceInverseTable = "races"
	// RaceColumn is the table column denoting the race relation/edge.
	RaceColumn = "character_race"
	// ClassTable is the table that holds the class relation/edge.
	ClassTable = "characters"
	// ClassInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	ClassInverseTable = "classes"
	// ClassColumn is the table column denoting the class relation/edge.
	ClassColumn = "character_class"
	// AlignmentTable is the table that holds the alignment relation/edge.
	AlignmentTable = "characters"
	// AlignmentInverseTable is the table name for the Alignment entity.
	// It exists in this package in order to avoid circular dependency with the "alignment" package.
	AlignmentInverseTable = "alignments"
	// AlignmentColumn is the table column denoting the alignment relation/edge.
	AlignmentColumn = "character_alignment"
	// ProficienciesTable is the table that holds the proficiencies relation/edge. The primary key declared below.
	ProficienciesTable = "character_proficiencies"
	// ProficienciesInverseTable is the table name for the Proficiency entity.
	// It exists in this package in order to avoid circular dependency with the "proficiency" package.
	ProficienciesInverseTable = "proficiencies"
	// AbilityScoresTable is the table that holds the ability_scores relation/edge. The primary key declared below.
	AbilityScoresTable = "character_ability_scores"
	// AbilityScoresInverseTable is the table name for the AbilityScore entity.
	// It exists in this package in order to avoid circular dependency with the "abilityscore" package.
	AbilityScoresInverseTable = "ability_scores"
	// SkillsTable is the table that holds the skills relation/edge. The primary key declared below.
	SkillsTable = "character_skills"
	// SkillsInverseTable is the table name for the Skill entity.
	// It exists in this package in order to avoid circular dependency with the "skill" package.
	SkillsInverseTable = "skills"
	// CharacterProficienciesTable is the table that holds the character_proficiencies relation/edge.
	CharacterProficienciesTable = "character_proficiencies"
	// CharacterProficienciesInverseTable is the table name for the CharacterProficiency entity.
	// It exists in this package in order to avoid circular dependency with the "characterproficiency" package.
	CharacterProficienciesInverseTable = "character_proficiencies"
	// CharacterProficienciesColumn is the table column denoting the character_proficiencies relation/edge.
	CharacterProficienciesColumn = "character_id"
	// CharacterAbilityScoresTable is the table that holds the character_ability_scores relation/edge.
	CharacterAbilityScoresTable = "character_ability_scores"
	// CharacterAbilityScoresInverseTable is the table name for the CharacterAbilityScore entity.
	// It exists in this package in order to avoid circular dependency with the "characterabilityscore" package.
	CharacterAbilityScoresInverseTable = "character_ability_scores"
	// CharacterAbilityScoresColumn is the table column denoting the character_ability_scores relation/edge.
	CharacterAbilityScoresColumn = "character_id"
	// CharacterSkillsTable is the table that holds the character_skills relation/edge.
	CharacterSkillsTable = "character_skills"
	// CharacterSkillsInverseTable is the table name for the CharacterSkill entity.
	// It exists in this package in order to avoid circular dependency with the "characterskill" package.
	CharacterSkillsInverseTable = "character_skills"
	// CharacterSkillsColumn is the table column denoting the character_skills relation/edge.
	CharacterSkillsColumn = "character_id"
)

// Columns holds all SQL columns for character fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAge,
	FieldLevel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "characters"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"character_race",
	"character_class",
	"character_alignment",
}

var (
	// ProficienciesPrimaryKey and ProficienciesColumn2 are the table columns denoting the
	// primary key for the proficiencies relation (M2M).
	ProficienciesPrimaryKey = []string{"character_id", "proficiency_id"}
	// AbilityScoresPrimaryKey and AbilityScoresColumn2 are the table columns denoting the
	// primary key for the ability_scores relation (M2M).
	AbilityScoresPrimaryKey = []string{"character_id", "ability_score_id"}
	// SkillsPrimaryKey and SkillsColumn2 are the table columns denoting the
	// primary key for the skills relation (M2M).
	SkillsPrimaryKey = []string{"character_id", "skill_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultAge holds the default value on creation for the "age" field.
	DefaultAge int
	// AgeValidator is a validator for the "age" field. It is called by the builders before save.
	AgeValidator func(int) error
	// DefaultLevel holds the default value on creation for the "level" field.
	DefaultLevel int
	// LevelValidator is a validator for the "level" field. It is called by the builders before save.
	LevelValidator func(int) error
)

// OrderOption defines the ordering options for the Character queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAge orders the results by the age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByRaceField orders the results by race field.
func ByRaceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRaceStep(), sql.OrderByField(field, opts...))
	}
}

// ByClassField orders the results by class field.
func ByClassField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassStep(), sql.OrderByField(field, opts...))
	}
}

// ByAlignmentField orders the results by alignment field.
func ByAlignmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAlignmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByProficienciesCount orders the results by proficiencies count.
func ByProficienciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProficienciesStep(), opts...)
	}
}

// ByProficiencies orders the results by proficiencies terms.
func ByProficiencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProficienciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAbilityScoresCount orders the results by ability_scores count.
func ByAbilityScoresCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAbilityScoresStep(), opts...)
	}
}

// ByAbilityScores orders the results by ability_scores terms.
func ByAbilityScores(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAbilityScoresStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySkillsCount orders the results by skills count.
func BySkillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSkillsStep(), opts...)
	}
}

// BySkills orders the results by skills terms.
func BySkills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCharacterProficienciesCount orders the results by character_proficiencies count.
func ByCharacterProficienciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCharacterProficienciesStep(), opts...)
	}
}

// ByCharacterProficiencies orders the results by character_proficiencies terms.
func ByCharacterProficiencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCharacterProficienciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCharacterAbilityScoresCount orders the results by character_ability_scores count.
func ByCharacterAbilityScoresCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCharacterAbilityScoresStep(), opts...)
	}
}

// ByCharacterAbilityScores orders the results by character_ability_scores terms.
func ByCharacterAbilityScores(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCharacterAbilityScoresStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCharacterSkillsCount orders the results by character_skills count.
func ByCharacterSkillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCharacterSkillsStep(), opts...)
	}
}

// ByCharacterSkills orders the results by character_skills terms.
func ByCharacterSkills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCharacterSkillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRaceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RaceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RaceTable, RaceColumn),
	)
}
func newClassStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ClassTable, ClassColumn),
	)
}
func newAlignmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AlignmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AlignmentTable, AlignmentColumn),
	)
}
func newProficienciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProficienciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ProficienciesTable, ProficienciesPrimaryKey...),
	)
}
func newAbilityScoresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AbilityScoresInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AbilityScoresTable, AbilityScoresPrimaryKey...),
	)
}
func newSkillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SkillsTable, SkillsPrimaryKey...),
	)
}
func newCharacterProficienciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CharacterProficienciesInverseTable, CharacterProficienciesColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, CharacterProficienciesTable, CharacterProficienciesColumn),
	)
}
func newCharacterAbilityScoresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CharacterAbilityScoresInverseTable, CharacterAbilityScoresColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, CharacterAbilityScoresTable, CharacterAbilityScoresColumn),
	)
}
func newCharacterSkillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CharacterSkillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CharacterSkillsTable, CharacterSkillsColumn),
	)
}
