// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/equipmententry"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// EquipmentEntryQuery is the builder for querying EquipmentEntry entities.
type EquipmentEntryQuery struct {
	config
	ctx            *QueryContext
	order          []equipmententry.OrderOption
	inters         []Interceptor
	predicates     []predicate.EquipmentEntry
	withClass      *ClassQuery
	withEquipment  *EquipmentQuery
	withFKs        bool
	modifiers      []func(*sql.Selector)
	loadTotal      []func(context.Context, []*EquipmentEntry) error
	withNamedClass map[string]*ClassQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EquipmentEntryQuery builder.
func (eeq *EquipmentEntryQuery) Where(ps ...predicate.EquipmentEntry) *EquipmentEntryQuery {
	eeq.predicates = append(eeq.predicates, ps...)
	return eeq
}

// Limit the number of records to be returned by this query.
func (eeq *EquipmentEntryQuery) Limit(limit int) *EquipmentEntryQuery {
	eeq.ctx.Limit = &limit
	return eeq
}

// Offset to start from.
func (eeq *EquipmentEntryQuery) Offset(offset int) *EquipmentEntryQuery {
	eeq.ctx.Offset = &offset
	return eeq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eeq *EquipmentEntryQuery) Unique(unique bool) *EquipmentEntryQuery {
	eeq.ctx.Unique = &unique
	return eeq
}

// Order specifies how the records should be ordered.
func (eeq *EquipmentEntryQuery) Order(o ...equipmententry.OrderOption) *EquipmentEntryQuery {
	eeq.order = append(eeq.order, o...)
	return eeq
}

// QueryClass chains the current query on the "class" edge.
func (eeq *EquipmentEntryQuery) QueryClass() *ClassQuery {
	query := (&ClassClient{config: eeq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmententry.Table, equipmententry.FieldID, selector),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, equipmententry.ClassTable, equipmententry.ClassPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEquipment chains the current query on the "equipment" edge.
func (eeq *EquipmentEntryQuery) QueryEquipment() *EquipmentQuery {
	query := (&EquipmentClient{config: eeq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmententry.Table, equipmententry.FieldID, selector),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipmententry.EquipmentTable, equipmententry.EquipmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(eeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EquipmentEntry entity from the query.
// Returns a *NotFoundError when no EquipmentEntry was found.
func (eeq *EquipmentEntryQuery) First(ctx context.Context) (*EquipmentEntry, error) {
	nodes, err := eeq.Limit(1).All(setContextOp(ctx, eeq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{equipmententry.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eeq *EquipmentEntryQuery) FirstX(ctx context.Context) *EquipmentEntry {
	node, err := eeq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EquipmentEntry ID from the query.
// Returns a *NotFoundError when no EquipmentEntry ID was found.
func (eeq *EquipmentEntryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eeq.Limit(1).IDs(setContextOp(ctx, eeq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{equipmententry.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eeq *EquipmentEntryQuery) FirstIDX(ctx context.Context) int {
	id, err := eeq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EquipmentEntry entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EquipmentEntry entity is found.
// Returns a *NotFoundError when no EquipmentEntry entities are found.
func (eeq *EquipmentEntryQuery) Only(ctx context.Context) (*EquipmentEntry, error) {
	nodes, err := eeq.Limit(2).All(setContextOp(ctx, eeq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{equipmententry.Label}
	default:
		return nil, &NotSingularError{equipmententry.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eeq *EquipmentEntryQuery) OnlyX(ctx context.Context) *EquipmentEntry {
	node, err := eeq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EquipmentEntry ID in the query.
// Returns a *NotSingularError when more than one EquipmentEntry ID is found.
// Returns a *NotFoundError when no entities are found.
func (eeq *EquipmentEntryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eeq.Limit(2).IDs(setContextOp(ctx, eeq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{equipmententry.Label}
	default:
		err = &NotSingularError{equipmententry.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eeq *EquipmentEntryQuery) OnlyIDX(ctx context.Context) int {
	id, err := eeq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EquipmentEntries.
func (eeq *EquipmentEntryQuery) All(ctx context.Context) ([]*EquipmentEntry, error) {
	ctx = setContextOp(ctx, eeq.ctx, ent.OpQueryAll)
	if err := eeq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EquipmentEntry, *EquipmentEntryQuery]()
	return withInterceptors[[]*EquipmentEntry](ctx, eeq, qr, eeq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eeq *EquipmentEntryQuery) AllX(ctx context.Context) []*EquipmentEntry {
	nodes, err := eeq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EquipmentEntry IDs.
func (eeq *EquipmentEntryQuery) IDs(ctx context.Context) (ids []int, err error) {
	if eeq.ctx.Unique == nil && eeq.path != nil {
		eeq.Unique(true)
	}
	ctx = setContextOp(ctx, eeq.ctx, ent.OpQueryIDs)
	if err = eeq.Select(equipmententry.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eeq *EquipmentEntryQuery) IDsX(ctx context.Context) []int {
	ids, err := eeq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eeq *EquipmentEntryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eeq.ctx, ent.OpQueryCount)
	if err := eeq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eeq, querierCount[*EquipmentEntryQuery](), eeq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eeq *EquipmentEntryQuery) CountX(ctx context.Context) int {
	count, err := eeq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eeq *EquipmentEntryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eeq.ctx, ent.OpQueryExist)
	switch _, err := eeq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eeq *EquipmentEntryQuery) ExistX(ctx context.Context) bool {
	exist, err := eeq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EquipmentEntryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eeq *EquipmentEntryQuery) Clone() *EquipmentEntryQuery {
	if eeq == nil {
		return nil
	}
	return &EquipmentEntryQuery{
		config:        eeq.config,
		ctx:           eeq.ctx.Clone(),
		order:         append([]equipmententry.OrderOption{}, eeq.order...),
		inters:        append([]Interceptor{}, eeq.inters...),
		predicates:    append([]predicate.EquipmentEntry{}, eeq.predicates...),
		withClass:     eeq.withClass.Clone(),
		withEquipment: eeq.withEquipment.Clone(),
		// clone intermediate query.
		sql:  eeq.sql.Clone(),
		path: eeq.path,
	}
}

// WithClass tells the query-builder to eager-load the nodes that are connected to
// the "class" edge. The optional arguments are used to configure the query builder of the edge.
func (eeq *EquipmentEntryQuery) WithClass(opts ...func(*ClassQuery)) *EquipmentEntryQuery {
	query := (&ClassClient{config: eeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eeq.withClass = query
	return eeq
}

// WithEquipment tells the query-builder to eager-load the nodes that are connected to
// the "equipment" edge. The optional arguments are used to configure the query builder of the edge.
func (eeq *EquipmentEntryQuery) WithEquipment(opts ...func(*EquipmentQuery)) *EquipmentEntryQuery {
	query := (&EquipmentClient{config: eeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eeq.withEquipment = query
	return eeq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Quantity int `json:"quantity,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EquipmentEntry.Query().
//		GroupBy(equipmententry.FieldQuantity).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eeq *EquipmentEntryQuery) GroupBy(field string, fields ...string) *EquipmentEntryGroupBy {
	eeq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EquipmentEntryGroupBy{build: eeq}
	grbuild.flds = &eeq.ctx.Fields
	grbuild.label = equipmententry.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Quantity int `json:"quantity,omitempty"`
//	}
//
//	client.EquipmentEntry.Query().
//		Select(equipmententry.FieldQuantity).
//		Scan(ctx, &v)
func (eeq *EquipmentEntryQuery) Select(fields ...string) *EquipmentEntrySelect {
	eeq.ctx.Fields = append(eeq.ctx.Fields, fields...)
	sbuild := &EquipmentEntrySelect{EquipmentEntryQuery: eeq}
	sbuild.label = equipmententry.Label
	sbuild.flds, sbuild.scan = &eeq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EquipmentEntrySelect configured with the given aggregations.
func (eeq *EquipmentEntryQuery) Aggregate(fns ...AggregateFunc) *EquipmentEntrySelect {
	return eeq.Select().Aggregate(fns...)
}

func (eeq *EquipmentEntryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eeq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eeq); err != nil {
				return err
			}
		}
	}
	for _, f := range eeq.ctx.Fields {
		if !equipmententry.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eeq.path != nil {
		prev, err := eeq.path(ctx)
		if err != nil {
			return err
		}
		eeq.sql = prev
	}
	return nil
}

func (eeq *EquipmentEntryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EquipmentEntry, error) {
	var (
		nodes       = []*EquipmentEntry{}
		withFKs     = eeq.withFKs
		_spec       = eeq.querySpec()
		loadedTypes = [2]bool{
			eeq.withClass != nil,
			eeq.withEquipment != nil,
		}
	)
	if eeq.withEquipment != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, equipmententry.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EquipmentEntry).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EquipmentEntry{config: eeq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(eeq.modifiers) > 0 {
		_spec.Modifiers = eeq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eeq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eeq.withClass; query != nil {
		if err := eeq.loadClass(ctx, query, nodes,
			func(n *EquipmentEntry) { n.Edges.Class = []*Class{} },
			func(n *EquipmentEntry, e *Class) { n.Edges.Class = append(n.Edges.Class, e) }); err != nil {
			return nil, err
		}
	}
	if query := eeq.withEquipment; query != nil {
		if err := eeq.loadEquipment(ctx, query, nodes, nil,
			func(n *EquipmentEntry, e *Equipment) { n.Edges.Equipment = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range eeq.withNamedClass {
		if err := eeq.loadClass(ctx, query, nodes,
			func(n *EquipmentEntry) { n.appendNamedClass(name) },
			func(n *EquipmentEntry, e *Class) { n.appendNamedClass(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range eeq.loadTotal {
		if err := eeq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eeq *EquipmentEntryQuery) loadClass(ctx context.Context, query *ClassQuery, nodes []*EquipmentEntry, init func(*EquipmentEntry), assign func(*EquipmentEntry, *Class)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*EquipmentEntry)
	nids := make(map[int]map[*EquipmentEntry]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(equipmententry.ClassTable)
		s.Join(joinT).On(s.C(class.FieldID), joinT.C(equipmententry.ClassPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(equipmententry.ClassPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(equipmententry.ClassPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*EquipmentEntry]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Class](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "class" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eeq *EquipmentEntryQuery) loadEquipment(ctx context.Context, query *EquipmentQuery, nodes []*EquipmentEntry, init func(*EquipmentEntry), assign func(*EquipmentEntry, *Equipment)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EquipmentEntry)
	for i := range nodes {
		if nodes[i].equipment_entry_equipment == nil {
			continue
		}
		fk := *nodes[i].equipment_entry_equipment
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(equipment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "equipment_entry_equipment" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (eeq *EquipmentEntryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eeq.querySpec()
	if len(eeq.modifiers) > 0 {
		_spec.Modifiers = eeq.modifiers
	}
	_spec.Node.Columns = eeq.ctx.Fields
	if len(eeq.ctx.Fields) > 0 {
		_spec.Unique = eeq.ctx.Unique != nil && *eeq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eeq.driver, _spec)
}

func (eeq *EquipmentEntryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(equipmententry.Table, equipmententry.Columns, sqlgraph.NewFieldSpec(equipmententry.FieldID, field.TypeInt))
	_spec.From = eeq.sql
	if unique := eeq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eeq.path != nil {
		_spec.Unique = true
	}
	if fields := eeq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, equipmententry.FieldID)
		for i := range fields {
			if fields[i] != equipmententry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eeq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eeq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eeq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eeq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eeq *EquipmentEntryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eeq.driver.Dialect())
	t1 := builder.Table(equipmententry.Table)
	columns := eeq.ctx.Fields
	if len(columns) == 0 {
		columns = equipmententry.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eeq.sql != nil {
		selector = eeq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eeq.ctx.Unique != nil && *eeq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eeq.predicates {
		p(selector)
	}
	for _, p := range eeq.order {
		p(selector)
	}
	if offset := eeq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eeq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedClass tells the query-builder to eager-load the nodes that are connected to the "class"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eeq *EquipmentEntryQuery) WithNamedClass(name string, opts ...func(*ClassQuery)) *EquipmentEntryQuery {
	query := (&ClassClient{config: eeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eeq.withNamedClass == nil {
		eeq.withNamedClass = make(map[string]*ClassQuery)
	}
	eeq.withNamedClass[name] = query
	return eeq
}

// EquipmentEntryGroupBy is the group-by builder for EquipmentEntry entities.
type EquipmentEntryGroupBy struct {
	selector
	build *EquipmentEntryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eegb *EquipmentEntryGroupBy) Aggregate(fns ...AggregateFunc) *EquipmentEntryGroupBy {
	eegb.fns = append(eegb.fns, fns...)
	return eegb
}

// Scan applies the selector query and scans the result into the given value.
func (eegb *EquipmentEntryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eegb.build.ctx, ent.OpQueryGroupBy)
	if err := eegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EquipmentEntryQuery, *EquipmentEntryGroupBy](ctx, eegb.build, eegb, eegb.build.inters, v)
}

func (eegb *EquipmentEntryGroupBy) sqlScan(ctx context.Context, root *EquipmentEntryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(eegb.fns))
	for _, fn := range eegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*eegb.flds)+len(eegb.fns))
		for _, f := range *eegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*eegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EquipmentEntrySelect is the builder for selecting fields of EquipmentEntry entities.
type EquipmentEntrySelect struct {
	*EquipmentEntryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ees *EquipmentEntrySelect) Aggregate(fns ...AggregateFunc) *EquipmentEntrySelect {
	ees.fns = append(ees.fns, fns...)
	return ees
}

// Scan applies the selector query and scans the result into the given value.
func (ees *EquipmentEntrySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ees.ctx, ent.OpQuerySelect)
	if err := ees.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EquipmentEntryQuery, *EquipmentEntrySelect](ctx, ees.EquipmentEntryQuery, ees, ees.inters, v)
}

func (ees *EquipmentEntrySelect) sqlScan(ctx context.Context, root *EquipmentEntryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ees.fns))
	for _, fn := range ees.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ees.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ees.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
