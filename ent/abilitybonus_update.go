// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/abilitybonus"
	"github.com/ecshreve/dndgen/ent/abilityscore"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/race"
)

// AbilityBonusUpdate is the builder for updating AbilityBonus entities.
type AbilityBonusUpdate struct {
	config
	hooks    []Hook
	mutation *AbilityBonusMutation
}

// Where appends a list predicates to the AbilityBonusUpdate builder.
func (abu *AbilityBonusUpdate) Where(ps ...predicate.AbilityBonus) *AbilityBonusUpdate {
	abu.mutation.Where(ps...)
	return abu
}

// SetBonus sets the "bonus" field.
func (abu *AbilityBonusUpdate) SetBonus(i int) *AbilityBonusUpdate {
	abu.mutation.ResetBonus()
	abu.mutation.SetBonus(i)
	return abu
}

// SetNillableBonus sets the "bonus" field if the given value is not nil.
func (abu *AbilityBonusUpdate) SetNillableBonus(i *int) *AbilityBonusUpdate {
	if i != nil {
		abu.SetBonus(*i)
	}
	return abu
}

// AddBonus adds i to the "bonus" field.
func (abu *AbilityBonusUpdate) AddBonus(i int) *AbilityBonusUpdate {
	abu.mutation.AddBonus(i)
	return abu
}

// SetRaceID sets the "race_id" field.
func (abu *AbilityBonusUpdate) SetRaceID(i int) *AbilityBonusUpdate {
	abu.mutation.SetRaceID(i)
	return abu
}

// SetNillableRaceID sets the "race_id" field if the given value is not nil.
func (abu *AbilityBonusUpdate) SetNillableRaceID(i *int) *AbilityBonusUpdate {
	if i != nil {
		abu.SetRaceID(*i)
	}
	return abu
}

// SetAbilityScoreID sets the "ability_score_id" field.
func (abu *AbilityBonusUpdate) SetAbilityScoreID(i int) *AbilityBonusUpdate {
	abu.mutation.SetAbilityScoreID(i)
	return abu
}

// SetNillableAbilityScoreID sets the "ability_score_id" field if the given value is not nil.
func (abu *AbilityBonusUpdate) SetNillableAbilityScoreID(i *int) *AbilityBonusUpdate {
	if i != nil {
		abu.SetAbilityScoreID(*i)
	}
	return abu
}

// SetRace sets the "race" edge to the Race entity.
func (abu *AbilityBonusUpdate) SetRace(r *Race) *AbilityBonusUpdate {
	return abu.SetRaceID(r.ID)
}

// SetAbilityScore sets the "ability_score" edge to the AbilityScore entity.
func (abu *AbilityBonusUpdate) SetAbilityScore(a *AbilityScore) *AbilityBonusUpdate {
	return abu.SetAbilityScoreID(a.ID)
}

// Mutation returns the AbilityBonusMutation object of the builder.
func (abu *AbilityBonusUpdate) Mutation() *AbilityBonusMutation {
	return abu.mutation
}

// ClearRace clears the "race" edge to the Race entity.
func (abu *AbilityBonusUpdate) ClearRace() *AbilityBonusUpdate {
	abu.mutation.ClearRace()
	return abu
}

// ClearAbilityScore clears the "ability_score" edge to the AbilityScore entity.
func (abu *AbilityBonusUpdate) ClearAbilityScore() *AbilityBonusUpdate {
	abu.mutation.ClearAbilityScore()
	return abu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (abu *AbilityBonusUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, abu.sqlSave, abu.mutation, abu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (abu *AbilityBonusUpdate) SaveX(ctx context.Context) int {
	affected, err := abu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (abu *AbilityBonusUpdate) Exec(ctx context.Context) error {
	_, err := abu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abu *AbilityBonusUpdate) ExecX(ctx context.Context) {
	if err := abu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (abu *AbilityBonusUpdate) check() error {
	if v, ok := abu.mutation.Bonus(); ok {
		if err := abilitybonus.BonusValidator(v); err != nil {
			return &ValidationError{Name: "bonus", err: fmt.Errorf(`ent: validator failed for field "AbilityBonus.bonus": %w`, err)}
		}
	}
	if abu.mutation.RaceCleared() && len(abu.mutation.RaceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AbilityBonus.race"`)
	}
	if abu.mutation.AbilityScoreCleared() && len(abu.mutation.AbilityScoreIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AbilityBonus.ability_score"`)
	}
	return nil
}

func (abu *AbilityBonusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := abu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(abilitybonus.Table, abilitybonus.Columns, sqlgraph.NewFieldSpec(abilitybonus.FieldRaceID, field.TypeInt), sqlgraph.NewFieldSpec(abilitybonus.FieldAbilityScoreID, field.TypeInt))
	if ps := abu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := abu.mutation.Bonus(); ok {
		_spec.SetField(abilitybonus.FieldBonus, field.TypeInt, value)
	}
	if value, ok := abu.mutation.AddedBonus(); ok {
		_spec.AddField(abilitybonus.FieldBonus, field.TypeInt, value)
	}
	if abu.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abilitybonus.RaceTable,
			Columns: []string{abilitybonus.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abu.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abilitybonus.RaceTable,
			Columns: []string{abilitybonus.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if abu.mutation.AbilityScoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abilitybonus.AbilityScoreTable,
			Columns: []string{abilitybonus.AbilityScoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abu.mutation.AbilityScoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abilitybonus.AbilityScoreTable,
			Columns: []string{abilitybonus.AbilityScoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, abu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abilitybonus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	abu.mutation.done = true
	return n, nil
}

// AbilityBonusUpdateOne is the builder for updating a single AbilityBonus entity.
type AbilityBonusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AbilityBonusMutation
}

// SetBonus sets the "bonus" field.
func (abuo *AbilityBonusUpdateOne) SetBonus(i int) *AbilityBonusUpdateOne {
	abuo.mutation.ResetBonus()
	abuo.mutation.SetBonus(i)
	return abuo
}

// SetNillableBonus sets the "bonus" field if the given value is not nil.
func (abuo *AbilityBonusUpdateOne) SetNillableBonus(i *int) *AbilityBonusUpdateOne {
	if i != nil {
		abuo.SetBonus(*i)
	}
	return abuo
}

// AddBonus adds i to the "bonus" field.
func (abuo *AbilityBonusUpdateOne) AddBonus(i int) *AbilityBonusUpdateOne {
	abuo.mutation.AddBonus(i)
	return abuo
}

// SetRaceID sets the "race_id" field.
func (abuo *AbilityBonusUpdateOne) SetRaceID(i int) *AbilityBonusUpdateOne {
	abuo.mutation.SetRaceID(i)
	return abuo
}

// SetNillableRaceID sets the "race_id" field if the given value is not nil.
func (abuo *AbilityBonusUpdateOne) SetNillableRaceID(i *int) *AbilityBonusUpdateOne {
	if i != nil {
		abuo.SetRaceID(*i)
	}
	return abuo
}

// SetAbilityScoreID sets the "ability_score_id" field.
func (abuo *AbilityBonusUpdateOne) SetAbilityScoreID(i int) *AbilityBonusUpdateOne {
	abuo.mutation.SetAbilityScoreID(i)
	return abuo
}

// SetNillableAbilityScoreID sets the "ability_score_id" field if the given value is not nil.
func (abuo *AbilityBonusUpdateOne) SetNillableAbilityScoreID(i *int) *AbilityBonusUpdateOne {
	if i != nil {
		abuo.SetAbilityScoreID(*i)
	}
	return abuo
}

// SetRace sets the "race" edge to the Race entity.
func (abuo *AbilityBonusUpdateOne) SetRace(r *Race) *AbilityBonusUpdateOne {
	return abuo.SetRaceID(r.ID)
}

// SetAbilityScore sets the "ability_score" edge to the AbilityScore entity.
func (abuo *AbilityBonusUpdateOne) SetAbilityScore(a *AbilityScore) *AbilityBonusUpdateOne {
	return abuo.SetAbilityScoreID(a.ID)
}

// Mutation returns the AbilityBonusMutation object of the builder.
func (abuo *AbilityBonusUpdateOne) Mutation() *AbilityBonusMutation {
	return abuo.mutation
}

// ClearRace clears the "race" edge to the Race entity.
func (abuo *AbilityBonusUpdateOne) ClearRace() *AbilityBonusUpdateOne {
	abuo.mutation.ClearRace()
	return abuo
}

// ClearAbilityScore clears the "ability_score" edge to the AbilityScore entity.
func (abuo *AbilityBonusUpdateOne) ClearAbilityScore() *AbilityBonusUpdateOne {
	abuo.mutation.ClearAbilityScore()
	return abuo
}

// Where appends a list predicates to the AbilityBonusUpdate builder.
func (abuo *AbilityBonusUpdateOne) Where(ps ...predicate.AbilityBonus) *AbilityBonusUpdateOne {
	abuo.mutation.Where(ps...)
	return abuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (abuo *AbilityBonusUpdateOne) Select(field string, fields ...string) *AbilityBonusUpdateOne {
	abuo.fields = append([]string{field}, fields...)
	return abuo
}

// Save executes the query and returns the updated AbilityBonus entity.
func (abuo *AbilityBonusUpdateOne) Save(ctx context.Context) (*AbilityBonus, error) {
	return withHooks(ctx, abuo.sqlSave, abuo.mutation, abuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (abuo *AbilityBonusUpdateOne) SaveX(ctx context.Context) *AbilityBonus {
	node, err := abuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (abuo *AbilityBonusUpdateOne) Exec(ctx context.Context) error {
	_, err := abuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abuo *AbilityBonusUpdateOne) ExecX(ctx context.Context) {
	if err := abuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (abuo *AbilityBonusUpdateOne) check() error {
	if v, ok := abuo.mutation.Bonus(); ok {
		if err := abilitybonus.BonusValidator(v); err != nil {
			return &ValidationError{Name: "bonus", err: fmt.Errorf(`ent: validator failed for field "AbilityBonus.bonus": %w`, err)}
		}
	}
	if abuo.mutation.RaceCleared() && len(abuo.mutation.RaceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AbilityBonus.race"`)
	}
	if abuo.mutation.AbilityScoreCleared() && len(abuo.mutation.AbilityScoreIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AbilityBonus.ability_score"`)
	}
	return nil
}

func (abuo *AbilityBonusUpdateOne) sqlSave(ctx context.Context) (_node *AbilityBonus, err error) {
	if err := abuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(abilitybonus.Table, abilitybonus.Columns, sqlgraph.NewFieldSpec(abilitybonus.FieldRaceID, field.TypeInt), sqlgraph.NewFieldSpec(abilitybonus.FieldAbilityScoreID, field.TypeInt))
	if id, ok := abuo.mutation.RaceID(); !ok {
		return nil, &ValidationError{Name: "race_id", err: errors.New(`ent: missing "AbilityBonus.race_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := abuo.mutation.AbilityScoreID(); !ok {
		return nil, &ValidationError{Name: "ability_score_id", err: errors.New(`ent: missing "AbilityBonus.ability_score_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := abuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !abilitybonus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := abuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := abuo.mutation.Bonus(); ok {
		_spec.SetField(abilitybonus.FieldBonus, field.TypeInt, value)
	}
	if value, ok := abuo.mutation.AddedBonus(); ok {
		_spec.AddField(abilitybonus.FieldBonus, field.TypeInt, value)
	}
	if abuo.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abilitybonus.RaceTable,
			Columns: []string{abilitybonus.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abuo.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abilitybonus.RaceTable,
			Columns: []string{abilitybonus.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(race.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if abuo.mutation.AbilityScoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abilitybonus.AbilityScoreTable,
			Columns: []string{abilitybonus.AbilityScoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abuo.mutation.AbilityScoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abilitybonus.AbilityScoreTable,
			Columns: []string{abilitybonus.AbilityScoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abilityscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AbilityBonus{config: abuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, abuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abilitybonus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	abuo.mutation.done = true
	return _node, nil
}
