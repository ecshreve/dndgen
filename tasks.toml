# ------------------------------------------------------------------------------
#     General tasks
# ------------------------------------------------------------------------------
[[task]]
  id = "dev"
  type = "long"
  env = { CLICOLOR_FORCE = "1" }
  dependencies = ["frontend"]


[[task]]
  id = "frontend"
  type = "long"
  env = { CLICOLOR_FORCE = "1" }
  dependencies = ["dndgen"]
  cmd = """
    echo "Running frontend..."
    cd frontend && npm start
  """

[[task]]
  id = "build"
  type = "short"
  cmd = """
    echo "Building backend..."
    go build -mod=mod -o bin/dndgen cmd/dndgen/main.go
  """
# ------------------------------------------------------------------------------
#     Run in DEV mode (watch for changes)
# ------------------------------------------------------------------------------
[[task]]
  id = "dndgen"
  type = "long"
  env = { CLICOLOR_FORCE = "1" }
  dependencies = ["genall"]
  cmd = """
    echo "Running dndgen..."
    go run -mod=mod cmd/dndgen/main.go
  """

[[task]]
  id = "creator"
  type = "short"
  env = { CLICOLOR_FORCE = "1" }
  # dependencies = ["popper"]
  cmd = """
    echo "Running creator..."
    go run -mod=mod cmd/creator/main.go
  """

# ------------------------------------------------------------------------------
# Database tasks
# ------------------------------------------------------------------------------
[[task]]
  id = "popper"
  type = "short"
  env = { CLICOLOR_FORCE = "1" }
  dependencies = ["entgen"]
  cmd = """
    echo "Backing up data..."
    cp dev.db dev.db.bak
    
    echo "Removing existing data..."
    rm -f dev.db

    echo "Running popper"
    go run -mod=mod cmd/popper/main.go
  """

# ------------------------------------------------------------------------------
#     Code Generation
# ------------------------------------------------------------------------------
[[task]]
  id = "genall"
  description = "Generate all"
  dependencies = ["entgen", "popgen", "gqlgen", "describe"]
  type = "short"

[[task]]
  id = "entgen"
  description = "Generate ent schema"
  type = "short"
  cmd = """
    echo "Running ent generation with entc DIRECTLY..."
    go run -mod=mod ent/entc.go
  """

[[task]]
  id = "popgen"
  description = "Generate populator functions"
  dependencies = ["entgen"]
  type = "short"
  cmd = """
    echo "running popgen"
    go run -mod=mod cmd/popgen/main.go
  """

[[task]]
  id = "gqlgen"
  description = "Generate graphql"
  type = "short"
  dependencies = ["entgen"]
  cmd = """
    echo "Running gqlgen..."
    go run -mod=mod github.com/99designs/gqlgen generate
  """

# ------------------------------------------------------------------------------
#     Misc Ent Tasks
# ------------------------------------------------------------------------------

[[task]]
  id = "entvizfix"
  description = "Fix entviz html"
  type = "short"
  triggers = ["entgen"]
  cmd = """
    echo "Sleeping for 1 second to allow ent to generate schema..."
    sleep 1
    echo "Running entviz fix..."
    if [[ "$OSTYPE" == "darwin"* ]]; then
      sed -i '' 's/widthConstraint: 60/widthConstraint: 120/g' ent/schema-viz.html
      sed -i '' 's/heightConstraint: 60/heightConstraint: 40/g' ent/schema-viz.html
      sed -i '' -e '/hierarchical: {/,/levelSeparation: 250,/ {
        s/enabled: true,/enabled: false,/
      }' ent/schema-viz.html
    else
      sed -i 's/widthConstraint: 60/widthConstraint: 120/g' ent/schema-viz.html
      sed -i 's/heightConstraint: 60/heightConstraint: 40/g' ent/schema-viz.html
      sed -i -e '/hierarchical: {/,/levelSeparation: 250,/ {
        s/enabled: true,/enabled: false,/
      }' ent/schema-viz.html
    fi
    echo "Done fixing entviz html"
  """

[[task]]
  id = "atlasviz"
  description = "Create atlas cloud explore link for database schema with entviz"
  type = "short"
  cmd = """
    echo "Creating atlas cloud explore link for database schema with entviz..."
    go run -mod=mod ariga.io/entviz ./ent/schema   
   """

[[task]]
  id = "describe"
  type = "short"
  dependencies = ["entgen"]
  cmd = """
    echo "Describing database schema..."
    go run -mod=mod entgo.io/ent/cmd/ent describe ./ent/schema > ./entschema.md
  """

# ------------------------------------------------------------------------------
#     Testing
# ------------------------------------------------------------------------------

[[task]]
  id = "test"
  description = "Run tests"
  type = "short"
  cmd = """
    echo "Running tests..."
    go test ./internal/...
  """

[[task]]
  id = "cover"
  description = "Run coverage"
  type = "short"
  cmd = """
    echo "Running coverage..."
    go test -coverprofile=coverage.txt ./internal/...
    go tool cover -html=coverage.txt -o coverage.html
  """

[[task]]
  id = "snaps"
  description = "Update snapshots"
  type = "short"
  cmd = """
    echo "Updating snapshots..."
    go test ./internal/... -rewriteSnapshots
  """


# ------------------------------------------------------------------------------
#     Atlas Migrations - currently not used
# ------------------------------------------------------------------------------
# [[task]]
#   id = "db-apply"
#   type = "short"
#   dependencies = ["db-diff"]
#   cmd = """
#   atlas migrate apply \
#     --dir "file://ent/migrate/migrations" \
#     --url "sqlite://dev.db?_fk=1" 
#   """
  
# [[task]]
#   id = "db-hash"
#   type = "short"
#   cmd = """
#   atlas migrate hash \
#     --dir "file://ent/migrate/migrations"
#   """

# [[task]]
#   id = "db-diff"
#   type = "short"
#   dependencies = ["db-lint"]
#   cmd = """
#   atlas migrate diff manual \
#     --dir "file://ent/migrate/migrations" \
#     --to "ent://ent/schema?globalid=1" \
#     --dev-url "sqlite://dev?mode=memory&_fk=1"
#   """

# [[task]]
#   id = "db-lint"
#   type = "short"
#   dependencies = ["db-validate"]
#   cmd = """
#   atlas migrate lint \
#     --dir "file://ent/migrate/migrations" \
#     --dev-url "sqlite://dev?mode=memory&_fk=1" \
#     --latest 1
#   """

# [[task]]
#   id = "db-validate"
#   type = "short"
#   cmd = """
#   atlas migrate validate \
#     --dir "file://ent/migrate/migrations" \
#     --dev-url "sqlite://dev?mode=memory&_fk=1" 
#   """

# [[task]]
#   id = "db-clean"
#   type = "short"
#   cmd = """
#   echo "Backing up dev database..."
#   cp dev.db dev-backup.db.bak

#   echo "Cleaning database..."
#   atlas schema clean \
#     --url "sqlite://dev.db?cache=shared&_fk=1" \
#     --auto-approve
#   """