// Code generated by ent, DO NOT EDIT.

package abilityscore

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the abilityscore type in the database.
	Label = "ability_score"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// EdgeSkills holds the string denoting the skills edge name in mutations.
	EdgeSkills = "skills"
	// EdgeAbilityBonuses holds the string denoting the ability_bonuses edge name in mutations.
	EdgeAbilityBonuses = "ability_bonuses"
	// Table holds the table name of the abilityscore in the database.
	Table = "ability_scores"
	// SkillsTable is the table that holds the skills relation/edge.
	SkillsTable = "skills"
	// SkillsInverseTable is the table name for the Skill entity.
	// It exists in this package in order to avoid circular dependency with the "skill" package.
	SkillsInverseTable = "skills"
	// SkillsColumn is the table column denoting the skills relation/edge.
	SkillsColumn = "skill_ability_score"
	// AbilityBonusesTable is the table that holds the ability_bonuses relation/edge.
	AbilityBonusesTable = "ability_bonus"
	// AbilityBonusesInverseTable is the table name for the AbilityBonus entity.
	// It exists in this package in order to avoid circular dependency with the "abilitybonus" package.
	AbilityBonusesInverseTable = "ability_bonus"
	// AbilityBonusesColumn is the table column denoting the ability_bonuses relation/edge.
	AbilityBonusesColumn = "ability_score_id"
)

// Columns holds all SQL columns for abilityscore fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldFullName,
	FieldDesc,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ability_scores"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"proficiency_saving_throw",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the AbilityScore queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFullName orders the results by the full_name field.
func ByFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullName, opts...).ToFunc()
}

// BySkillsCount orders the results by skills count.
func BySkillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSkillsStep(), opts...)
	}
}

// BySkills orders the results by skills terms.
func BySkills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAbilityBonusesCount orders the results by ability_bonuses count.
func ByAbilityBonusesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAbilityBonusesStep(), opts...)
	}
}

// ByAbilityBonuses orders the results by ability_bonuses terms.
func ByAbilityBonuses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAbilityBonusesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSkillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SkillsTable, SkillsColumn),
	)
}
func newAbilityBonusesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AbilityBonusesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AbilityBonusesTable, AbilityBonusesColumn),
	)
}
