// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/dndgen/ent/race"
	"github.com/ecshreve/dndgen/ent/subrace"
)

// Subrace is the model entity for the Subrace schema.
type Subrace struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Indx holds the value of the "indx" field.
	Indx string `json:"index"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubraceQuery when eager-loading is set.
	Edges        SubraceEdges `json:"-"`
	subrace_race *int
	selectValues sql.SelectValues
}

// SubraceEdges holds the relations/edges for other nodes in the graph.
type SubraceEdges struct {
	// Race holds the value of the race edge.
	Race *Race `json:"race,omitempty"`
	// Proficiencies holds the value of the proficiencies edge.
	Proficiencies []*Proficiency `json:"proficiencies,omitempty"`
	// Traits holds the value of the traits edge.
	Traits []*Trait `json:"traits,omitempty"`
	// AbilityBonuses holds the value of the ability_bonuses edge.
	AbilityBonuses []*AbilityBonus `json:"ability_bonuses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedProficiencies  map[string][]*Proficiency
	namedTraits         map[string][]*Trait
	namedAbilityBonuses map[string][]*AbilityBonus
}

// RaceOrErr returns the Race value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubraceEdges) RaceOrErr() (*Race, error) {
	if e.loadedTypes[0] {
		if e.Race == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: race.Label}
		}
		return e.Race, nil
	}
	return nil, &NotLoadedError{edge: "race"}
}

// ProficienciesOrErr returns the Proficiencies value or an error if the edge
// was not loaded in eager-loading.
func (e SubraceEdges) ProficienciesOrErr() ([]*Proficiency, error) {
	if e.loadedTypes[1] {
		return e.Proficiencies, nil
	}
	return nil, &NotLoadedError{edge: "proficiencies"}
}

// TraitsOrErr returns the Traits value or an error if the edge
// was not loaded in eager-loading.
func (e SubraceEdges) TraitsOrErr() ([]*Trait, error) {
	if e.loadedTypes[2] {
		return e.Traits, nil
	}
	return nil, &NotLoadedError{edge: "traits"}
}

// AbilityBonusesOrErr returns the AbilityBonuses value or an error if the edge
// was not loaded in eager-loading.
func (e SubraceEdges) AbilityBonusesOrErr() ([]*AbilityBonus, error) {
	if e.loadedTypes[3] {
		return e.AbilityBonuses, nil
	}
	return nil, &NotLoadedError{edge: "ability_bonuses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subrace) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subrace.FieldID:
			values[i] = new(sql.NullInt64)
		case subrace.FieldIndx, subrace.FieldName, subrace.FieldDesc:
			values[i] = new(sql.NullString)
		case subrace.ForeignKeys[0]: // subrace_race
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subrace fields.
func (s *Subrace) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subrace.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case subrace.FieldIndx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field indx", values[i])
			} else if value.Valid {
				s.Indx = value.String
			}
		case subrace.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case subrace.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				s.Desc = value.String
			}
		case subrace.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field subrace_race", value)
			} else if value.Valid {
				s.subrace_race = new(int)
				*s.subrace_race = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subrace.
// This includes values selected through modifiers, order, etc.
func (s *Subrace) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryRace queries the "race" edge of the Subrace entity.
func (s *Subrace) QueryRace() *RaceQuery {
	return NewSubraceClient(s.config).QueryRace(s)
}

// QueryProficiencies queries the "proficiencies" edge of the Subrace entity.
func (s *Subrace) QueryProficiencies() *ProficiencyQuery {
	return NewSubraceClient(s.config).QueryProficiencies(s)
}

// QueryTraits queries the "traits" edge of the Subrace entity.
func (s *Subrace) QueryTraits() *TraitQuery {
	return NewSubraceClient(s.config).QueryTraits(s)
}

// QueryAbilityBonuses queries the "ability_bonuses" edge of the Subrace entity.
func (s *Subrace) QueryAbilityBonuses() *AbilityBonusQuery {
	return NewSubraceClient(s.config).QueryAbilityBonuses(s)
}

// Update returns a builder for updating this Subrace.
// Note that you need to call Subrace.Unwrap() before calling this method if this Subrace
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subrace) Update() *SubraceUpdateOne {
	return NewSubraceClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Subrace entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subrace) Unwrap() *Subrace {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Subrace is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subrace) String() string {
	var builder strings.Builder
	builder.WriteString("Subrace(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("indx=")
	builder.WriteString(s.Indx)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(s.Desc)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (s *Subrace) MarshalJSON() ([]byte, error) {
	type Alias Subrace
	return json.Marshal(&struct {
		*Alias
		SubraceEdges
	}{
		Alias:        (*Alias)(s),
		SubraceEdges: s.Edges,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (s *Subrace) UnmarshalJSON(data []byte) error {
	type Alias Subrace
	aux := &struct {
		*Alias
		SubraceEdges
	}{
		Alias: (*Alias)(s),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	s.Edges = aux.SubraceEdges
	return nil
}

func (sc *SubraceCreate) SetSubrace(input *Subrace) *SubraceCreate {
	sc.SetIndx(input.Indx)
	sc.SetName(input.Name)
	sc.SetDesc(input.Desc)
	return sc
}

// NamedProficiencies returns the Proficiencies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subrace) NamedProficiencies(name string) ([]*Proficiency, error) {
	if s.Edges.namedProficiencies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedProficiencies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subrace) appendNamedProficiencies(name string, edges ...*Proficiency) {
	if s.Edges.namedProficiencies == nil {
		s.Edges.namedProficiencies = make(map[string][]*Proficiency)
	}
	if len(edges) == 0 {
		s.Edges.namedProficiencies[name] = []*Proficiency{}
	} else {
		s.Edges.namedProficiencies[name] = append(s.Edges.namedProficiencies[name], edges...)
	}
}

// NamedTraits returns the Traits named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subrace) NamedTraits(name string) ([]*Trait, error) {
	if s.Edges.namedTraits == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedTraits[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subrace) appendNamedTraits(name string, edges ...*Trait) {
	if s.Edges.namedTraits == nil {
		s.Edges.namedTraits = make(map[string][]*Trait)
	}
	if len(edges) == 0 {
		s.Edges.namedTraits[name] = []*Trait{}
	} else {
		s.Edges.namedTraits[name] = append(s.Edges.namedTraits[name], edges...)
	}
}

// NamedAbilityBonuses returns the AbilityBonuses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subrace) NamedAbilityBonuses(name string) ([]*AbilityBonus, error) {
	if s.Edges.namedAbilityBonuses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedAbilityBonuses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subrace) appendNamedAbilityBonuses(name string, edges ...*AbilityBonus) {
	if s.Edges.namedAbilityBonuses == nil {
		s.Edges.namedAbilityBonuses = make(map[string][]*AbilityBonus)
	}
	if len(edges) == 0 {
		s.Edges.namedAbilityBonuses[name] = []*AbilityBonus{}
	} else {
		s.Edges.namedAbilityBonuses[name] = append(s.Edges.namedAbilityBonuses[name], edges...)
	}
}

// Subraces is a parsable slice of Subrace.
type Subraces []*Subrace
