// Code generated by ent, DO NOT EDIT.

package trait

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the trait type in the database.
	Label = "trait"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// EdgeRaces holds the string denoting the races edge name in mutations.
	EdgeRaces = "races"
	// EdgeSubraces holds the string denoting the subraces edge name in mutations.
	EdgeSubraces = "subraces"
	// Table holds the table name of the trait in the database.
	Table = "traits"
	// RacesTable is the table that holds the races relation/edge. The primary key declared below.
	RacesTable = "race_traits"
	// RacesInverseTable is the table name for the Race entity.
	// It exists in this package in order to avoid circular dependency with the "race" package.
	RacesInverseTable = "races"
	// SubracesTable is the table that holds the subraces relation/edge. The primary key declared below.
	SubracesTable = "subrace_traits"
	// SubracesInverseTable is the table name for the Subrace entity.
	// It exists in this package in order to avoid circular dependency with the "subrace" package.
	SubracesInverseTable = "subraces"
)

// Columns holds all SQL columns for trait fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldDesc,
}

var (
	// RacesPrimaryKey and RacesColumn2 are the table columns denoting the
	// primary key for the races relation (M2M).
	RacesPrimaryKey = []string{"race_id", "trait_id"}
	// SubracesPrimaryKey and SubracesColumn2 are the table columns denoting the
	// primary key for the subraces relation (M2M).
	SubracesPrimaryKey = []string{"subrace_id", "trait_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Trait queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRacesCount orders the results by races count.
func ByRacesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRacesStep(), opts...)
	}
}

// ByRaces orders the results by races terms.
func ByRaces(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRacesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubracesCount orders the results by subraces count.
func BySubracesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubracesStep(), opts...)
	}
}

// BySubraces orders the results by subraces terms.
func BySubraces(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubracesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRacesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RacesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RacesTable, RacesPrimaryKey...),
	)
}
func newSubracesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubracesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SubracesTable, SubracesPrimaryKey...),
	)
}
