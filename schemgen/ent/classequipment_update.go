// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/classequipment"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ClassEquipmentUpdate is the builder for updating ClassEquipment entities.
type ClassEquipmentUpdate struct {
	config
	hooks    []Hook
	mutation *ClassEquipmentMutation
}

// Where appends a list predicates to the ClassEquipmentUpdate builder.
func (ceu *ClassEquipmentUpdate) Where(ps ...predicate.ClassEquipment) *ClassEquipmentUpdate {
	ceu.mutation.Where(ps...)
	return ceu
}

// SetClassID sets the "class_id" field.
func (ceu *ClassEquipmentUpdate) SetClassID(i int) *ClassEquipmentUpdate {
	ceu.mutation.SetClassID(i)
	return ceu
}

// SetEquipmentID sets the "equipment_id" field.
func (ceu *ClassEquipmentUpdate) SetEquipmentID(i int) *ClassEquipmentUpdate {
	ceu.mutation.SetEquipmentID(i)
	return ceu
}

// SetQuantity sets the "quantity" field.
func (ceu *ClassEquipmentUpdate) SetQuantity(i int) *ClassEquipmentUpdate {
	ceu.mutation.ResetQuantity()
	ceu.mutation.SetQuantity(i)
	return ceu
}

// AddQuantity adds i to the "quantity" field.
func (ceu *ClassEquipmentUpdate) AddQuantity(i int) *ClassEquipmentUpdate {
	ceu.mutation.AddQuantity(i)
	return ceu
}

// SetClass sets the "class" edge to the Class entity.
func (ceu *ClassEquipmentUpdate) SetClass(c *Class) *ClassEquipmentUpdate {
	return ceu.SetClassID(c.ID)
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (ceu *ClassEquipmentUpdate) SetEquipment(e *Equipment) *ClassEquipmentUpdate {
	return ceu.SetEquipmentID(e.ID)
}

// Mutation returns the ClassEquipmentMutation object of the builder.
func (ceu *ClassEquipmentUpdate) Mutation() *ClassEquipmentMutation {
	return ceu.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (ceu *ClassEquipmentUpdate) ClearClass() *ClassEquipmentUpdate {
	ceu.mutation.ClearClass()
	return ceu
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (ceu *ClassEquipmentUpdate) ClearEquipment() *ClassEquipmentUpdate {
	ceu.mutation.ClearEquipment()
	return ceu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ceu *ClassEquipmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ceu.sqlSave, ceu.mutation, ceu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ceu *ClassEquipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := ceu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ceu *ClassEquipmentUpdate) Exec(ctx context.Context) error {
	_, err := ceu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceu *ClassEquipmentUpdate) ExecX(ctx context.Context) {
	if err := ceu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ceu *ClassEquipmentUpdate) check() error {
	if _, ok := ceu.mutation.ClassID(); ceu.mutation.ClassCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ClassEquipment.class"`)
	}
	if _, ok := ceu.mutation.EquipmentID(); ceu.mutation.EquipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ClassEquipment.equipment"`)
	}
	return nil
}

func (ceu *ClassEquipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ceu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(classequipment.Table, classequipment.Columns, sqlgraph.NewFieldSpec(classequipment.FieldClassID, field.TypeInt), sqlgraph.NewFieldSpec(classequipment.FieldEquipmentID, field.TypeInt))
	if ps := ceu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceu.mutation.Quantity(); ok {
		_spec.SetField(classequipment.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := ceu.mutation.AddedQuantity(); ok {
		_spec.AddField(classequipment.FieldQuantity, field.TypeInt, value)
	}
	if ceu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classequipment.ClassTable,
			Columns: []string{classequipment.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classequipment.ClassTable,
			Columns: []string{classequipment.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classequipment.EquipmentTable,
			Columns: []string{classequipment.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classequipment.EquipmentTable,
			Columns: []string{classequipment.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ceu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{classequipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ceu.mutation.done = true
	return n, nil
}

// ClassEquipmentUpdateOne is the builder for updating a single ClassEquipment entity.
type ClassEquipmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClassEquipmentMutation
}

// SetClassID sets the "class_id" field.
func (ceuo *ClassEquipmentUpdateOne) SetClassID(i int) *ClassEquipmentUpdateOne {
	ceuo.mutation.SetClassID(i)
	return ceuo
}

// SetEquipmentID sets the "equipment_id" field.
func (ceuo *ClassEquipmentUpdateOne) SetEquipmentID(i int) *ClassEquipmentUpdateOne {
	ceuo.mutation.SetEquipmentID(i)
	return ceuo
}

// SetQuantity sets the "quantity" field.
func (ceuo *ClassEquipmentUpdateOne) SetQuantity(i int) *ClassEquipmentUpdateOne {
	ceuo.mutation.ResetQuantity()
	ceuo.mutation.SetQuantity(i)
	return ceuo
}

// AddQuantity adds i to the "quantity" field.
func (ceuo *ClassEquipmentUpdateOne) AddQuantity(i int) *ClassEquipmentUpdateOne {
	ceuo.mutation.AddQuantity(i)
	return ceuo
}

// SetClass sets the "class" edge to the Class entity.
func (ceuo *ClassEquipmentUpdateOne) SetClass(c *Class) *ClassEquipmentUpdateOne {
	return ceuo.SetClassID(c.ID)
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (ceuo *ClassEquipmentUpdateOne) SetEquipment(e *Equipment) *ClassEquipmentUpdateOne {
	return ceuo.SetEquipmentID(e.ID)
}

// Mutation returns the ClassEquipmentMutation object of the builder.
func (ceuo *ClassEquipmentUpdateOne) Mutation() *ClassEquipmentMutation {
	return ceuo.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (ceuo *ClassEquipmentUpdateOne) ClearClass() *ClassEquipmentUpdateOne {
	ceuo.mutation.ClearClass()
	return ceuo
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (ceuo *ClassEquipmentUpdateOne) ClearEquipment() *ClassEquipmentUpdateOne {
	ceuo.mutation.ClearEquipment()
	return ceuo
}

// Where appends a list predicates to the ClassEquipmentUpdate builder.
func (ceuo *ClassEquipmentUpdateOne) Where(ps ...predicate.ClassEquipment) *ClassEquipmentUpdateOne {
	ceuo.mutation.Where(ps...)
	return ceuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ceuo *ClassEquipmentUpdateOne) Select(field string, fields ...string) *ClassEquipmentUpdateOne {
	ceuo.fields = append([]string{field}, fields...)
	return ceuo
}

// Save executes the query and returns the updated ClassEquipment entity.
func (ceuo *ClassEquipmentUpdateOne) Save(ctx context.Context) (*ClassEquipment, error) {
	return withHooks(ctx, ceuo.sqlSave, ceuo.mutation, ceuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ceuo *ClassEquipmentUpdateOne) SaveX(ctx context.Context) *ClassEquipment {
	node, err := ceuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ceuo *ClassEquipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := ceuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceuo *ClassEquipmentUpdateOne) ExecX(ctx context.Context) {
	if err := ceuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ceuo *ClassEquipmentUpdateOne) check() error {
	if _, ok := ceuo.mutation.ClassID(); ceuo.mutation.ClassCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ClassEquipment.class"`)
	}
	if _, ok := ceuo.mutation.EquipmentID(); ceuo.mutation.EquipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ClassEquipment.equipment"`)
	}
	return nil
}

func (ceuo *ClassEquipmentUpdateOne) sqlSave(ctx context.Context) (_node *ClassEquipment, err error) {
	if err := ceuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(classequipment.Table, classequipment.Columns, sqlgraph.NewFieldSpec(classequipment.FieldClassID, field.TypeInt), sqlgraph.NewFieldSpec(classequipment.FieldEquipmentID, field.TypeInt))
	if id, ok := ceuo.mutation.ClassID(); !ok {
		return nil, &ValidationError{Name: "class_id", err: errors.New(`ent: missing "ClassEquipment.class_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := ceuo.mutation.EquipmentID(); !ok {
		return nil, &ValidationError{Name: "equipment_id", err: errors.New(`ent: missing "ClassEquipment.equipment_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := ceuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !classequipment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := ceuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceuo.mutation.Quantity(); ok {
		_spec.SetField(classequipment.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := ceuo.mutation.AddedQuantity(); ok {
		_spec.AddField(classequipment.FieldQuantity, field.TypeInt, value)
	}
	if ceuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classequipment.ClassTable,
			Columns: []string{classequipment.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classequipment.ClassTable,
			Columns: []string{classequipment.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceuo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classequipment.EquipmentTable,
			Columns: []string{classequipment.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classequipment.EquipmentTable,
			Columns: []string{classequipment.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ClassEquipment{config: ceuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ceuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{classequipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ceuo.mutation.done = true
	return _node, nil
}
