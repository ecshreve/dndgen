// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/dndgen/ent/damagetype"
	"github.com/ecshreve/dndgen/ent/predicate"
	"github.com/ecshreve/dndgen/ent/weapon"
	"github.com/ecshreve/dndgen/ent/weapondamage"
)

// WeaponDamageQuery is the builder for querying WeaponDamage entities.
type WeaponDamageQuery struct {
	config
	ctx            *QueryContext
	order          []weapondamage.OrderOption
	inters         []Interceptor
	predicates     []predicate.WeaponDamage
	withWeapon     *WeaponQuery
	withDamageType *DamageTypeQuery
	modifiers      []func(*sql.Selector)
	loadTotal      []func(context.Context, []*WeaponDamage) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WeaponDamageQuery builder.
func (wdq *WeaponDamageQuery) Where(ps ...predicate.WeaponDamage) *WeaponDamageQuery {
	wdq.predicates = append(wdq.predicates, ps...)
	return wdq
}

// Limit the number of records to be returned by this query.
func (wdq *WeaponDamageQuery) Limit(limit int) *WeaponDamageQuery {
	wdq.ctx.Limit = &limit
	return wdq
}

// Offset to start from.
func (wdq *WeaponDamageQuery) Offset(offset int) *WeaponDamageQuery {
	wdq.ctx.Offset = &offset
	return wdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wdq *WeaponDamageQuery) Unique(unique bool) *WeaponDamageQuery {
	wdq.ctx.Unique = &unique
	return wdq
}

// Order specifies how the records should be ordered.
func (wdq *WeaponDamageQuery) Order(o ...weapondamage.OrderOption) *WeaponDamageQuery {
	wdq.order = append(wdq.order, o...)
	return wdq
}

// QueryWeapon chains the current query on the "weapon" edge.
func (wdq *WeaponDamageQuery) QueryWeapon() *WeaponQuery {
	query := (&WeaponClient{config: wdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(weapondamage.Table, weapondamage.FieldID, selector),
			sqlgraph.To(weapon.Table, weapon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, weapondamage.WeaponTable, weapondamage.WeaponColumn),
		)
		fromU = sqlgraph.SetNeighbors(wdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDamageType chains the current query on the "damage_type" edge.
func (wdq *WeaponDamageQuery) QueryDamageType() *DamageTypeQuery {
	query := (&DamageTypeClient{config: wdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(weapondamage.Table, weapondamage.FieldID, selector),
			sqlgraph.To(damagetype.Table, damagetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, weapondamage.DamageTypeTable, weapondamage.DamageTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(wdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WeaponDamage entity from the query.
// Returns a *NotFoundError when no WeaponDamage was found.
func (wdq *WeaponDamageQuery) First(ctx context.Context) (*WeaponDamage, error) {
	nodes, err := wdq.Limit(1).All(setContextOp(ctx, wdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{weapondamage.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wdq *WeaponDamageQuery) FirstX(ctx context.Context) *WeaponDamage {
	node, err := wdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WeaponDamage ID from the query.
// Returns a *NotFoundError when no WeaponDamage ID was found.
func (wdq *WeaponDamageQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wdq.Limit(1).IDs(setContextOp(ctx, wdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{weapondamage.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wdq *WeaponDamageQuery) FirstIDX(ctx context.Context) int {
	id, err := wdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WeaponDamage entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WeaponDamage entity is found.
// Returns a *NotFoundError when no WeaponDamage entities are found.
func (wdq *WeaponDamageQuery) Only(ctx context.Context) (*WeaponDamage, error) {
	nodes, err := wdq.Limit(2).All(setContextOp(ctx, wdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{weapondamage.Label}
	default:
		return nil, &NotSingularError{weapondamage.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wdq *WeaponDamageQuery) OnlyX(ctx context.Context) *WeaponDamage {
	node, err := wdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WeaponDamage ID in the query.
// Returns a *NotSingularError when more than one WeaponDamage ID is found.
// Returns a *NotFoundError when no entities are found.
func (wdq *WeaponDamageQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wdq.Limit(2).IDs(setContextOp(ctx, wdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{weapondamage.Label}
	default:
		err = &NotSingularError{weapondamage.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wdq *WeaponDamageQuery) OnlyIDX(ctx context.Context) int {
	id, err := wdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WeaponDamages.
func (wdq *WeaponDamageQuery) All(ctx context.Context) ([]*WeaponDamage, error) {
	ctx = setContextOp(ctx, wdq.ctx, "All")
	if err := wdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WeaponDamage, *WeaponDamageQuery]()
	return withInterceptors[[]*WeaponDamage](ctx, wdq, qr, wdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wdq *WeaponDamageQuery) AllX(ctx context.Context) []*WeaponDamage {
	nodes, err := wdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WeaponDamage IDs.
func (wdq *WeaponDamageQuery) IDs(ctx context.Context) (ids []int, err error) {
	if wdq.ctx.Unique == nil && wdq.path != nil {
		wdq.Unique(true)
	}
	ctx = setContextOp(ctx, wdq.ctx, "IDs")
	if err = wdq.Select(weapondamage.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wdq *WeaponDamageQuery) IDsX(ctx context.Context) []int {
	ids, err := wdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wdq *WeaponDamageQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wdq.ctx, "Count")
	if err := wdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wdq, querierCount[*WeaponDamageQuery](), wdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wdq *WeaponDamageQuery) CountX(ctx context.Context) int {
	count, err := wdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wdq *WeaponDamageQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wdq.ctx, "Exist")
	switch _, err := wdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wdq *WeaponDamageQuery) ExistX(ctx context.Context) bool {
	exist, err := wdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WeaponDamageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wdq *WeaponDamageQuery) Clone() *WeaponDamageQuery {
	if wdq == nil {
		return nil
	}
	return &WeaponDamageQuery{
		config:         wdq.config,
		ctx:            wdq.ctx.Clone(),
		order:          append([]weapondamage.OrderOption{}, wdq.order...),
		inters:         append([]Interceptor{}, wdq.inters...),
		predicates:     append([]predicate.WeaponDamage{}, wdq.predicates...),
		withWeapon:     wdq.withWeapon.Clone(),
		withDamageType: wdq.withDamageType.Clone(),
		// clone intermediate query.
		sql:  wdq.sql.Clone(),
		path: wdq.path,
	}
}

// WithWeapon tells the query-builder to eager-load the nodes that are connected to
// the "weapon" edge. The optional arguments are used to configure the query builder of the edge.
func (wdq *WeaponDamageQuery) WithWeapon(opts ...func(*WeaponQuery)) *WeaponDamageQuery {
	query := (&WeaponClient{config: wdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wdq.withWeapon = query
	return wdq
}

// WithDamageType tells the query-builder to eager-load the nodes that are connected to
// the "damage_type" edge. The optional arguments are used to configure the query builder of the edge.
func (wdq *WeaponDamageQuery) WithDamageType(opts ...func(*DamageTypeQuery)) *WeaponDamageQuery {
	query := (&DamageTypeClient{config: wdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wdq.withDamageType = query
	return wdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		WeaponID int `json:"weapon_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WeaponDamage.Query().
//		GroupBy(weapondamage.FieldWeaponID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wdq *WeaponDamageQuery) GroupBy(field string, fields ...string) *WeaponDamageGroupBy {
	wdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WeaponDamageGroupBy{build: wdq}
	grbuild.flds = &wdq.ctx.Fields
	grbuild.label = weapondamage.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		WeaponID int `json:"weapon_id,omitempty"`
//	}
//
//	client.WeaponDamage.Query().
//		Select(weapondamage.FieldWeaponID).
//		Scan(ctx, &v)
func (wdq *WeaponDamageQuery) Select(fields ...string) *WeaponDamageSelect {
	wdq.ctx.Fields = append(wdq.ctx.Fields, fields...)
	sbuild := &WeaponDamageSelect{WeaponDamageQuery: wdq}
	sbuild.label = weapondamage.Label
	sbuild.flds, sbuild.scan = &wdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WeaponDamageSelect configured with the given aggregations.
func (wdq *WeaponDamageQuery) Aggregate(fns ...AggregateFunc) *WeaponDamageSelect {
	return wdq.Select().Aggregate(fns...)
}

func (wdq *WeaponDamageQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wdq); err != nil {
				return err
			}
		}
	}
	for _, f := range wdq.ctx.Fields {
		if !weapondamage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wdq.path != nil {
		prev, err := wdq.path(ctx)
		if err != nil {
			return err
		}
		wdq.sql = prev
	}
	return nil
}

func (wdq *WeaponDamageQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WeaponDamage, error) {
	var (
		nodes       = []*WeaponDamage{}
		_spec       = wdq.querySpec()
		loadedTypes = [2]bool{
			wdq.withWeapon != nil,
			wdq.withDamageType != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WeaponDamage).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WeaponDamage{config: wdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(wdq.modifiers) > 0 {
		_spec.Modifiers = wdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wdq.withWeapon; query != nil {
		if err := wdq.loadWeapon(ctx, query, nodes, nil,
			func(n *WeaponDamage, e *Weapon) { n.Edges.Weapon = e }); err != nil {
			return nil, err
		}
	}
	if query := wdq.withDamageType; query != nil {
		if err := wdq.loadDamageType(ctx, query, nodes, nil,
			func(n *WeaponDamage, e *DamageType) { n.Edges.DamageType = e }); err != nil {
			return nil, err
		}
	}
	for i := range wdq.loadTotal {
		if err := wdq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wdq *WeaponDamageQuery) loadWeapon(ctx context.Context, query *WeaponQuery, nodes []*WeaponDamage, init func(*WeaponDamage), assign func(*WeaponDamage, *Weapon)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*WeaponDamage)
	for i := range nodes {
		fk := nodes[i].WeaponID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(weapon.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "weapon_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wdq *WeaponDamageQuery) loadDamageType(ctx context.Context, query *DamageTypeQuery, nodes []*WeaponDamage, init func(*WeaponDamage), assign func(*WeaponDamage, *DamageType)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*WeaponDamage)
	for i := range nodes {
		fk := nodes[i].DamageTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(damagetype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "damage_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (wdq *WeaponDamageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wdq.querySpec()
	if len(wdq.modifiers) > 0 {
		_spec.Modifiers = wdq.modifiers
	}
	_spec.Node.Columns = wdq.ctx.Fields
	if len(wdq.ctx.Fields) > 0 {
		_spec.Unique = wdq.ctx.Unique != nil && *wdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wdq.driver, _spec)
}

func (wdq *WeaponDamageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(weapondamage.Table, weapondamage.Columns, sqlgraph.NewFieldSpec(weapondamage.FieldID, field.TypeInt))
	_spec.From = wdq.sql
	if unique := wdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wdq.path != nil {
		_spec.Unique = true
	}
	if fields := wdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weapondamage.FieldID)
		for i := range fields {
			if fields[i] != weapondamage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if wdq.withWeapon != nil {
			_spec.Node.AddColumnOnce(weapondamage.FieldWeaponID)
		}
		if wdq.withDamageType != nil {
			_spec.Node.AddColumnOnce(weapondamage.FieldDamageTypeID)
		}
	}
	if ps := wdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wdq *WeaponDamageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wdq.driver.Dialect())
	t1 := builder.Table(weapondamage.Table)
	columns := wdq.ctx.Fields
	if len(columns) == 0 {
		columns = weapondamage.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wdq.sql != nil {
		selector = wdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wdq.ctx.Unique != nil && *wdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wdq.predicates {
		p(selector)
	}
	for _, p := range wdq.order {
		p(selector)
	}
	if offset := wdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WeaponDamageGroupBy is the group-by builder for WeaponDamage entities.
type WeaponDamageGroupBy struct {
	selector
	build *WeaponDamageQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wdgb *WeaponDamageGroupBy) Aggregate(fns ...AggregateFunc) *WeaponDamageGroupBy {
	wdgb.fns = append(wdgb.fns, fns...)
	return wdgb
}

// Scan applies the selector query and scans the result into the given value.
func (wdgb *WeaponDamageGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wdgb.build.ctx, "GroupBy")
	if err := wdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WeaponDamageQuery, *WeaponDamageGroupBy](ctx, wdgb.build, wdgb, wdgb.build.inters, v)
}

func (wdgb *WeaponDamageGroupBy) sqlScan(ctx context.Context, root *WeaponDamageQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wdgb.fns))
	for _, fn := range wdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wdgb.flds)+len(wdgb.fns))
		for _, f := range *wdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WeaponDamageSelect is the builder for selecting fields of WeaponDamage entities.
type WeaponDamageSelect struct {
	*WeaponDamageQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wds *WeaponDamageSelect) Aggregate(fns ...AggregateFunc) *WeaponDamageSelect {
	wds.fns = append(wds.fns, fns...)
	return wds
}

// Scan applies the selector query and scans the result into the given value.
func (wds *WeaponDamageSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wds.ctx, "Select")
	if err := wds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WeaponDamageQuery, *WeaponDamageSelect](ctx, wds.WeaponDamageQuery, wds, wds.inters, v)
}

func (wds *WeaponDamageSelect) sqlScan(ctx context.Context, root *WeaponDamageQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wds.fns))
	for _, fn := range wds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
