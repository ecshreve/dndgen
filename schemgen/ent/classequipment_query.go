// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/dndgen/ent/class"
	"github.com/ecshreve/dndgen/ent/classequipment"
	"github.com/ecshreve/dndgen/ent/equipment"
	"github.com/ecshreve/dndgen/ent/predicate"
)

// ClassEquipmentQuery is the builder for querying ClassEquipment entities.
type ClassEquipmentQuery struct {
	config
	ctx           *QueryContext
	order         []classequipment.OrderOption
	inters        []Interceptor
	predicates    []predicate.ClassEquipment
	withClass     *ClassQuery
	withEquipment *EquipmentQuery
	modifiers     []func(*sql.Selector)
	loadTotal     []func(context.Context, []*ClassEquipment) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ClassEquipmentQuery builder.
func (ceq *ClassEquipmentQuery) Where(ps ...predicate.ClassEquipment) *ClassEquipmentQuery {
	ceq.predicates = append(ceq.predicates, ps...)
	return ceq
}

// Limit the number of records to be returned by this query.
func (ceq *ClassEquipmentQuery) Limit(limit int) *ClassEquipmentQuery {
	ceq.ctx.Limit = &limit
	return ceq
}

// Offset to start from.
func (ceq *ClassEquipmentQuery) Offset(offset int) *ClassEquipmentQuery {
	ceq.ctx.Offset = &offset
	return ceq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ceq *ClassEquipmentQuery) Unique(unique bool) *ClassEquipmentQuery {
	ceq.ctx.Unique = &unique
	return ceq
}

// Order specifies how the records should be ordered.
func (ceq *ClassEquipmentQuery) Order(o ...classequipment.OrderOption) *ClassEquipmentQuery {
	ceq.order = append(ceq.order, o...)
	return ceq
}

// QueryClass chains the current query on the "class" edge.
func (ceq *ClassEquipmentQuery) QueryClass() *ClassQuery {
	query := (&ClassClient{config: ceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(classequipment.Table, classequipment.ClassColumn, selector),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, classequipment.ClassTable, classequipment.ClassColumn),
		)
		fromU = sqlgraph.SetNeighbors(ceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEquipment chains the current query on the "equipment" edge.
func (ceq *ClassEquipmentQuery) QueryEquipment() *EquipmentQuery {
	query := (&EquipmentClient{config: ceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(classequipment.Table, classequipment.EquipmentColumn, selector),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, classequipment.EquipmentTable, classequipment.EquipmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(ceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ClassEquipment entity from the query.
// Returns a *NotFoundError when no ClassEquipment was found.
func (ceq *ClassEquipmentQuery) First(ctx context.Context) (*ClassEquipment, error) {
	nodes, err := ceq.Limit(1).All(setContextOp(ctx, ceq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{classequipment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ceq *ClassEquipmentQuery) FirstX(ctx context.Context) *ClassEquipment {
	node, err := ceq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single ClassEquipment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ClassEquipment entity is found.
// Returns a *NotFoundError when no ClassEquipment entities are found.
func (ceq *ClassEquipmentQuery) Only(ctx context.Context) (*ClassEquipment, error) {
	nodes, err := ceq.Limit(2).All(setContextOp(ctx, ceq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{classequipment.Label}
	default:
		return nil, &NotSingularError{classequipment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ceq *ClassEquipmentQuery) OnlyX(ctx context.Context) *ClassEquipment {
	node, err := ceq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of ClassEquipments.
func (ceq *ClassEquipmentQuery) All(ctx context.Context) ([]*ClassEquipment, error) {
	ctx = setContextOp(ctx, ceq.ctx, "All")
	if err := ceq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ClassEquipment, *ClassEquipmentQuery]()
	return withInterceptors[[]*ClassEquipment](ctx, ceq, qr, ceq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ceq *ClassEquipmentQuery) AllX(ctx context.Context) []*ClassEquipment {
	nodes, err := ceq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (ceq *ClassEquipmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ceq.ctx, "Count")
	if err := ceq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ceq, querierCount[*ClassEquipmentQuery](), ceq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ceq *ClassEquipmentQuery) CountX(ctx context.Context) int {
	count, err := ceq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ceq *ClassEquipmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ceq.ctx, "Exist")
	switch _, err := ceq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ceq *ClassEquipmentQuery) ExistX(ctx context.Context) bool {
	exist, err := ceq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ClassEquipmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ceq *ClassEquipmentQuery) Clone() *ClassEquipmentQuery {
	if ceq == nil {
		return nil
	}
	return &ClassEquipmentQuery{
		config:        ceq.config,
		ctx:           ceq.ctx.Clone(),
		order:         append([]classequipment.OrderOption{}, ceq.order...),
		inters:        append([]Interceptor{}, ceq.inters...),
		predicates:    append([]predicate.ClassEquipment{}, ceq.predicates...),
		withClass:     ceq.withClass.Clone(),
		withEquipment: ceq.withEquipment.Clone(),
		// clone intermediate query.
		sql:  ceq.sql.Clone(),
		path: ceq.path,
	}
}

// WithClass tells the query-builder to eager-load the nodes that are connected to
// the "class" edge. The optional arguments are used to configure the query builder of the edge.
func (ceq *ClassEquipmentQuery) WithClass(opts ...func(*ClassQuery)) *ClassEquipmentQuery {
	query := (&ClassClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ceq.withClass = query
	return ceq
}

// WithEquipment tells the query-builder to eager-load the nodes that are connected to
// the "equipment" edge. The optional arguments are used to configure the query builder of the edge.
func (ceq *ClassEquipmentQuery) WithEquipment(opts ...func(*EquipmentQuery)) *ClassEquipmentQuery {
	query := (&EquipmentClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ceq.withEquipment = query
	return ceq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ClassID int `json:"class_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ClassEquipment.Query().
//		GroupBy(classequipment.FieldClassID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ceq *ClassEquipmentQuery) GroupBy(field string, fields ...string) *ClassEquipmentGroupBy {
	ceq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ClassEquipmentGroupBy{build: ceq}
	grbuild.flds = &ceq.ctx.Fields
	grbuild.label = classequipment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ClassID int `json:"class_id,omitempty"`
//	}
//
//	client.ClassEquipment.Query().
//		Select(classequipment.FieldClassID).
//		Scan(ctx, &v)
func (ceq *ClassEquipmentQuery) Select(fields ...string) *ClassEquipmentSelect {
	ceq.ctx.Fields = append(ceq.ctx.Fields, fields...)
	sbuild := &ClassEquipmentSelect{ClassEquipmentQuery: ceq}
	sbuild.label = classequipment.Label
	sbuild.flds, sbuild.scan = &ceq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ClassEquipmentSelect configured with the given aggregations.
func (ceq *ClassEquipmentQuery) Aggregate(fns ...AggregateFunc) *ClassEquipmentSelect {
	return ceq.Select().Aggregate(fns...)
}

func (ceq *ClassEquipmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ceq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ceq); err != nil {
				return err
			}
		}
	}
	for _, f := range ceq.ctx.Fields {
		if !classequipment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ceq.path != nil {
		prev, err := ceq.path(ctx)
		if err != nil {
			return err
		}
		ceq.sql = prev
	}
	return nil
}

func (ceq *ClassEquipmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ClassEquipment, error) {
	var (
		nodes       = []*ClassEquipment{}
		_spec       = ceq.querySpec()
		loadedTypes = [2]bool{
			ceq.withClass != nil,
			ceq.withEquipment != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ClassEquipment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ClassEquipment{config: ceq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ceq.modifiers) > 0 {
		_spec.Modifiers = ceq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ceq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ceq.withClass; query != nil {
		if err := ceq.loadClass(ctx, query, nodes, nil,
			func(n *ClassEquipment, e *Class) { n.Edges.Class = e }); err != nil {
			return nil, err
		}
	}
	if query := ceq.withEquipment; query != nil {
		if err := ceq.loadEquipment(ctx, query, nodes, nil,
			func(n *ClassEquipment, e *Equipment) { n.Edges.Equipment = e }); err != nil {
			return nil, err
		}
	}
	for i := range ceq.loadTotal {
		if err := ceq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ceq *ClassEquipmentQuery) loadClass(ctx context.Context, query *ClassQuery, nodes []*ClassEquipment, init func(*ClassEquipment), assign func(*ClassEquipment, *Class)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ClassEquipment)
	for i := range nodes {
		fk := nodes[i].ClassID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(class.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "class_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ceq *ClassEquipmentQuery) loadEquipment(ctx context.Context, query *EquipmentQuery, nodes []*ClassEquipment, init func(*ClassEquipment), assign func(*ClassEquipment, *Equipment)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ClassEquipment)
	for i := range nodes {
		fk := nodes[i].EquipmentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(equipment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "equipment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ceq *ClassEquipmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ceq.querySpec()
	if len(ceq.modifiers) > 0 {
		_spec.Modifiers = ceq.modifiers
	}
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, ceq.driver, _spec)
}

func (ceq *ClassEquipmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(classequipment.Table, classequipment.Columns, nil)
	_spec.From = ceq.sql
	if unique := ceq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ceq.path != nil {
		_spec.Unique = true
	}
	if fields := ceq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if ceq.withClass != nil {
			_spec.Node.AddColumnOnce(classequipment.FieldClassID)
		}
		if ceq.withEquipment != nil {
			_spec.Node.AddColumnOnce(classequipment.FieldEquipmentID)
		}
	}
	if ps := ceq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ceq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ceq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ceq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ceq *ClassEquipmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ceq.driver.Dialect())
	t1 := builder.Table(classequipment.Table)
	columns := ceq.ctx.Fields
	if len(columns) == 0 {
		columns = classequipment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ceq.sql != nil {
		selector = ceq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ceq.ctx.Unique != nil && *ceq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ceq.predicates {
		p(selector)
	}
	for _, p := range ceq.order {
		p(selector)
	}
	if offset := ceq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ceq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ClassEquipmentGroupBy is the group-by builder for ClassEquipment entities.
type ClassEquipmentGroupBy struct {
	selector
	build *ClassEquipmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cegb *ClassEquipmentGroupBy) Aggregate(fns ...AggregateFunc) *ClassEquipmentGroupBy {
	cegb.fns = append(cegb.fns, fns...)
	return cegb
}

// Scan applies the selector query and scans the result into the given value.
func (cegb *ClassEquipmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cegb.build.ctx, "GroupBy")
	if err := cegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClassEquipmentQuery, *ClassEquipmentGroupBy](ctx, cegb.build, cegb, cegb.build.inters, v)
}

func (cegb *ClassEquipmentGroupBy) sqlScan(ctx context.Context, root *ClassEquipmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cegb.fns))
	for _, fn := range cegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cegb.flds)+len(cegb.fns))
		for _, f := range *cegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ClassEquipmentSelect is the builder for selecting fields of ClassEquipment entities.
type ClassEquipmentSelect struct {
	*ClassEquipmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ces *ClassEquipmentSelect) Aggregate(fns ...AggregateFunc) *ClassEquipmentSelect {
	ces.fns = append(ces.fns, fns...)
	return ces
}

// Scan applies the selector query and scans the result into the given value.
func (ces *ClassEquipmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ces.ctx, "Select")
	if err := ces.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClassEquipmentQuery, *ClassEquipmentSelect](ctx, ces.ClassEquipmentQuery, ces, ces.inters, v)
}

func (ces *ClassEquipmentSelect) sqlScan(ctx context.Context, root *ClassEquipmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ces.fns))
	for _, fn := range ces.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ces.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ces.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
