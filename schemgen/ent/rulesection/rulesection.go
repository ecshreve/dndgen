// Code generated by ent, DO NOT EDIT.

package rulesection

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rulesection type in the database.
	Label = "rule_section"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndx holds the string denoting the indx field in the database.
	FieldIndx = "indx"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// EdgeRules holds the string denoting the rules edge name in mutations.
	EdgeRules = "rules"
	// Table holds the table name of the rulesection in the database.
	Table = "rule_sections"
	// RulesTable is the table that holds the rules relation/edge. The primary key declared below.
	RulesTable = "rule_rule_sections"
	// RulesInverseTable is the table name for the Rule entity.
	// It exists in this package in order to avoid circular dependency with the "rule" package.
	RulesInverseTable = "rules"
)

// Columns holds all SQL columns for rulesection fields.
var Columns = []string{
	FieldID,
	FieldIndx,
	FieldName,
	FieldDesc,
}

var (
	// RulesPrimaryKey and RulesColumn2 are the table columns denoting the
	// primary key for the rules relation (M2M).
	RulesPrimaryKey = []string{"rule_id", "rule_section_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IndxValidator is a validator for the "indx" field. It is called by the builders before save.
	IndxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the RuleSection queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndx orders the results by the indx field.
func ByIndx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndx, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDesc orders the results by the desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// ByRulesCount orders the results by rules count.
func ByRulesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRulesStep(), opts...)
	}
}

// ByRules orders the results by rules terms.
func ByRules(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRulesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRulesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RulesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RulesTable, RulesPrimaryKey...),
	)
}
