// Code generated by ent, DO NOT EDIT.

package abilitybonus

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the abilitybonus type in the database.
	Label = "ability_bonus"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAbilityScoreID holds the string denoting the ability_score_id field in the database.
	FieldAbilityScoreID = "ability_score_id"
	// FieldBonus holds the string denoting the bonus field in the database.
	FieldBonus = "bonus"
	// EdgeAbilityScore holds the string denoting the ability_score edge name in mutations.
	EdgeAbilityScore = "ability_score"
	// EdgeRace holds the string denoting the race edge name in mutations.
	EdgeRace = "race"
	// EdgeSubrace holds the string denoting the subrace edge name in mutations.
	EdgeSubrace = "subrace"
	// Table holds the table name of the abilitybonus in the database.
	Table = "ability_bonus"
	// AbilityScoreTable is the table that holds the ability_score relation/edge.
	AbilityScoreTable = "ability_bonus"
	// AbilityScoreInverseTable is the table name for the AbilityScore entity.
	// It exists in this package in order to avoid circular dependency with the "abilityscore" package.
	AbilityScoreInverseTable = "ability_scores"
	// AbilityScoreColumn is the table column denoting the ability_score relation/edge.
	AbilityScoreColumn = "ability_score_id"
	// RaceTable is the table that holds the race relation/edge.
	RaceTable = "ability_bonus"
	// RaceInverseTable is the table name for the Race entity.
	// It exists in this package in order to avoid circular dependency with the "race" package.
	RaceInverseTable = "races"
	// RaceColumn is the table column denoting the race relation/edge.
	RaceColumn = "race_ability_bonuses"
	// SubraceTable is the table that holds the subrace relation/edge.
	SubraceTable = "ability_bonus"
	// SubraceInverseTable is the table name for the Subrace entity.
	// It exists in this package in order to avoid circular dependency with the "subrace" package.
	SubraceInverseTable = "subraces"
	// SubraceColumn is the table column denoting the subrace relation/edge.
	SubraceColumn = "subrace_ability_bonuses"
)

// Columns holds all SQL columns for abilitybonus fields.
var Columns = []string{
	FieldID,
	FieldAbilityScoreID,
	FieldBonus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ability_bonus"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"race_ability_bonuses",
	"subrace_ability_bonuses",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the AbilityBonus queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAbilityScoreID orders the results by the ability_score_id field.
func ByAbilityScoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbilityScoreID, opts...).ToFunc()
}

// ByBonus orders the results by the bonus field.
func ByBonus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBonus, opts...).ToFunc()
}

// ByAbilityScoreField orders the results by ability_score field.
func ByAbilityScoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAbilityScoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByRaceField orders the results by race field.
func ByRaceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRaceStep(), sql.OrderByField(field, opts...))
	}
}

// BySubraceField orders the results by subrace field.
func BySubraceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubraceStep(), sql.OrderByField(field, opts...))
	}
}
func newAbilityScoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AbilityScoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AbilityScoreTable, AbilityScoreColumn),
	)
}
func newRaceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RaceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RaceTable, RaceColumn),
	)
}
func newSubraceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubraceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubraceTable, SubraceColumn),
	)
}
