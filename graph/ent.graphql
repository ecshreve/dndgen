directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type AbilityBonus implements Node {
  id: ID!
  bonus: Int!
  abilityScore: AbilityScore!
  race: Race!
}
"""
AbilityBonusWhereInput is used for filtering AbilityBonus objects.
Input was generated by ent.
"""
input AbilityBonusWhereInput {
  not: AbilityBonusWhereInput
  and: [AbilityBonusWhereInput!]
  or: [AbilityBonusWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  bonus field predicates
  """
  bonus: Int
  bonusNEQ: Int
  bonusIn: [Int!]
  bonusNotIn: [Int!]
  bonusGT: Int
  bonusGTE: Int
  bonusLT: Int
  bonusLTE: Int
  """
  ability_score edge predicates
  """
  hasAbilityScore: Boolean
  hasAbilityScoreWith: [AbilityScoreWhereInput!]
  """
  race edge predicates
  """
  hasRace: Boolean
  hasRaceWith: [RaceWhereInput!]
}
type AbilityScore implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  fullName: String!
  skills: [Skill!]
  abilityBonuses: [AbilityBonus!]
}
"""
Ordering options for AbilityScore connections
"""
input AbilityScoreOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order AbilityScores.
  """
  field: AbilityScoreOrderField!
}
"""
Properties by which AbilityScore connections can be ordered.
"""
enum AbilityScoreOrderField {
  INDX
  NAME
  FULL_NAME
}
"""
AbilityScoreWhereInput is used for filtering AbilityScore objects.
Input was generated by ent.
"""
input AbilityScoreWhereInput {
  not: AbilityScoreWhereInput
  and: [AbilityScoreWhereInput!]
  or: [AbilityScoreWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  full_name field predicates
  """
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """
  skills edge predicates
  """
  hasSkills: Boolean
  hasSkillsWith: [SkillWhereInput!]
  """
  ability_bonuses edge predicates
  """
  hasAbilityBonuses: Boolean
  hasAbilityBonusesWith: [AbilityBonusWhereInput!]
}
type Alignment implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  abbr: String!
}
"""
Ordering options for Alignment connections
"""
input AlignmentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Alignments.
  """
  field: AlignmentOrderField!
}
"""
Properties by which Alignment connections can be ordered.
"""
enum AlignmentOrderField {
  INDX
  NAME
}
"""
AlignmentWhereInput is used for filtering Alignment objects.
Input was generated by ent.
"""
input AlignmentWhereInput {
  not: AlignmentWhereInput
  and: [AlignmentWhereInput!]
  or: [AlignmentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  abbr field predicates
  """
  abbr: String
  abbrNEQ: String
  abbrIn: [String!]
  abbrNotIn: [String!]
  abbrGT: String
  abbrGTE: String
  abbrLT: String
  abbrLTE: String
  abbrContains: String
  abbrHasPrefix: String
  abbrHasSuffix: String
  abbrEqualFold: String
  abbrContainsFold: String
}
type Coin implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  goldConversionRate: Float!
}
"""
Ordering options for Coin connections
"""
input CoinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Coins.
  """
  field: CoinOrderField!
}
"""
Properties by which Coin connections can be ordered.
"""
enum CoinOrderField {
  INDX
  NAME
}
"""
CoinWhereInput is used for filtering Coin objects.
Input was generated by ent.
"""
input CoinWhereInput {
  not: CoinWhereInput
  and: [CoinWhereInput!]
  or: [CoinWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  gold_conversion_rate field predicates
  """
  goldConversionRate: Float
  goldConversionRateNEQ: Float
  goldConversionRateIn: [Float!]
  goldConversionRateNotIn: [Float!]
  goldConversionRateGT: Float
  goldConversionRateGTE: Float
  goldConversionRateLT: Float
  goldConversionRateLTE: Float
}
type Condition implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
}
"""
Ordering options for Condition connections
"""
input ConditionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Conditions.
  """
  field: ConditionOrderField!
}
"""
Properties by which Condition connections can be ordered.
"""
enum ConditionOrderField {
  INDX
  NAME
}
"""
ConditionWhereInput is used for filtering Condition objects.
Input was generated by ent.
"""
input ConditionWhereInput {
  not: ConditionWhereInput
  and: [ConditionWhereInput!]
  or: [ConditionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type DamageType implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
}
"""
Ordering options for DamageType connections
"""
input DamageTypeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order DamageTypes.
  """
  field: DamageTypeOrderField!
}
"""
Properties by which DamageType connections can be ordered.
"""
enum DamageTypeOrderField {
  INDX
  NAME
}
"""
DamageTypeWhereInput is used for filtering DamageType objects.
Input was generated by ent.
"""
input DamageTypeWhereInput {
  not: DamageTypeWhereInput
  and: [DamageTypeWhereInput!]
  or: [DamageTypeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
type Equipment implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  equipmentCategory: EquipmentEquipmentCategory!
  weight: Float!
  equipmentCosts: EquipmentCost
}
type EquipmentCost implements Node {
  id: ID!
  quantity: Int!
  coin: Coin!
  equipment: Equipment
}
"""
EquipmentCostWhereInput is used for filtering EquipmentCost objects.
Input was generated by ent.
"""
input EquipmentCostWhereInput {
  not: EquipmentCostWhereInput
  and: [EquipmentCostWhereInput!]
  or: [EquipmentCostWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  quantity field predicates
  """
  quantity: Int
  quantityNEQ: Int
  quantityIn: [Int!]
  quantityNotIn: [Int!]
  quantityGT: Int
  quantityGTE: Int
  quantityLT: Int
  quantityLTE: Int
  """
  coin edge predicates
  """
  hasCoin: Boolean
  hasCoinWith: [CoinWhereInput!]
  """
  equipment edge predicates
  """
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
"""
EquipmentEquipmentCategory is enum for the field equipment_category
"""
enum EquipmentEquipmentCategory @goModel(model: "github.com/ecshreve/dndgen/ent/equipment.EquipmentCategory") {
  armor
  gear
  vehicles
  tools
  weapon
  other
}
"""
Ordering options for Equipment connections
"""
input EquipmentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order EquipmentSlice.
  """
  field: EquipmentOrderField!
}
"""
Properties by which Equipment connections can be ordered.
"""
enum EquipmentOrderField {
  INDX
  NAME
}
"""
EquipmentWhereInput is used for filtering Equipment objects.
Input was generated by ent.
"""
input EquipmentWhereInput {
  not: EquipmentWhereInput
  and: [EquipmentWhereInput!]
  or: [EquipmentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  equipment_category field predicates
  """
  equipmentCategory: EquipmentEquipmentCategory
  equipmentCategoryNEQ: EquipmentEquipmentCategory
  equipmentCategoryIn: [EquipmentEquipmentCategory!]
  equipmentCategoryNotIn: [EquipmentEquipmentCategory!]
  """
  weight field predicates
  """
  weight: Float
  weightNEQ: Float
  weightIn: [Float!]
  weightNotIn: [Float!]
  weightGT: Float
  weightGTE: Float
  weightLT: Float
  weightLTE: Float
  """
  equipment_costs edge predicates
  """
  hasEquipmentCosts: Boolean
  hasEquipmentCostsWith: [EquipmentCostWhereInput!]
}
type Feat implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
}
"""
Ordering options for Feat connections
"""
input FeatOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Feats.
  """
  field: FeatOrderField!
}
"""
Properties by which Feat connections can be ordered.
"""
enum FeatOrderField {
  INDX
  NAME
}
"""
FeatWhereInput is used for filtering Feat objects.
Input was generated by ent.
"""
input FeatWhereInput {
  not: FeatWhereInput
  and: [FeatWhereInput!]
  or: [FeatWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
type Language implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  languageType: LanguageLanguageType!
  script: LanguageScript!
  races: [Race!]
}
"""
LanguageLanguageType is enum for the field language_type
"""
enum LanguageLanguageType @goModel(model: "github.com/ecshreve/dndgen/ent/language.LanguageType") {
  STANDARD
  EXOTIC
}
"""
Ordering options for Language connections
"""
input LanguageOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Languages.
  """
  field: LanguageOrderField!
}
"""
Properties by which Language connections can be ordered.
"""
enum LanguageOrderField {
  INDX
  NAME
}
"""
LanguageScript is enum for the field script
"""
enum LanguageScript @goModel(model: "github.com/ecshreve/dndgen/ent/language.Script") {
  Common
  Dwarvish
  Elvish
  Infernal
  Draconic
  Celestial
  Abyssal
  Giant
  Gnomish
  Goblin
  Halfling
  Orc
  Other
}
"""
LanguageWhereInput is used for filtering Language objects.
Input was generated by ent.
"""
input LanguageWhereInput {
  not: LanguageWhereInput
  and: [LanguageWhereInput!]
  or: [LanguageWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  language_type field predicates
  """
  languageType: LanguageLanguageType
  languageTypeNEQ: LanguageLanguageType
  languageTypeIn: [LanguageLanguageType!]
  languageTypeNotIn: [LanguageLanguageType!]
  """
  script field predicates
  """
  script: LanguageScript
  scriptNEQ: LanguageScript
  scriptIn: [LanguageScript!]
  scriptNotIn: [LanguageScript!]
  """
  races edge predicates
  """
  hasRaces: Boolean
  hasRacesWith: [RaceWhereInput!]
}
type MagicSchool implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
}
"""
Ordering options for MagicSchool connections
"""
input MagicSchoolOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order MagicSchools.
  """
  field: MagicSchoolOrderField!
}
"""
Properties by which MagicSchool connections can be ordered.
"""
enum MagicSchoolOrderField {
  INDX
  NAME
}
"""
MagicSchoolWhereInput is used for filtering MagicSchool objects.
Input was generated by ent.
"""
input MagicSchoolWhereInput {
  not: MagicSchoolWhereInput
  and: [MagicSchoolWhereInput!]
  or: [MagicSchoolWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/ecshreve/dndgen/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  abilityScores: [AbilityScore!]!
  alignments: [Alignment!]!
  coins: [Coin!]!
  conditions: [Condition!]!
  damageTypes: [DamageType!]!
  equipments: [Equipment!]!
  feats: [Feat!]!
  languages: [Language!]!
  magicSchools: [MagicSchool!]!
  races: [Race!]!
  rules: [Rule!]!
  ruleSections: [RuleSection!]!
  skills: [Skill!]!
  weaponProperties: [WeaponProperty!]!
}
type Race implements Node {
  id: ID!
  indx: String!
  name: String!
  speed: Int!
  size: RaceSize!
  sizeDesc: String!
  alignmentDesc: String!
  ageDesc: String!
  languageDesc: String!
  abilityBonuses: [AbilityBonus!]
  languages: [Language!]
}
"""
Ordering options for Race connections
"""
input RaceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Races.
  """
  field: RaceOrderField!
}
"""
Properties by which Race connections can be ordered.
"""
enum RaceOrderField {
  INDX
  NAME
}
"""
RaceSize is enum for the field size
"""
enum RaceSize @goModel(model: "github.com/ecshreve/dndgen/ent/race.Size") {
  Small
  Medium
  Large
}
"""
RaceWhereInput is used for filtering Race objects.
Input was generated by ent.
"""
input RaceWhereInput {
  not: RaceWhereInput
  and: [RaceWhereInput!]
  or: [RaceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  speed field predicates
  """
  speed: Int
  speedNEQ: Int
  speedIn: [Int!]
  speedNotIn: [Int!]
  speedGT: Int
  speedGTE: Int
  speedLT: Int
  speedLTE: Int
  """
  size field predicates
  """
  size: RaceSize
  sizeNEQ: RaceSize
  sizeIn: [RaceSize!]
  sizeNotIn: [RaceSize!]
  """
  size_desc field predicates
  """
  sizeDesc: String
  sizeDescNEQ: String
  sizeDescIn: [String!]
  sizeDescNotIn: [String!]
  sizeDescGT: String
  sizeDescGTE: String
  sizeDescLT: String
  sizeDescLTE: String
  sizeDescContains: String
  sizeDescHasPrefix: String
  sizeDescHasSuffix: String
  sizeDescEqualFold: String
  sizeDescContainsFold: String
  """
  alignment_desc field predicates
  """
  alignmentDesc: String
  alignmentDescNEQ: String
  alignmentDescIn: [String!]
  alignmentDescNotIn: [String!]
  alignmentDescGT: String
  alignmentDescGTE: String
  alignmentDescLT: String
  alignmentDescLTE: String
  alignmentDescContains: String
  alignmentDescHasPrefix: String
  alignmentDescHasSuffix: String
  alignmentDescEqualFold: String
  alignmentDescContainsFold: String
  """
  age_desc field predicates
  """
  ageDesc: String
  ageDescNEQ: String
  ageDescIn: [String!]
  ageDescNotIn: [String!]
  ageDescGT: String
  ageDescGTE: String
  ageDescLT: String
  ageDescLTE: String
  ageDescContains: String
  ageDescHasPrefix: String
  ageDescHasSuffix: String
  ageDescEqualFold: String
  ageDescContainsFold: String
  """
  language_desc field predicates
  """
  languageDesc: String
  languageDescNEQ: String
  languageDescIn: [String!]
  languageDescNotIn: [String!]
  languageDescGT: String
  languageDescGTE: String
  languageDescLT: String
  languageDescLTE: String
  languageDescContains: String
  languageDescHasPrefix: String
  languageDescHasSuffix: String
  languageDescEqualFold: String
  languageDescContainsFold: String
  """
  ability_bonuses edge predicates
  """
  hasAbilityBonuses: Boolean
  hasAbilityBonusesWith: [AbilityBonusWhereInput!]
  """
  languages edge predicates
  """
  hasLanguages: Boolean
  hasLanguagesWith: [LanguageWhereInput!]
}
type Rule implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  sections: [RuleSection!]
}
"""
Ordering options for Rule connections
"""
input RuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Rules.
  """
  field: RuleOrderField!
}
"""
Properties by which Rule connections can be ordered.
"""
enum RuleOrderField {
  INDX
  NAME
}
type RuleSection implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  rule: Rule
}
"""
Ordering options for RuleSection connections
"""
input RuleSectionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order RuleSections.
  """
  field: RuleSectionOrderField!
}
"""
Properties by which RuleSection connections can be ordered.
"""
enum RuleSectionOrderField {
  INDX
  NAME
}
"""
RuleSectionWhereInput is used for filtering RuleSection objects.
Input was generated by ent.
"""
input RuleSectionWhereInput {
  not: RuleSectionWhereInput
  and: [RuleSectionWhereInput!]
  or: [RuleSectionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  rule edge predicates
  """
  hasRule: Boolean
  hasRuleWith: [RuleWhereInput!]
}
"""
RuleWhereInput is used for filtering Rule objects.
Input was generated by ent.
"""
input RuleWhereInput {
  not: RuleWhereInput
  and: [RuleWhereInput!]
  or: [RuleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  sections edge predicates
  """
  hasSections: Boolean
  hasSectionsWith: [RuleSectionWhereInput!]
}
type Skill implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  abilityScore: AbilityScore
}
"""
Ordering options for Skill connections
"""
input SkillOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Skills.
  """
  field: SkillOrderField!
}
"""
Properties by which Skill connections can be ordered.
"""
enum SkillOrderField {
  INDX
  NAME
}
"""
SkillWhereInput is used for filtering Skill objects.
Input was generated by ent.
"""
input SkillWhereInput {
  not: SkillWhereInput
  and: [SkillWhereInput!]
  or: [SkillWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  ability_score edge predicates
  """
  hasAbilityScore: Boolean
  hasAbilityScoreWith: [AbilityScoreWhereInput!]
}
type WeaponProperty implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
}
"""
Ordering options for WeaponProperty connections
"""
input WeaponPropertyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order WeaponProperties.
  """
  field: WeaponPropertyOrderField!
}
"""
Properties by which WeaponProperty connections can be ordered.
"""
enum WeaponPropertyOrderField {
  INDX
  NAME
}
"""
WeaponPropertyWhereInput is used for filtering WeaponProperty objects.
Input was generated by ent.
"""
input WeaponPropertyWhereInput {
  not: WeaponPropertyWhereInput
  and: [WeaponPropertyWhereInput!]
  or: [WeaponPropertyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
