directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type AbilityBonus implements Node {
  id: ID!
  bonus: Int!
  abilityScore: AbilityScore!
  race: Race
}
"""
AbilityBonusWhereInput is used for filtering AbilityBonus objects.
Input was generated by ent.
"""
input AbilityBonusWhereInput {
  not: AbilityBonusWhereInput
  and: [AbilityBonusWhereInput!]
  or: [AbilityBonusWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  bonus field predicates
  """
  bonus: Int
  bonusNEQ: Int
  bonusIn: [Int!]
  bonusNotIn: [Int!]
  bonusGT: Int
  bonusGTE: Int
  bonusLT: Int
  bonusLTE: Int
  """
  ability_score edge predicates
  """
  hasAbilityScore: Boolean
  hasAbilityScoreWith: [AbilityScoreWhereInput!]
  """
  race edge predicates
  """
  hasRace: Boolean
  hasRaceWith: [RaceWhereInput!]
}
type AbilityScore implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  fullName: String!
  skills: [Skill!]
  abilityBonuses: [AbilityBonus!]
}
"""
Ordering options for AbilityScore connections
"""
input AbilityScoreOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order AbilityScores.
  """
  field: AbilityScoreOrderField!
}
"""
Properties by which AbilityScore connections can be ordered.
"""
enum AbilityScoreOrderField {
  INDX
  NAME
  FULL_NAME
}
"""
AbilityScoreWhereInput is used for filtering AbilityScore objects.
Input was generated by ent.
"""
input AbilityScoreWhereInput {
  not: AbilityScoreWhereInput
  and: [AbilityScoreWhereInput!]
  or: [AbilityScoreWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  full_name field predicates
  """
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """
  skills edge predicates
  """
  hasSkills: Boolean
  hasSkillsWith: [SkillWhereInput!]
  """
  ability_bonuses edge predicates
  """
  hasAbilityBonuses: Boolean
  hasAbilityBonusesWith: [AbilityBonusWhereInput!]
}
type Alignment implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  abbr: String!
}
"""
Ordering options for Alignment connections
"""
input AlignmentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Alignments.
  """
  field: AlignmentOrderField!
}
"""
Properties by which Alignment connections can be ordered.
"""
enum AlignmentOrderField {
  INDX
  NAME
}
"""
AlignmentWhereInput is used for filtering Alignment objects.
Input was generated by ent.
"""
input AlignmentWhereInput {
  not: AlignmentWhereInput
  and: [AlignmentWhereInput!]
  or: [AlignmentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  abbr field predicates
  """
  abbr: String
  abbrNEQ: String
  abbrIn: [String!]
  abbrNotIn: [String!]
  abbrGT: String
  abbrGTE: String
  abbrLT: String
  abbrLTE: String
  abbrContains: String
  abbrHasPrefix: String
  abbrHasSuffix: String
  abbrEqualFold: String
  abbrContainsFold: String
}
type Armor implements Node {
  id: ID!
  armorCategory: ArmorArmorCategory!
  strMinimum: Int!
  stealthDisadvantage: Boolean!
  acBase: Int!
  acDexBonus: Boolean!
  acMaxBonus: Int!
  equipment: Equipment!
}
"""
ArmorArmorCategory is enum for the field armor_category
"""
enum ArmorArmorCategory @goModel(model: "github.com/ecshreve/dndgen/ent/armor.ArmorCategory") {
  light
  medium
  heavy
  shield
}
"""
ArmorWhereInput is used for filtering Armor objects.
Input was generated by ent.
"""
input ArmorWhereInput {
  not: ArmorWhereInput
  and: [ArmorWhereInput!]
  or: [ArmorWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  armor_category field predicates
  """
  armorCategory: ArmorArmorCategory
  armorCategoryNEQ: ArmorArmorCategory
  armorCategoryIn: [ArmorArmorCategory!]
  armorCategoryNotIn: [ArmorArmorCategory!]
  """
  str_minimum field predicates
  """
  strMinimum: Int
  strMinimumNEQ: Int
  strMinimumIn: [Int!]
  strMinimumNotIn: [Int!]
  strMinimumGT: Int
  strMinimumGTE: Int
  strMinimumLT: Int
  strMinimumLTE: Int
  """
  stealth_disadvantage field predicates
  """
  stealthDisadvantage: Boolean
  stealthDisadvantageNEQ: Boolean
  """
  ac_base field predicates
  """
  acBase: Int
  acBaseNEQ: Int
  acBaseIn: [Int!]
  acBaseNotIn: [Int!]
  acBaseGT: Int
  acBaseGTE: Int
  acBaseLT: Int
  acBaseLTE: Int
  """
  ac_dex_bonus field predicates
  """
  acDexBonus: Boolean
  acDexBonusNEQ: Boolean
  """
  ac_max_bonus field predicates
  """
  acMaxBonus: Int
  acMaxBonusNEQ: Int
  acMaxBonusIn: [Int!]
  acMaxBonusNotIn: [Int!]
  acMaxBonusGT: Int
  acMaxBonusGTE: Int
  acMaxBonusLT: Int
  acMaxBonusLTE: Int
  """
  equipment edge predicates
  """
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Class implements Node {
  id: ID!
  indx: String!
  name: String!
  hitDie: Int!
}
"""
A connection to a list of items.
"""
type ClassConnection {
  """
  A list of edges.
  """
  edges: [ClassEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ClassEdge {
  """
  The item at the end of the edge.
  """
  node: Class
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Class connections
"""
input ClassOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Classes.
  """
  field: ClassOrderField!
}
"""
Properties by which Class connections can be ordered.
"""
enum ClassOrderField {
  INDX
  NAME
}
"""
ClassWhereInput is used for filtering Class objects.
Input was generated by ent.
"""
input ClassWhereInput {
  not: ClassWhereInput
  and: [ClassWhereInput!]
  or: [ClassWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  hit_die field predicates
  """
  hitDie: Int
  hitDieNEQ: Int
  hitDieIn: [Int!]
  hitDieNotIn: [Int!]
  hitDieGT: Int
  hitDieGTE: Int
  hitDieLT: Int
  hitDieLTE: Int
}
type Coin implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  goldConversionRate: Float!
}
"""
Ordering options for Coin connections
"""
input CoinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Coins.
  """
  field: CoinOrderField!
}
"""
Properties by which Coin connections can be ordered.
"""
enum CoinOrderField {
  INDX
  NAME
}
"""
CoinWhereInput is used for filtering Coin objects.
Input was generated by ent.
"""
input CoinWhereInput {
  not: CoinWhereInput
  and: [CoinWhereInput!]
  or: [CoinWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  gold_conversion_rate field predicates
  """
  goldConversionRate: Float
  goldConversionRateNEQ: Float
  goldConversionRateIn: [Float!]
  goldConversionRateNotIn: [Float!]
  goldConversionRateGT: Float
  goldConversionRateGTE: Float
  goldConversionRateLT: Float
  goldConversionRateLTE: Float
}
type Condition implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
}
"""
Ordering options for Condition connections
"""
input ConditionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Conditions.
  """
  field: ConditionOrderField!
}
"""
Properties by which Condition connections can be ordered.
"""
enum ConditionOrderField {
  INDX
  NAME
}
"""
ConditionWhereInput is used for filtering Condition objects.
Input was generated by ent.
"""
input ConditionWhereInput {
  not: ConditionWhereInput
  and: [ConditionWhereInput!]
  or: [ConditionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
type Cost implements Node {
  id: ID!
  quantity: Int!
  coin: Coin!
  equipment: Equipment
}
"""
CostWhereInput is used for filtering Cost objects.
Input was generated by ent.
"""
input CostWhereInput {
  not: CostWhereInput
  and: [CostWhereInput!]
  or: [CostWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  quantity field predicates
  """
  quantity: Int
  quantityNEQ: Int
  quantityIn: [Int!]
  quantityNotIn: [Int!]
  quantityGT: Int
  quantityGTE: Int
  quantityLT: Int
  quantityLTE: Int
  """
  coin edge predicates
  """
  hasCoin: Boolean
  hasCoinWith: [CoinWhereInput!]
  """
  equipment edge predicates
  """
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type DamageType implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  weapons: [Weapon!]
}
"""
Ordering options for DamageType connections
"""
input DamageTypeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order DamageTypes.
  """
  field: DamageTypeOrderField!
}
"""
Properties by which DamageType connections can be ordered.
"""
enum DamageTypeOrderField {
  INDX
  NAME
}
"""
DamageTypeWhereInput is used for filtering DamageType objects.
Input was generated by ent.
"""
input DamageTypeWhereInput {
  not: DamageTypeWhereInput
  and: [DamageTypeWhereInput!]
  or: [DamageTypeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  weapons edge predicates
  """
  hasWeapons: Boolean
  hasWeaponsWith: [WeaponWhereInput!]
}
type Equipment implements Node {
  id: ID!
  indx: String!
  name: String!
  equipmentCategory: EquipmentEquipmentCategory!
  weight: Float
  cost: Cost
  gear: Gear
  tool: Tool
  weapon: Weapon
  vehicle: Vehicle
  armor: Armor
}
"""
A connection to a list of items.
"""
type EquipmentConnection {
  """
  A list of edges.
  """
  edges: [EquipmentEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EquipmentEdge {
  """
  The item at the end of the edge.
  """
  node: Equipment
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
EquipmentEquipmentCategory is enum for the field equipment_category
"""
enum EquipmentEquipmentCategory @goModel(model: "github.com/ecshreve/dndgen/ent/equipment.EquipmentCategory") {
  GEAR
  TOOL
  WEAPON
  VEHICLE
  ARMOR
}
"""
Ordering options for Equipment connections
"""
input EquipmentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order EquipmentSlice.
  """
  field: EquipmentOrderField!
}
"""
Properties by which Equipment connections can be ordered.
"""
enum EquipmentOrderField {
  INDX
  NAME
  EQUIPMENT_CATEGORY
}
"""
EquipmentWhereInput is used for filtering Equipment objects.
Input was generated by ent.
"""
input EquipmentWhereInput {
  not: EquipmentWhereInput
  and: [EquipmentWhereInput!]
  or: [EquipmentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  equipment_category field predicates
  """
  equipmentCategory: EquipmentEquipmentCategory
  equipmentCategoryNEQ: EquipmentEquipmentCategory
  equipmentCategoryIn: [EquipmentEquipmentCategory!]
  equipmentCategoryNotIn: [EquipmentEquipmentCategory!]
  """
  weight field predicates
  """
  weight: Float
  weightNEQ: Float
  weightIn: [Float!]
  weightNotIn: [Float!]
  weightGT: Float
  weightGTE: Float
  weightLT: Float
  weightLTE: Float
  weightIsNil: Boolean
  weightNotNil: Boolean
  """
  cost edge predicates
  """
  hasCost: Boolean
  hasCostWith: [CostWhereInput!]
  """
  gear edge predicates
  """
  hasGear: Boolean
  hasGearWith: [GearWhereInput!]
  """
  tool edge predicates
  """
  hasTool: Boolean
  hasToolWith: [ToolWhereInput!]
  """
  weapon edge predicates
  """
  hasWeapon: Boolean
  hasWeaponWith: [WeaponWhereInput!]
  """
  vehicle edge predicates
  """
  hasVehicle: Boolean
  hasVehicleWith: [VehicleWhereInput!]
  """
  armor edge predicates
  """
  hasArmor: Boolean
  hasArmorWith: [ArmorWhereInput!]
}
type Feat implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
}
"""
Ordering options for Feat connections
"""
input FeatOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Feats.
  """
  field: FeatOrderField!
}
"""
Properties by which Feat connections can be ordered.
"""
enum FeatOrderField {
  INDX
  NAME
}
"""
FeatWhereInput is used for filtering Feat objects.
Input was generated by ent.
"""
input FeatWhereInput {
  not: FeatWhereInput
  and: [FeatWhereInput!]
  or: [FeatWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
type Feature implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  level: Int!
}
"""
Ordering options for Feature connections
"""
input FeatureOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Features.
  """
  field: FeatureOrderField!
}
"""
Properties by which Feature connections can be ordered.
"""
enum FeatureOrderField {
  INDX
  NAME
}
"""
FeatureWhereInput is used for filtering Feature objects.
Input was generated by ent.
"""
input FeatureWhereInput {
  not: FeatureWhereInput
  and: [FeatureWhereInput!]
  or: [FeatureWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  level field predicates
  """
  level: Int
  levelNEQ: Int
  levelIn: [Int!]
  levelNotIn: [Int!]
  levelGT: Int
  levelGTE: Int
  levelLT: Int
  levelLTE: Int
}
type Gear implements Node {
  id: ID!
  gearCategory: String!
  desc: [String!]
  equipment: Equipment!
}
"""
GearWhereInput is used for filtering Gear objects.
Input was generated by ent.
"""
input GearWhereInput {
  not: GearWhereInput
  and: [GearWhereInput!]
  or: [GearWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  gear_category field predicates
  """
  gearCategory: String
  gearCategoryNEQ: String
  gearCategoryIn: [String!]
  gearCategoryNotIn: [String!]
  gearCategoryGT: String
  gearCategoryGTE: String
  gearCategoryLT: String
  gearCategoryLTE: String
  gearCategoryContains: String
  gearCategoryHasPrefix: String
  gearCategoryHasSuffix: String
  gearCategoryEqualFold: String
  gearCategoryContainsFold: String
  """
  equipment edge predicates
  """
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Language implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  languageType: LanguageLanguageType!
  script: LanguageScript!
}
"""
LanguageLanguageType is enum for the field language_type
"""
enum LanguageLanguageType @goModel(model: "github.com/ecshreve/dndgen/ent/language.LanguageType") {
  STANDARD
  EXOTIC
}
"""
Ordering options for Language connections
"""
input LanguageOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Languages.
  """
  field: LanguageOrderField!
}
"""
Properties by which Language connections can be ordered.
"""
enum LanguageOrderField {
  INDX
  NAME
}
"""
LanguageScript is enum for the field script
"""
enum LanguageScript @goModel(model: "github.com/ecshreve/dndgen/ent/language.Script") {
  Common
  Dwarvish
  Elvish
  Infernal
  Draconic
  Celestial
  Abyssal
  Giant
  Gnomish
  Goblin
  Halfling
  Orc
  Other
}
"""
LanguageWhereInput is used for filtering Language objects.
Input was generated by ent.
"""
input LanguageWhereInput {
  not: LanguageWhereInput
  and: [LanguageWhereInput!]
  or: [LanguageWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  language_type field predicates
  """
  languageType: LanguageLanguageType
  languageTypeNEQ: LanguageLanguageType
  languageTypeIn: [LanguageLanguageType!]
  languageTypeNotIn: [LanguageLanguageType!]
  """
  script field predicates
  """
  script: LanguageScript
  scriptNEQ: LanguageScript
  scriptIn: [LanguageScript!]
  scriptNotIn: [LanguageScript!]
}
type MagicSchool implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
}
"""
Ordering options for MagicSchool connections
"""
input MagicSchoolOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order MagicSchools.
  """
  field: MagicSchoolOrderField!
}
"""
Properties by which MagicSchool connections can be ordered.
"""
enum MagicSchoolOrderField {
  INDX
  NAME
}
"""
MagicSchoolWhereInput is used for filtering MagicSchool objects.
Input was generated by ent.
"""
input MagicSchoolWhereInput {
  not: MagicSchoolWhereInput
  and: [MagicSchoolWhereInput!]
  or: [MagicSchoolWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/ecshreve/dndgen/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Proficiency implements Node {
  id: ID!
  indx: String!
  name: String!
  reference: String!
  race: [Race!]
  options: [ProficiencyChoice!]
}
type ProficiencyChoice implements Node {
  id: ID!
  choose: Int!
  desc: [String!]!
  proficiencies: [Proficiency!]
  race: Race
}
"""
ProficiencyChoiceWhereInput is used for filtering ProficiencyChoice objects.
Input was generated by ent.
"""
input ProficiencyChoiceWhereInput {
  not: ProficiencyChoiceWhereInput
  and: [ProficiencyChoiceWhereInput!]
  or: [ProficiencyChoiceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  choose field predicates
  """
  choose: Int
  chooseNEQ: Int
  chooseIn: [Int!]
  chooseNotIn: [Int!]
  chooseGT: Int
  chooseGTE: Int
  chooseLT: Int
  chooseLTE: Int
  """
  proficiencies edge predicates
  """
  hasProficiencies: Boolean
  hasProficienciesWith: [ProficiencyWhereInput!]
  """
  race edge predicates
  """
  hasRace: Boolean
  hasRaceWith: [RaceWhereInput!]
}
"""
Ordering options for Proficiency connections
"""
input ProficiencyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Proficiencies.
  """
  field: ProficiencyOrderField!
}
"""
Properties by which Proficiency connections can be ordered.
"""
enum ProficiencyOrderField {
  INDX
  NAME
}
"""
ProficiencyWhereInput is used for filtering Proficiency objects.
Input was generated by ent.
"""
input ProficiencyWhereInput {
  not: ProficiencyWhereInput
  and: [ProficiencyWhereInput!]
  or: [ProficiencyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  reference field predicates
  """
  reference: String
  referenceNEQ: String
  referenceIn: [String!]
  referenceNotIn: [String!]
  referenceGT: String
  referenceGTE: String
  referenceLT: String
  referenceLTE: String
  referenceContains: String
  referenceHasPrefix: String
  referenceHasSuffix: String
  referenceEqualFold: String
  referenceContainsFold: String
  """
  race edge predicates
  """
  hasRace: Boolean
  hasRaceWith: [RaceWhereInput!]
  """
  options edge predicates
  """
  hasOptions: Boolean
  hasOptionsWith: [ProficiencyChoiceWhereInput!]
}
type Property implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  weapons: [Weapon!]
}
"""
Ordering options for Property connections
"""
input PropertyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Properties.
  """
  field: PropertyOrderField!
}
"""
Properties by which Property connections can be ordered.
"""
enum PropertyOrderField {
  INDX
  NAME
}
"""
PropertyWhereInput is used for filtering Property objects.
Input was generated by ent.
"""
input PropertyWhereInput {
  not: PropertyWhereInput
  and: [PropertyWhereInput!]
  or: [PropertyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  weapons edge predicates
  """
  hasWeapons: Boolean
  hasWeaponsWith: [WeaponWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  abilityScores: [AbilityScore!]!
  alignments: [Alignment!]!
  classes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Classes returned from the connection.
    """
    orderBy: ClassOrder

    """
    Filtering options for Classes returned from the connection.
    """
    where: ClassWhereInput
  ): ClassConnection!
  coins: [Coin!]!
  conditions: [Condition!]!
  damageTypes: [DamageType!]!
  equipments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for EquipmentSlice returned from the connection.
    """
    orderBy: EquipmentOrder

    """
    Filtering options for EquipmentSlice returned from the connection.
    """
    where: EquipmentWhereInput
  ): EquipmentConnection!
  feats: [Feat!]!
  features: [Feature!]!
  languages: [Language!]!
  magicSchools: [MagicSchool!]!
  properties: [Property!]!
  races: [Race!]!
  rules: [Rule!]!
  ruleSections: [RuleSection!]!
  skills: [Skill!]!
  traits: [Trait!]!
}
type Race implements Node {
  id: ID!
  indx: String!
  name: String!
  speed: Int!
  size: RaceSize!
  sizeDesc: String!
  alignmentDesc: String!
  ageDesc: String!
  languageDesc: String!
  startingProficiencies: [Proficiency!]
  startingProficiencyOptions: ProficiencyChoice
  abilityBonuses: [AbilityBonus!]
}
"""
Ordering options for Race connections
"""
input RaceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Races.
  """
  field: RaceOrderField!
}
"""
Properties by which Race connections can be ordered.
"""
enum RaceOrderField {
  INDX
  NAME
}
"""
RaceSize is enum for the field size
"""
enum RaceSize @goModel(model: "github.com/ecshreve/dndgen/ent/race.Size") {
  Small
  Medium
  Large
}
"""
RaceWhereInput is used for filtering Race objects.
Input was generated by ent.
"""
input RaceWhereInput {
  not: RaceWhereInput
  and: [RaceWhereInput!]
  or: [RaceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  speed field predicates
  """
  speed: Int
  speedNEQ: Int
  speedIn: [Int!]
  speedNotIn: [Int!]
  speedGT: Int
  speedGTE: Int
  speedLT: Int
  speedLTE: Int
  """
  size field predicates
  """
  size: RaceSize
  sizeNEQ: RaceSize
  sizeIn: [RaceSize!]
  sizeNotIn: [RaceSize!]
  """
  size_desc field predicates
  """
  sizeDesc: String
  sizeDescNEQ: String
  sizeDescIn: [String!]
  sizeDescNotIn: [String!]
  sizeDescGT: String
  sizeDescGTE: String
  sizeDescLT: String
  sizeDescLTE: String
  sizeDescContains: String
  sizeDescHasPrefix: String
  sizeDescHasSuffix: String
  sizeDescEqualFold: String
  sizeDescContainsFold: String
  """
  alignment_desc field predicates
  """
  alignmentDesc: String
  alignmentDescNEQ: String
  alignmentDescIn: [String!]
  alignmentDescNotIn: [String!]
  alignmentDescGT: String
  alignmentDescGTE: String
  alignmentDescLT: String
  alignmentDescLTE: String
  alignmentDescContains: String
  alignmentDescHasPrefix: String
  alignmentDescHasSuffix: String
  alignmentDescEqualFold: String
  alignmentDescContainsFold: String
  """
  age_desc field predicates
  """
  ageDesc: String
  ageDescNEQ: String
  ageDescIn: [String!]
  ageDescNotIn: [String!]
  ageDescGT: String
  ageDescGTE: String
  ageDescLT: String
  ageDescLTE: String
  ageDescContains: String
  ageDescHasPrefix: String
  ageDescHasSuffix: String
  ageDescEqualFold: String
  ageDescContainsFold: String
  """
  language_desc field predicates
  """
  languageDesc: String
  languageDescNEQ: String
  languageDescIn: [String!]
  languageDescNotIn: [String!]
  languageDescGT: String
  languageDescGTE: String
  languageDescLT: String
  languageDescLTE: String
  languageDescContains: String
  languageDescHasPrefix: String
  languageDescHasSuffix: String
  languageDescEqualFold: String
  languageDescContainsFold: String
  """
  starting_proficiencies edge predicates
  """
  hasStartingProficiencies: Boolean
  hasStartingProficienciesWith: [ProficiencyWhereInput!]
  """
  starting_proficiency_options edge predicates
  """
  hasStartingProficiencyOptions: Boolean
  hasStartingProficiencyOptionsWith: [ProficiencyChoiceWhereInput!]
  """
  ability_bonuses edge predicates
  """
  hasAbilityBonuses: Boolean
  hasAbilityBonusesWith: [AbilityBonusWhereInput!]
}
type Rule implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  sections: [RuleSection!]
}
"""
Ordering options for Rule connections
"""
input RuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Rules.
  """
  field: RuleOrderField!
}
"""
Properties by which Rule connections can be ordered.
"""
enum RuleOrderField {
  INDX
  NAME
}
type RuleSection implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  rule: Rule
}
"""
Ordering options for RuleSection connections
"""
input RuleSectionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order RuleSections.
  """
  field: RuleSectionOrderField!
}
"""
Properties by which RuleSection connections can be ordered.
"""
enum RuleSectionOrderField {
  INDX
  NAME
}
"""
RuleSectionWhereInput is used for filtering RuleSection objects.
Input was generated by ent.
"""
input RuleSectionWhereInput {
  not: RuleSectionWhereInput
  and: [RuleSectionWhereInput!]
  or: [RuleSectionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  rule edge predicates
  """
  hasRule: Boolean
  hasRuleWith: [RuleWhereInput!]
}
"""
RuleWhereInput is used for filtering Rule objects.
Input was generated by ent.
"""
input RuleWhereInput {
  not: RuleWhereInput
  and: [RuleWhereInput!]
  or: [RuleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  sections edge predicates
  """
  hasSections: Boolean
  hasSectionsWith: [RuleSectionWhereInput!]
}
type Skill implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
  abilityScore: AbilityScore
}
"""
Ordering options for Skill connections
"""
input SkillOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Skills.
  """
  field: SkillOrderField!
}
"""
Properties by which Skill connections can be ordered.
"""
enum SkillOrderField {
  INDX
  NAME
}
"""
SkillWhereInput is used for filtering Skill objects.
Input was generated by ent.
"""
input SkillWhereInput {
  not: SkillWhereInput
  and: [SkillWhereInput!]
  or: [SkillWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  ability_score edge predicates
  """
  hasAbilityScore: Boolean
  hasAbilityScoreWith: [AbilityScoreWhereInput!]
}
type Tool implements Node {
  id: ID!
  toolCategory: String!
  desc: [String!]
  equipment: Equipment!
}
"""
ToolWhereInput is used for filtering Tool objects.
Input was generated by ent.
"""
input ToolWhereInput {
  not: ToolWhereInput
  and: [ToolWhereInput!]
  or: [ToolWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tool_category field predicates
  """
  toolCategory: String
  toolCategoryNEQ: String
  toolCategoryIn: [String!]
  toolCategoryNotIn: [String!]
  toolCategoryGT: String
  toolCategoryGTE: String
  toolCategoryLT: String
  toolCategoryLTE: String
  toolCategoryContains: String
  toolCategoryHasPrefix: String
  toolCategoryHasSuffix: String
  toolCategoryEqualFold: String
  toolCategoryContainsFold: String
  """
  equipment edge predicates
  """
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Trait implements Node {
  id: ID!
  indx: String!
  name: String!
  desc: [String!]
}
"""
Ordering options for Trait connections
"""
input TraitOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Traits.
  """
  field: TraitOrderField!
}
"""
Properties by which Trait connections can be ordered.
"""
enum TraitOrderField {
  INDX
  NAME
}
"""
TraitWhereInput is used for filtering Trait objects.
Input was generated by ent.
"""
input TraitWhereInput {
  not: TraitWhereInput
  and: [TraitWhereInput!]
  or: [TraitWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  indx field predicates
  """
  indx: String
  indxNEQ: String
  indxIn: [String!]
  indxNotIn: [String!]
  indxGT: String
  indxGTE: String
  indxLT: String
  indxLTE: String
  indxContains: String
  indxHasPrefix: String
  indxHasSuffix: String
  indxEqualFold: String
  indxContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
type Vehicle implements Node {
  id: ID!
  vehicleCategory: VehicleVehicleCategory!
  capacity: String
  desc: [String!]
  speedQuantity: Float
  speedUnits: VehicleSpeedUnits
  equipment: Equipment!
}
"""
VehicleSpeedUnits is enum for the field speed_units
"""
enum VehicleSpeedUnits @goModel(model: "github.com/ecshreve/dndgen/ent/vehicle.SpeedUnits") {
  miles_per_hour
  feet_per_round
}
"""
VehicleVehicleCategory is enum for the field vehicle_category
"""
enum VehicleVehicleCategory @goModel(model: "github.com/ecshreve/dndgen/ent/vehicle.VehicleCategory") {
  mounts_and_other_animals
  tack_harness_and_drawn_vehicles
  waterborne
}
"""
VehicleWhereInput is used for filtering Vehicle objects.
Input was generated by ent.
"""
input VehicleWhereInput {
  not: VehicleWhereInput
  and: [VehicleWhereInput!]
  or: [VehicleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  vehicle_category field predicates
  """
  vehicleCategory: VehicleVehicleCategory
  vehicleCategoryNEQ: VehicleVehicleCategory
  vehicleCategoryIn: [VehicleVehicleCategory!]
  vehicleCategoryNotIn: [VehicleVehicleCategory!]
  """
  capacity field predicates
  """
  capacity: String
  capacityNEQ: String
  capacityIn: [String!]
  capacityNotIn: [String!]
  capacityGT: String
  capacityGTE: String
  capacityLT: String
  capacityLTE: String
  capacityContains: String
  capacityHasPrefix: String
  capacityHasSuffix: String
  capacityIsNil: Boolean
  capacityNotNil: Boolean
  capacityEqualFold: String
  capacityContainsFold: String
  """
  speed_quantity field predicates
  """
  speedQuantity: Float
  speedQuantityNEQ: Float
  speedQuantityIn: [Float!]
  speedQuantityNotIn: [Float!]
  speedQuantityGT: Float
  speedQuantityGTE: Float
  speedQuantityLT: Float
  speedQuantityLTE: Float
  speedQuantityIsNil: Boolean
  speedQuantityNotNil: Boolean
  """
  speed_units field predicates
  """
  speedUnits: VehicleSpeedUnits
  speedUnitsNEQ: VehicleSpeedUnits
  speedUnitsIn: [VehicleSpeedUnits!]
  speedUnitsNotIn: [VehicleSpeedUnits!]
  speedUnitsIsNil: Boolean
  speedUnitsNotNil: Boolean
  """
  equipment edge predicates
  """
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
type Weapon implements Node {
  id: ID!
  weaponCategory: WeaponWeaponCategory!
  weaponSubcategory: WeaponWeaponSubcategory!
  rangeNormal: Int
  rangeLong: Int
  throwRangeNormal: Int
  throwRangeLong: Int
  damageDice: String
  properties: [Property!]
  damageType: DamageType
  equipment: Equipment!
}
"""
WeaponWeaponCategory is enum for the field weapon_category
"""
enum WeaponWeaponCategory @goModel(model: "github.com/ecshreve/dndgen/ent/weapon.WeaponCategory") {
  simple
  martial
  exotic
  other
}
"""
WeaponWeaponSubcategory is enum for the field weapon_subcategory
"""
enum WeaponWeaponSubcategory @goModel(model: "github.com/ecshreve/dndgen/ent/weapon.WeaponSubcategory") {
  melee
  ranged
  other
}
"""
WeaponWhereInput is used for filtering Weapon objects.
Input was generated by ent.
"""
input WeaponWhereInput {
  not: WeaponWhereInput
  and: [WeaponWhereInput!]
  or: [WeaponWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  weapon_category field predicates
  """
  weaponCategory: WeaponWeaponCategory
  weaponCategoryNEQ: WeaponWeaponCategory
  weaponCategoryIn: [WeaponWeaponCategory!]
  weaponCategoryNotIn: [WeaponWeaponCategory!]
  """
  weapon_subcategory field predicates
  """
  weaponSubcategory: WeaponWeaponSubcategory
  weaponSubcategoryNEQ: WeaponWeaponSubcategory
  weaponSubcategoryIn: [WeaponWeaponSubcategory!]
  weaponSubcategoryNotIn: [WeaponWeaponSubcategory!]
  """
  range_normal field predicates
  """
  rangeNormal: Int
  rangeNormalNEQ: Int
  rangeNormalIn: [Int!]
  rangeNormalNotIn: [Int!]
  rangeNormalGT: Int
  rangeNormalGTE: Int
  rangeNormalLT: Int
  rangeNormalLTE: Int
  rangeNormalIsNil: Boolean
  rangeNormalNotNil: Boolean
  """
  range_long field predicates
  """
  rangeLong: Int
  rangeLongNEQ: Int
  rangeLongIn: [Int!]
  rangeLongNotIn: [Int!]
  rangeLongGT: Int
  rangeLongGTE: Int
  rangeLongLT: Int
  rangeLongLTE: Int
  rangeLongIsNil: Boolean
  rangeLongNotNil: Boolean
  """
  throw_range_normal field predicates
  """
  throwRangeNormal: Int
  throwRangeNormalNEQ: Int
  throwRangeNormalIn: [Int!]
  throwRangeNormalNotIn: [Int!]
  throwRangeNormalGT: Int
  throwRangeNormalGTE: Int
  throwRangeNormalLT: Int
  throwRangeNormalLTE: Int
  throwRangeNormalIsNil: Boolean
  throwRangeNormalNotNil: Boolean
  """
  throw_range_long field predicates
  """
  throwRangeLong: Int
  throwRangeLongNEQ: Int
  throwRangeLongIn: [Int!]
  throwRangeLongNotIn: [Int!]
  throwRangeLongGT: Int
  throwRangeLongGTE: Int
  throwRangeLongLT: Int
  throwRangeLongLTE: Int
  throwRangeLongIsNil: Boolean
  throwRangeLongNotNil: Boolean
  """
  damage_dice field predicates
  """
  damageDice: String
  damageDiceNEQ: String
  damageDiceIn: [String!]
  damageDiceNotIn: [String!]
  damageDiceGT: String
  damageDiceGTE: String
  damageDiceLT: String
  damageDiceLTE: String
  damageDiceContains: String
  damageDiceHasPrefix: String
  damageDiceHasSuffix: String
  damageDiceIsNil: Boolean
  damageDiceNotNil: Boolean
  damageDiceEqualFold: String
  damageDiceContainsFold: String
  """
  properties edge predicates
  """
  hasProperties: Boolean
  hasPropertiesWith: [PropertyWhereInput!]
  """
  damage_type edge predicates
  """
  hasDamageType: Boolean
  hasDamageTypeWith: [DamageTypeWhereInput!]
  """
  equipment edge predicates
  """
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]
}
