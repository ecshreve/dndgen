package main

import (
	"os"
	"text/template"

	"github.com/charmbracelet/log"

	"github.com/samsarahq/go/oops"
)

func main() {
	log.Info("Starting dndgen/popgen...")

	tmplFile := "template/populator.tmpl"
	tmpl := template.Must(template.ParseFiles(tmplFile))

	var typeNamesToGenerate = []string{
		"AbilityScore",
		"Skill",
		"Language",
		"Alignment",
		"DamageType",
		"Race",
		// "Feature",
		"Feat",
		"Condition",
		// "Class",
		"WeaponProperty",
		"MagicSchool",
		"RuleSection",
		"Rule",
		// "Subrace",
		// "Trait",
		"Coin",
	}

	ofile, err := os.Create("internal/popper/generated.go")
	if err != nil {
		log.Fatal(oops.Wrapf(err, "unable to create output file for populators"))
	}
	defer ofile.Close()

	if err := tmpl.Execute(ofile, typeNamesToGenerate); err != nil {
		log.Fatal(oops.Wrapf(err, "unable to execute template"))
	}

	// template for Populator.PopulateAll()
	popAllTmpl := `// Code generated by popgen. DO NOT EDIT.
	package popper

	import (
		"context"
	)

	func (p *Populator) PopulateAll(ctx context.Context) error {
		{{ range . }}
		_, err := p.Populate{{ . }}(ctx)
		if err != nil {
			return err
		}
		{{ end }}
		return nil
	}
	`
	tmpl = template.Must(template.New("popAll").Parse(popAllTmpl))

	log.Info("done")
}
